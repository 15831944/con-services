<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebApi</name>
    </assembly>
    <members>
        <member name="F:VSS.Raptor.Service.WebApi.Compaction.Controllers.CompactionController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.Compaction.Controllers.CompactionController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.Compaction.Controllers.CompactionController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Compaction.Controllers.CompactionController.#ctor(VSS.Raptor.Service.Common.Interfaces.IASNodeClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor with injected raptor client and logger
            </summary>
            <param name="raptorClient">Raptor client</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Compaction.Controllers.CompactionController.Getxxx">
            <summary>
              Gets xxx 
            </summary>
            <returns>xxxResult</returns>
            <executor>xxxExecutor</executor>
        </member>
        <member name="T:VSS.Raptor.Service.WebApi.Coord.Controllers.CoordinateSystemController">
            <summary>
            Controller for the CoordinateSystemFile resource.
            </summary>
            
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.Coord.Controllers.CoordinateSystemController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.Coord.Controllers.CoordinateSystemController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.Coord.Controllers.CoordinateSystemController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.Coord.Controllers.CoordinateSystemController.authProjectsStore">
            <summary>
            Used to get list of projects for customer
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Coord.Controllers.CoordinateSystemController.#ctor(VSS.Raptor.Service.Common.Interfaces.IASNodeClient,Microsoft.Extensions.Logging.ILoggerFactory,VSS.Raptor.Service.Common.Filters.Authentication.Models.IAuthenticatedProjectsStore)">
            <summary>
            Constructor with dependency injection
            </summary>
            <param name="raptorClient">Raptor client</param>
            <param name="logger">Logger</param>
            <param name="authProjectsStore">Authenticated projects store</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Coord.Controllers.CoordinateSystemController.Post(VSS.Raptor.Service.WebApiModels.Coord.Models.CoordinateSystemFile)">
            <summary>
            Posts a coordinate system (CS) definition file to a Raptor's data model/project.
            </summary>
            <param name="request">The CS definition file structure.</param>
            <returns>
            Returns JSON structure wtih operation result. {"Code":0,"Message":"User-friendly"}
            </returns>
            <executor>CoordinateSystemExecutorPost</executor>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Coord.Controllers.CoordinateSystemController.Get(System.Int64)">
            <summary>
            Gets a coordinate system (CS) definition assigned to a Raptor's data model/project.
            </summary>
            <param name="projectId">The model/project identifier.</param>
            <returns>
            Returns JSON structure wtih operation result as coordinate system settings. {"Code":0,"Message":"User-friendly"}
            List of codes:
                OK = 0,
                Incorrect Requested Data = -1,
                Validation Error = -2
                InternalProcessingError = -3;
                FailedToGetResults = -4;
            </returns>
            <executor>CoordinateSystemExecutorGet</executor>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Coord.Controllers.CoordinateSystemController.Get(System.Guid)">
            <summary>
            Gets a coordinate system (CS) definition assigned to a Raptor's data model/project with a unique identifier.
            </summary>
            <param name="projectUid">The model/project unique identifier.</param>
            <returns>
            Returns JSON structure wtih operation result as coordinate system settings. {"Code":0,"Message":"User-friendly"}
            List of codes:
                OK = 0,
                Incorrect Requested Data = -1,
                Validation Error = -2
                InternalProcessingError = -3;
                FailedToGetResults = -4;
            </returns>
            <executor>CoordinateSystemExecutorGet</executor>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Coord.Controllers.CoordinateSystemController.Post(VSS.Raptor.Service.WebApiModels.Coord.Models.CoordinateConversionRequest)">
            <summary>
            Posts a list of coordinates to a Raptor's data model/project for conversion.
            </summary>
            <param name="request">Description of the coordinate conversion request.</param>
            <returns>
            Returns JSON structure wtih operation result. {"Code":0,"Message":"User-friendly"}
            </returns>
            <executor>CoordinateCoversionExecutor</executor>
        </member>
        <member name="T:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCAColorPaletteController">
            <summary>
            Controller for CCA data colour palettes resource.
            </summary>
            
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCAColorPaletteController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCAColorPaletteController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCAColorPaletteController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCAColorPaletteController.authProjectsStore">
            <summary>
            Used to get list of projects for customer
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCAColorPaletteController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,VSS.Raptor.Service.Common.Interfaces.IASNodeClient,VSS.Raptor.Service.Common.Filters.Authentication.Models.IAuthenticatedProjectsStore)">
            <summary>
            Constructor with dependency injection
            </summary>
            <param name="logger">Logger</param>
            <param name="raptorClient">Raptor client</param>
            <param name="authProjectsStore">Authenticated projects store</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCAColorPaletteController.Get(System.Int64,System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Gets CCA data colour palette requested from Raptor with a project identifier.
            </summary>
            <param name="projectId">Raptor's data model/project identifier.</param>
            <param name="assetId">Raptor's machine identifier.</param>
            <param name="startUtc">Start date of the requeted CCA data in UTC.</param>
            <param name="endUtc">End date of the requested CCA data in UTC.</param>
            <param name="liftId">Lift identifier of the requested CCA data.</param>
            <returns>Execution result with a list of CCA data colour palettes.</returns>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCAColorPaletteController.Get(System.Nullable{System.Guid},System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Gets CCA data colour palette requested from Raptor with a project unique identifier.
            </summary>
            <param name="projectUid">Raptor's data model/project unique identifier.</param>
            <param name="assetId">Raptor's machine identifier.</param>
            <param name="startUtc">Start date of the requeted CCA data in UTC.</param>
            <param name="endUtc">End date of the requested CCA data in UTC.</param>
            <param name="liftId">Lift identifier of the requested CCA data.</param>
            <returns>Execution result with a list of CCA data colour palettes.</returns>
        </member>
        <member name="T:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCATileController">
            <summary>
            Controller for supplying CCA data tiles.
            </summary>
            
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCATileController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCATileController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCATileController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCATileController.geofenceProxy">
            <summary>
            Proxy for getting geofences from master data. Used to get boundary for Raptor using given geofenceUid.
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCATileController.authProjectsStore">
            <summary>
            Used to get list of projects for customer
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCATileController.#ctor(VSS.Raptor.Service.Common.Interfaces.IGeofenceProxy,Microsoft.Extensions.Logging.ILoggerFactory,VSS.Raptor.Service.Common.Interfaces.IASNodeClient,VSS.Raptor.Service.Common.Filters.Authentication.Models.IAuthenticatedProjectsStore)">
            <summary>
            Constructor with dependency injection
            </summary>
            <param name="geofenceProxy">Proxy client for getting geofences for boundaries</param>
            <param name="logger">Logger</param>
            <param name="raptorClient">Raptor client</param>
            <param name="authProjectsStore">Authenticated projects store</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCATileController.Get(System.Int64,System.Int64,System.String,System.Boolean,System.DateTime,System.DateTime,System.String,System.UInt16,System.UInt16,System.Nullable{System.Int32},System.Nullable{System.Guid})">
            <summary>
            Supplies tiles of rendered CCA data overlays.
            </summary>
            <param name="projectId">Raptor's data model/project identifier.</param>
            <param name="assetId">Raptor's machine identifier.</param>
            <param name="machineName">Raptor's machine name.</param>
            <param name="isJohnDoe">IsJohnDoe flag.</param>
            <param name="startUtc">Start date of the requeted CCA data in UTC.</param>
            <param name="endUtc">End date of the requested CCA data in UTC.</param>
            <param name="bbox">Bounding box, as a comma separated string, that represents a WGS84 latitude/longitude coordinate area.</param>    
            <param name="width">Width of the requested CCA data tile.</param>
            <param name="height">Height of the requested CCA data tile.</param>
            <param name="liftId">Lift identifier of the requested CCA data.</param>
            <param name="geofenceUid">Geofence boundary unique identifier.</param>
            <returns>An HTTP response containing an error code is there is a failure, or a PNG image if the request suceeds. If the size of a pixel in the rendered tile coveres more than 10.88 meters in width or height, then the pixel will be rendered in a 'representational style' where black (currently, but there is a work item to allow this to be configurable) is used to indicate the presense of data. Representational style rendering performs no filtering what so ever on the data.10.88 meters is 32 (number of cells across a subgrid) * 0.34 (default width in meters of a single cell)</returns>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CCATileController.Get(System.Nullable{System.Guid},System.Int64,System.String,System.Boolean,System.DateTime,System.DateTime,System.String,System.UInt16,System.UInt16,System.Nullable{System.Int32},System.Nullable{System.Guid})">
            <summary>
            Supplies tiles of rendered CCA data overlays.
            </summary>
            <param name="projectUid">Raptor's data model/project unique identifier.</param>
            <param name="assetId">Raptor's machine identifier.</param>
            <param name="machineName">Raptor's machine name.</param>
            <param name="isJohnDoe">IsJohnDoe flag.</param>
            <param name="startUtc">Start date of the requeted CCA data in UTC.</param>
            <param name="endUtc">End date of the requested CCA data in UTC.</param>
            <param name="bbox">Bounding box, as a comma separated string, that represents a WGS84 latitude/longitude coordinate area.</param>    
            <param name="width">Width of the requested CCA data tile.</param>
            <param name="height">Height of the requested CCA data tile.</param>
            <param name="liftId">Lift identifier of the requested CCA data.</param>
            <param name="geofenceUid">Geofence boundary unique identifier.</param>
            <returns>An HTTP response containing an error code is there is a failure, or a PNG image if the request suceeds. If the size of a pixel in the rendered tile coveres more than 10.88 meters in width or height, then the pixel will be rendered in a 'representational style' where black (currently, but there is a work item to allow this to be configurable) is used to indicate the presense of data. Representational style rendering performs no filtering what so ever on the data.10.88 meters is 32 (number of cells across a subgrid) * 0.34 (default width in meters of a single cell)</returns>
        </member>
        <member name="T:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CellController">
            <summary>
            CellController
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CellController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CellController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CellController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CellController.#ctor(VSS.Raptor.Service.Common.Interfaces.IASNodeClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor with injected raptor client and logger
            </summary>
            <param name="raptorClient">Raptor client</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CellController.Post(VSS.Raptor.Service.WebApiModels.ProductionData.Models.CellPassesRequest)">
            <summary>
            Retrieve passes for a single cell and process them according to the provided filter and layer analysis parameters
            </summary>
            <param name="request">The request representation for the operation</param>
            <returns>A representation of the cell that contains summary information relative to the cell as a whole, a collection of layers derived from layer analysis and the collection of cell passes that met the filter conditions.</returns>
            <executor>CellPassesExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CellController.Post(VSS.Raptor.Service.WebApiModels.ProductionData.Models.CellDatumRequest)">
            <summary>
            Requests a single thematic datum value from a single cell. Examples are elevation, compaction. temperature etc. The request body contains all necessary parameters.
            The cell may be identified by either WGS84 lat/long coordinates or by project grid coordinates.
            </summary>
            <param name="request">The request body parameters for the request.</param>
            <returns>The requested thematic value expressed as a floating point number. Interpretation is dependant on the thematic domain.</returns>
            <executor>CellDatumExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.CellController.Post(VSS.Raptor.Service.WebApiModels.ProductionData.Models.PatchRequest)">
            <summary>
            Requests cell passes information in patches (raw Raptor data output)
            </summary>
            <param name="request">The request body.</param>
            <returns></returns>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.EditDataController.tagProcessor">
            <summary>
            Tag processor for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.EditDataController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.EditDataController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.EditDataController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.EditDataController.#ctor(VSS.Raptor.Service.Common.Interfaces.IASNodeClient,VSS.Raptor.Service.Common.Interfaces.ITagProcessor,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor with dependency injection
            </summary>
            <param name="raptorClient">Raptor client</param>
            <param name="tagProcessor">Tag processor client</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.EditDataController.PostEditDataAcquire(VSS.Raptor.Service.WebApiModels.ProductionData.Models.GetEditDataRequest)">
            <summary>
            Gets a list of edits or overrides of the production data for a project and machine.
            </summary>
            <param name="request">The request representation for the operation.</param>
            <returns>A list of the edits applied to the production data for the project and machine.</returns>
            <executor>GetEditDataExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.EditDataController.Post(VSS.Raptor.Service.WebApiModels.ProductionData.Models.EditDataRequest)">
            <summary>
            Applies an edit to production data to correct data that has been recorded wrongly in Machines by Operator.
            </summary>
            <param name="request">The request representation for the operation</param>
            <returns></returns>
            <executor>EditDataExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.EditDataController.ValidateNoOverlap(System.Collections.Generic.List{VSS.Raptor.Service.WebApiModels.ProductionData.Models.ProductionDataEdit},VSS.Raptor.Service.WebApiModels.ProductionData.Models.ProductionDataEdit)">
            <summary>
            Validates new edit does not overlap any existing edit of the same type for the same machine.
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.EditDataController.ValidateDates(System.Int64,VSS.Raptor.Service.WebApiModels.ProductionData.Models.ProductionDataEdit)">
            <summary>
            Validates new edit is within production data date range for the project
            </summary>
            <param name="projectId">Project ID</param>
            <param name="dataEdit">New edit</param>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.authProjectsStore">
            <summary>
            Used to get list of projects for customer
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.#ctor(VSS.Raptor.Service.Common.Interfaces.IASNodeClient,Microsoft.Extensions.Logging.ILoggerFactory,VSS.Raptor.Service.Common.Filters.Authentication.Models.IAuthenticatedProjectsStore)">
            <summary>
            Constructor with injected raptor client and logger
            </summary>
            <param name="raptorClient">Raptor client</param>
            <param name="logger">Logger</param>
            <param name="authProjectsStore">Authenticated projects store</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.Get(System.Int64)">
            <summary>
            Gets details such as last known position, design, status etc. for machines for a specified project
            </summary>
            <param name="projectId">The project identifier.</param>
            <returns>List of machines for the project</returns>
            <executor>GetMachineIdsExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.Get(System.Guid)">
            <summary>
            Gets details such as last known position, design, status etc. for machines for a specified project with a unique identifier
            </summary>
            <param name="projectUid">The project unique identifier.</param>
            <returns>List of machines for the project</returns>
            <executor>GetMachineIdsExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.Get(System.Int64,System.Int64)">
             <summary>
            Gets details such as last known position, design, status etc. for machines for a specified machine (must have contributed data to the project)
             </summary>
             <param name="projectId">The project identifier.</param>
             <param name="machineId">The machine identifier.</param>
             <returns>Info about machine</returns>
             <executor>GetMachineIdsExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.Get(System.Guid,System.Int64)">
             <summary>
            Gets details such as last known position, design, status etc. for machines for a specified machine (must have contributed data to the project with a unique identifier)
             </summary>
             <param name="projectUid">The project unique identifier.</param>
             <param name="machineId">The machine identifier.</param>
             <returns>Info about machine</returns>
             <executor>GetMachineIdsExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.GetMachineDesigns(System.Int64)">
            <summary>
            Gets On Machine designs for the selected datamodel
            </summary>
            <param name="projectId">The project identifier.</param>
            <returns>List with all available OnMachine designs in the selected datamodel as reported to Raptor via tag files.</returns>
            <executor>GetMachineDesignsExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.GetMachineDesigns(System.Guid)">
            <summary>
            Gets On Machine designs for the selected datamodel with a unique identifier
            </summary>
            <param name="projectUid">The project unique identifier.</param>
            <returns>List with all available OnMachine designs in the selected datamodel as reported to Raptor via tag files.</returns>
            <executor>GetMachineDesignsExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.GetMachineLayerIds(System.Int64)">
            <summary>
            Gets On Machine liftids for all machines for the selected datamodel
            </summary>
            <param name="projectId">The project identifier.</param>
            <returns>List with all available OnMachine layerids in the selected datamodel.</returns>
            <executor>GetLayerIdsExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.GetMachineLayerIds(System.Guid)">
            <summary>
            Gets On Machine liftids for all machines for the selected datamodel with a unique identifier
            </summary>
            <param name="projectUid">The project unique identifier.</param>
            <returns>List with all available OnMachine layerids in the selected datamodel.</returns>
            <executor>GetLayerIdsExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.GetMachineLifts(System.Int64,System.String,System.String)">
            <summary>
            Gets On Machine liftids for each machine for the selected datamodel for the specified date range.
            </summary>
            <param name="projectId">The project identifier.</param>
            <param name="startUtc">The start date/time in UTC.</param>
            <param name="endUtc">The end date/time in UTC.</param>
            <returns>List with all available liftids for each machine in the selected datamodel as reported to Raptor via tag files.</returns>
            <executor>GetLayerIdsExecutor</executor> 
            <executor>GetMachineIdsExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.GetMachineLifts(System.Guid,System.String,System.String)">
            <summary>
            Gets On Machine liftids for each machine for the selected datamodel with a unique identifier for the specified date range.
            </summary>
            <param name="projectUid">The project unique identifier.</param>
            <param name="startUtc">The start date/time in UTC.</param>
            <param name="endUtc">The end date/time in UTC.</param>
            <returns>List with all available liftids for each machine in the selected datamodel as reported to Raptor via tag files.</returns>
            <executor>GetLayerIdsExecutor</executor> 
            <executor>GetMachineIdsExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.MachinesController.isDateRangeOverlapping(System.DateTime,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Determines if two date ranges overlap
            </summary>
            <param name="startDate1">Start of first date range</param>
            <param name="endDate1">End of first date range</param>
            <param name="startDate2">Start of second date range</param>
            <param name="endDate2">End of second date range</param>
            <returns>True if they overlap otherwise false</returns>
        </member>
        <member name="T:VSS.Raptor.Service.WebApi.ProductionData.Controllers.ProfileProductionDataController">
            <summary>
            Controller for the ProfileProductionData resource.
            </summary>
            
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.ProfileProductionDataController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.ProfileProductionDataController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.ProfileProductionDataController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.ProfileProductionDataController.#ctor(VSS.Raptor.Service.Common.Interfaces.IASNodeClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor with injected raptor client and logger
            </summary>
            <param name="raptorClient">Raptor client</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.ProfileProductionDataController.Post(VSS.Raptor.Service.WebApiModels.ProductionData.Models.ProfileProductionDataRequest)">
            <summary>
            Posts a profile production data request to a Raptor's data model/project.
            </summary>
            <param name="request">Profile production data request structure.></param>
            <returns>
            Returns JSON structure wtih operation result as profile calculations. {"Code":0,"Message":"User-friendly"}
            List of codes:
                OK = 0,
                Incorrect Requested Data = -1,
                Validation Error = -2
                InternalProcessingError = -3;
                FailedToGetResults = -4;
            </returns>
            <executor>ProfileProductionDataExecutor</executor> 
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.ProjectExtentsController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.ProjectExtentsController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.ProjectExtentsController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.ProjectExtentsController.#ctor(VSS.Raptor.Service.Common.Interfaces.IASNodeClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor with injected raptor client and logger
            </summary>
            <param name="raptorClient">Raptor client</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.ProjectExtentsController.Post(VSS.Raptor.Service.WebApiModels.ProductionData.Models.ExtentRequest)">
            <summary>
            Returns a projects data extents information.
            </summary>
            <param name="request">Parameters to request project data extents</param>
            <returns></returns>
            <executor>ProjectExtentsSubmitter</executor> 
        </member>
        <member name="T:VSS.Raptor.Service.WebApi.ProductionData.Controllers.SurveyedSurfaceController">
            <summary>
            Controller for Surveyed Surfaces resource.
            </summary>
            
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.SurveyedSurfaceController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.SurveyedSurfaceController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.SurveyedSurfaceController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.SurveyedSurfaceController.authProjectsStore">
            <summary>
            Used to get list of projects for customer
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.SurveyedSurfaceController.#ctor(VSS.Raptor.Service.Common.Interfaces.IASNodeClient,Microsoft.Extensions.Logging.ILoggerFactory,VSS.Raptor.Service.Common.Filters.Authentication.Models.IAuthenticatedProjectsStore)">
            <summary>
            Constructor with injected raptor client and logger
            </summary>
            <param name="raptorClient">Raptor client</param>
            <param name="authProjectsStore">Authenticated projects store</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.SurveyedSurfaceController.Post(VSS.Raptor.Service.WebApiModels.ProductionData.Models.SurveyedSurfaceRequest)">
            <summary>
            Posts a Surveyed Surface to Raptor.
            </summary>
            <param name="request">Description of the Surveyed Surface request.</param>
            <returns>Execution result.</returns>
            
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.SurveyedSurfaceController.GetDel(System.Int64,System.Int64)">
            <summary>
            Deletes a Surveyed Surface form Raptor's list of surveyed surfaces.
            </summary>
            <param name="projectId">The model/project identifier.</param>
            <param name="surveyedSurfaceId">The Surveyed Surface identifier.</param>
            <returns></returns>
            
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.SurveyedSurfaceController.GetDel(System.Guid,System.Int64)">
            <summary>
            Deletes a Surveyed Surface form Raptor's list of surveyed surfaces.
            </summary>
            <param name="projectUid">The model/project unique identifier.</param>
            <param name="surveyedSurfaceId">The Surveyed Surface identifier.</param>
            <returns></returns>
            
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.SurveyedSurfaceController.Get(System.Int64)">
            <summary>
            Gets a Surveyed Surface list from Raptor.
            </summary>
            <param name="projectId">The model/project identifier.</param>
            <returns>Execution result with a list of Surveyed Surfaces.</returns>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.SurveyedSurfaceController.Get(System.Guid)">
            <summary>
            Gets a Surveyed Surface list from Raptor.
            </summary>
            <param name="projectUid">The model/project unique identifier.</param>
            <returns>Execution result with a list of Surveyed Surfaces.</returns>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.SurveyedSurfaceController.PostPut(VSS.Raptor.Service.WebApiModels.ProductionData.Models.SurveyedSurfaceRequest)">
            <summary>
            Updates an existing Surveyed Surface data in a Raptor's list of surveyed surfaces if the target
            exists, otherwise - adds a new Surveyed Surface to the list.
            </summary>
            <param name="request">Description of the Surveyed Surface request.</param>
            <returns>Execution result.</returns>
            
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.SurveyedSurfaceController.PostDelete(VSS.Raptor.Service.WebApi.ProductionData.Controllers.DesignNameRequest)">
            <summary>
            Removes specified Design File from DesignProfiler cache.
            </summary>
            <param name="request">Descriptor of the Design File (filename).</param>
            <returns>Execution result.</returns>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.TileController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.TileController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.ProductionData.Controllers.TileController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.TileController.#ctor(VSS.Raptor.Service.Common.Interfaces.IASNodeClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor with injected raptor client and logger
            </summary>
            <param name="raptorClient">Raptor client</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.TileController.Post(VSS.Raptor.Service.WebApiModels.ProductionData.Models.TileRequest)">
            <summary>
            Supplies tiles of rendered overlays for a number of different thematic sets of data held in a project such as 
            elevation, compaction, temperature, cut/fill, volumes etc
            </summary>
            <param name="request">A representation of the tile rendering request.</param>
            <returns>An HTTP response containing an error code is there is a failure, or a PNG image if the request suceeds.</returns>
            <executor>TilesExecutor</executor> 
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.ProductionData.Controllers.TileController.PostRaw(VSS.Raptor.Service.WebApiModels.ProductionData.Models.TileRequest)">
            <summary>
            This requests returns raw array of bytes with PNG without any diagnostic information. If it fails refer to the request with disgnostic info.
            Supplies tiles of rendered overlays for a number of different thematic sets of data held in a project such as elevation, compaction, temperature, cut/fill, volumes etc
            </summary>
            <param name="request">A representation of the tile rendering request.</param>
            <returns>An HTTP response containing an error code is there is a failure, or a PNG image if the request succeeds. If the size of a pixel in the rendered tile coveres more than 10.88 meters in width or height, then the pixel will be rendered in a 'representational style' where black (currently, but there is a work item to allow this to be configurable) is used to indicate the presense of data. Representational style rendering performs no filtering what so ever on the data.10.88 meters is 32 (number of cells across a subgrid) * 0.34 (default width in meters of a single cell).</returns>
            <executor>TilesExecutor</executor> 
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.Report.Controllers.ConfigController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.Report.Controllers.ConfigController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.Report.Controllers.ConfigController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ConfigController.#ctor(VSS.Raptor.Service.Common.Interfaces.IASNodeClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor with injected raptor client and logger
            </summary>
            <param name="raptorClient">Raptor client</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ConfigController.Get">
            <summary>
            Gets Raptor Configuration in XML
            </summary>
            <returns>The current Raptor configuration using the XML representation of the Velociraptor.Config.xml Raptor configuration file. All configuration options are included, not just the non-default setting in the actual configuration file.</returns>
            <executor>ConfigExecutor</executor>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.#ctor(VSS.Raptor.Service.Common.Interfaces.IASNodeClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor with injected raptor client and logger
            </summary>
            <param name="raptorClient">Raptor client</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.PostSummary(VSS.Raptor.Service.WebApiModels.Report.Models.PassCounts)">
            <summary>
            Posts summary pass count request to Raptor. 
            This is a summary of whether the pass count exceeds the target, meets the pass count target, or falls below the target.
            </summary>
            <param name="request">Summary pass counts request request</param>
            <returns>Returns JSON structure wtih operation result.
            </returns>
            <executor>SummaryPassCountsExecutor</executor>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.PostDetailed(VSS.Raptor.Service.WebApiModels.Report.Models.PassCounts)">
            <summary>
            Posts detailed pass count request to Raptor. 
            This is the number of machine passes over a cell.
            </summary>
            <param name="request">Detailed pass counts request request</param>
            <returns>Returns JSON structure with operation result. {"Code":0,"Message":"User-friendly"}
            </returns>
            <executor>DetailedPassCountExecutor</executor>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.PostSummary(VSS.Raptor.Service.WebApiModels.Report.Models.CMVRequest)">
            <summary>
            Posts summary CMV request to Raptor. 
            </summary>
            <param name="request">Summary CMV request request</param>
            <returns>Returns JSON structure wtih operation result.
            </returns>
            <executor>SummaryCMVExecutor</executor>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.PostDetailed(VSS.Raptor.Service.WebApiModels.Report.Models.CMVRequest)">
            <summary>
            Posts detailed CMV request to Raptor. 
            </summary>
            <param name="request">Detailed CMV request request</param>
            <returns>Returns JSON structure wtih operation result. {"Code":0,"Message":"User-friendly"}
            </returns>
            <executor>DetailedCMVExecutor</executor>     
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.PostProjectStatistics(VSS.Raptor.Service.Common.Models.ProjectStatisticsRequest)">
            <summary>
            Gets project statistics from Raptor.
            </summary>
            <param name="request">The request for statistics request to Raptor</param>
            <returns></returns>
            <executor>ProjectStatisticsExecutor</executor>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.Post(VSS.Raptor.Service.WebApiModels.Report.Models.SummaryVolumesRequest)">
            <summary>
            Gets volumes summary from Raptor.
            </summary>
            <param name="request">The request for volumes summary request to Raptor</param>
            <returns></returns>
            <executor>SummaryVolumesExecutor</executor>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.Post(VSS.Raptor.Service.WebApiModels.Report.Models.SummaryParametersBase)">
            <summary>
            Gets Thickness summary from Raptor.
            </summary>
            <param name="parameters">The request for thickness summary request to Raptor</param>
            <returns></returns>
            <executor>SummaryVolumesExecutor</executor>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.Post(VSS.Raptor.Service.WebApiModels.Report.Models.SummarySpeedRequest)">
            <summary>
            Gets Speed summary from Raptor.
            </summary>
            <param name="parameters">The request for speed summary request to Raptor</param>
            <returns></returns>
            <executor>SummarySpeedExecutor</executor>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.Post(VSS.Raptor.Service.WebApiModels.Report.Models.CMVChangeSummaryRequest)">
            <summary>
            Gets CMV Change summary from Raptor. This request uses absolute values of CMV.
            </summary>
            <param name="parameters">The request for CMV Change summary request to Raptor</param>
            <returns></returns>
            <executor>CMVChangeSummaryExecutor</executor>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.Post(VSS.Raptor.Service.WebApiModels.Report.Models.ElevationStatisticsRequest)">
            <summary>
            Gets elevation statistics from Raptor.
            </summary>
            <param name="request">The request for elevation statistics request to Raptor</param>
            <returns></returns>
            <executor>ElevationStatisticsExecutor</executor>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.Report.Controllers.ReportController.PostSummary(VSS.Raptor.Service.WebApiModels.Report.Models.CCARequest)">
            <summary>
            Posts summary CCA request to Raptor. 
            </summary>
            <param name="request">Summary CCA request</param>
            <returns>Returns JSON structure wtih operation result.
            </returns>
            <executor>SummaryCCAExecutor</executor>
        </member>
        <member name="T:VSS.Raptor.Service.WebApi.TagFileProcessing.Controllers.TagFileController">
            <summary>
            
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.TagFileProcessing.Controllers.TagFileController.tagProcessor">
            <summary>
            Tag processor for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.TagFileProcessing.Controllers.TagFileController.raptorClient">
            <summary>
            Raptor client for use by executor
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.TagFileProcessing.Controllers.TagFileController.log">
            <summary>
            Logger for logging
            </summary>
        </member>
        <member name="F:VSS.Raptor.Service.WebApi.TagFileProcessing.Controllers.TagFileController.logger">
            <summary>
            Logger factory for use by executor
            </summary>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.TagFileProcessing.Controllers.TagFileController.#ctor(VSS.Raptor.Service.Common.Interfaces.IASNodeClient,VSS.Raptor.Service.Common.Interfaces.ITagProcessor,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor with injected raptor client and logger
            </summary>
            <param name="raptorClient">Raptor client</param>
            <param name="tagProcessor">Tag processor client</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:VSS.Raptor.Service.WebApi.TagFileProcessing.Controllers.TagFileController.Post(VSS.Raptor.Service.WebApiModels.TagfileProcessing.Models.TagFileRequest)">
            <summary>
            Posts TAG file to Raptor. 
            </summary>
            <param name="request">TAG file structure.</param>
            <returns>Returns JSON structure wtih operation result. {"Code":0,"Message":"User-friendly"}
            </returns>
            <executor>TagFileSubmitter</executor>
        </member>
    </members>
</doc>
