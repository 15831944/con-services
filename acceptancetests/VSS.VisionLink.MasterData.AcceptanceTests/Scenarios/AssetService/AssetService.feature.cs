// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VSS.VisionLink.MasterData.AcceptanceTests.Scenarios.AssetService
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AssetsServiceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AssetService.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Assets Service", "\r\n References : A. Contract Document - None\r\n                         \r\n Dependen" +
                    "cies:  Internal -  Kafka Topic\r\n\r\n     User Story 7349:Assets Service (Master Da" +
                    "ta Management)", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Assets Service")))
            {
                VSS.VisionLink.MasterData.AcceptanceTests.Scenarios.AssetService.AssetsServiceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateHappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_CreateHappyPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateHappyPath", new string[] {
                        "Automated",
                        "Sanity",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_CreateHappyPath\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
  testRunner.And("AssetServiceCreate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
   testRunner.When("I Post Valid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
   testRunner.Then("The Processed AssetServiceCreate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateHappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_UpdateHappyPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_UpdateHappyPath", new string[] {
                        "Automated",
                        "Sanity",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_UpdateHappyPath\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
  testRunner.And("AssetServiceUpdate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
   testRunner.When("I Post Valid AssetServiceUpdate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
      testRunner.Then("The Processed AssetServiceUpdate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_DeleteHappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_DeleteHappyPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_DeleteHappyPath", new string[] {
                        "Automated",
                        "Sanity",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_DeleteHappyPath\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
  testRunner.And("AssetServiceDelete Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
   testRunner.When("I Post Valid AssetServiceDelete Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
      testRunner.Then("The Processed AssetServiceDelete Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void AssetService_CreateValidMakeCode(string description, string makeCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Positive",
                    "AssetService",
                    "US7349"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateValidMakeCode", @__tags);
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_CreateValidMakeCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
  testRunner.And("AssetServiceCreate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
   testRunner.When(string.Format("I Set AssetServiceCreate MakeCode To \'{0}\'", makeCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
  testRunner.And("I Post Valid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
      testRunner.Then("The Processed AssetServiceCreate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateValidMakeCode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "InLowerCase")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "InLowerCase")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MakeCode", "cat")]
        public virtual void AssetService_CreateValidMakeCode_InLowerCase()
        {
            this.AssetService_CreateValidMakeCode("InLowerCase", "cat", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateValidMakeCode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "InUpperCase")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "InUpperCase")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MakeCode", "CAT")]
        public virtual void AssetService_CreateValidMakeCode_InUpperCase()
        {
            this.AssetService_CreateValidMakeCode("InUpperCase", "CAT", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateValidAssetName_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_CreateValidAssetName_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateValidAssetName_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_CreateValidAssetName_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
  testRunner.And("AssetServiceCreate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
   testRunner.When("I Set AssetServiceCreate AssetName To \'NULL_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
     testRunner.And("I Post Valid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
   testRunner.Then("The Processed AssetServiceCreate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateValidAssetType_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_CreateValidAssetType_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateValidAssetType_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_CreateValidAssetType_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
  testRunner.And("AssetServiceCreate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
   testRunner.When("I Set AssetServiceCreate AssetType To \'NULL_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
     testRunner.And("I Post Valid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
   testRunner.Then("The Processed AssetServiceCreate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateValidModel_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_CreateValidModel_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateValidModel_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_CreateValidModel_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
  testRunner.And("AssetServiceCreate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
   testRunner.When("I Set AssetServiceCreate Model To \'NULL_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
     testRunner.And("I Post Valid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
   testRunner.Then("The Processed AssetServiceCreate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateValidModelYear_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_CreateValidModelYear_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateValidModelYear_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_CreateValidModelYear_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 78
  testRunner.And("AssetServiceCreate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
   testRunner.When("I Set AssetServiceCreate ModelYear To \'NULL_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
     testRunner.And("I Post Valid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
   testRunner.Then("The Processed AssetServiceCreate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateValidEquipmentVIN_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_CreateValidEquipmentVIN_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateValidEquipmentVIN_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 85
this.ScenarioSetup(scenarioInfo);
#line 86
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_CreateValidEquipmentVIN_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 87
  testRunner.And("AssetServiceCreate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
   testRunner.When("I Set AssetServiceCreate EquipmentVIN To \'NULL_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
     testRunner.And("I Post Valid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
   testRunner.Then("The Processed AssetServiceCreate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateValidIconKey_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_CreateValidIconKey_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateValidIconKey_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 94
this.ScenarioSetup(scenarioInfo);
#line 95
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_CreateValidIconKey_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
  testRunner.And("AssetServiceCreate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
   testRunner.When("I Set AssetServiceCreate IconKey To \'NULL_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
     testRunner.And("I Post Valid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
   testRunner.Then("The Processed AssetServiceCreate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateValidOptionalFields_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_CreateValidOptionalFields_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateValidOptionalFields_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 103
this.ScenarioSetup(scenarioInfo);
#line 104
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_CreateValidOptionalFields_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 105
  testRunner.And("AssetServiceCreate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "AssetName",
                        "AssetType",
                        "Model",
                        "ModelYear",
                        "EquipmentVIN",
                        "IconKey"});
            table1.AddRow(new string[] {
                        "NULL_NULL",
                        "NULL_NULL",
                        "NULL_NULL",
                        "NULL_NULL",
                        "NULL_NULL",
                        "NULL_NULL"});
#line 106
   testRunner.When("I Post Valid AssetServiceCreate Request With The Below Values", ((string)(null)), table1, "When ");
#line 109
     testRunner.Then("The Processed AssetServiceCreate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateValidAssetName_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_UpdateValidAssetName_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_UpdateValidAssetName_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 113
this.ScenarioSetup(scenarioInfo);
#line 114
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_UpdateValidAssetName_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 115
  testRunner.And("AssetServiceUpdate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "AssetName",
                        "AssetType",
                        "Model",
                        "ModelYear",
                        "EquipmentVIN",
                        "IconKey"});
            table2.AddRow(new string[] {
                        "NULL_NULL",
                        "Loader",
                        "A60",
                        "2010",
                        "TestAsset123",
                        "30"});
#line 116
   testRunner.When("I Post Valid AssetServiceUpdate Request With The Below Values", ((string)(null)), table2, "When ");
#line 119
     testRunner.Then("The Processed AssetServiceUpdate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateValidAssetType_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_UpdateValidAssetType_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_UpdateValidAssetType_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 123
this.ScenarioSetup(scenarioInfo);
#line 124
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_UpdateValidAssetType_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 125
  testRunner.And("AssetServiceUpdate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "AssetName",
                        "AssetType",
                        "Model",
                        "ModelYear",
                        "EquipmentVIN",
                        "IconKey"});
            table3.AddRow(new string[] {
                        "TestAsset256",
                        "NULL_NULL",
                        "B89",
                        "2013",
                        "TestAsset256",
                        "17"});
#line 126
   testRunner.When("I Post Valid AssetServiceUpdate Request With The Below Values", ((string)(null)), table3, "When ");
#line 129
     testRunner.Then("The Processed AssetServiceUpdate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateValidAssetModel_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_UpdateValidAssetModel_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_UpdateValidAssetModel_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 133
this.ScenarioSetup(scenarioInfo);
#line 134
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_UpdateValidAssetModel_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 135
  testRunner.And("AssetServiceUpdate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "AssetName",
                        "AssetType",
                        "Model",
                        "ModelYear",
                        "EquipmentVIN",
                        "IconKey"});
            table4.AddRow(new string[] {
                        "TestAsset892",
                        "LOADER",
                        "NULL_NULL",
                        "2011",
                        "TestAsset256",
                        "30"});
#line 136
   testRunner.When("I Post Valid AssetServiceUpdate Request With The Below Values", ((string)(null)), table4, "When ");
#line 139
     testRunner.Then("The Processed AssetServiceUpdate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateValidAssetModelYear_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_UpdateValidAssetModelYear_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_UpdateValidAssetModelYear_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 143
this.ScenarioSetup(scenarioInfo);
#line 144
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_UpdateValidAssetModelYear_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 145
  testRunner.And("AssetServiceUpdate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "AssetName",
                        "AssetType",
                        "Model",
                        "ModelYear",
                        "EquipmentVIN",
                        "IconKey"});
            table5.AddRow(new string[] {
                        "TestAsset892",
                        "MULTI TERRAIN LOADERS",
                        "B89",
                        "NULL_NULL",
                        "TestAsset256",
                        "17"});
#line 146
   testRunner.When("I Post Valid AssetServiceUpdate Request With The Below Values", ((string)(null)), table5, "When ");
#line 149
   testRunner.Then("The Processed AssetServiceUpdate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateValidEquipmentVIN_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_UpdateValidEquipmentVIN_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_UpdateValidEquipmentVIN_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 153
this.ScenarioSetup(scenarioInfo);
#line 154
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_UpdateValidEquipmentVIN_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 155
  testRunner.And("AssetServiceUpdate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "AssetName",
                        "AssetType",
                        "Model",
                        "ModelYear",
                        "EquipmentVIN",
                        "IconKey"});
            table6.AddRow(new string[] {
                        "TestAssetayt",
                        "PIPELAYERS",
                        "H88",
                        "2011",
                        "NULL_NULL",
                        "30"});
#line 156
   testRunner.When("I Post Valid AssetServiceUpdate Request With The Below Values", ((string)(null)), table6, "When ");
#line 159
     testRunner.Then("The Processed AssetServiceUpdate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateValidIconKey_Blank")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_UpdateValidIconKey_Blank()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_UpdateValidIconKey_Blank", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "AssetService",
                        "US7349"});
#line 163
this.ScenarioSetup(scenarioInfo);
#line 164
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_UpdateValidIconKey_Blank\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 165
  testRunner.And("AssetServiceUpdate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "AssetName",
                        "AssetType",
                        "Model",
                        "ModelYear",
                        "EquipmentVIN",
                        "IconKey"});
            table7.AddRow(new string[] {
                        "TestAsset145",
                        "PIPELAYERS",
                        "K90",
                        "2011",
                        "TestAsset256",
                        "NULL_NULL"});
#line 166
   testRunner.When("I Post Valid AssetServiceUpdate Request With The Below Values", ((string)(null)), table7, "When ");
#line 169
     testRunner.Then("The Processed AssetServiceUpdate Message must be available in Kafka topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void AssetService_CreateInvalidAssetUID(string description, string assetUID, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Negative",
                    "AssetService",
                    "US7349"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateInvalidAssetUID", @__tags);
#line 173
this.ScenarioSetup(scenarioInfo);
#line 174
   testRunner.Given(string.Format("AssetService Is Ready To Verify \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 175
  testRunner.And("AssetServiceCreate Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
   testRunner.When(string.Format("I Set Invalid AssetServiceCreate AssetUID To \'{0}\'", assetUID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 177
      testRunner.And("I Post Invalid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
      testRunner.Then(string.Format("AssetService Response With \'{0}\' Should Be Returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "InvalidLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "InvalidLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "c9ead99b-eea3-4605-92e2-1e6497b773")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_CreateInvalidAssetUID_InvalidLength()
        {
            this.AssetService_CreateInvalidAssetUID("InvalidLength", "c9ead99b-eea3-4605-92e2-1e6497b773", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "c9ead99b-eea3 4605-92e2-1e6497b77369")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_CreateInvalidAssetUID_ContainsSpace()
        {
            this.AssetService_CreateInvalidAssetUID("ContainsSpace", "c9ead99b-eea3 4605-92e2-1e6497b77369", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ContainsUnderScore")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ContainsUnderScore")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "9AB056CA_3514_E411_8AFE_24FD5231FB1F")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_CreateInvalidAssetUID_ContainsUnderScore()
        {
            this.AssetService_CreateInvalidAssetUID("ContainsUnderScore", "9AB056CA_3514_E411_8AFE_24FD5231FB1F", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "NotInGUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "NotInGUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "9AB056CA3-514-E411-8AFE-24FD5231FB1F")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_CreateInvalidAssetUID_NotInGUID()
        {
            this.AssetService_CreateInvalidAssetUID("NotInGUID", "9AB056CA3-514-E411-8AFE-24FD5231FB1F", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "SplChar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "SplChar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "9AB056CA3-514-E411-8AFE-24FD5231*B1F")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_CreateInvalidAssetUID_SplChar()
        {
            this.AssetService_CreateInvalidAssetUID("SplChar", "9AB056CA3-514-E411-8AFE-24FD5231*B1F", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "NULL_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_CreateInvalidAssetUID_NULL()
        {
            this.AssetService_CreateInvalidAssetUID("NULL", "NULL_NULL", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidSerialNumber_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_CreateInvalidSerialNumber_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateInvalidSerialNumber_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Negative",
                        "AssetService",
                        "US7349"});
#line 190
this.ScenarioSetup(scenarioInfo);
#line 191
   testRunner.Given("AssetService Is Ready To Verify \'<Description>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 192
  testRunner.And("AssetServiceCreate Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
   testRunner.When("I Set Invalid AssetServiceCreate SerialNumber To \'NULL_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 194
      testRunner.And("I Post Invalid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
      testRunner.Then("AssetService Response With \'ERR_SerialNumberInvalid\' Should Be Returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidMakeCode_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_CreateInvalidMakeCode_NULL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateInvalidMakeCode_NULL", new string[] {
                        "Automated",
                        "Regression",
                        "Negative",
                        "AssetService",
                        "US7349"});
#line 199
this.ScenarioSetup(scenarioInfo);
#line 200
   testRunner.Given("AssetService Is Ready To Verify \'<Description>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 201
  testRunner.And("AssetServiceCreate Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
   testRunner.When("I Set Invalid AssetServiceCreate MakeCode To \'NULL_NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 203
      testRunner.And("I Post Invalid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
      testRunner.Then("AssetService Response With \'ERR_MakeCodeInvalid\' Should Be Returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void AssetService_CreateInvalidIconKey(string description, string iconKey, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Negative",
                    "AssetService",
                    "US7349"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateInvalidIconKey", @__tags);
#line 208
this.ScenarioSetup(scenarioInfo);
#line 209
   testRunner.Given(string.Format("AssetService Is Ready To Verify \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 210
  testRunner.And("AssetServiceCreate Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
   testRunner.When(string.Format("I Set Invalid AssetServiceCreate IconKey To \'{0}\'", iconKey), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 212
      testRunner.And("I Post Invalid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
      testRunner.Then(string.Format("AssetService Response With \'{0}\' Should Be Returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidIconKey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IconKey", "abc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_IconKeyInvalid")]
        public virtual void AssetService_CreateInvalidIconKey_String()
        {
            this.AssetService_CreateInvalidIconKey("String", "abc", "ERR_IconKeyInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidIconKey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IconKey", "1 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_IconKeyInvalid")]
        public virtual void AssetService_CreateInvalidIconKey_ContainsSpace()
        {
            this.AssetService_CreateInvalidIconKey("ContainsSpace", "1 2", "ERR_IconKeyInvalid", ((string[])(null)));
        }
        
        public virtual void AssetService_CreateInvalidModelYear(string description, string modelYear, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Negative",
                    "AssetService",
                    "US7349"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateInvalidModelYear", @__tags);
#line 221
this.ScenarioSetup(scenarioInfo);
#line 222
   testRunner.Given(string.Format("AssetService Is Ready To Verify \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 223
  testRunner.And("AssetServiceCreate Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
   testRunner.When(string.Format("I Set Invalid AssetServiceCreate ModelYear To \'{0}\'", modelYear), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 225
      testRunner.And("I Post Invalid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 226
      testRunner.Then(string.Format("AssetService Response With \'{0}\' Should Be Returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidModelYear")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ModelYear", "abc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ModelYearInvalid")]
        public virtual void AssetService_CreateInvalidModelYear_String()
        {
            this.AssetService_CreateInvalidModelYear("String", "abc", "ERR_ModelYearInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidModelYear")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ModelYear", "1 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ModelYearInvalid")]
        public virtual void AssetService_CreateInvalidModelYear_ContainsSpace()
        {
            this.AssetService_CreateInvalidModelYear("ContainsSpace", "1 2", "ERR_ModelYearInvalid", ((string[])(null)));
        }
        
        public virtual void AssetService_CreateInvalidActionUTC(string description, string actionUTC, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Negative",
                    "AssetService",
                    "US7349"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateInvalidActionUTC", @__tags);
#line 234
this.ScenarioSetup(scenarioInfo);
#line 235
   testRunner.Given(string.Format("AssetService Is Ready To Verify \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 236
  testRunner.And("AssetServiceCreate Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 237
   testRunner.When(string.Format("I Set Invalid AssetServiceCreate ActionUTC To \'{0}\'", actionUTC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 238
      testRunner.And("I Post Invalid AssetServiceCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
      testRunner.Then(string.Format("AssetService Response With \'{0}\' Should Be Returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidActionUTC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ActionUTC", "abc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ActionUTC")]
        public virtual void AssetService_CreateInvalidActionUTC_String()
        {
            this.AssetService_CreateInvalidActionUTC("String", "abc", "ERR_ActionUTC", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidActionUTC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ActionUTC", "1 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ActionUTC")]
        public virtual void AssetService_CreateInvalidActionUTC_ContainsSpace()
        {
            this.AssetService_CreateInvalidActionUTC("ContainsSpace", "1 2", "ERR_ActionUTC", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidActionUTC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "NotInDateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "NotInDateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ActionUTC", "2015-2-13-14-22:02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ActionUTC")]
        public virtual void AssetService_CreateInvalidActionUTC_NotInDateTime()
        {
            this.AssetService_CreateInvalidActionUTC("NotInDateTime", "2015-2-13-14-22:02", "ERR_ActionUTC", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidOptionalFields_Blank")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        public virtual void AssetService_UpdateInvalidOptionalFields_Blank()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_UpdateInvalidOptionalFields_Blank", new string[] {
                        "Automated",
                        "Regression",
                        "Negative",
                        "AssetService",
                        "US7349"});
#line 248
this.ScenarioSetup(scenarioInfo);
#line 249
   testRunner.Given("AssetService Is Ready To Verify \'AssetService_UpdateValidOptionalFields_Blank\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 250
  testRunner.And("AssetServiceUpdate Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "AssetName",
                        "AssetType",
                        "Model",
                        "ModelYear",
                        "EquipmentVIN",
                        "IconKey"});
            table8.AddRow(new string[] {
                        "NULL_NULL",
                        "NULL_NULL",
                        "NULL_NULL",
                        "NULL_NULL",
                        "NULL_NULL",
                        "NULL_NULL"});
#line 251
   testRunner.When("I Post Invalid AssetServiceUpdate Request With The Below Values", ((string)(null)), table8, "When ");
#line 254
      testRunner.Then("AssetService Response With \'ERR_Invalid\' Should Be Returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void AssetService_UpdateInvalidAssetUID(string description, string assetUID, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Negative",
                    "AssetService",
                    "US7349"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_UpdateInvalidAssetUID", @__tags);
#line 258
this.ScenarioSetup(scenarioInfo);
#line 259
   testRunner.Given(string.Format("AssetService Is Ready To Verify \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 260
  testRunner.And("AssetServiceUpdate Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 261
   testRunner.When(string.Format("I Set Invalid AssetServiceUpdate AssetUID To \'{0}\'", assetUID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 262
      testRunner.And("I Post Invalid AssetServiceUpdate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 263
      testRunner.Then(string.Format("AssetService Response With \'{0}\' Should Be Returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "InvalidLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "InvalidLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "c9ead99b-eea3-4605-92e2-1e6497b773")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_UpdateInvalidAssetUID_InvalidLength()
        {
            this.AssetService_UpdateInvalidAssetUID("InvalidLength", "c9ead99b-eea3-4605-92e2-1e6497b773", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "c9ead99b-eea3 4605-92e2-1e6497b77369")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_UpdateInvalidAssetUID_ContainsSpace()
        {
            this.AssetService_UpdateInvalidAssetUID("ContainsSpace", "c9ead99b-eea3 4605-92e2-1e6497b77369", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ContainsUnderScore")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ContainsUnderScore")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "9AB056CA_3514_E411_8AFE_24FD5231FB1F")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_UpdateInvalidAssetUID_ContainsUnderScore()
        {
            this.AssetService_UpdateInvalidAssetUID("ContainsUnderScore", "9AB056CA_3514_E411_8AFE_24FD5231FB1F", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "NotInGUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "NotInGUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "9AB056CA3-514-E411-8AFE-24FD5231FB1F")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_UpdateInvalidAssetUID_NotInGUID()
        {
            this.AssetService_UpdateInvalidAssetUID("NotInGUID", "9AB056CA3-514-E411-8AFE-24FD5231FB1F", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "SplChar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "SplChar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "9AB056CA3-514-E411-8AFE-24FD5231*B1F")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_UpdateInvalidAssetUID_SplChar()
        {
            this.AssetService_UpdateInvalidAssetUID("SplChar", "9AB056CA3-514-E411-8AFE-24FD5231*B1F", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "NULL_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_UpdateInvalidAssetUID_NULL()
        {
            this.AssetService_UpdateInvalidAssetUID("NULL", "NULL_NULL", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        public virtual void AssetService_UpdateInvalidModelYear(string description, string modelYear, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Negative",
                    "AssetService",
                    "US7349"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_UpdateInvalidModelYear", @__tags);
#line 275
this.ScenarioSetup(scenarioInfo);
#line 276
   testRunner.Given(string.Format("AssetService Is Ready To Verify \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 277
  testRunner.And("AssetServiceUpdate Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
   testRunner.When(string.Format("I Set Invalid AssetServiceUpdate ModelYear To \'{0}\'", modelYear), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 279
     testRunner.And("I Post Invalid AssetServiceUpdate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 280
      testRunner.Then(string.Format("AssetService Response With \'{0}\' Should Be Returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidModelYear")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ModelYear", "abc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ModelYearInvalid")]
        public virtual void AssetService_UpdateInvalidModelYear_String()
        {
            this.AssetService_UpdateInvalidModelYear("String", "abc", "ERR_ModelYearInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidModelYear")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ModelYear", "1 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ModelYearInvalid")]
        public virtual void AssetService_UpdateInvalidModelYear_ContainsSpace()
        {
            this.AssetService_UpdateInvalidModelYear("ContainsSpace", "1 2", "ERR_ModelYearInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidModelYear")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "SplChar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "SplChar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ModelYear", "&^9AB056CA.,-3514-E411-8AF_24FD5231FB1F")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ModelYearInvalid")]
        public virtual void AssetService_UpdateInvalidModelYear_SplChar()
        {
            this.AssetService_UpdateInvalidModelYear("SplChar", "&^9AB056CA.,-3514-E411-8AF_24FD5231FB1F", "ERR_ModelYearInvalid", ((string[])(null)));
        }
        
        public virtual void AssetService_UpdateInvalidIconKey(string description, string iconKey, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Negative",
                    "AssetService",
                    "US7349"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_UpdateInvalidIconKey", @__tags);
#line 289
this.ScenarioSetup(scenarioInfo);
#line 290
   testRunner.Given(string.Format("AssetService Is Ready To Verify \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 291
  testRunner.And("AssetServiceUpdate Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
   testRunner.When(string.Format("I Set Invalid AssetServiceUpdate IconKey To \'{0}\'", iconKey), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 293
      testRunner.And("I Post Invalid AssetServiceUpdate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 294
      testRunner.Then(string.Format("AssetService Response With \'{0}\' Should Be Returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidIconKey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IconKey", "abc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_IconKeyInvalid")]
        public virtual void AssetService_UpdateInvalidIconKey_String()
        {
            this.AssetService_UpdateInvalidIconKey("String", "abc", "ERR_IconKeyInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidIconKey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IconKey", "1 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_IconKeyInvalid")]
        public virtual void AssetService_UpdateInvalidIconKey_ContainsSpace()
        {
            this.AssetService_UpdateInvalidIconKey("ContainsSpace", "1 2", "ERR_IconKeyInvalid", ((string[])(null)));
        }
        
        public virtual void AssetService_UpdateInvalidActionUTC(string description, string actionUTC, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Negative",
                    "AssetService",
                    "US7349"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_UpdateInvalidActionUTC", @__tags);
#line 302
this.ScenarioSetup(scenarioInfo);
#line 303
   testRunner.Given(string.Format("AssetService Is Ready To Verify \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 304
    testRunner.And("AssetServiceUpdate Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 305
   testRunner.When(string.Format("I Set Invalid AssetServiceUpdate ActionUTC To \'{0}\'", actionUTC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 306
      testRunner.And("I Post Invalid AssetServiceUpdate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 307
      testRunner.Then(string.Format("AssetService Response With \'{0}\' Should Be Returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidActionUTC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ActionUTC", "abc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ActionUTC")]
        public virtual void AssetService_UpdateInvalidActionUTC_String()
        {
            this.AssetService_UpdateInvalidActionUTC("String", "abc", "ERR_ActionUTC", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidActionUTC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ActionUTC", "1 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ActionUTC")]
        public virtual void AssetService_UpdateInvalidActionUTC_ContainsSpace()
        {
            this.AssetService_UpdateInvalidActionUTC("ContainsSpace", "1 2", "ERR_ActionUTC", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidActionUTC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "NotInDateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "NotInDateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ActionUTC", "2015-2-13-14-22:02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ActionUTC")]
        public virtual void AssetService_UpdateInvalidActionUTC_NotInDateTime()
        {
            this.AssetService_UpdateInvalidActionUTC("NotInDateTime", "2015-2-13-14-22:02", "ERR_ActionUTC", ((string[])(null)));
        }
        
        public virtual void AssetService_DeleteInvalidAssetUID(string description, string assetUID, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Negative",
                    "AssetService",
                    "US7349"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_DeleteInvalidAssetUID", @__tags);
#line 316
this.ScenarioSetup(scenarioInfo);
#line 317
   testRunner.Given(string.Format("AssetService Is Ready To Verify \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 318
  testRunner.And("AssetServiceDelete Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 319
   testRunner.When(string.Format("I Set Invalid AssetServiceDelete AssetUID To \'{0}\'", assetUID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 320
      testRunner.And("I Post Invalid AssetServiceDelete Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 321
      testRunner.Then(string.Format("AssetService Response With \'{0}\' Should Be Returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_DeleteInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "InvalidLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "InvalidLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "c9ead99b-eea3-4605-92e2-1e6497b773")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_DeleteInvalidAssetUID_InvalidLength()
        {
            this.AssetService_DeleteInvalidAssetUID("InvalidLength", "c9ead99b-eea3-4605-92e2-1e6497b773", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_DeleteInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "c9ead99b-eea3 4605-92e2-1e6497b77369")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_DeleteInvalidAssetUID_ContainsSpace()
        {
            this.AssetService_DeleteInvalidAssetUID("ContainsSpace", "c9ead99b-eea3 4605-92e2-1e6497b77369", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_DeleteInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ContainsUnderScore")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ContainsUnderScore")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "9AB056CA_3514_E411_8AFE_24FD5231FB1F")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_DeleteInvalidAssetUID_ContainsUnderScore()
        {
            this.AssetService_DeleteInvalidAssetUID("ContainsUnderScore", "9AB056CA_3514_E411_8AFE_24FD5231FB1F", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_DeleteInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "NotInGUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "NotInGUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "9AB056CA3-514-E411-8AFE-24FD5231FB1F")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_DeleteInvalidAssetUID_NotInGUID()
        {
            this.AssetService_DeleteInvalidAssetUID("NotInGUID", "9AB056CA3-514-E411-8AFE-24FD5231FB1F", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_DeleteInvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetUID", "NULL_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_AssetUIDInvalid")]
        public virtual void AssetService_DeleteInvalidAssetUID_NULL()
        {
            this.AssetService_DeleteInvalidAssetUID("NULL", "NULL_NULL", "ERR_AssetUIDInvalid", ((string[])(null)));
        }
        
        public virtual void AssetService_DeleteInvalidActionUTC(string description, string actionUTC, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Negative",
                    "AssetService",
                    "US7349"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_DeleteInvalidActionUTC", @__tags);
#line 332
this.ScenarioSetup(scenarioInfo);
#line 333
   testRunner.Given(string.Format("AssetService Is Ready To Verify \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 334
  testRunner.And("AssetServiceDelete Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 335
   testRunner.When(string.Format("I Set Invalid AssetServiceDelete ActionUTC To \'{0}\'", actionUTC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 336
      testRunner.And("I Post Invalid AssetServiceDelete Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 337
      testRunner.Then(string.Format("AssetService Response With \'{0}\' Should Be Returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_DeleteInvalidActionUTC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ActionUTC", "abc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ActionUTC")]
        public virtual void AssetService_DeleteInvalidActionUTC_String()
        {
            this.AssetService_DeleteInvalidActionUTC("String", "abc", "ERR_ActionUTC", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_DeleteInvalidActionUTC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ContainsSpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ActionUTC", "2015 13 15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ActionUTC")]
        public virtual void AssetService_DeleteInvalidActionUTC_ContainsSpace()
        {
            this.AssetService_DeleteInvalidActionUTC("ContainsSpace", "2015 13 15", "ERR_ActionUTC", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_DeleteInvalidActionUTC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "NotInDateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "NotInDateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ActionUTC", "2015-2-13-14-22:02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_ActionUTC")]
        public virtual void AssetService_DeleteInvalidActionUTC_NotInDateTime()
        {
            this.AssetService_DeleteInvalidActionUTC("NotInDateTime", "2015-2-13-14-22:02", "ERR_ActionUTC", ((string[])(null)));
        }
        
        public virtual void AssetService_CreateInvalidContentType(string description, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Negative",
                    "AssetService",
                    "US7349"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_CreateInvalidContentType", @__tags);
#line 346
this.ScenarioSetup(scenarioInfo);
#line 347
   testRunner.Given(string.Format("AssetService Is Ready To Verify \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 348
  testRunner.And("AssetServiceCreate Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 349
   testRunner.When(string.Format("I Post AssetServiceCreate Request With Invalid ContentType \'{0}\'", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 350
      testRunner.Then(string.Format("AssetService Response With \'{0}\' Should Be Returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidContentType")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HTML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "HTML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "HTML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_InvalidContentType")]
        public virtual void AssetService_CreateInvalidContentType_HTML()
        {
            this.AssetService_CreateInvalidContentType("HTML", "HTML", "ERR_InvalidContentType", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_CreateInvalidContentType")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_InvalidContentType")]
        public virtual void AssetService_CreateInvalidContentType_XML()
        {
            this.AssetService_CreateInvalidContentType("XML", "XML", "ERR_InvalidContentType", ((string[])(null)));
        }
        
        public virtual void AssetService_UpdateInvalidContentType(string description, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Negative",
                    "AssetService",
                    "US7349"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AssetService_UpdateInvalidContentType", @__tags);
#line 358
this.ScenarioSetup(scenarioInfo);
#line 359
   testRunner.Given(string.Format("AssetService Is Ready To Verify \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 360
  testRunner.And("AssetServiceUpdate Request Is Setup With Invalid Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 361
   testRunner.When(string.Format("I Post Invalid AssetServiceUpdate Request With Invalid ContentType \'{0}\'", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 362
      testRunner.Then(string.Format("AssetService Response With \'{0}\' Should Be Returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidContentType")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HTML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "HTML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "HTML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_InvalidContentType")]
        public virtual void AssetService_UpdateInvalidContentType_HTML()
        {
            this.AssetService_UpdateInvalidContentType("HTML", "HTML", "ERR_InvalidContentType", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AssetService_UpdateInvalidContentType")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Assets Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssetService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US7349")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorMessage", "ERR_InvalidContentType")]
        public virtual void AssetService_UpdateInvalidContentType_XML()
        {
            this.AssetService_UpdateInvalidContentType("XML", "XML", "ERR_InvalidContentType", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
