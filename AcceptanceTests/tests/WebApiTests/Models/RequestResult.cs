using System;
using Newtonsoft.Json;

namespace WebApiTests.Models
{
  /// <summary>
  /// Represents general (minimal) reponse generated by a sevice.
  /// This is copied from ...\RaptorServicesCommon\Contracts\ContractExecutionResult.cs
  /// </summary>
  public class RequestResult : IEquatable<RequestResult>
  {
    public int Code { get; set; }
    public string Message { get; set; }

    /// <summary>
    ///     Initializes a new instance of the <see cref="ContractExecutionResult" /> class.
    /// </summary>
    /// <param name="code">The resulting code. Default value is <see cref="ContractExecutionStates.ExecutedSuccessfully" /></param>
    /// <param name="message">The verbose user-friendly message. Default value is empty string.</param>
    protected RequestResult(int code, string message = "")
    {
      Code = code;
      Message = message;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="ContractExecutionResult" /> class with default
    ///     <see cref="ContractExecutionStates.ExecutedSuccessfully" /> result
    /// </summary>
    /// <param name="message">The verbose user-friendly message.</param>
    protected RequestResult(string message)
        : this(RequestResultCode.ExecutedSuccessfully, message)
    {
    }

    /// <summary>
    /// Default constructor for serialization
    /// </summary>
    public RequestResult()
    {

    }

    #region Equality test
    public bool Equals(RequestResult other)
    {
      if (other == null)
        return false;

      return this.Code == other.Code &&
             this.Message == other.Message;
    }

    public static bool operator ==(RequestResult a, RequestResult b)
    {
      if ((object)a == null || (object)b == null)
        return Object.Equals(a, b);

      return a.Equals(b);
    }

    public static bool operator !=(RequestResult a, RequestResult b)
    {
      return !(a == b);
    }

    public override bool Equals(object obj)
    {
      return obj is RequestResult && this == (RequestResult)obj;
    }

    public override int GetHashCode()
    {
      return base.GetHashCode();
    }
    #endregion

    #region ToString override
    /// <summary>
    /// ToString override
    /// </summary>
    /// <returns>A string representation.</returns>
    public override string ToString()
    {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
    #endregion




  }

  /// <summary>
  /// Defines return code for a request.
  /// This is copied from ...\RaptorServicesCommon\Contracts\ContractExecutionResult.cs
  /// </summary>
  public class RequestResultCode
  {
    /// <summary>
    ///     Service request executed successfully
    /// </summary>
    public static readonly int ExecutedSuccessfully = 0;

    /// <summary>
    ///     Requested data was invalid or POSTed JSON was invalid
    /// </summary>
    public static readonly int IncorrectRequestedData = -1;

    /// <summary>
    ///     Supplied data didn't pass validation
    /// </summary>
    public static readonly int ValidationError = -2;

    /// <summary>
    ///     Internal processing error
    /// </summary>
    public static readonly int InternalProcessingError = -3;

    /// <summary>
    ///     Failed to get results
    /// </summary>
    public static readonly int FailedToGetResults = -4;
  }
}
