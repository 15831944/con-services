// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProductionDataSvc.AcceptanceTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class FilterServicesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FilterServices.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FilterServices", "I should be able to save, retrieve and apply (by ID) filters.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "FilterServices")))
            {
                ProductionDataSvc.AcceptanceTests.FilterServicesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FilterServices - Save and Retrieve a Filter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FilterServices")]
        public virtual void FilterServices_SaveAndRetrieveAFilter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FilterServices - Save and Retrieve a Filter", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("the Filter service URI \"/api/v1/projects/{0}/filters\" with a test project ID 1001" +
                    "158", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
  testRunner.And("a unique filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
  testRunner.And("I can successfully save this unique filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.When("I try to retrieve all saved filters for the test project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
  testRunner.And("I try to retrieve the single unique filter I just saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.Then("the all-filter list retrieved should contain the filter I just saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
  testRunner.And("the single filter retrieved should match the filter I just saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FilterServices - Filter Contention")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FilterServices")]
        public virtual void FilterServices_FilterContention()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FilterServices - Filter Contention", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 14
 testRunner.Given("the Tile service URI \"/api/v1/tiles\" and the following request", @"{
	""projectId"": 1001158,
	""mode"": 23,
	""palettes"": [
		{ ""color"": 16711680, ""value"": 0 }, { ""color"": 65280, ""value"": 63 },
		{ ""color"": 255, ""value"": 149 }, { ""color"": 16776960, ""value"": 271 },
		{ ""color"": 16711935, ""value"": 388 }
	],
	""liftBuildSettings"": {
		""cCVRange"": { ""min"": 80, ""max"": 130 }, ""cCVSummarizeTopLayerOnly"": false,
		""deadBandLowerBoundary"": 0.2, ""deadBandUpperBoundary"": 0.05,
		""firstPassThickness"": 0, ""liftDetectionType"": 2, ""liftThicknessType"": 1, 
		""mDPRange"": { ""min"": 80, ""max"": 130 }, ""mDPSummarizeTopLayerOnly"": false
	},
	""filter1"": {
		""polygonGrid"": [
			{ ""x"": 2321.520, ""y"": 1206.662 }, { ""x"": 2322.880, ""y"": 1206.662 },
			{ ""x"": 2322.880, ""y"": 1206.322 }, { ""x"": 2321.520, ""y"": 1206.322 }
		]
	},
	""filterId1"": 3,
	""filterLayerMethod"": 0,
	""boundBoxGrid"": {
		""bottomLeftX"": 2321.520, ""bottomleftY"": 1206.322,
		""topRightX"": 2323.216, ""topRightY"": 1206.653
	},
	""width"": 320,
	""height"": 64
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
  testRunner.And("the Filter service URI \"/api/v1/projects/{0}/filters\" with a test project ID 1001" +
                    "158", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
  testRunner.And("a unique filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
  testRunner.And("I can successfully save this unique filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.When("I request the tile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Then("the response should contain the same tile data as the following one", @"{
	""TileData"": ""iVBORw0KGgoAAAANSUhEUgAAAUAAAABACAIAAADkhTlJAAAABnRSTlMA/wD/AP83WBt9AAACUUlEQVR42u2TwQnAQAzDfPsPfYV2hD5sgTRBZKJzw+aEbXDvaZ/wC/b1L5f8Qgd8+ydAXj8GPIABVwXI68eABzDgqgB5/RjwAAZcFSCvHwMewICrAuT1Y8ADGHBVgLx+DHgAA64KkNePAQ9gwFUB8vox4AEMuCpAXj8GPIABVwXI68eABzDgqgB5/RjwAAZcFSCvHwMewICrAuT1Y8ADGHBVgLx+DHgAA64KkNePAQ9gwFUB8vox4AEMuCpAXj8GPIABVwXI68eABzDgqgB5/RjwAAZcFSCvHwMewICrAuT1Y8ADGHBVgLx+DHgAA64KkNePAQ9gwFUB8vox4AEMuCpAXj8GPIABVwXI68eABzDgqgB5/RjwAAZcFSCvHwMewICrAuT1Y8ADGHBVgLx+DHgAA64KkNePAQ9gwFUB8vox4AEMuCpAXj8GPIABVwXI68eABzDgqgB5/RjwAAZcFSCvHwMewICrAuT1Y8ADGHBVgLx+DHgAA64KkNePAQ9gwFUB8vox4AEMuCpAXj8GPIABVwXI68eABzDgqgB5/RjwAAZcFSCvHwMewICrAuT1Y8ADGHBVgLx+DHgAA64KkNePAQ9gwFUB8vox4AEMuCpAXj8GPIABVwXI68eABzDgqgB5/RjwAAZcFSCvHwMewICrAuT1Y8ADGHBVgLx+DHgAA64KkNePAQ9gwFUB8vox4AEMuCpAXj8GPIABVwXI68eABzDgqgB5/RjwAAZcFSCvHwMewICrAuT1Y8ADGHBVgLx+DHgAA64KkNePAQ+ADvgBVGR/kMQQZR0AAAAASUVORK5CYII="",
	""Code"": 0,
	""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FilterServices - Apply a Saved Filter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FilterServices")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void FilterServices_ApplyASavedFilter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FilterServices - Apply a Saved Filter", new string[] {
                        "ignore"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 60
 testRunner.Given("the Tile service URI \"/api/v1/tiles\" and the following request", @"{
	""projectId"": 1001158,
	""mode"": 23,
	""palettes"": [
		{ ""color"": 16711680, ""value"": 0 }, { ""color"": 65280, ""value"": 63 },
		{ ""color"": 255, ""value"": 149 }, { ""color"": 16776960, ""value"": 271 },
		{ ""color"": 16711935, ""value"": 388 }
	],
	""liftBuildSettings"": {
		""cCVRange"": { ""min"": 80, ""max"": 130 }, ""cCVSummarizeTopLayerOnly"": false,
		""deadBandLowerBoundary"": 0.2, ""deadBandUpperBoundary"": 0.05,
		""firstPassThickness"": 0, ""liftDetectionType"": 2, ""liftThicknessType"": 1,
		""mDPRange"": { ""min"": 80, ""max"": 130 }, ""mDPSummarizeTopLayerOnly"": false
	},
	""filterId1"": 3,
	""filterLayerMethod"": 0,
	""boundBoxGrid"": {
		""bottomLeftX"": 2321.520, ""bottomleftY"": 1206.322,
		""topRightX"": 2323.216, ""topRightY"": 1206.653
	},
	""width"": 320,
	""height"": 64
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 86
  testRunner.And("the Filter service URI \"/api/v1/projects/{0}/filters\" with a test project ID 1001" +
                    "158", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
  testRunner.And("a unique filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
  testRunner.And("I can successfully save this unique filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.When("I request the tile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
 testRunner.Then("the response should contain the same tile data as the following one", @"{
	""TileData"": ""iVBORw0KGgoAAAANSUhEUgAAAUAAAABACAIAAADkhTlJAAAABnRSTlMA/wD/AP83WBt9AAABYElEQVR42u3TiQ3DMBAEMav/op0iNsBECFnBPZjzPnc7z90bvO+pR/jCEvUA/+vcfnsB/4C7X3A1AccEzELAMQGzEHBMwCwEHBMwCwHHBMxCwDEBsxBwTMAsBBwTMAsBxwTMQsAxAbMQcEzALAQcEzALAccEzELAMQGzEHBMwCwEHBMwCwHHBMxCwDEBsxBwTMAsBBwTMAsBxwTMQsAxAbMQcEzALAQcEzALAccEzELAMQGzEHBMwCwEHBMwCwHHBMxCwDEBsxBwTMAsBBwTMAsBxwTMQsAxAbMQcEzALAQcEzALAccEzELAMQGzEHBMwCwEHBMwCwHHBMxCwDEBsxBwTMAsBBwTMAsBxwTMQsAxAbMQcEzALAQcEzALAccEzELAMQGzEHBMwCwEHBMwCwHHBMxCwDEBsxBwTMAsBBwTMAsBxwTMQsAxAbMQcEzALAQcEzALAccEzELAMQGz+AAYJT+QN+Ri4wAAAABJRU5ErkJggg=="",		
	""Code"": 0,
	""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FilterServices - Bad Request (Retrieve Invalid Filter ID)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FilterServices")]
        public virtual void FilterServices_BadRequestRetrieveInvalidFilterID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FilterServices - Bad Request (Retrieve Invalid Filter ID)", ((string[])(null)));
#line 99
this.ScenarioSetup(scenarioInfo);
#line 100
 testRunner.Given("the Filter service URI \"/api/v1/projects/{0}/filters\" with a test project ID 1001" +
                    "158", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 101
 testRunner.When("I try to retrieve filter with ID 0 expecting BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.Then("the response should contain Code -2 and Message \"Invalid filter ID: 0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FilterServices - Bad Request (Retrieve NonExistent Filter ID)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FilterServices")]
        public virtual void FilterServices_BadRequestRetrieveNonExistentFilterID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FilterServices - Bad Request (Retrieve NonExistent Filter ID)", ((string[])(null)));
#line 104
this.ScenarioSetup(scenarioInfo);
#line 105
 testRunner.Given("the Filter service URI \"/api/v1/projects/{0}/filters\" with a test project ID 1001" +
                    "158", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 106
 testRunner.When("I try to retrieve filter with ID 9223372036854775807 expecting BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
 testRunner.Then("the response should contain Code -4 and Message \"Failed to get requested filter d" +
                    "etails\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FilterServices - Bad Request (Retrieve Invalid Project ID)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FilterServices")]
        public virtual void FilterServices_BadRequestRetrieveInvalidProjectID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FilterServices - Bad Request (Retrieve Invalid Project ID)", ((string[])(null)));
#line 109
this.ScenarioSetup(scenarioInfo);
#line 110
 testRunner.Given("the Filter service URI \"/api/v1/projects/{0}/filters\" with a test project ID 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 111
 testRunner.When("I try to retrieve all saved filters for the test project expecting BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 112
 testRunner.Then("the response should contain Code -2 and Message \"Invalid project ID: 0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FilterServices - Retrieve NonExistent Project ID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FilterServices")]
        public virtual void FilterServices_RetrieveNonExistentProjectID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FilterServices - Retrieve NonExistent Project ID", ((string[])(null)));
#line 114
this.ScenarioSetup(scenarioInfo);
#line 115
 testRunner.Given("the Filter service URI \"/api/v1/projects/{0}/filters\" with a test project ID 9223" +
                    "372036854775807", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 116
 testRunner.When("I try to retrieve all saved filters for the test project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
 testRunner.Then("the FiltersArray in the response should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
