// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProductionDataSvc.AcceptanceTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class FileAccessFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FileAccess.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FileAccess", "I should be able to access (TCC) files.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "FileAccess")))
            {
                ProductionDataSvc.AcceptanceTests.FileAccessFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FileAccess_DownloadAFileToCurrentDirectory(string fileName, string path, string filespaceId, string localPath, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FileAccess - Download a file to current directory", exampleTags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("the FileAccess service URI \"/api/v1/files\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.And(string.Format("\"{0}\" does not already exist", localPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.When(string.Format("I download \"{0}\" at \"{1}\" from \"{2}\" to \"{3}\"", fileName, path, filespaceId, localPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then(string.Format("\"{0}\" should be present", localPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FileAccess - Download a file to current directory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FileAccess")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Large Sites Road - Trimble Road.ttm")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fileName", "Large Sites Road - Trimble Road.ttm")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "/77561/1158")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:filespaceId", "u3bdc38d6-1afe-470e-8c1c-fc241d4c5e01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:localPath", "Large Sites Road - Trimble Road.ttm")]
        public virtual void FileAccess_DownloadAFileToCurrentDirectory_LargeSitesRoad_TrimbleRoad_Ttm()
        {
            this.FileAccess_DownloadAFileToCurrentDirectory("Large Sites Road - Trimble Road.ttm", "/77561/1158", "u3bdc38d6-1afe-470e-8c1c-fc241d4c5e01", "Large Sites Road - Trimble Road.ttm", ((string[])(null)));
        }
        
        public virtual void FileAccess_DownloadAFileThatAlreadyExists(string fileName, string path, string filespaceId, string localPath, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FileAccess - Download a file that already exists", exampleTags);
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("the FileAccess service URI \"/api/v1/files\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.And(string.Format("\"{0}\" already exists", localPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.When(string.Format("I download \"{0}\" at \"{1}\" from \"{2}\" to \"{3}\"", fileName, path, filespaceId, localPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("the response should have Code 0 and Message \"success\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FileAccess - Download a file that already exists")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FileAccess")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Large Sites Road - Trimble Road.ttm")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fileName", "Large Sites Road - Trimble Road.ttm")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "/77561/1158")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:filespaceId", "u3bdc38d6-1afe-470e-8c1c-fc241d4c5e01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:localPath", "Large Sites Road - Trimble Road.ttm")]
        public virtual void FileAccess_DownloadAFileThatAlreadyExists_LargeSitesRoad_TrimbleRoad_Ttm()
        {
            this.FileAccess_DownloadAFileThatAlreadyExists("Large Sites Road - Trimble Road.ttm", "/77561/1158", "u3bdc38d6-1afe-470e-8c1c-fc241d4c5e01", "Large Sites Road - Trimble Road.ttm", ((string[])(null)));
        }
        
        public virtual void FileAccess_DownloadANon_ExistentFile(string fileName, string path, string filespaceId, string localPath, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FileAccess - Download a non-existent file", exampleTags);
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("the FileAccess service URI \"/api/v1/files\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.When(string.Format("I download \"{0}\" at \"{1}\" from \"{2}\" to \"{3}\" expecting BadRequest response", fileName, path, filespaceId, localPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("the response should have Code -3 and Message \"Failed to download file from TCC\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FileAccess - Download a non-existent file")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FileAccess")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "IDontExist.ttm")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fileName", "IDontExist.ttm")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "/77561/1158")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:filespaceId", "u3bdc38d6-1afe-470e-8c1c-fc241d4c5e01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:localPath", "Random")]
        public virtual void FileAccess_DownloadANon_ExistentFile_IDontExist_Ttm()
        {
            this.FileAccess_DownloadANon_ExistentFile("IDontExist.ttm", "/77561/1158", "u3bdc38d6-1afe-470e-8c1c-fc241d4c5e01", "Random", ((string[])(null)));
        }
        
        public virtual void FileAccess_DownloadAFileToInvalidDirectory(string fileName, string path, string filespaceId, string localPath, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FileAccess - Download a file to invalid directory", exampleTags);
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("the FileAccess service URI \"/api/v1/files\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.When(string.Format("I download \"{0}\" at \"{1}\" from \"{2}\" to \"{3}\" expecting BadRequest response", fileName, path, filespaceId, localPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("the response should have Code -3 and Message \"Failed to download file from TCC\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FileAccess - Download a file to invalid directory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FileAccess")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Large Sites Road - Trimble Road.ttm")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fileName", "Large Sites Road - Trimble Road.ttm")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "/77561/1158")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:filespaceId", "u3bdc38d6-1afe-470e-8c1c-fc241d4c5e01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:localPath", "IDontExist\\Large Sites Road - Trimble Road.ttm")]
        public virtual void FileAccess_DownloadAFileToInvalidDirectory_LargeSitesRoad_TrimbleRoad_Ttm()
        {
            this.FileAccess_DownloadAFileToInvalidDirectory("Large Sites Road - Trimble Road.ttm", "/77561/1158", "u3bdc38d6-1afe-470e-8c1c-fc241d4c5e01", "IDontExist\\Large Sites Road - Trimble Road.ttm", ((string[])(null)));
        }
        
        public virtual void FileAccess_DownloadAFileAndExtractItsContentsToBytes(string fileName, string path, string filespaceId, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FileAccess - Download a file and extract its contents to bytes", exampleTags);
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("the FileAccess service for file content URI \"/api/v1/rawfiles\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.When(string.Format("I download \"{0}\" at \"{1}\" from \"{2}\" expecting the downloaded file", fileName, path, filespaceId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("the response should have Code 0 and Message \"success\" and the file contents shoul" +
                    "d be present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FileAccess - Download a file and extract its contents to bytes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FileAccess")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Large Sites Road - Trimble Road.ttm")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fileName", "Large Sites Road - Trimble Road.ttm")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "/77561/1158")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:filespaceId", "u3bdc38d6-1afe-470e-8c1c-fc241d4c5e01")]
        public virtual void FileAccess_DownloadAFileAndExtractItsContentsToBytes_LargeSitesRoad_TrimbleRoad_Ttm()
        {
            this.FileAccess_DownloadAFileAndExtractItsContentsToBytes("Large Sites Road - Trimble Road.ttm", "/77561/1158", "u3bdc38d6-1afe-470e-8c1c-fc241d4c5e01", ((string[])(null)));
        }
        
        public virtual void FileAccess_DownloadANon_ExistentFileToExtractItsContentsToBytes(string fileName, string path, string filespaceId, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FileAccess - Download a non-existent file to extract its contents to bytes", exampleTags);
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("the FileAccess service for file content URI \"/api/v1/rawfiles\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
 testRunner.When(string.Format("I download \"{0}\" at \"{1}\" from \"{2}\" expecting no downloaded file and BadRequest " +
                        "response", fileName, path, filespaceId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("the response should have Code -3 and Message \"Failed to download file from TCC\" a" +
                    "nd no file contents should be present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FileAccess - Download a non-existent file to extract its contents to bytes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FileAccess")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "IDontExist.ttm")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fileName", "IDontExist.ttm")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "/77561/1158")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:filespaceId", "u3bdc38d6-1afe-470e-8c1c-fc241d4c5e01")]
        public virtual void FileAccess_DownloadANon_ExistentFileToExtractItsContentsToBytes_IDontExist_Ttm()
        {
            this.FileAccess_DownloadANon_ExistentFileToExtractItsContentsToBytes("IDontExist.ttm", "/77561/1158", "u3bdc38d6-1afe-470e-8c1c-fc241d4c5e01", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
