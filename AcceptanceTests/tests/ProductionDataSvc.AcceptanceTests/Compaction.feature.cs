// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProductionDataSvc.AcceptanceTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CompactionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Compaction.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Compaction", "I should be able to request compaction data", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Compaction")))
            {
                ProductionDataSvc.AcceptanceTests.CompactionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get CMV Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetCMVSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get CMV Summary", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("the Compaction CMV Summary service URI \"/api/v2/compaction/cmv/summary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.When("I request CMV summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then("the CMV summary result should be", @"{
  ""cmvSummaryData"": {
  ""percentEqualsTarget"": 0.12620950778291964,
  ""percentGreaterThanTarget"": 0,
  ""percentLessThanTarget"": 99.873790492217083,
  ""totalAreaCoveredSqMeters"": 549.56240000000014,
  ""cmvTarget"": {
    ""cmvMachineTarget"": 70.0,
    ""targetVaries"": false
  },
  ""minCMVPercent"": 80,
  ""maxCMVPercent"": 120
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get CMV Details")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetCMVDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get CMV Details", ((string[])(null)));
#line 29
 this.ScenarioSetup(scenarioInfo);
#line 30
  testRunner.Given("the Compaction CMV Details service URI \"/api/v2/compaction/cmv/details\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
  testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
  testRunner.When("I request CMV details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
  testRunner.Then("the CMV details result should be", "{\r\n\t\"percents\": [\r\n     95.47749263777871,\r\n      4.5225073622212877,\r\n      0.0," +
                    "\r\n      0.0,\r\n      0.0\r\n\t],\r\n\t\"Code\": 0,\r\n\t\"Message\": \"success\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get MDP Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetMDPSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get MDP Summary", ((string[])(null)));
#line 48
  this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given("the Compaction MDP Summary service URI \"/api/v2/compaction/mdp/summary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.When("I request MDP summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.Then("the MDP result should be", @"{
  ""mdpSummaryData"": {
    ""percentEqualsTarget"": 79.3533176153587,
    ""percentGreaterThanTarget"": 0,
    ""percentLessThanTarget"": 20.646682384641295,
    ""totalAreaCoveredSqMeters"": 1029.6492000000003,
    ""mdpTarget"": {
      ""mdpMachineTarget"": 150.0,
      ""targetVaries"": false
    },
    ""minMDPPercent"": 80,
    ""maxMDPPercent"": 120
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Passcount Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetPasscountSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Passcount Summary", ((string[])(null)));
#line 72
  this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("the Compaction Passcount Summary service URI \"/api/v2/compaction/passcounts/summa" +
                    "ry\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.When("I request Passcount summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
 testRunner.Then("the Passcount summary result should be", @"{
  ""passCountSummaryData"": {
    ""percentEqualsTarget"": 3.3255301569815479,
    ""percentGreaterThanTarget"": 45.311209033324154,
    ""percentLessThanTarget"": 51.3632608096943,
    ""totalAreaCoveredSqMeters"": 1678.9744000000003,
    ""passCountTarget"": {
      ""minPassCountMachineTarget"": 5,
      ""maxPassCountMachineTarget"": 5,
      ""targetVaries"": true
    }
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Passcount Details")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetPasscountDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Passcount Details", ((string[])(null)));
#line 95
 this.ScenarioSetup(scenarioInfo);
#line 96
  testRunner.Given("the Compaction Passcount Details service URI \"/api/v2/compaction/passcounts/detai" +
                    "ls\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 97
  testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
  testRunner.When("I request Passcount details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
  testRunner.Then("the Passcount details result should be", @"{
	""passCountDetailsData"": {
		""percents"": [
			19.632901900694421,
			8.5406274791075756,
			6.160684206522566,
			5.132635651332877,
			4.1589237005401056,
			3.5981699431639118,
			2.8341972853432442,
			2.0126278268618436,
			47.929232006433452
		],
		""totalCoverageArea"": 1678.9744000000003,
		""passCountTarget"": {
			""minPassCountMachineTarget"": 0,
			""maxPassCountMachineTarget"": 0,
			""targetVaries"": true
		}
	},
	""Code"": 0,
	""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Temperature Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetTemperatureSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Temperature Summary", ((string[])(null)));
#line 126
  this.ScenarioSetup(scenarioInfo);
#line 127
 testRunner.Given("the Compaction Temperature Summary service URI \"/api/v2/compaction/temperature/su" +
                    "mmary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 128
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
 testRunner.When("I request Temperature summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 130
 testRunner.Then("the Temperature result should be", @"{
  ""temperatureSummaryData"": {
    ""percentEqualsTarget"": 0,
    ""percentGreaterThanTarget"": 0,
    ""percentLessThanTarget"": 100,
    ""totalAreaCoveredSqMeters"": 953.93120000000022,
    ""temperatureTarget"": {
      ""minTemperatureMachineTarget"": 90.0,
      ""maxTemperatureMachineTarget"": 143.0,
      ""targetVaries"": false
    }
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Speed Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetSpeedSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Speed Summary", ((string[])(null)));
#line 149
  this.ScenarioSetup(scenarioInfo);
#line 150
 testRunner.Given("the Compaction Speed Summary service URI \"/api/v2/compaction/speed/summary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 151
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.When("I request Speed summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 153
 testRunner.Then("the Speed result should be", @"{
  ""speedSummaryData"": {
    ""percentEqualsTarget"": 9.4,
    ""percentGreaterThanTarget"": 21.5,
    ""percentLessThanTarget"": 69.1,
    ""totalAreaCoveredSqMeters"": 10636.7028,
    ""minTarget"": 12.0,
    ""maxTarget"": 15.0
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get CMV % Change Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetCMVChangeSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get CMV % Change Summary", ((string[])(null)));
#line 169
  this.ScenarioSetup(scenarioInfo);
#line 170
 testRunner.Given("the Compaction CMV % Change Summary service URI \"/api/v2/compaction/cmv/percentch" +
                    "ange\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 171
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.When("I request CMV % change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 173
 testRunner.Then("the CMV % Change result should be", "{\r\n  \"cmvChangeData\": {\r\n    \"percents\": [\r\n      4.9875827814569531,\r\n      12.6" +
                    "03476821192054,\r\n      20.695364238410598,\r\n      61.7135761589404\r\n    ],\r\n    " +
                    "\"totalAreaCoveredSqMeters\": 558.57920000000013\r\n  },\r\n  \"Code\": 0,\r\n  \"Message\":" +
                    " \"success\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Elevation Range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetElevationRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Elevation Range", ((string[])(null)));
#line 190
  this.ScenarioSetup(scenarioInfo);
#line 191
 testRunner.Given("the Compaction Elevation Range service URI \"/api/v2/compaction/elevationrange\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 192
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
 testRunner.When("I request Elevation Range", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 194
 testRunner.Then("the Elevation Range result should be", @"{
  ""boundingExtents"": {
    ""maxX"": -115.01824137935459,
    ""maxY"": 36.2077397408003,
    ""maxZ"": 1e+308,
    ""minX"": -115.02513694938636,
    ""minY"": 36.206563325785218,
    ""minZ"": 1e+308
  },
  ""minElevation"": 591.9539794921875,
  ""maxElevation"": 624.0980224609375,
  ""totalCoverageArea"": 10637.396400000001,
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Project Statistics")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetProjectStatistics()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Project Statistics", ((string[])(null)));
#line 213
  this.ScenarioSetup(scenarioInfo);
#line 214
 testRunner.Given("the Compaction Project Statistics service URI \"/api/v2/compaction/projectstatisti" +
                    "cs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 215
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.When("I request Project Statistics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 217
 testRunner.Then("the Project Statistics result should be", @"{
  ""startTime"": ""2012-10-30T00:12:09.109"",
  ""endTime"": ""2012-11-08T01:00:08.756"",
  ""cellSize"": 0.34,
  ""indexOriginOffset"": 536870912,
  ""extents"": {
    ""maxX"": 2913.2900000000004,
    ""maxY"": 1250.69,
    ""maxZ"": 624.1365966796875,
    ""minX"": 2306.05,
    ""minY"": 1125.2300000000002,
    ""minZ"": 591.953857421875
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Tiles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetTiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Tiles", ((string[])(null)));
#line 237
  this.ScenarioSetup(scenarioInfo);
#line 238
 testRunner.Given("the Compaction Tiles service URI \"/api/v2/compaction/productiondatatiles\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 239
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
  testRunner.And("a displayMode \"0\" and a bbox \"36.206964000089840283, -115.0203540002853231, 36.20" +
                    "6956000089640213, -115.02034400028509253\" and a width \"256\" and a height \"256\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 241
 testRunner.When("I request a Tile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 242
 testRunner.Then("the Tile result should be", @"{
  ""TileData"": ""iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAABnRSTlMA/wD/AP83WBt9AAADjklEQVR42u3TQW1DARTEwH4iQVIkZV8kDYVeVtGTZxD44uf3+4uF1+vTBfzDY4ARA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnGCAFQOcYIAVA5xggBUDnPD8/Xw6AT7HAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIewP3SloQh/j9MQAAAABJRU5ErkJggg=="",
  ""TileOutsideProjectExtents"": false,
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Compaction Coverage Tiles With Surveyed Surfaces Included")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetCompactionCoverageTilesWithSurveyedSurfacesIncluded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Compaction Coverage Tiles With Surveyed Surfaces Included", ((string[])(null)));
#line 252
  this.ScenarioSetup(scenarioInfo);
#line 253
  testRunner.Given("the Compaction Tiles service URI \"/api/v2/compaction/productiondatatiles\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 254
  testRunner.And("a projectUid \"7925f179-013d-4aaf-aff4-7b9833bb06d6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
  testRunner.And("a displayMode \"0\" and a bbox \"36.207437, -115.019999, 36.207473, -115.019959\" and" +
                    " a width \"256\" and a height \"256\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
  testRunner.When("I request a Tile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 257
  testRunner.Then("the Tile result should be", @"{
  ""tileData"": ""iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAABnRSTlMA/wD/AP83WBt9AAACl0lEQVR42u3TAQEAAAiAoPo/uoYIH9gb6FoBKBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIE4A0AUgTgDQBSBOANAFIeyF3ABDkaLbCAAAAAElFTkSuQmCC"",
  ""tileOutsideProjectExtents"": false,
  ""Code"": 0,
  ""Message"": ""success""
}  ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Compaction Coverage Tiles With Surveyed Surfaces Excluded")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetCompactionCoverageTilesWithSurveyedSurfacesExcluded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Compaction Coverage Tiles With Surveyed Surfaces Excluded", ((string[])(null)));
#line 267
  this.ScenarioSetup(scenarioInfo);
#line 268
  testRunner.Given("the Compaction Tiles service URI \"/api/v2/compaction/productiondatatiles\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 269
  testRunner.And("a projectUid \"86a42bbf-9d0e-4079-850f-835496d715c5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 270
  testRunner.And("a displayMode \"0\" and a bbox \"36.207437, -115.019999, 36.207473, -115.019959\" and" +
                    " a width \"256\" and a height \"256\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 271
  testRunner.When("I request a Tile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 272
  testRunner.Then("the Tile result should be", @"{
  ""tileData"": ""iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAABnRSTlMA/wD/AP83WBt9AAACzElEQVR42u3UQRGAQBADQc4ISnCPEpQcInhQW9OtIJ/J2nsfULUEQJkASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZC2nuvvCUx23rMPVAB8IgDSBECaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkCgMEEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQNoLEuM3XwkCBu0AAAAASUVORK5CYII="",
  ""tileOutsideProjectExtents"": false,
  ""Code"": 0,
  ""Message"": ""success""
}  ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Elevation Palette")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetElevationPalette()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Elevation Palette", ((string[])(null)));
#line 282
  this.ScenarioSetup(scenarioInfo);
#line 283
 testRunner.Given("the Compaction Elevation Palette service URI \"/api/v2/compaction/elevationpalette" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 284
  testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 285
 testRunner.When("I request Elevation Palette", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 286
 testRunner.Then("the Elevation Palette result should be", "{\r\n  \"palette\": {\r\n    \"colorValues\": [\r\n      {\r\n        \"color\": 13107200,\r\n   " +
                    "     \"value\": 591.9539794921875\r\n      },\r\n      {\r\n        \"color\": 16711680,\r\n" +
                    "        \"value\": 592.99088410408262\r\n      },\r\n      {\r\n        \"color\": 1476096" +
                    "0,\r\n        \"value\": 594.02778871597786\r\n      },\r\n      {\r\n        \"color\": 167" +
                    "34720,\r\n        \"value\": 595.064693327873\r\n      },\r\n      {\r\n        \"color\": 1" +
                    "6744960,\r\n        \"value\": 596.10159793976811\r\n      },\r\n      {\r\n        \"color" +
                    "\": 16755200,\r\n        \"value\": 597.13850255166335\r\n      },\r\n      {\r\n        \"c" +
                    "olor\": 16762880,\r\n        \"value\": 598.17540716355848\r\n      },\r\n      {\r\n      " +
                    "  \"color\": 16768000,\r\n        \"value\": 599.2123117754536\r\n      },\r\n      {\r\n   " +
                    "     \"color\": 16442880,\r\n        \"value\": 600.24921638734884\r\n      },\r\n      {\r" +
                    "\n        \"color\": 14476800,\r\n        \"value\": 601.286120999244\r\n      },\r\n      " +
                    "{\r\n        \"color\": 13821440,\r\n        \"value\": 602.32302561113909\r\n      },\r\n  " +
                    "    {\r\n        \"color\": 13166080,\r\n        \"value\": 603.35993022303433\r\n      }," +
                    "\r\n      {\r\n        \"color\": 11855360,\r\n        \"value\": 604.39683483492945\r\n    " +
                    "  },\r\n      {\r\n        \"color\": 9889280,\r\n        \"value\": 605.43373944682457\r\n " +
                    "     },\r\n      {\r\n        \"color\": 8578560,\r\n        \"value\": 606.47064405871981" +
                    "\r\n      },\r\n      {\r\n        \"color\": 6615040,\r\n        \"value\": 607.50754867061" +
                    "494\r\n      },\r\n      {\r\n        \"color\": 65280,\r\n        \"value\": 608.5444532825" +
                    "1006\r\n      },\r\n      {\r\n        \"color\": 61540,\r\n        \"value\": 609.581357894" +
                    "40519\r\n      },\r\n      {\r\n        \"color\": 59010,\r\n        \"value\": 610.61826250" +
                    "630043\r\n      },\r\n      {\r\n        \"color\": 59030,\r\n        \"value\": 611.6551671" +
                    "1819555\r\n      },\r\n      {\r\n        \"color\": 59060,\r\n        \"value\": 612.692071" +
                    "73009067\r\n      },\r\n      {\r\n        \"color\": 59080,\r\n        \"value\": 613.72897" +
                    "634198591\r\n      },\r\n      {\r\n        \"color\": 59090,\r\n        \"value\": 614.7658" +
                    "80953881\r\n      },\r\n      {\r\n        \"color\": 56540,\r\n        \"value\": 615.80278" +
                    "556577616\r\n      },\r\n      {\r\n        \"color\": 51430,\r\n        \"value\": 616.8396" +
                    "901776714\r\n      },\r\n      {\r\n        \"color\": 46320,\r\n        \"value\": 617.8765" +
                    "9478956652\r\n      },\r\n      {\r\n        \"color\": 38645,\r\n        \"value\": 618.913" +
                    "49940146165\r\n      },\r\n      {\r\n        \"color\": 30970,\r\n        \"value\": 619.95" +
                    "040401335689\r\n      },\r\n      {\r\n        \"color\": 23295,\r\n        \"value\": 620.9" +
                    "87308625252\r\n      },\r\n      {\r\n        \"color\": 18175,\r\n        \"value\": 622.02" +
                    "421323714714\r\n      },\r\n      {\r\n        \"color\": 255,\r\n        \"value\": 623.061" +
                    "11784904238\r\n      },\r\n      {\r\n        \"color\": 200,\r\n        \"value\": 624.0980" +
                    "224609375\r\n      }\r\n    ],\r\n    \"aboveLastColor\": 8388736,\r\n    \"belowFirstColor" +
                    "\": 16711935\r\n  },\r\n  \"Code\": 0,\r\n  \"Message\": \"success\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Palettes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetPalettes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Palettes", ((string[])(null)));
#line 428
  this.ScenarioSetup(scenarioInfo);
#line 429
 testRunner.Given("the Compaction Palettes service URI \"/api/v2/compaction/colorpalettes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 430
  testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 431
 testRunner.When("I request Palettes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 432
 testRunner.Then("the Palettes result should be", "{\r\n  \"elevationPalette\": {\r\n    \"colorValues\": [\r\n      {\r\n        \"color\": 13107" +
                    "200,\r\n        \"value\": 591.9539794921875\r\n      },\r\n      {\r\n        \"color\": 16" +
                    "711680,\r\n        \"value\": 592.99088410408262\r\n      },\r\n      {\r\n        \"color\"" +
                    ": 14760960,\r\n        \"value\": 594.02778871597786\r\n      },\r\n      {\r\n        \"co" +
                    "lor\": 16734720,\r\n        \"value\": 595.064693327873\r\n      },\r\n      {\r\n        \"" +
                    "color\": 16744960,\r\n        \"value\": 596.10159793976811\r\n      },\r\n      {\r\n     " +
                    "   \"color\": 16755200,\r\n        \"value\": 597.13850255166335\r\n      },\r\n      {\r\n " +
                    "       \"color\": 16762880,\r\n        \"value\": 598.17540716355848\r\n      },\r\n      " +
                    "{\r\n        \"color\": 16768000,\r\n        \"value\": 599.2123117754536\r\n      },\r\n   " +
                    "   {\r\n        \"color\": 16442880,\r\n        \"value\": 600.24921638734884\r\n      },\r" +
                    "\n      {\r\n        \"color\": 14476800,\r\n        \"value\": 601.286120999244\r\n      }" +
                    ",\r\n      {\r\n        \"color\": 13821440,\r\n        \"value\": 602.32302561113909\r\n   " +
                    "   },\r\n      {\r\n        \"color\": 13166080,\r\n        \"value\": 603.35993022303433\r" +
                    "\n      },\r\n      {\r\n        \"color\": 11855360,\r\n        \"value\": 604.39683483492" +
                    "945\r\n      },\r\n      {\r\n        \"color\": 9889280,\r\n        \"value\": 605.43373944" +
                    "682457\r\n      },\r\n      {\r\n        \"color\": 8578560,\r\n        \"value\": 606.47064" +
                    "405871981\r\n      },\r\n      {\r\n        \"color\": 6615040,\r\n        \"value\": 607.50" +
                    "754867061494\r\n      },\r\n      {\r\n        \"color\": 65280,\r\n        \"value\": 608.5" +
                    "4445328251006\r\n      },\r\n      {\r\n        \"color\": 61540,\r\n        \"value\": 609." +
                    "58135789440519\r\n      },\r\n      {\r\n        \"color\": 59010,\r\n        \"value\": 610" +
                    ".61826250630043\r\n      },\r\n      {\r\n        \"color\": 59030,\r\n        \"value\": 61" +
                    "1.65516711819555\r\n      },\r\n      {\r\n        \"color\": 59060,\r\n        \"value\": 6" +
                    "12.69207173009067\r\n      },\r\n      {\r\n        \"color\": 59080,\r\n        \"value\": " +
                    "613.72897634198591\r\n      },\r\n      {\r\n        \"color\": 59090,\r\n        \"value\":" +
                    " 614.765880953881\r\n      },\r\n      {\r\n        \"color\": 56540,\r\n        \"value\": " +
                    "615.80278556577616\r\n      },\r\n      {\r\n        \"color\": 51430,\r\n        \"value\":" +
                    " 616.8396901776714\r\n      },\r\n      {\r\n        \"color\": 46320,\r\n        \"value\":" +
                    " 617.87659478956652\r\n      },\r\n      {\r\n        \"color\": 38645,\r\n        \"value\"" +
                    ": 618.91349940146165\r\n      },\r\n      {\r\n        \"color\": 30970,\r\n        \"value" +
                    "\": 619.95040401335689\r\n      },\r\n      {\r\n        \"color\": 23295,\r\n        \"valu" +
                    "e\": 620.987308625252\r\n      },\r\n      {\r\n        \"color\": 18175,\r\n        \"value" +
                    "\": 622.02421323714714\r\n      },\r\n      {\r\n        \"color\": 255,\r\n        \"value\"" +
                    ": 623.06111784904238\r\n      },\r\n      {\r\n        \"color\": 200,\r\n        \"value\":" +
                    " 624.0980224609375\r\n      }\r\n    ],\r\n    \"aboveLastColor\": 8388736,\r\n    \"belowF" +
                    "irstColor\": 16711935\r\n  },\r\n  \"cmvDetailPalette\": {\r\n    \"colorValues\": [\r\n     " +
                    " {\r\n      \"color\": 2971523,\r\n      \"value\": 0.0\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"color\": 4430812," +
                    "\r\n\t\t\t\"value\": 100.0\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"color\": 12509169,\r\n\t\t\t\"value\": 200.0\r\n\t\t},\r\n" +
                    "\t\t{\r\n\t\t\t\"color\": 10341991,\r\n\t\t\t\"value\": 300.0\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"color\": 7053374,\r\n" +
                    "\t\t\t\"value\": 400.0\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"color\": 3828517,\r\n\t\t\t\"value\": 500.0\r\n\t\t},\r\n\t\t{" +
                    "\r\n\t\t\t\"color\": 16174803,\r\n\t\t\t\"value\": 600.0\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"color\": 13990524,\r\n\t\t" +
                    "\t\"value\": 700.0\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"color\": 12660791,\r\n\t\t\t\"value\": 800.0\r\n\t\t},\r\n\t\t{\r" +
                    "\n\t\t\t\"color\": 15105570,\r\n\t\t\t\"value\": 900.0\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"color\": 14785888,\r\n\t\t\t" +
                    "\"value\": 1000.0\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"color\": 15190446,\r\n\t\t\t\"value\": 1100.0\r\n\t\t},\r\n\t\t{" +
                    "\r\n\t\t\t\"color\": 5182823,\r\n\t\t\t\"value\": 1200.0\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"color\": 9259433,\r\n\t\t\t" +
                    "\"value\": 1300.0\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"color\": 13740258,\r\n\t\t\t\"value\": 1400.0\r\n\t\t},\r\n\t\t{" +
                    "\r\n\t\t\t\"color\": 1971179,\r\n\t\t\t\"value\": 1500.0\r\n\t\t}\r\n    ],\r\n    \"aboveLastColor\": n" +
                    "ull,\r\n    \"belowFirstColor\": null\r\n  },\r\n  \"passCountDetailPalette\": {\r\n    \"col" +
                    "orValues\": [\r\n      {\r\n        \"color\": 2971523,\r\n        \"value\": 1\r\n      },\r\n" +
                    "      {\r\n        \"color\": 4430812,\r\n        \"value\": 2\r\n      },\r\n      {\r\n     " +
                    "   \"color\": 12509169,\r\n        \"value\": 3\r\n      },\r\n      {\r\n        \"color\": 1" +
                    "0341991,\r\n        \"value\": 4\r\n      },\r\n      {\r\n        \"color\": 7053374,\r\n    " +
                    "    \"value\": 5\r\n      },\r\n      {\r\n        \"color\": 3828517,\r\n        \"value\": 6" +
                    "\r\n      },\r\n      {\r\n        \"color\": 16174803,\r\n        \"value\": 7\r\n      },\r\n " +
                    "     {\r\n        \"color\": 13990524,\r\n        \"value\": 8\r\n      }\r\n    ],\r\n    \"ab" +
                    "oveLastColor\": 12660791,\r\n    \"belowFirstColor\": null\r\n  },\r\n  \"passCountSummary" +
                    "Palette\": {\r\n    \"aboveTargetColor\": 13959168,\r\n    \"onTargetColor\": 9159498,\r\n " +
                    "   \"belowTargetColor\": 87963\r\n  },\r\n  \"cutFillPalette\": {\r\n    \"colorValues\": [\r" +
                    "\n      {\r\n        \"color\": 11789820,\r\n        \"value\": -0.2\r\n      },\r\n      {\r\n" +
                    "        \"color\": 236517,\r\n        \"value\": -0.1\r\n      },\r\n      {\r\n        \"col" +
                    "or\": 87963,\r\n        \"value\": -0.05\r\n      },\r\n      {\r\n        \"color\": 9159498" +
                    ",\r\n        \"value\": 0\r\n      },\r\n      {\r\n        \"color\": 16764370,\r\n        \"v" +
                    "alue\": 0.05\r\n      },\r\n      {\r\n        \"color\": 15037299,\r\n        \"value\": 0.1" +
                    "\r\n      },\r\n      {\r\n        \"color\": 13959168,\r\n        \"value\": 0.2\r\n      }\r\n" +
                    "    ],\r\n    \"aboveLastColor\": null,\r\n    \"belowFirstColor\": null\r\n  },\r\n  \"tempe" +
                    "ratureSummaryPalette\": {\r\n    \"aboveTargetColor\": 13959168,\r\n    \"onTargetColor\"" +
                    ": 9159498,\r\n    \"belowTargetColor\": 87963\r\n  },\r\n  \"cmvSummaryPalette\": {\r\n    \"" +
                    "aboveTargetColor\": 13959168,\r\n    \"onTargetColor\": 9159498,\r\n    \"belowTargetCol" +
                    "or\": 87963\r\n  },\r\n  \"mdpSummaryPalette\": {\r\n    \"aboveTargetColor\": 13959168,\r\n " +
                    "   \"onTargetColor\": 9159498,\r\n    \"belowTargetColor\": 87963\r\n  },\r\n  \"cmvPercent" +
                    "ChangePalette\": {\r\n    \"colorValues\": [\r\n      {\r\n        \"color\": 9159498,\r\n   " +
                    "     \"value\": 5\r\n      },\r\n      {\r\n        \"color\": 16764370,\r\n        \"value\":" +
                    " 20\r\n      },\r\n      {\r\n        \"color\": 15037299,\r\n        \"value\": 50\r\n      }" +
                    "\r\n    ],\r\n    \"aboveLastColor\": 13959168,\r\n    \"belowFirstColor\": 33554431\r\n  }," +
                    "\r\n  \"speedSummaryPalette\": {\r\n    \"aboveTargetColor\": 13959168,\r\n    \"onTargetCo" +
                    "lor\": 9159498,\r\n    \"belowTargetColor\": 87963\r\n  },\r\n  \"temperatureDetailPalette" +
                    "\": {\r\n    \"colorValues\": [\r\n      {\r\n        \"color\": 2971523,\r\n        \"value\":" +
                    " 70\r\n      },\r\n      {\r\n        \"color\": 4430812,\r\n        \"value\": 80\r\n      }," +
                    "\r\n      {\r\n        \"color\": 12509169,\r\n        \"value\": 90\r\n      },\r\n      {\r\n " +
                    "       \"color\": 14479047,\r\n        \"value\": 100\r\n      },\r\n      {\r\n        \"col" +
                    "or\": 10341991,\r\n        \"value\": 110\r\n      },\r\n      {\r\n        \"color\": 705337" +
                    "4,\r\n        \"value\": 120\r\n      },\r\n      {\r\n        \"color\": 3828517,\r\n        " +
                    "\"value\": 130\r\n      },\r\n      {\r\n        \"color\": 16174803,\r\n        \"value\": 14" +
                    "0\r\n      },\r\n      {\r\n        \"color\": 13990524,\r\n        \"value\": 150\r\n      }," +
                    "\r\n      {\r\n        \"color\": 12660791,\r\n        \"value\": 160\r\n      }\r\n    ],\r\n  " +
                    "  \"aboveLastColor\": null,\r\n    \"belowFirstColor\": null\r\n  },\r\n  \"Code\": 0,\r\n  \"M" +
                    "essage\": \"success\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
