// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProductionDataSvc.AcceptanceTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CompactionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Compaction.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Compaction", "I should be able to request compaction data", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Compaction")))
            {
                ProductionDataSvc.AcceptanceTests.CompactionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get CMV Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetCMVSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get CMV Summary", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("the Compaction CMV Summary service URI \"/api/v2/compaction/cmv/summary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.When("I request CMV summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then("the CMV result should be", @"{
  ""cmvSummaryData"": {
  ""percentEqualsTarget"": 0.12620950778291964,
  ""percentGreaterThanTarget"": 0,
  ""percentLessThanTarget"": 99.873790492217083,
  ""totalAreaCoveredSqMeters"": 549.56240000000014,
  ""cmvTarget"": {
    ""cmvMachineTarget"": 70.0,
    ""targetVaries"": false
  },
  ""minCMVPercent"": 80,
  ""maxCMVPercent"": 120
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get MDP Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetMDPSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get MDP Summary", ((string[])(null)));
#line 29
  this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("the Compaction MDP Summary service URI \"/api/v2/compaction/mdp/summary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.When("I request MDP summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.Then("the MDP result should be", @"{
  ""mdpSummaryData"": {
    ""percentEqualsTarget"": 79.3533176153587,
    ""percentGreaterThanTarget"": 0,
    ""percentLessThanTarget"": 20.646682384641295,
    ""totalAreaCoveredSqMeters"": 1029.6492000000003,
    ""mdpTarget"": {
      ""mdpMachineTarget"": 150.0,
      ""targetVaries"": false
    },
    ""minMDPPercent"": 80,
    ""maxMDPPercent"": 120
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Passcount Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetPasscountSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Passcount Summary", ((string[])(null)));
#line 53
  this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("the Compaction Passcount Summary service URI \"/api/v2/compaction/passcounts/summa" +
                    "ry\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.When("I request Passcount summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.Then("the Passcount result should be", @"{
  ""passCountSummaryData"": {
    ""percentEqualsTarget"": 3.3255301569815479,
    ""percentGreaterThanTarget"": 45.311209033324154,
    ""percentLessThanTarget"": 51.3632608096943,
    ""totalAreaCoveredSqMeters"": 1678.9744000000003,
    ""passCountTarget"": {
      ""minPassCountMachineTarget"": 5,
      ""maxPassCountMachineTarget"": 5,
      ""targetVaries"": true
    }
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Temperature Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetTemperatureSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Temperature Summary", ((string[])(null)));
#line 76
  this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given("the Compaction Temperature Summary service URI \"/api/v2/compaction/temperature/su" +
                    "mmary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 78
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.When("I request Temperature summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
 testRunner.Then("the Temperature result should be", @"{
  ""temperatureSummaryData"": {
    ""percentEqualsTarget"": 0,
    ""percentGreaterThanTarget"": 0,
    ""percentLessThanTarget"": 100,
    ""totalAreaCoveredSqMeters"": 953.93120000000022,
    ""temperatureTarget"": {
      ""minTemperatureMachineTarget"": 90.0,
      ""maxTemperatureMachineTarget"": 143.0,
      ""targetVaries"": false
    }
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Speed Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetSpeedSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Speed Summary", ((string[])(null)));
#line 99
  this.ScenarioSetup(scenarioInfo);
#line 100
 testRunner.Given("the Compaction Speed Summary service URI \"/api/v2/compaction/speed/summary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 101
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.When("I request Speed summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
 testRunner.Then("the Speed result should be", @"{
  ""speedSummaryData"": {
    ""percentEqualsTarget"": 9.4,
    ""percentGreaterThanTarget"": 21.5,
    ""percentLessThanTarget"": 69.1,
    ""totalAreaCoveredSqMeters"": 10636.7028,
    ""minTarget"": 12.0,
    ""maxTarget"": 15.0
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get CMV % Change Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetCMVChangeSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get CMV % Change Summary", ((string[])(null)));
#line 119
  this.ScenarioSetup(scenarioInfo);
#line 120
 testRunner.Given("the Compaction CMV % Change Summary service URI \"/api/v2/compaction/cmv/percentch" +
                    "ange\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 121
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.When("I request CMV % change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 123
 testRunner.Then("the CMV % Change result should be", @"{
  ""cmvChangeData"": [
    {
      ""percentRange"": [
        0,
        5
      ],
      ""percentValue"": 4.9875827814569531
    },
    {
      ""percentRange"": [
        5,
        20
      ],
      ""percentValue"": 12.603476821192054
    },
    {
      ""percentRange"": [
        20,
        50
      ],
      ""percentValue"": 20.695364238410598
    },
    {
      ""percentRange"": [
        50,
        100
      ],
      ""percentValue"": 61.7135761589404
    }
  ],
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Elevation Range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetElevationRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Elevation Range", ((string[])(null)));
#line 161
  this.ScenarioSetup(scenarioInfo);
#line 162
 testRunner.Given("the Compaction Elevation Range service URI \"/api/v2/compaction/elevationrange\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 163
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.When("I request Elevation Range", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 165
 testRunner.Then("the Elevation Range result should be", @"{
  ""boundingExtents"": {
    ""maxX"": -115.01824137935459,
    ""maxY"": 36.2077397408003,
    ""maxZ"": 1e+308,
    ""minX"": -115.02513694938636,
    ""minY"": 36.206563325785218,
    ""minZ"": 1e+308
  },
  ""minElevation"": 591.9539794921875,
  ""maxElevation"": 624.0980224609375,
  ""totalCoverageArea"": 10637.396400000001,
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Project Statistics")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetProjectStatistics()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Project Statistics", ((string[])(null)));
#line 184
  this.ScenarioSetup(scenarioInfo);
#line 185
 testRunner.Given("the Compaction Project Statistics service URI \"/api/v2/compaction/projectstatisti" +
                    "cs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 186
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.When("I request Project Statistics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 188
 testRunner.Then("the Project Statistics result should be", @"{
  ""startTime"": ""2012-10-30T00:12:09.109"",
  ""endTime"": ""2012-11-08T01:00:08.756"",
  ""cellSize"": 0.34,
  ""indexOriginOffset"": 536870912,
  ""extents"": {
    ""maxX"": 2913.2900000000004,
    ""maxY"": 1250.69,
    ""maxZ"": 624.1365966796875,
    ""minX"": 2306.05,
    ""minY"": 1125.2300000000002,
    ""minZ"": 591.953857421875
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Tiles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetTiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Tiles", ((string[])(null)));
#line 208
  this.ScenarioSetup(scenarioInfo);
#line 209
 testRunner.Given("the Compaction Tiles service URI \"/api/v2/compaction/tiles\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 210
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
  testRunner.And("a displayMode \"0\" and a bbox \"0.631930733951056, -2.007483884109430, 0.6319305943" +
                    "24716, -2.007483709576500\" and a width \"256\" and a height \"256\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
 testRunner.When("I request a Tile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 213
 testRunner.Then("the Tile result should be", @"{
  ""tileData"": ""iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAABnRSTlMA/wD/AP83WBt9AAACm0lEQVR42u3TQQEAMAgAIe1f0fdyLMhBB/beQNYKQJkApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlAmgCkCUCaAKQJQJoApAlA2gcVQcMQ9LN5NwAAAABJRU5ErkJggg=="",
  ""tileOutsideProjectExtents"": false,
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Palettes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetPalettes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Palettes", ((string[])(null)));
#line 223
  this.ScenarioSetup(scenarioInfo);
#line 224
 testRunner.Given("the Compaction Palettes service URI \"/api/v2/compaction/colorpalettes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 225
 testRunner.When("I request Palettes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 226
 testRunner.Then("the Palettes result should be", "{\n  \"elevationPalette\": {\n    \"colorValues\": [\n      {\n        \"color\": 16711680," +
                    "\n        \"value\": 0\n      },\n      {\n        \"color\": 14760960,\n        \"value\":" +
                    " 68.965517241379317\n      },\n      {\n        \"color\": 16734720,\n        \"value\":" +
                    " 137.93103448275863\n      },\n      {\n        \"color\": 16744960,\n        \"value\":" +
                    " 206.89655172413796\n      },\n      {\n        \"color\": 16755200,\n        \"value\":" +
                    " 275.86206896551727\n      },\n      {\n        \"color\": 16762880,\n        \"value\":" +
                    " 344.82758620689657\n      },\n      {\n        \"color\": 16768000,\n        \"value\":" +
                    " 413.79310344827593\n      },\n      {\n        \"color\": 16442880,\n        \"value\":" +
                    " 482.75862068965523\n      },\n      {\n        \"color\": 14476800,\n        \"value\":" +
                    " 551.72413793103453\n      },\n      {\n        \"color\": 13821440,\n        \"value\":" +
                    " 620.68965517241384\n      },\n      {\n        \"color\": 13166080,\n        \"value\":" +
                    " 689.65517241379314\n      },\n      {\n        \"color\": 11855360,\n        \"value\":" +
                    " 758.62068965517244\n      },\n      {\n        \"color\": 9889280,\n        \"value\": " +
                    "827.58620689655186\n      },\n      {\n        \"color\": 8578560,\n        \"value\": 8" +
                    "96.55172413793116\n      },\n      {\n        \"color\": 6615040,\n        \"value\": 96" +
                    "5.51724137931046\n      },\n      {\n        \"color\": 65280,\n        \"value\": 1034." +
                    "4827586206898\n      },\n      {\n        \"color\": 61540,\n        \"value\": 1103.448" +
                    "2758620691\n      },\n      {\n        \"color\": 59010,\n        \"value\": 1172.413793" +
                    "1034484\n      },\n      {\n        \"color\": 59030,\n        \"value\": 1241.379310344" +
                    "8277\n      },\n      {\n        \"color\": 59060,\n        \"value\": 1310.344827586207" +
                    "\n      },\n      {\n        \"color\": 59080,\n        \"value\": 1379.3103448275863\n  " +
                    "    },\n      {\n        \"color\": 59090,\n        \"value\": 1448.2758620689656\n     " +
                    " },\n      {\n        \"color\": 56540,\n        \"value\": 1517.2413793103449\n      }," +
                    "\n      {\n        \"color\": 51430,\n        \"value\": 1586.2068965517242\n      },\n  " +
                    "    {\n        \"color\": 46320,\n        \"value\": 1655.1724137931037\n      },\n     " +
                    " {\n        \"color\": 38645,\n        \"value\": 1724.137931034483\n      },\n      {\n " +
                    "       \"color\": 30970,\n        \"value\": 1793.1034482758623\n      },\n      {\n    " +
                    "    \"color\": 23295,\n        \"value\": 1862.0689655172416\n      },\n      {\n       " +
                    " \"color\": 18175,\n        \"value\": 1931.0344827586209\n      },\n      {\n        \"c" +
                    "olor\": 255,\n        \"value\": 2000.0000000000002\n      }\n    ],\n    \"aboveLastCol" +
                    "or\": 8388736,\n    \"belowFirstColor\": 16711935\n  },\n  \"cmvDetailPalette\": {\n    \"" +
                    "colorValues\": [\n      {\n        \"color\": 255,\n        \"value\": 0\n      },\n      " +
                    "{\n        \"color\": 65280,\n        \"value\": 36\n      },\n      {\n        \"color\": " +
                    "65280,\n        \"value\": 44\n      },\n      {\n        \"color\": 16711680,\n        \"" +
                    "value\": 80\n      }\n    ],\n    \"aboveLastColor\": 8421504,\n    \"belowFirstColor\": " +
                    "null\n  },\n  \"passCountDetailPalette\": {\n    \"colorValues\": [\n      {\n        \"co" +
                    "lor\": 16763955,\n        \"value\": 1\n      },\n      {\n        \"color\": 16776960,\n " +
                    "       \"value\": 2\n      },\n      {\n        \"color\": 65535,\n        \"value\": 3\n  " +
                    "    },\n      {\n        \"color\": 39423,\n        \"value\": 4\n      },\n      {\n     " +
                    "   \"color\": 13434624,\n        \"value\": 5\n      },\n      {\n        \"color\": 16711" +
                    "935,\n        \"value\": 6\n      },\n      {\n        \"color\": 6684825,\n        \"valu" +
                    "e\": 7\n      },\n      {\n        \"color\": 6697728,\n        \"value\": 8\n      }\n    " +
                    "],\n    \"aboveLastColor\": 3355392,\n    \"belowFirstColor\": null\n  },\n  \"passCountS" +
                    "ummaryPalette\": {\n    \"aboveTargetColor\": 16711680,\n    \"onTargetColor\": 65280,\n" +
                    "    \"belowTargetColor\": 255\n  },\n  \"cutFillPalette\": {\n    \"colorValues\": [\n    " +
                    "  {\n        \"color\": 128,\n        \"value\": -0.2\n      },\n      {\n        \"color\"" +
                    ": 255,\n        \"value\": -0.1\n      },\n      {\n        \"color\": 8421631,\n        " +
                    "\"value\": -0.05\n      },\n      {\n        \"color\": 65280,\n        \"value\": 0\n     " +
                    " },\n      {\n        \"color\": 16744576,\n        \"value\": 0.05\n      },\n      {\n  " +
                    "      \"color\": 16711680,\n        \"value\": 0.1\n      },\n      {\n        \"color\": " +
                    "8388608,\n        \"value\": 0.2\n      }\n    ],\n    \"aboveLastColor\": null,\n    \"be" +
                    "lowFirstColor\": null\n  },\n  \"temperatureSummaryPalette\": {\n    \"aboveTargetColor" +
                    "\": 16711680,\n    \"onTargetColor\": 65280,\n    \"belowTargetColor\": 255\n  },\n  \"cmv" +
                    "SummaryPalette\": {\n    \"aboveTargetColor\": 16711680,\n    \"onTargetColor\": 65280," +
                    "\n    \"belowTargetColor\": 255\n  },\n  \"mdpSummaryPalette\": {\n    \"aboveTargetColor" +
                    "\": 16711680,\n    \"onTargetColor\": 65280,\n    \"belowTargetColor\": 255\n  },\n  \"cmv" +
                    "PercentChangePalette\": {\n    \"colorValues\": [\n      {\n        \"color\": 65280,\n  " +
                    "      \"value\": 10\n      },\n      {\n        \"color\": 16776960,\n        \"value\": 2" +
                    "0\n      },\n      {\n        \"color\": 16744192,\n        \"value\": 40\n      },\n     " +
                    " {\n        \"color\": 16711935,\n        \"value\": 80\n      }\n    ],\n    \"aboveLastC" +
                    "olor\": 16711680,\n    \"belowFirstColor\": 0\n  },\n  \"speedSummaryPalette\": {\n    \"a" +
                    "boveTargetColor\": 8388736,\n    \"onTargetColor\": 65280,\n    \"belowTargetColor\": 6" +
                    "5535\n  },\n  \"temperatureDetailPalette\": {\n    \"colorValues\": [\n      {\n        \"" +
                    "color\": 2971523,\n        \"value\": 70\n      },\n      {\n        \"color\": 4430812,\n" +
                    "        \"value\": 80\n      },\n      {\n        \"color\": 12509169,\n        \"value\":" +
                    " 90\n      },\n      {\n        \"color\": 14479047,\n        \"value\": 100\n      },\n  " +
                    "    {\n        \"color\": 10341991,\n        \"value\": 110\n      },\n      {\n        \"" +
                    "color\": 7053374,\n        \"value\": 120\n      },\n      {\n        \"color\": 3828517," +
                    "\n        \"value\": 130\n      },\n      {\n        \"color\": 16174803,\n        \"value" +
                    "\": 140\n      },\n      {\n        \"color\": 13990524,\n        \"value\": 150\n      }," +
                    "\n      {\n        \"color\": 12660791,\n        \"value\": 160\n      }\n    ],\n    \"abo" +
                    "veLastColor\": 16711680,\n    \"belowFirstColor\": 0\n  },\n  \"Code\": 0,\n  \"Message\": " +
                    "\"success\"\n} ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
