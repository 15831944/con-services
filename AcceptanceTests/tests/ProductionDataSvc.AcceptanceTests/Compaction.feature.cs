// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProductionDataSvc.AcceptanceTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CompactionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Compaction.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Compaction", "I should be able to request compaction data", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Compaction")))
            {
                ProductionDataSvc.AcceptanceTests.CompactionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get CMV Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetCMVSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get CMV Summary", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("the Compaction CMV Summary service URI \"/api/v2/compaction/cmv/summary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.When("I request CMV summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then("the CMV summary result should be", @"{
  ""cmvSummaryData"": {
  ""percentEqualsTarget"": 0.12620950778291964,
  ""percentGreaterThanTarget"": 0,
  ""percentLessThanTarget"": 99.873790492217083,
  ""totalAreaCoveredSqMeters"": 549.56240000000014,
  ""cmvTarget"": {
    ""cmvMachineTarget"": 70.0,
    ""targetVaries"": false
  },
  ""minCMVPercent"": 80,
  ""maxCMVPercent"": 120
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get CMV Details")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetCMVDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get CMV Details", ((string[])(null)));
#line 29
 this.ScenarioSetup(scenarioInfo);
#line 30
  testRunner.Given("the Compaction CMV Details service URI \"/api/v2/compaction/cmv/details\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
  testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
  testRunner.When("I request CMV details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
  testRunner.Then("the CMV details result should be", "{\n\t\"percents\": [\n     95.47749263777871,\r\n      4.5225073622212877,\r\n      0.0,\r\n" +
                    "      0.0,\r\n      0.0\n\t],\n\t\"Code\": 0,\n\t\"Message\": \"success\"\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get MDP Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetMDPSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get MDP Summary", ((string[])(null)));
#line 48
  this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given("the Compaction MDP Summary service URI \"/api/v2/compaction/mdp/summary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.When("I request MDP summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.Then("the MDP result should be", @"{
  ""mdpSummaryData"": {
    ""percentEqualsTarget"": 79.3533176153587,
    ""percentGreaterThanTarget"": 0,
    ""percentLessThanTarget"": 20.646682384641295,
    ""totalAreaCoveredSqMeters"": 1029.6492000000003,
    ""mdpTarget"": {
      ""mdpMachineTarget"": 150.0,
      ""targetVaries"": false
    },
    ""minMDPPercent"": 80,
    ""maxMDPPercent"": 120
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Passcount Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetPasscountSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Passcount Summary", ((string[])(null)));
#line 72
  this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("the Compaction Passcount Summary service URI \"/api/v2/compaction/passcounts/summa" +
                    "ry\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.When("I request Passcount summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
 testRunner.Then("the Passcount summary result should be", @"{
  ""passCountSummaryData"": {
    ""percentEqualsTarget"": 3.3255301569815479,
    ""percentGreaterThanTarget"": 45.311209033324154,
    ""percentLessThanTarget"": 51.3632608096943,
    ""totalAreaCoveredSqMeters"": 1678.9744000000003,
    ""passCountTarget"": {
      ""minPassCountMachineTarget"": 5,
      ""maxPassCountMachineTarget"": 5,
      ""targetVaries"": true
    }
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Passcount Details")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetPasscountDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Passcount Details", ((string[])(null)));
#line 95
 this.ScenarioSetup(scenarioInfo);
#line 96
  testRunner.Given("the Compaction Passcount Details service URI \"/api/v2/compaction/passcounts/detai" +
                    "ls\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 97
  testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
  testRunner.When("I request Passcount details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
  testRunner.Then("the Passcount details result should be", @"{
	""passCountDetailsData"": {
		""percents"": [
			19.632901900694421,
			8.5406274791075756,
			6.160684206522566,
			5.132635651332877,
			4.1589237005401056,
			3.5981699431639118,
			2.8341972853432442,
			2.0126278268618436,
			47.929232006433452
		],
		""totalCoverageArea"": 1678.9744000000003,
		""passCountTarget"": {
			""minPassCountMachineTarget"": 0,
			""maxPassCountMachineTarget"": 0,
			""targetVaries"": true
		}
	},
	""Code"": 0,
	""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Temperature Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetTemperatureSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Temperature Summary", ((string[])(null)));
#line 126
  this.ScenarioSetup(scenarioInfo);
#line 127
 testRunner.Given("the Compaction Temperature Summary service URI \"/api/v2/compaction/temperature/su" +
                    "mmary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 128
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
 testRunner.When("I request Temperature summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 130
 testRunner.Then("the Temperature result should be", @"{
  ""temperatureSummaryData"": {
    ""percentEqualsTarget"": 0,
    ""percentGreaterThanTarget"": 0,
    ""percentLessThanTarget"": 100,
    ""totalAreaCoveredSqMeters"": 953.93120000000022,
    ""temperatureTarget"": {
      ""minTemperatureMachineTarget"": 90.0,
      ""maxTemperatureMachineTarget"": 143.0,
      ""targetVaries"": false
    }
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Speed Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetSpeedSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Speed Summary", ((string[])(null)));
#line 149
  this.ScenarioSetup(scenarioInfo);
#line 150
 testRunner.Given("the Compaction Speed Summary service URI \"/api/v2/compaction/speed/summary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 151
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.When("I request Speed summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 153
 testRunner.Then("the Speed result should be", @"{
  ""speedSummaryData"": {
    ""percentEqualsTarget"": 9.4,
    ""percentGreaterThanTarget"": 21.5,
    ""percentLessThanTarget"": 69.1,
    ""totalAreaCoveredSqMeters"": 10636.7028,
    ""minTarget"": 12.0,
    ""maxTarget"": 15.0
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get CMV % Change Summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetCMVChangeSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get CMV % Change Summary", ((string[])(null)));
#line 169
  this.ScenarioSetup(scenarioInfo);
#line 170
 testRunner.Given("the Compaction CMV % Change Summary service URI \"/api/v2/compaction/cmv/percentch" +
                    "ange\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 171
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.When("I request CMV % change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 173
 testRunner.Then("the CMV % Change result should be", "{\n  \"cmvChangeData\": {\n    \"percents\": [\n      4.9875827814569531,\n      12.60347" +
                    "6821192054,\n      20.695364238410598,\n      61.7135761589404\n    ],\n    \"totalAr" +
                    "eaCoveredSqMeters\": 558.57920000000013\n  },\n  \"Code\": 0,\n  \"Message\": \"success\"\n" +
                    "}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Elevation Range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetElevationRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Elevation Range", ((string[])(null)));
#line 190
  this.ScenarioSetup(scenarioInfo);
#line 191
 testRunner.Given("the Compaction Elevation Range service URI \"/api/v2/compaction/elevationrange\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 192
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
 testRunner.When("I request Elevation Range", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 194
 testRunner.Then("the Elevation Range result should be", @"{
  ""boundingExtents"": {
    ""maxX"": -115.01824137935459,
    ""maxY"": 36.2077397408003,
    ""maxZ"": 1e+308,
    ""minX"": -115.02513694938636,
    ""minY"": 36.206563325785218,
    ""minZ"": 1e+308
  },
  ""minElevation"": 591.9539794921875,
  ""maxElevation"": 624.0980224609375,
  ""totalCoverageArea"": 10637.396400000001,
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Project Statistics")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetProjectStatistics()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Project Statistics", ((string[])(null)));
#line 213
  this.ScenarioSetup(scenarioInfo);
#line 214
 testRunner.Given("the Compaction Project Statistics service URI \"/api/v2/compaction/projectstatisti" +
                    "cs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 215
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.When("I request Project Statistics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 217
 testRunner.Then("the Project Statistics result should be", @"{
  ""startTime"": ""2012-10-30T00:12:09.109"",
  ""endTime"": ""2012-11-08T01:00:08.756"",
  ""cellSize"": 0.34,
  ""indexOriginOffset"": 536870912,
  ""extents"": {
    ""maxX"": 2913.2900000000004,
    ""maxY"": 1250.69,
    ""maxZ"": 624.1365966796875,
    ""minX"": 2306.05,
    ""minY"": 1125.2300000000002,
    ""minZ"": 591.953857421875
  },
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Tiles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetTiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Tiles", ((string[])(null)));
#line 237
  this.ScenarioSetup(scenarioInfo);
#line 238
 testRunner.Given("the Compaction Tiles service URI \"/api/v2/compaction/tiles\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 239
 testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
  testRunner.And("a displayMode \"0\" and a bbox \"36.206964000089840283, -115.0203540002853231, 36.20" +
                    "6956000089640213, -115.02034400028509253\" and a width \"256\" and a height \"256\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 241
 testRunner.When("I request a Tile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 242
 testRunner.Then("the Tile result should be", @"{
  ""TileData"": ""iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAABnRSTlMA/wD/AP83WBt9AAADi0lEQVR42u3TQU0FARQEQdYNmpCD8Y8FLpPNS1cp6Es/n58vJr7fDuAfHgOsGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4AIDzBjgAgPMGOACA8wY4ILn8/t2ArzHAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI+wPL4oIQ8iSaXgAAAABJRU5ErkJggg=="",
  ""TileOutsideProjectExtents"": false,
  ""Code"": 0,
  ""Message"": ""success""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Compaction Get Palettes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Compaction")]
        public virtual void CompactionGetPalettes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compaction Get Palettes", ((string[])(null)));
#line 252
  this.ScenarioSetup(scenarioInfo);
#line 253
 testRunner.Given("the Compaction Palettes service URI \"/api/v2/compaction/colorpalettes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 254
  testRunner.And("a projectUid \"ff91dd40-1569-4765-a2bc-014321f76ace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
 testRunner.When("I request Palettes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 256
 testRunner.Then("the Palettes result should be", "{\r\n  \"elevationPalette\": {\r\n    \"colorValues\": [\r\n      {\r\n        \"color\": 16711" +
                    "680,\r\n        \"value\": 591.9539794921875\r\n      },\r\n      {\r\n        \"color\": 14" +
                    "760960,\r\n        \"value\": 593.062394766972\r\n      },\r\n      {\r\n        \"color\": " +
                    "16734720,\r\n        \"value\": 594.17081004175645\r\n      },\r\n      {\r\n        \"colo" +
                    "r\": 16744960,\r\n        \"value\": 595.279225316541\r\n      },\r\n      {\r\n        \"co" +
                    "lor\": 16755200,\r\n        \"value\": 596.38764059132541\r\n      },\r\n      {\r\n       " +
                    " \"color\": 16762880,\r\n        \"value\": 597.49605586610994\r\n      },\r\n      {\r\n   " +
                    "     \"color\": 16768000,\r\n        \"value\": 598.60447114089436\r\n      },\r\n      {\r" +
                    "\n        \"color\": 16442880,\r\n        \"value\": 599.7128864156789\r\n      },\r\n     " +
                    " {\r\n        \"color\": 14476800,\r\n        \"value\": 600.82130169046332\r\n      },\r\n " +
                    "     {\r\n        \"color\": 13821440,\r\n        \"value\": 601.92971696524785\r\n      }" +
                    ",\r\n      {\r\n        \"color\": 13166080,\r\n        \"value\": 603.03813224003238\r\n   " +
                    "   },\r\n      {\r\n        \"color\": 11855360,\r\n        \"value\": 604.1465475148168\r\n" +
                    "      },\r\n      {\r\n        \"color\": 9889280,\r\n        \"value\": 605.2549627896013" +
                    "4\r\n      },\r\n      {\r\n        \"color\": 8578560,\r\n        \"value\": 606.3633780643" +
                    "8576\r\n      },\r\n      {\r\n        \"color\": 6615040,\r\n        \"value\": 607.4717933" +
                    "3917029\r\n      },\r\n      {\r\n        \"color\": 65280,\r\n        \"value\": 608.580208" +
                    "61395471\r\n      },\r\n      {\r\n        \"color\": 61540,\r\n        \"value\": 609.68862" +
                    "388873924\r\n      },\r\n      {\r\n        \"color\": 59010,\r\n        \"value\": 610.7970" +
                    "3916352366\r\n      },\r\n      {\r\n        \"color\": 59030,\r\n        \"value\": 611.905" +
                    "4544383082\r\n      },\r\n      {\r\n        \"color\": 59060,\r\n        \"value\": 613.013" +
                    "86971309262\r\n      },\r\n      {\r\n        \"color\": 59080,\r\n        \"value\": 614.12" +
                    "228498787715\r\n      },\r\n      {\r\n        \"color\": 59090,\r\n        \"value\": 615.2" +
                    "3070026266168\r\n      },\r\n      {\r\n        \"color\": 56540,\r\n        \"value\": 616." +
                    "3391155374461\r\n      },\r\n      {\r\n        \"color\": 51430,\r\n        \"value\": 617." +
                    "44753081223064\r\n      },\r\n      {\r\n        \"color\": 46320,\r\n        \"value\": 618" +
                    ".55594608701506\r\n      },\r\n      {\r\n        \"color\": 38645,\r\n        \"value\": 61" +
                    "9.66436136179959\r\n      },\r\n      {\r\n        \"color\": 30970,\r\n        \"value\": 6" +
                    "20.772776636584\r\n      },\r\n      {\r\n        \"color\": 23295,\r\n        \"value\": 62" +
                    "1.88119191136855\r\n      },\r\n      {\r\n        \"color\": 18175,\r\n        \"value\": 6" +
                    "22.989607186153\r\n      },\r\n      {\r\n        \"color\": 255,\r\n        \"value\": 624." +
                    "0980224609375\r\n      }\r\n    ],\r\n    \"aboveLastColor\": 8388736,\r\n    \"belowFirstC" +
                    "olor\": 16711935\r\n  },\r\n  \"cmvDetailPalette\": {\r\n    \"colorValues\": [\r\n      {\r\n " +
                    "       \"color\": 8421504,\r\n        \"value\": 0.0\r\n      },\r\n      {\r\n        \"colo" +
                    "r\": 255,\r\n        \"value\": 20.0\r\n      },\r\n      {\r\n        \"color\": 65280,\r\n   " +
                    "     \"value\": 70.0\r\n      },\r\n      {\r\n        \"color\": 65280,\r\n        \"value\":" +
                    " 71.0\r\n      },\r\n      {\r\n        \"color\": 16711680,\r\n        \"value\": 101.0\r\n  " +
                    "    }\r\n    ],\r\n    \"aboveLastColor\": null,\r\n    \"belowFirstColor\": null\r\n  },\r\n " +
                    " \"passCountDetailPalette\": {\r\n    \"colorValues\": [\r\n      {\r\n        \"color\": 16" +
                    "763955,\r\n        \"value\": 1.0\r\n      },\r\n      {\r\n        \"color\": 16776960,\r\n  " +
                    "      \"value\": 2.0\r\n      },\r\n      {\r\n        \"color\": 65535,\r\n        \"value\":" +
                    " 3.0\r\n      },\r\n      {\r\n        \"color\": 39423,\r\n        \"value\": 4.0\r\n      }," +
                    "\r\n      {\r\n        \"color\": 13434624,\r\n        \"value\": 5.0\r\n      },\r\n      {\r\n" +
                    "        \"color\": 16711935,\r\n        \"value\": 6.0\r\n      },\r\n      {\r\n        \"co" +
                    "lor\": 6684825,\r\n        \"value\": 7.0\r\n      },\r\n      {\r\n        \"color\": 669772" +
                    "8,\r\n        \"value\": 8.0\r\n      }\r\n    ],\r\n    \"aboveLastColor\": 3355392,\r\n    \"" +
                    "belowFirstColor\": null\r\n  },\r\n  \"passCountSummaryPalette\": {\r\n    \"aboveTargetCo" +
                    "lor\": 16711680,\r\n    \"onTargetColor\": 65280,\r\n    \"belowTargetColor\": 255\r\n  },\r" +
                    "\n  \"cutFillPalette\": {\r\n    \"colorValues\": [\r\n      {\r\n        \"color\": 128,\r\n  " +
                    "      \"value\": -0.2\r\n      },\r\n      {\r\n        \"color\": 255,\r\n        \"value\": " +
                    "-0.1\r\n      },\r\n      {\r\n        \"color\": 8421631,\r\n        \"value\": -0.05\r\n    " +
                    "  },\r\n      {\r\n        \"color\": 65280,\r\n        \"value\": 0.0\r\n      },\r\n      {\r" +
                    "\n        \"color\": 16744576,\r\n        \"value\": 0.05\r\n      },\r\n      {\r\n        \"" +
                    "color\": 16711680,\r\n        \"value\": 0.1\r\n      },\r\n      {\r\n        \"color\": 838" +
                    "8608,\r\n        \"value\": 0.2\r\n      }\r\n    ],\r\n    \"aboveLastColor\": null,\r\n    \"" +
                    "belowFirstColor\": null\r\n  },\r\n  \"temperatureSummaryPalette\": {\r\n    \"aboveTarget" +
                    "Color\": 16711680,\r\n    \"onTargetColor\": 65280,\r\n    \"belowTargetColor\": 255\r\n  }" +
                    ",\r\n  \"cmvSummaryPalette\": {\r\n    \"aboveTargetColor\": 16711680,\r\n    \"onTargetCol" +
                    "or\": 65280,\r\n    \"belowTargetColor\": 255\r\n  },\r\n  \"mdpSummaryPalette\": {\r\n    \"a" +
                    "boveTargetColor\": 16711680,\r\n    \"onTargetColor\": 65280,\r\n    \"belowTargetColor\"" +
                    ": 255\r\n  },\r\n  \"cmvPercentChangePalette\": {\r\n    \"colorValues\": [\r\n      {\r\n    " +
                    "    \"color\": 65280,\r\n        \"value\": 5.0\r\n      },\r\n      {\r\n        \"color\": 6" +
                    "5535,\r\n        \"value\": 20.0\r\n      },\r\n      {\r\n        \"color\": 16711680,\r\n   " +
                    "     \"value\": 50.0\r\n      }\r\n    ],\r\n    \"aboveLastColor\": 16776960,\r\n    \"below" +
                    "FirstColor\": 33554431\r\n  },\r\n  \"speedSummaryPalette\": {\r\n    \"aboveTargetColor\":" +
                    " 8388736,\r\n    \"onTargetColor\": 65280,\r\n    \"belowTargetColor\": 65535\r\n  },\r\n  \"" +
                    "temperatureDetailPalette\": {\r\n    \"colorValues\": [\r\n      {\r\n        \"color\": 29" +
                    "71523,\r\n        \"value\": 70.0\r\n      },\r\n      {\r\n        \"color\": 4430812,\r\n   " +
                    "     \"value\": 80.0\r\n      },\r\n      {\r\n        \"color\": 12509169,\r\n        \"valu" +
                    "e\": 90.0\r\n      },\r\n      {\r\n        \"color\": 14479047,\r\n        \"value\": 100.0\r" +
                    "\n      },\r\n      {\r\n        \"color\": 10341991,\r\n        \"value\": 110.0\r\n      }," +
                    "\r\n      {\r\n        \"color\": 7053374,\r\n        \"value\": 120.0\r\n      },\r\n      {\r" +
                    "\n        \"color\": 3828517,\r\n        \"value\": 130.0\r\n      },\r\n      {\r\n        \"" +
                    "color\": 16174803,\r\n        \"value\": 140.0\r\n      },\r\n      {\r\n        \"color\": 1" +
                    "3990524,\r\n        \"value\": 150.0\r\n      },\r\n      {\r\n        \"color\": 12660791,\r" +
                    "\n        \"value\": 160.0\r\n      }\r\n    ],\r\n    \"aboveLastColor\": null,\r\n    \"belo" +
                    "wFirstColor\": null\r\n  },\r\n  \"Code\": 0,\r\n  \"Message\": \"success\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
