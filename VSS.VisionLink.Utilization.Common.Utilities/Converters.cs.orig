using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VSS.VisionLink.Interfaces.Events.Telematics.Machine;
using VSS.VisionLink.Interfaces.Events.Telematics.Machine.Interfaces;
using VSS.VisionLink.Utilization.Common.Models;

namespace VSS.VisionLink.Utilization.Common.Utilities
{
  public static class Converters
  {
    public static TimeStampedEvent ConvertFromMachineEvent(this TimeStampedEvent eventIn, IMachineEvent evt)
    {
      eventIn.AssetUid = evt.Asset.AssetUid;
      eventIn.EventUtc = evt.Timestamp.EventUtc;
      eventIn.EventDeviceTime = DateTimeOffset.Parse(evt.Timestamp.Iso8601EventDeviceTime).DateTime;
      eventIn.EventKeyDate = DateTimeOffset.Parse(evt.Timestamp.Iso8601EventDeviceTime).DateTime.KeyDate();
      eventIn.EventType = MachineEventType(evt);
      return eventIn;
    }

    public static EventTypeEnum MachineEventType(IMachineEvent evt)
    {
      if (evt is EngineOperatingStatusEvent)
      {
        var tEvt = evt as EngineOperatingStatusEvent;
        if (tEvt.State == "EngineOn")
          return EventTypeEnum.EngineStart;
        if (tEvt.State == "EngineOff")
          return EventTypeEnum.EngineStop;
      }

      if (evt is MovingEvent)
      {
        var tEvt = evt as MovingEvent;
        return tEvt.IsStart ? EventTypeEnum.StartMoving : EventTypeEnum.StopMoving;
      }

      if (evt is SwitchStateEvent)
      {
        var tEvt = evt as SwitchStateEvent;
<<<<<<< HEAD
        return tEvt.IoState ? EventTypeEnum.SwitchActive : EventTypeEnum.SwitchInActive;
=======
        return tEvt.IoState  ? EventTypeEnum.StartWorking : EventTypeEnum.StopWorking;
>>>>>>> Dev
      }

      return EventTypeEnum.None;
    }
  }
}
