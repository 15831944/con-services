<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Morph.Service.Core</name>
    </assembly>
    <members>
        <member name="T:Morph.Services.Core.DataModel.Ditch3D">
            <summary>
            Represents an instance of a ditch using <see cref="T:System.Windows.Media.Media3D.Point3D"/> points.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Ditch3D.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Ditch3D.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Create an instance with the specified sequence of points.
            </summary>
            <param name="points">The sequence of points.</param>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Ditch3D.PointIndices">
            <summary>
            Indices of the points of this ditch in the surface.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.DataModel.GlobalMercator">
            <summary>
            Conversion routines for Google, TMS, and Microsoft Quadtree tile representations, derived from
            http://www.maptiler.org/google-maps-coordinates-tile-bounds-projection/.
            
            And translated to layman terms... We used this for figuring out where to place
            a background image in world coordinates. The TPaaS API we used returned a zipped
            file. Unpacked, it had a folder structure like this:
                18
                    98957
                        54614.jpg
                        54615.jpg
                        54616.jpg
                        54617.jpg
                        54618.jpg
                        54619.jpg
                    98958  
                    98959
                    98960
                    98961
            The latitude/longitude of the corners of the images are encoded in the folder and
            file names. '18' is an example of the zoom level. '98957' and the file name encode
            the latitude/longitude. Here is an example of using it:
            
            Parse the folder and file structure, then pass in the zoomlevel, folder and image
            name...
               public Point CornerLatLong(int zoomLevel, int folderName, int imageName)
               {
                   var tile    = new Tile(imageName, folderName);
                   var tmsTile = GlobalMercator.ToTmsTile(tile, zoomLevel);
                   var rect    = GlobalMercator.TileLatLonBounds(tmsTile, zoomLevel);
                   return new Point(rect.Bottom, rect.Left);
               }
            The returned point contains the top-left corner of the image (not the lower-left).
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.LatLonToMeters(System.Double,System.Double)">
            <summary>
            Converts given lat/lon in WGS84 Datum to XY in Spherical Mercator EPSG:900913
            </summary>
            <param name="lat"></param>
            <param name="lon"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.MetersToLatLon(System.Windows.Point)">
            <summary>
            Converts XY point from (Spherical) Web Mercator EPSG:3785 (unofficially EPSG:900913) to lat/lon in WGS84 Datum
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.PixelsToMeters(System.Windows.Point,System.Int32)">
            <summary>
            Converts pixel coordinates in given zoom level of pyramid to EPSG:900913
            </summary>
            <param name="p"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.MetersToPixels(System.Windows.Point,System.Int32)">
            <summary>
            Converts EPSG:900913 to pyramid pixel coordinates in given zoom level
            </summary>
            <param name="m"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.PixelsToTile(System.Windows.Point)">
            <summary>
            Returns a TMS (NOT Google!) tile covering region in given pixel coordinates
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.PixelsToRaster(System.Windows.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.MetersToTile(System.Windows.Point,System.Int32)">
            <summary>
            Returns tile for given mercator coordinates
            </summary>
            <param name="m"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.TileBounds(Morph.Services.Core.DataModel.Tile,System.Int32)">
            <summary>
            Returns bounds of the given tile in EPSG:900913 coordinates
            </summary>
            <param name="t"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.TileLatLonBounds(Morph.Services.Core.DataModel.Tile,System.Int32)">
            <summary>
            Returns bounds of the given tile in latutude/longitude using WGS84 datum
            </summary>
            <param name="t"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.Resolution(System.Int32)">
            <summary>
            Resolution (meters/pixel) for given zoom level (measured at Equator)
            </summary>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.ZoomForPixelSize(System.Double)">
            <summary>
            
            </summary>
            <param name="pixelSize"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.ToGoogleTile(Morph.Services.Core.DataModel.Tile,System.Int32)">
            <summary>
            Switch to Google Tile representation from TMS
            </summary>
            <param name="t"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.ToTmsTile(Morph.Services.Core.DataModel.Tile,System.Int32)">
            <summary>
            Switch to TMS Tile representation from Google
            </summary>
            <param name="t"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.QuadTree(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts TMS tile coordinates to Microsoft QuadTree
            </summary>
            <param name="tx"></param>
            <param name="ty"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.QuadTreeToTile(System.String,System.Int32)">
            <summary>
            Converts a quadtree to tile coordinates
            </summary>
            <param name="quadtree"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.LatLonToQuadTree(System.Windows.Point,System.Int32)">
            <summary>
            Converts a latitude and longitude to quadtree at the specified zoom level
            </summary>
            <param name="latLon"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.QuadTreeToLatLon(System.String)">
            <summary>
            Converts a quadtree location into a latitude/longitude bounding rectangle
            </summary>
            <param name="quadtree"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.GlobalMercator.GetQuadTreeList(System.Int32,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns a list of all of the quadtree locations at a given zoom level within a latitude/longude box
            </summary>
            <param name="zoom"></param>
            <param name="latLonMin"></param>
            <param name="latLonMax"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Tile">
            <summary>
            Reference to a Tile X, Y index. This is used by the GlobalMercator class.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Tile.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Tile.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Tile.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Tile.Y">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Flow3D">
            <summary>
            Represents a flow segment between to grid points.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Flow3D.Quantity">
            <summary>
            Represents the magnitude of the flow in this instance.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Flow3D.#ctor">
            <summary>
            Constructs an empty flow segment.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Flow3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Double)">
            <summary>
            Constructs a segment given two points.
            </summary>
            <param name="point1">Initial point.</param>
            <param name="point2">Final point.</param>
            <param name="quantity">The quantity of this instance.</param>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Hinge">
            <summary>
            Represents a segment in 3D with optional constraints for main slope and cross slopes left and right.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Hinge.#ctor">
            <summary>
            Constructs and empty hinge.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Hinge.#ctor(System.String,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Constructs a hinge given two points.
            </summary>
            <param name="tag">Tag of this instance.</param>
            <param name="point1">Initial point.</param>
            <param name="point2">Final point.</param>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Hinge.Tag">
            <summary>
            Any object associated with this instance. 
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Hinge.MainSlope">
            <summary>
            The desired slope along this segment.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Hinge.CrossSlopeRight">
            <summary>
            The desired slope accross the right region of this segment.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Hinge.CrossSlopeLeft">
            <summary>
            The desired slope accross the left region of this segment.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Hinge.ToString">
            <summary>
            Returns a string that represents the current segment.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Hinge.FromPoints(System.String,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Creates a segment instance given two points.
            </summary>
            <param name="tag">Tag of this instance.</param>
            <param name="point1">point1</param>
            <param name="point2">point2</param>
            <returns>the hinge instance.</returns>
        </member>
        <member name="T:Morph.Services.Core.DataModel.LocalPlaneSystem">
            <summary>
            Utility class to transform Lat,Lon,Alt to X,Y,Z and E,N,U
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.LocalPlaneSystem.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Morph.Services.Core.DataModel.LocalPlaneSystem" /> class.
            </summary>
            <param name="originLat">The origin_lat.</param>
            <param name="originLon">The origin_lon.</param>
            <param name="originAlt">The origin_alt.</param>
            <param name="falseEast">The false_east.</param>
            <param name="falseNorth">The false_north.</param>
            <param name="falseUp">The false_up.</param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.LocalPlaneSystem.Project(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Projects the specified lat, lon, alt to Easting, Northing, Up.
            </summary>
            <param name="lat">The lat.</param>
            <param name="lon">The lon.</param>
            <param name="alt">The alt.</param>
            <param name="pe">The pe.</param>
            <param name="pn">The pn.</param>
            <param name="pu">The pu.</param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.LocalPlaneSystem.Unproject(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="n"></param>
            <param name="u"></param>
            <param name="plat"></param>
            <param name="plon"></param>
            <param name="palt"></param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.LocalPlaneSystem.LlAtoXyz(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="lat"></param>
            <param name="lon"></param>
            <param name="alt"></param>
            <param name="px"></param>
            <param name="py"></param>
            <param name="pz"></param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.LocalPlaneSystem.XyZtoEnu(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="pe"></param>
            <param name="pn"></param>
            <param name="pu"></param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.LocalPlaneSystem.XyZtoLla(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="plat"></param>
            <param name="plon"></param>
            <param name="palt"></param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.LocalPlaneSystem.EnUtoXyz(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="n"></param>
            <param name="u"></param>
            <param name="px"></param>
            <param name="py"></param>
            <param name="pz"></param>
        </member>
        <member name="T:Morph.Services.Core.DataModel.MaterialProperties">
            <summary>
            This class supports calculation of material properties: shrinkage, bulkage, and haul compaction.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.MaterialProperties.#ctor">
            <summary>
            Creates an instance with default values for all material properties.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.MaterialProperties.Shrinkage">
            <summary>
            The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.MaterialProperties.ShrinkageRatio">
            <summary>
            The factor to convert from bank cut volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.MaterialProperties.Bulkage">
            <summary>
            The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.MaterialProperties.BulkageRatio">
            <summary>
            The factor to convert from bank cut volumes to loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.MaterialProperties.HaulCompaction">
            <summary>
            The percentage volume reduction between loose haul and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.MaterialProperties.HaulCompactionRatio">
            <summary>
            The factor use to compute from loose haul volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.MaterialProperties.CutFillRatio">
            <summary>
            The factor use to compute from bank fill volumes to bank cut volumes.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.MaterialProperties.ComputeHaulCompaction(System.Double,System.Double)">
            <summary>
            Computes and stores haul compaction from the given shrinkage and bulkage.
            </summary>
            <param name="shrinkage">The shrinkage percentage value between 0 and 1.</param>
            <param name="bulkage">The bulkage percentage value between 0 and 1.</param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.MaterialProperties.ComputeShrinkage(System.Double,System.Double)">
            <summary>
            Computes and stores shrinkage from the given bulkage and haul compaction.
            </summary>
            <param name="bulkage">The shrinkage percentage value between 0 and 1.</param>
            <param name="haulCompaction">The bulkage percentage value between 0 and 1.</param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.MaterialProperties.ComputeBulkage(System.Double,System.Double)">
            <summary>
            Computes and stores bulkage from the given haul compaction and shrinkage.
            </summary>
            <param name="haulCompaction">The bulkage percentage value between 0 and 1.</param>
            <param name="shrinkage">The shrinkage percentage value between 0 and 1.</param>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Segment3D">
            <summary>
            Represents a line segment in 3D.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment3D.#ctor">
            <summary>
            Constructs an empty segment.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Constructs a segment given two points.
            </summary>
            <param name="point1">Initial point.</param>
            <param name="point2">Final point.</param>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment3D.Point1">
            <summary>
            Initial point.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment3D.Point2">
            <summary>
            Final point.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment3D.Direction">
            <summary>
            The normal vector in the direction of this segment.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment3D.Length">
            <summary>
            The length of the segment (distance between its two points).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment3D.DeltaX">
            <summary>
            The X distance between the two points.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment3D.DeltaY">
            <summary>
            The Y distance between the two points.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment3D.DeltaZ">
            <summary>
            The Y distance between the two points.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment3D.ToSegment">
            <summary>
            Downcast a <see cref="T:Morph.Services.Core.DataModel.Segment3D"/> to a <see cref="T:Morph.Services.Core.DataModel.Segment"/> by removing the <c>z</c> component to both points.
            </summary>
            <returns>The <see cref="T:Morph.Services.Core.DataModel.Segment"/> instance.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment3D.ToString">
            <summary>
            Returns a string that represents the current segment.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment3D.FromPoints(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Creates a segment instance given two points.
            </summary>
            <param name="point1">point1</param>
            <param name="point2">point2</param>
            <returns>the segment</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment3D.FromPoints(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Creates a list of segments using the given list of points.
            </summary>
            <param name="points">the list of points</param>
            <returns>the list of segments</returns>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Segment3DExtensions">
            <summary>
            Extensions to <see cref="T:Morph.Services.Core.DataModel.Segment3D"/> class.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment3DExtensions.SetFloating(Morph.Services.Core.DataModel.Segment3D)">
            <summary>
            Marks this segment instance to float by setting the <c>Z</c> value of both points to <c>NaN</c>.
            </summary>
            <param name="segment">The segment instance.</param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment3DExtensions.IsFloating(Morph.Services.Core.DataModel.Segment3D)">
            <summary>
            Returns <c>true</c> if this instance is marks as floating (i.e., the <c>Z</c> component of any points is set to <c>NaN</c>.
            </summary>
            <param name="segment">The segment instance.</param>
            <returns>Returns <c>true</c> if the segment instance is marked to float.</returns>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Design">
            <summary>
            Represents the solution of a land leveling problem.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Design.mPlanes">
            <summary>
            The planes in this design (if any).
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Design.mHinges">
            <summary>
            The hinges in this design (if any).
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Design.mSubzones">
            <summary>
            The subzones in this design (if any).
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Design.mSurface">
            <summary>
            The original surface in this design.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Design.mCutFillSurface">
            <summary>
            The cut/fill surface in this design.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Design.mPipeline">
            <summary>
            The pipeline used in this design (if any).
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Design.mRows">
            <summary>
            The rows used in this design (if any).
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Design.mCols">
            <summary>
            The columns used in this design (if any).
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Design.mDitches">
            <summary>
            Ditches
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Design.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.Planes">
            <summary>
            Accessor to the list of <see cref="T:Morph.Services.Core.DataModel.Plane"/> instances.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.Hinges">
            <summary>
            Accessor to the list of hinge (<see cref="T:Morph.Services.Core.DataModel.Segment3D"/>) instances.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.Ditches">
            <summary>
            Accessor to the list of ditch (<see cref="T:Morph.Services.Core.DataModel.Ditch3D"/>) instances.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.Subzones">
            <summary>
            Accessor to the list of <see cref="T:Morph.Services.Core.DataModel.Subzone"/> instances.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.Pipeline">
            <summary>
            Accessor to the pipeline (if any).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.Rows">
            <summary>
            Accessor to the list of rows (if any).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.Columns">
            <summary>
            Accessor to the list of columns (if any).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.Surface">
            <summary>
            Design surface information (if any).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.CutFillSurface">
            <summary>
            Cut/Fill surface information (if any).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.CellSize">
            <summary>
            Cell size used in the design grid (if any).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.TotalCut">
            <summary>
            Total cut volume.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.TotalFill">
            <summary>
            Total fill volume.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.TotalShrinkage">
            <summary>
            The percentage volume reduction between total bank cut and total bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.TotalBulkage">
            <summary>
            The percentage volume expansion between total bank cut and total loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.TotalFlatArea">
            <summary>
            Total flat area of the design surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.TotalSurfaceArea">
            <summary>
            Total surface area of the design surfce.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Design.TotalOriginalArea">
            <summary>
            Total surface area of the original surfce.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Design.Save(System.String)">
            <summary>
            Saves the content of this instance in an xml file.
            </summary>
            <param name="filename">The xml filename.</param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Design.Load(System.String)">
            <summary>
            Return a <see cref="T:Morph.Services.Core.DataModel.Design"/> instance initialized witht the contents of the specified filename.
            </summary>
            <param name="xmlFilename">The xml filename.</param>
            <returns>The new <see cref="T:Morph.Services.Core.DataModel.Design"/> instance.</returns>
        </member>
        <member name="T:Morph.Services.Core.DataModel.XmlDesign">
            <summary>
            This class encapsulates the details of serializing <see cref="T:Morph.Services.Core.DataModel.Design"/> instances to XML.
            <c>It is not supposed to be used directly.</c>
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.XmlDesign.FromPlanes(System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Plane},System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Hinge},Morph.Services.Core.Interfaces.ISurfaceInfo,Morph.Services.Core.Interfaces.ISurfaceInfo)">
            <summary>
            Creates an instance of <see cref="T:Morph.Services.Core.DataModel.XmlDesign"/> based on an enumeration of planes.
            </summary>
            <param name="planes">The enumeration of planes.</param>
            <param name="hinges">The enumeration of hinges (if any).</param>
            <param name="surface">The design surface instance.</param>
            <param name="cutFillSurface">The cut/fill surface instance.</param>
            <returns>The initialized instance.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.XmlDesign.CopyPlanerInfoToDesign(System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Plane},System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Hinge},Morph.Services.Core.DataModel.Design)">
            <summary>
            Creates an instance of <see cref="T:Morph.Services.Core.DataModel.XmlDesign"/> based on an enumeration of planes, hinges and design information
            </summary>
            <param name="planes">The enumeration of planes.</param>
            <param name="hinges">The enumeration of hinges (if any).</param>
            <param name="design">The design surface instance.</param>
            <returns>The initialized instance.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.XmlDesign.FromSubzones(System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Subzone},Morph.Services.Core.Interfaces.ISurfaceInfo,Morph.Services.Core.Interfaces.ISurfaceInfo)">
            <summary>
            Creates an instance of <see cref="T:Morph.Services.Core.DataModel.XmlDesign"/> based on an enumeration of subzones.
            </summary>
            <param name="subzones">The enumeration of subzones.</param>
            <param name="surface">The design surface instance.</param>
            <param name="cutFillSurface">The cut/fill surface instance.</param>
            <returns>The initialized instance.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.XmlDesign.FromSurface(Morph.Services.Core.Interfaces.ISurfaceInfo,Morph.Services.Core.Interfaces.ISurfaceInfo,System.Collections.Generic.IList{Morph.Services.Core.DataModel.Ditch3D})">
            <summary>
            Create an instance of <see cref="T:Morph.Services.Core.DataModel.XmlDesign"/> based on a target surface instance and its cut/fill surface.
            </summary>
            <param name="surface">The target surface instance.</param>
            <param name="cutFillSurface">The cut/fill surface instance.</param>
            <param name="ditches">ditches. Optional.</param>
            <returns>The initialized instance.</returns>
        </member>
        <member name="P:Morph.Services.Core.DataModel.XmlDesign.XmlPlanes">
            <summary>
            Array of plane instances.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.XmlDesign.XmlHinges">
            <summary>
            Array of hinge instances.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.XmlDesign.XmlSubzones">
            <summary>
            Array of subzone instances.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.XmlDesign.XmlRows">
            <summary>
            Array of row instances.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.XmlDesign.XmlColumns">
            <summary>
            Array of row instances.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.XmlDesign.XmlDitches">
            <summary>
            Array of ditch instances.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.XmlDesign.XmlAttributeOverrides">
            <summary>
            XML attribute overrides.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Linestring">
            <summary>
            A <c>Linestring</c> is a sequence of points in the plane.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Linestring.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Linestring.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Create an instance with the specified sequence of points.
            </summary>
            <param name="points">The sequence of points.</param>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Linestring.Points">
            <summary>
            Accessor for the points in this instance.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Linestring.Segments">
            <summary>
            Returns a list of all segments in the linestring.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Linestring.Centroid">
            <summary>
            Returns the centroid of this instance.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Linestring.Area">
            <summary>
            Returns the signed area of this instance.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Linestring.AreaCentroid">
            <summary>
            Returns the area centroid of this instance.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Linestring.Length">
            <summary>
            Sum of all its segments' lengths.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Linestring.FindClosestPoint(System.Windows.Point)">
            <summary>
            Returns the point on the linestring closest to the specified query point.
            </summary>
            <param name="query">the query point</param>
            <returns>the closest point</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Linestring.FindIntersection(System.Windows.Point,System.Double,System.Windows.Point@)">
            <summary>
            Finds the first intersection of a semi-line with this linestring. Not necessarily the closest.
            </summary>
            <param name="point">The origin of the semi-line.</param>
            <param name="direction">The angle of the semi-line.</param>
            <param name="result">The intersection point (if any)</param>
            <returns><c>true</c> if an intersection is found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Linestring.FindIntersections(System.Windows.Point,System.Double)">
            <summary>
            Finds all the intersections of a semi-line with this linestring from closest to farthest.
            </summary>
            <param name="point">The origin of the semi-line.</param>
            <param name="direction">The angle of the semi-line.</param>
            <returns>An enumeration of all the intersection points.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Linestring.FindClosestIntersection(System.Windows.Point,System.Double,System.Windows.Point@)">
            <summary>
            Finds the closest intersection of a semi-line with this linestring.
            </summary>
            <param name="point">The origin of the semi-line.</param>
            <param name="direction">The angle of the semi-line.</param>
            <param name="closest">Closest intersection point</param>
            <returns>True if an intersection point could be found</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Linestring.FindIntersections(Morph.Services.Core.DataModel.Segment)">
            <summary>
            Finds all the intersections of a segment with this linestring from closest to farthest.
            </summary>
            <param name="segment">The intersecting segment.</param>
            <returns>An enumeration of all the intersection points.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Linestring.SelfIntersects">
            <summary>
            Returns true if a segment within this linestring intersects another.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Linestring.ToString">
            <summary>
            Returns a string that represents the current linestring.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Linestring3D">
            <summary>
            A <c>Linestring3D</c> is a sequence of points in space.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Linestring3D.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Linestring3D.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Create an instance with the specified sequence of points.
            </summary>
            <param name="points">The sequence of points.</param>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Linestring3D.Points">
            <summary>
            Accessor for the points in this instance.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Linestring3D.Centroid">
            <summary>
            Returns the centroid of this instance.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Linestring3D.AsLinestring">
            <summary>
            Returns a <see cref="T:Morph.Services.Core.DataModel.Linestring"/> instance from this instance by projecting the 3D points to the XY plane.
            </summary>
            <returns>The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> instance.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Linestring3D.ToString">
            <summary>
            Returns a string that represents the current linestring.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Contour">
            <summary>
            An elevation value and a list of contour <see cref="T:Morph.Services.Core.DataModel.Linestring"/>s for that elevation
            Suitable for simplification, smoothing.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Contour.Elevation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Contour.Lines">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Services.Core.DataModel.QuickContour">
            <summary>
            An elevation value and a list of contour <see cref="T:Morph.Services.Core.DataModel.Segment"/>s for that elevation
            Suitable for display.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.QuickContour.Elevation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.QuickContour.Segments">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Plane">
            <summary>
            A <c>Plane</c> is a (possibly) bounded flat surface in space.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Plane.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Plane.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,Morph.Services.Core.Interfaces.PlanesConstraints)">
            <summary>
            Creates an instance given the specified origin, normal, and boundary points.
            </summary>
            <param name="origin">An arbitrary point in the plane.</param>
            <param name="normal">The normal that defines the orientation of the plane.</param>
            <param name="planeConstraints">The <see cref="T:Morph.Services.Core.Interfaces.PlanesConstraints"/> instance associated with this plane.</param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Plane.#ctor(System.Double,System.Double,System.Double,Morph.Services.Core.Interfaces.PlanesConstraints)">
            <summary>
            Creates an instance given the coefficients of the general plane equation.
            </summary>
            <param name="a">The 'A' coefficient of the general plane equation.</param>
            <param name="b">The 'B' coefficient of the general plane equation.</param>
            <param name="c">The 'C' coefficient of the general plane equation.</param>
            <param name="planeConstraints">The <see cref="T:Morph.Services.Core.Interfaces.PlanesConstraints"/> instance associated with this plane.</param>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.Boundary">
            <summary>
            The <see cref="T:Morph.Services.Core.DataModel.Linestring3D"/> that defines the boundary (if any).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.A">
            <summary>
            Retrieves or sets the 'A' coefficient of the clipping plane in the general plane equation.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.B">
            <summary>
            Retrieves or sets the 'B' coefficient of the clipping plane in the general plane equation.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.C">
            <summary>
            Retrieves or sets the 'C' coefficient of the clipping plane in the general plane equation.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.Tag">
            <summary>
            Any object associated with this instance. This is the same object as in the corresponding <see cref="T:Morph.Services.Core.Interfaces.PlanesConstraints"/>.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.FlatArea">
            <summary>
            Total flat area of this section.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.SurfaceArea">
            <summary>
            Total surface area of the design surface of this section.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.OriginalArea">
            <summary>
            Total surface area of the original surface of this section.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.CutVolume">
            <summary>
            Cut volume of this section.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.FillVolume">
            <summary>
            Fill volume of this section.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.SlopeAngle">
            <summary>
            Normal vector's angle when projected onto the X-Y plane in cartesian angle (degrees).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.SlopePercent">
            <summary>
            Normal vector's percent rate of descent along <see cref="P:Morph.Services.Core.DataModel.Plane.SlopeAngle"/> direction.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.TotalSlope">
            <summary>
            Slope angle and percent.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.MainSlope">
            <summary>
            Slope angle and percent along main axis.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.SecondarySlope">
            <summary>
            Slope angle and percent along 90 degrees of main axis.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.Normal">
            <summary>
            The normal vector that defines the orientation of the plane.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.Direction">
            <summary>
            The desired direction of the main axis in cartesian angle (radians).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.Shrinkage">
            <summary>
            The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.Bulkage">
            <summary>
            The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Plane.Hinges">
            <summary>
            The list of hinges in this plane instance.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Plane.GetElevation(System.Double,System.Double)">
            <summary>
            Evaluates the plane on the specified point.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>The z coordinate.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Plane.VerifyCompliance">
            <summary>
            Verify main and cross slope compliance.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.DataModel.PurchaseArea">
            <summary>
            A PurchaseArea has a boundary and a list of holes (exclusion zones).
            Each hole is completely contained within the boundary.
            Holes do not overlap.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.PurchaseArea.Boundary">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.PurchaseArea.ExclusionZones">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.PurchaseArea.IsAreaIncludedInOriginalSurface">
            <summary>
            Set this boolean if the area is part of the original surface when operating through the Purchase manager.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.PurchaseArea.ConfirmationId">
            <summary>
                Confirmation Id passed back by ACDC when purchased.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.PurchaseArea.TotalAcresPerId">
            <summary>
            This is the total acres purchased per Confirmation ID.  So if you have multiple polygons with
            the same Confirmation ID then this is the total acreage for all the polygons.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.PurchaseArea.ExpirationUtc">
            <summary>
                Expiration date, in UTC.
                Purchase Manager does not need to this property but it comes into play when the IsAreaIncludedInOriginalSurface property is
                set to true.  The licensing code will find the the date the expires the soonest.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.PurchaseArea.BoundingBox">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.PurchaseArea.#ctor(Morph.Services.Core.DataModel.Linestring,System.Collections.Generic.List{Morph.Services.Core.DataModel.Linestring})">
            <summary>
            
            </summary>
            <param name="boundary"></param>
            <param name="exclusionZones"></param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.PurchaseArea.#ctor(Trimble.Vce.Geometry.Region.Region)">
            <summary>
            
            </summary>
            <param name="r"></param>
        </member>
        <member name="P:Morph.Services.Core.DataModel.PurchaseArea.Area">
            <summary>
            Main area minus area of exclusion zones.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.PurchaseArea.Area3D">
            <summary>
            Sum of the 3D areas of all triangles after clipping the parent surface using the boundary and the exclusion zones.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.PurchaseArea.SetArea3D(System.Double)">
            <summary>
            Set Area3D.
            Purchase area must be projected into a LocalPlane when this call is made.
            </summary>
            <param name="area3D"></param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.PurchaseArea.Normalize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.PurchaseArea.Project(Morph.Services.Core.DataModel.LocalPlaneSystem)">
            <summary>
            Convert all point coordinates from (lat,lon,alt) to (e,n,u)
            </summary>
            <param name="localPlane"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Morph.Services.Core.DataModel.PurchaseArea.Unproject(Morph.Services.Core.DataModel.LocalPlaneSystem)">
            <summary>
            Convert all point coordinates from (e,n,u) to (lat,lon,alt)
            </summary>
            <param name="localPlane"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Morph.Services.Core.DataModel.SeverityLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.SeverityLevel.Ok">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.SeverityLevel.Info">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.SeverityLevel.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.SeverityLevel.Error">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Services.Core.DataModel.ErrorDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.ErrorDescriptor.Severity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.ErrorDescriptor.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.ErrorDescriptor.Subject">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Segment">
            <summary>
            Represents a line segment in 2D.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment.#ctor">
            <summary>
            Constructs an empty segment.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>
            Constructs a segment given two points.
            </summary>
            <param name="point1">Initial point.</param>
            <param name="point2">Final point.</param>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment.Point1">
            <summary>
            Initial point.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment.Point2">
            <summary>
            Final point.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment.Direction">
            <summary>
            The normal vector in the direction of this segment.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment.Normal">
            <summary>
            The normal vector towards the right side of this segment.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment.Length">
            <summary>
            The length of the segment (distance between its two points).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment.DeltaX">
            <summary>
            The X distance between the two points.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment.DeltaY">
            <summary>
            The Y distance between the two points.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Segment.Angle">
            <summary>
            The cartisian angle in radians between its two points.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment.FindIntersection(System.Windows.Point,System.Double,System.Windows.Point@)">
            <summary>
            Returns the intersection of a semi-line and this segment.
            </summary>
            <param name="point">the origin of the semi-line</param>
            <param name="angle">the angle of the semi-line</param>
            <param name="result">the intersection point (if any)</param>
            <returns><c>true</c> if there is an intersection; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment.FindIntersection(Morph.Services.Core.DataModel.Segment,System.Windows.Point@)">
            <summary>
            Returns the intersection of this segment with the given segment.
            </summary>
            <param name="segment">the other segment</param>
            <param name="result">the intersection point (if any)</param>
            <returns><c>true</c> if there is an intersection; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment.Bisects(Morph.Services.Core.DataModel.Segment)">
            <summary>
            True if the given segment's endpoints are on opposite sides of this segment
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment.ComputeSideOfSegment(System.Windows.Point)">
            <summary>
            On which side of this segment does the given point lie.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment.Distance(System.Windows.Point)">
            <summary>
            Returns the distance between the given point and this segment.
            </summary>
            <param name="point">the point</param>
            <returns>The distance</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment.OrthogonalDistance(System.Windows.Point)">
            <summary>
            Returns the signed distance between the given query point and this segment.
            </summary>
            <param name="point">The query point.</param>
            <returns>The signed distance: positive to the right of the segment and negative to the left of the segment.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment.FindClosestPoint(System.Windows.Point)">
            <summary>
            Returns the point in the segment that is closest to the given point.
            </summary>
            <param name="point">the input point</param>
            <returns>the result point</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment.ToString">
            <summary>
            Returns a string that represents the current segment.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment.FromPoints(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Creates a list of segments using the given list of points.
            </summary>
            <param name="points">the list of points</param>
            <returns>the list of segments</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Segment.FromPoints(System.Windows.Point,System.Windows.Point)">
            <summary>
            Creates a segment instance given two points.
            </summary>
            <param name="point1">point1</param>
            <param name="point2">point2</param>
            <returns>the segment</returns>
        </member>
        <member name="T:Morph.Services.Core.DataModel.SimpleSurface">
            <summary>
            Represents a simple surface given a set of points and triangles.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.SimpleSurface.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.SimpleSurface.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Creates a new instance with the given parameters.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="boundary">Boundary of 2D points of this instance (it can be null).</param>
            <param name="points">List of surface points of this instance.</param>
            <param name="triangles">List of triangles of this instance.</param>
            <param name="clippers">Enumeration of surface clippers this instance (optional).</param>
        </member>
        <member name="P:Morph.Services.Core.DataModel.SimpleSurface.MinimumPoint">
            <summary>
            Lower bound coordinates for this instance.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.SimpleSurface.MaximumPoint">
            <summary>
            Upper bound coordinates for this instance.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.SimpleSurface.Clippers">
            <summary>
            Enumeration of surface clippers as list of points (if any).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.SimpleSurface.Name">
            <summary>
            The name of this surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.SimpleSurface.MinElevation">
            <summary>
            The maximum elevation of this surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.SimpleSurface.MaxElevation">
            <summary>
            The minimum elevation of this surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.SimpleSurface.Points">
            <summary>
            The points associated with this surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.SimpleSurface.Triangles">
            <summary>
            The triangle indices associated with this surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.SimpleSurface.Boundary">
            <summary>
            The 2D boundary associated with this surface.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.SimpleSurface.Close">
            <summary>
            Free the resources associated with this surface.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.SimpleSurface.GetQuickContours(System.Double)">
            <summary>
            
            </summary>
            <param name="elevInterval"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Morph.Services.Core.DataModel.SimpleSurface.GetContourLines(System.Boolean,System.Double,System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Media.Media3D.Point3D}}@,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            
            </summary>
            <param name="bFullRange"></param>
            <param name="toDefault"></param>
            <param name="contourPoints"></param>
            <param name="exclusionAreas"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Subzone">
            <summary>
            A <c>Subzone</c> is a bounded surface in space with an associated earthwork.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Subzone.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Subzone.#ctor(Morph.Services.Core.Interfaces.SubzoneConstraints)">
            <summary>
            Creates an instance given the specified <see cref="T:Morph.Services.Core.Interfaces.SubzoneConstraints"/> instance.
            </summary>
            <param name="subzoneConstraint">The <see cref="T:Morph.Services.Core.Interfaces.SubzoneConstraints"/> instance associated with this subzone.</param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Subzone.#ctor(Morph.Services.Core.Interfaces.AreaConstraints)">
            <summary>
            Creates an instance given the specified <see cref="T:Morph.Services.Core.Interfaces.AreaConstraints"/> instance.
            </summary>
            <param name="areaConstraint">The <see cref="T:Morph.Services.Core.Interfaces.AreaConstraints"/> instance associated with this activity constraint.</param>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Subzone.DesignIndices">
            <summary>
            Indices to the points in the design surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Subzone.DesignTriangles">
            <summary>
            Triangles in the design surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Subzone.CutFillIndices">
            <summary>
            Indices to the points in the cut/fill surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Subzone.CutFillTriangles">
            <summary>
            Triangles in the cut/fill surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Subzone.Tag">
            <summary>
            Any object associated with this instance. This is the same object as in the corresponding <see cref="T:Morph.Services.Core.Interfaces.PlanesConstraints"/>.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Subzone.BulkageRatio">
            <summary>
            The factor to convert from bank cut volumes to loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Subzone.HaulCompactionRatio">
            <summary>
            The factor use to compute from loose haul volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Subzone.FlatBoundary">
            <summary>
            The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the plan view boundary (if any).
            </summary>
            <remarks>The linestring is assumed to be counter-clockwise and closed.</remarks>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Subzone.FlatArea">
            <summary>
            Total flat area of this section.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Subzone.SurfaceArea">
            <summary>
            Total surface area of this section.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Subzone.OriginalArea">
            <summary>
            Total surface area of the original surface of this section.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Subzone.CutVolume">
            <summary>
            Cut volume of this section.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Subzone.FillVolume">
            <summary>
            Fill volume of this section.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.WaitCursor._previousCursor">
            <summary>
                Previous cursor
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.WaitCursor.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.WaitCursor.#ctor(System.Windows.Input.Cursor)">
            <summary>
                Helper for cursor
            </summary>
            <param name="newCursor">cursor to display</param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.WaitCursor.Dispose">
            <summary>
                When the object is disposed, set to previous cursor
            </summary>
        </member>
        <member name="T:Morph.Services.Core.DataModel.SideEnum">
            <summary>
            Defines the position of the query point with respect to a line.
            See <see cref="M:Morph.Services.Core.DataModel.Utils.ComputeSideOfLinestring(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double,System.Double)"/>.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.SideEnum.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.SideEnum.Right">
            <summary>
            To the right of the line.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.SideEnum.Left">
            <summary>
            To the left of the line.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.SideEnum.Boundary">
            <summary>
            On top of the line.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Point2DLocator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Point2DLocator.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Point2DLocator.Add(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Point2DLocator.GetNthPoint(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Utils">
            <summary>
            This class provides extention methods to common .NET data types.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Utils.EPSILON">
            <summary>
            Small threshold to be consider practically zero.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Utils.RAD2DEG">
            <summary>
            Conversion factor from radians to degrees.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Utils.DEG2RAD">
            <summary>
            Conversion factor from degrees to radians.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Utils.PI_HALF">
            <summary>
            Pi divided by two.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.Utils.SQRT2">
            <summary>
            Square root of 2.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Utils.EmptyPoint">
            <summary>
            Represents an empty (invalid) <see cref="T:System.Windows.Point"/>.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Utils.EmptyVector">
            <summary>
            Represents an empty (invalid) <see cref="T:System.Windows.Vector"/>.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Utils.EmptyPoint3D">
            <summary>
            Represents an empty (invalid) <see cref="T:System.Windows.Media.Media3D.Point3D"/>.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Utils.EmptyVector3D">
            <summary>
            Represents and empty (invalid) <see cref="T:System.Windows.Media.Media3D.Vector3D"/>.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.AreEqual(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Double)">
            <summary>
            Returns <c>true</c> if the given <see cref="T:System.Windows.Media.Media3D.Point3D"/> are within the given tolerance.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>Returnts <c>true</c> if the points are within the tolerance; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.AreEqual(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Returns <c>true</c> if the given <see cref="T:System.Windows.Media.Media3D.Point3D"/> are equal.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>Returnts <c>true</c> if the points are within the tolerance; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.AreEqual(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Returns <c>true</c> if the given <see cref="T:System.Windows.Point"/> are within the given tolerance.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>Returnts <c>true</c> if the points are within the tolerance; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.AreEqual(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns <c>true</c> if the given <see cref="T:System.Windows.Point"/> are equal.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>Returns <c>true</c> if the points are within the tolerance; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.AreEqual(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double)">
            <summary>
            Returns <c>true</c> if a given enumeration of <see cref="T:System.Windows.Point"/> is the same as
            another within the specified tolerance..
            </summary>
            <param name="pts1">First enumeration of points.</param>
            <param name="pts2">Second enumeration of points</param>
            <param name="tolerance">The tolerance.</param>
            <returns>Returns <c>true</c> if the sequences have the same points within the tolerance; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.IsEmpty(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Returns <c>true</c> is this <see cref="T:System.Windows.Media.Media3D.Vector3D"/> instance is empty.
            </summary>
            <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D"/> instance.</param>
            <returns>Returns <c>true</c> if the <see cref="T:System.Windows.Media.Media3D.Vector3D"/> instance is empty; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.IsEmpty(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Returns <c>true</c> is this <see cref="T:System.Windows.Media.Media3D.Point3D"/> instance is empty.
            </summary>
            <param name="point">The <see cref="T:System.Windows.Media.Media3D.Point3D"/> instance.</param>
            <returns>Returns <c>true</c> if the <see cref="T:System.Windows.Media.Media3D.Point3D"/> instance is empty; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.IsEmpty(System.Windows.Vector)">
            <summary>
            Returns <c>true</c> is this <see cref="T:System.Windows.Vector"/> instance is empty.
            </summary>
            <param name="vector">The <see cref="T:System.Windows.Vector"/> instance.</param>
            <returns>Returns <c>true</c> if the <see cref="T:System.Windows.Vector"/> instance is empty; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.IsEmpty(System.Windows.Point)">
            <summary>
            Returns <c>true</c> is this <see cref="T:System.Windows.Point"/> instance is empty.
            </summary>
            <param name="point">The <see cref="T:System.Windows.Point"/> instance.</param>
            <returns>Returns <c>true</c> if the <see cref="T:System.Windows.Point"/> instance is empty; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ComputeCentroid(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Returns the centroid of the specified list of points.
            </summary>
            <param name="points">The enumeration of points.</param>
            <returns>The centroid.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ComputeCentroid(System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Returns the centroid of the specified list of points.
            </summary>
            <param name="points">The enumeration of points.</param>
            <returns>The centroid.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ComputeAreaCentroid(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Returns the centroid of the closed area specified by the list of points. 
            First and last point are assumed to be equal.
            </summary>
            <param name="points">The enumeration of points.</param>
            <returns>The center.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.FilterDuplicates(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double)">
            <summary>
            Returns the specified enumeration of points as a list but without duplicate adjacent points as specified by tolerance.
            </summary>
            <param name="points">The enumeration of points.</param>
            <param name="tolerance">The distance tolerance to consider points adjacent.</param>
            <returns>The list of points without adjacent duplicates.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.Clean(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double)">
            <summary>
            Removes spikes from the linestring. 
            </summary>
            <param name="points">The enumeration of points.</param>
            <param name="tolerance">The distance tolerance to consider a segment a spike.</param>
            <returns>The list of points without spikes.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ClosedBoundary(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Returns a <see cref="T:System.Windows.Point"/> enumeration that is guaranteed to be counter-clockwise and closed if the specified enumeration is not.
            </summary>
            <param name="boundary">The input point enumeration.</param>
            <returns>The counter-clockwise and closed equivalent point enumeration.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.Intersects(System.Collections.Generic.List{System.Windows.Rect},System.Windows.Rect)">
            <summary>
            Whether a new rectangle intersects any of the rectangles in this list.
            </summary>
            <param name="rectList"></param>
            <param name="newRect"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.IsTooClose(System.Collections.Generic.List{System.Windows.Point},System.Windows.Point,System.Double)">
            <summary>
            Whether a new point is too close to any of the points in this list
            </summary>
            <param name="pointList"></param>
            <param name="newPoint"></param>
            <param name="distance">minimum distance</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.Bounds(System.Windows.Point,System.Windows.Point)">
            <summary>
            Get boundary rect for two points
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.SelfIntersect(System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.List{System.Windows.Point}@,System.Int32)">
            <summary>
            Find self intersections in point list.
            </summary>
            <param name="pointList"></param>
            <param name="intersections">List of intersection points. Not necessarily boundary points.</param>
            <param name="maxInts">Maximum number of intersection points to return. If zero or negative, returns all.</param>
            <returns>Whether intersection points were found</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ComputeBestFitPlane(System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D},System.Double@,System.Double@,System.Double@)">
            <summary>
            Computes the coefficients of the general plane equation using LSQ-fit given a set of points.
            </summary>
            <remarks>The plane equation is <c>z = Ax + By + C</c></remarks>
            <param name="points">The enumeration of points.</param>
            <param name="a">The 'A' coefficient of the general plane equation.</param>
            <param name="b">The 'B' coefficient of the general plane equation.</param>
            <param name="c">The 'C' coefficient of the general plane equation.</param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.FindIntersection(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Finds the intersection between to lines given as point and angle.
            </summary>
            <param name="point1X">the x coordinate of point 1</param>
            <param name="point1Y">the y coordinate of point 1</param>
            <param name="angle1">the angle in radians of line 1</param>
            <param name="point2X">the x coordinate of point 2</param>
            <param name="point2Y">the y coordinate of point 2</param>
            <param name="angle2">the angle in radians of line 2</param>
            <param name="resultX">the x coordinate of the result</param>
            <param name="resultY">the y coordinate of the result</param>
            <returns><c>true</c> if intersection exists; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ComputeSideOfLine(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Return the location of a given point with respect to a given line (point and angle).
            </summary>
            <param name="point1X">point x of the line</param>
            <param name="point1Y">point y of the line</param>
            <param name="angle">angle of the line</param>
            <param name="x">query point x</param>
            <param name="y">query point y</param>
            <returns>the location of the query point: Right, Left, or Boundary</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ComputeSideOfLinestring(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double,System.Double)">
            <summary>
            Returns wether a given point is inside, outside, or on boundary of a given closed linestring.
            </summary>
            <param name="points">The enumeration of points</param>
            <param name="x">The x coordinate of the query point.</param>
            <param name="y">The y coordinate of the query point.</param>
            <returns><c>Left</c> if the point is inside, <c>Right</c> if the point is outside, <c>Boundary</c> if the point is on the linestring; <c>Unknown</c> otherwise</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ComputeArea(System.Collections.Generic.IList{Morph.Services.Core.DataModel.PurchaseArea})">
            <summary>
            Computes total area.
            </summary>
            <param name="purchaseAreaList"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.Compute3DArea(System.Collections.Generic.IList{Morph.Services.Core.DataModel.PurchaseArea},Morph.Services.Core.Interfaces.ISurfaceInfo)">
            <summary>
            Computes total 3D area for list of purchase areas.
            </summary>
            <param name="purchaseAreaList"></param>
            <param name="surface"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ComputeArea(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Computes the signed area of an enumeration of points.
            Area is positive for counter-clockwise orientation.
            </summary>
            <param name="points">The enumeration of points.</param>
            <returns>The sign area of the enumeration of points.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.NormalizeAngle(System.Double,System.Double)">
            <summary>
            Normalizes an angle in degrees between the range of [reference, reference + 360).
            </summary>
            <param name="angle">angle in degrees</param>
            <param name="reference">reference in degrees</param>
            <returns>the normalized angle in degrees</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.NormalizeAngleRad(System.Double,System.Double)">
            <summary>
            Normalizes an angle in radians between the range of [reference, reference + 2 PI).
            </summary>
            <param name="angle">angle in radians</param>
            <param name="reference">reference in radians</param>
            <returns>the normalized angle in radians</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ToPoint(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Downcast a <see cref="T:System.Windows.Media.Media3D.Point3D"/> to a <see cref="T:System.Windows.Point"/> by removing the <c>z</c> component.
            </summary>
            <param name="point">the <see cref="T:System.Windows.Media.Media3D.Point3D"/></param>
            <returns>the <see cref="T:System.Windows.Point"/></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.Round(System.Windows.Point,System.Int32)">
            <summary>
            Rounds the coordinates of the given point to the specified number of decimals (default to 3).
            </summary>
            <param name="point">the <see cref="T:System.Windows.Point"/></param>
            <param name="digits">the number of decimals</param>
            <returns>the rounded <see cref="T:System.Windows.Point"/></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.Round(System.Windows.Media.Media3D.Point3D,System.Int32)">
            <summary>
            Rounds the coordinates of the given point to the specified number of decimals (default to 4).
            </summary>
            <param name="point">the <see cref="T:System.Windows.Media.Media3D.Point3D"/></param>
            <param name="digits">the number of decimals</param>
            <returns>the rounded <see cref="T:System.Windows.Media.Media3D.Point3D"/></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ToPoint3D(System.Windows.Point,System.Double)">
            <summary>
            Convert a <see cref="T:System.Windows.Point"/> to a <see cref="T:System.Windows.Media.Media3D.Point3D"/> by adding the <c>z</c> component.
            </summary>
            <param name="point">the <see cref="T:System.Windows.Media.Media3D.Point3D"/></param>
            <param name="zValue"></param>
            <returns>the <see cref="T:System.Windows.Media.Media3D.Point3D"/></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between two points.
            </summary>
            <param name="p1">point 1</param>
            <param name="p2">point 2</param>
            <returns>the distance</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.Distance(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Returns the distance between two points.
            </summary>
            <param name="p1">point 1</param>
            <param name="p2">point 2</param>
            <returns>the distance</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.Angle(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the cartesian angle form by the vector between <c>p1</c> and <c>p2</c>.
            </summary>
            <param name="p1">point 1</param>
            <param name="p2">point 2</param>
            <returns>the cartesian angle</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.FindClosestDistance(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the closests distance of the segment formed by p1 and p2 to the specified query point.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.FindClosestPoint(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the point on the segment formed by p1 and p2 closest to the specified query point.
            </summary>
            <param name="p1">point 1</param>
            <param name="p2">point 2</param>
            <param name="query">the query point</param>
            <returns>the closest point</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.FindCollinear(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Find if two segments with a point in common are collinear
            </summary>
            <param name="p1">Non-common point in first segment</param>
            <param name="p2">Common point</param>
            <param name="p3">Non-common point in second segment</param>
            <param name="ip">Point where the longest segment should be divided</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.FromDirection(System.Double)">
            <summary>
            Returns a unit vector using the specified angle.
            </summary>
            <param name="angle">angle in radians</param>
            <returns>the vector</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.FromLinestring(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            
            </summary>
            <param name="linestring"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ToPolySeg(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Converts an emumeration of points to a <see cref="T:Trimble.Vce.Geometry.PolySeg.PolySeg"/> instance.
            </summary>
            <param name="points">The enumeration of points.</param>
            <returns>The <see cref="T:Trimble.Vce.Geometry.PolySeg.PolySeg"/> instance.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.FromLinestring3D(Morph.Services.Core.DataModel.Linestring3D)">
            <summary>
            
            </summary>
            <param name="linestring"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ToLinestring(Trimble.Vce.Geometry.PolySeg.PolySeg)">
            <summary>
            Converts a <see cref="T:Trimble.Vce.Geometry.PolySeg.PolySeg"/> instance into a <see cref="T:Morph.Services.Core.DataModel.Linestring"/> instance.
            </summary>
            <param name="ps">The <see cref="T:Trimble.Vce.Geometry.PolySeg.PolySeg"/> instance.</param>
            <returns>The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> instance.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.FromPolyseg3D(Trimble.Vce.Geometry.PolySeg.PolySeg)">
            <summary>
            
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.IsPointInTriangle(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Checks whether a point is inside a triangle.
            </summary>
            <param name="query">The query point.</param>
            <param name="a">Triangle vertex 1.</param>
            <param name="b">Triangle vertex 2.</param>
            <param name="c">Triangle vertex 3.</param>
            <returns><c>true</c> if point is inside the triangle; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ExportToSketchup(System.Boolean,System.String,System.Nullable{System.Windows.Media.Media3D.Point3D},Morph.Services.Core.Interfaces.ISurfaceInfo,Morph.Services.Core.Interfaces.ISurfaceInfo,Morph.Services.Core.Interfaces.ISurfaceInfo,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D}}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D}},System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.String,System.String)">
            <summary>
            Generate a Sketchup model file and open it using Sketchup.
            </summary>
            <param name="isMetric">Indicates the unit of measure: <c>true</c> is meters, <c>false</c> is feet.</param>
            <param name="modelFile">Path to save the Sketchup file.</param>
            <param name="modelOrigin">The georeference origin point of the model (if any).</param>
            <param name="original">The original surface.</param>
            <param name="design">The design surface.</param>
            <param name="cutfill">The cut/fill surface.</param>
            <param name="planes">The list of planes tuples (name, boundary) (if any).</param>
            <param name="rows">The rows linestrings (if any).</param>
            <param name="columns">The column linestrings (if any).</param>
            <param name="pipeline">The pipeline linestring (if any).</param>
            <param name="ditches">The target diches linestrings (if any).</param>
            <param name="originalTextureFile">Original Surface bitmap path (if any).</param>
            <param name="proposedTextureFile">Proposed Surface bitmap path (if any).</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.LocateSketchUpExecutable">
            <summary>
            Returns the path to the Sketchup executable (if installed).
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Utils.IsSketchUpInstalled">
            <summary>
            Determines if SketchUp is installed
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.LaunchSketchup(System.String)">
            <summary>
            Launch the Sketchup executable with the specified sketchup file model file.
            </summary>
            <param name="skufile">The Sketchup model file.</param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.GetElevation(System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Plane},System.Double,System.Double)">
            <summary>
            Given an enumeration of bounded planes, find to which plane point (x, y) belongs, and return point's elevation.
            </summary>
            <param name="planes"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.GetMultiPlaneGrid(System.Collections.Generic.List{Morph.Services.Core.DataModel.Plane},System.Double,System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Windows.Media.Media3D.Point3D@,System.Windows.Media.Media3D.Point3D@,System.Double[0:,0:]@,System.Predicate{System.Double})">
            <summary>
            
            </summary>
            <param name="planes"></param>
            <param name="gridSize"></param>
            <param name="exclusionZones"></param>
            <param name="minPoint"></param>
            <param name="maxPoint"></param>
            <param name="grid"></param>
            <param name="onProgress"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.DecimalDegreesToDms(System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="decDegrees"></param>
            <param name="isLatitude"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the object having the maximum value from the given enumeration.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <typeparam name="R">The type of the value being used to find the maximum.</typeparam>
            <param name="en">The enumeration.</param>
            <param name="evaluate">The function use to compute the value being used to find the maximum.</param>
            <returns>A the object having the maximum value.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the object having the minimum value from the given enumeration.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <typeparam name="R">The type of the value being used to find the minimum.</typeparam>
            <param name="en">The enumeration.</param>
            <param name="evaluate">The function use to compute the value being used to find the minimum.</param>
            <returns>The object having the minimum value.</returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Utils.ConnectSegments(System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Segment})">
            <summary>
            
            </summary>
            <param name="segments"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Services.Core.DataModel.VisHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.VisHelper.BDoIt">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.VisHelper.ToJson``1(``0,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="encoding"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Morph.Services.Core.DataModel.VisHelper.View(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            
            </summary>
            <param name="ls"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.VisHelper.View(Morph.Services.Core.DataModel.Segment3D)">
            <summary>
            
            </summary>
            <param name="seg"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.VisHelper.View(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.VisHelper.View(Morph.Services.Core.DataModel.Segment)">
            <summary>
            
            </summary>
            <param name="seg"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.VisHelper.View(System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Segment})">
            <summary>
            
            </summary>
            <param name="lseg"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.VisHelper.View(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="pnt"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.VisHelper.View(System.Windows.Point,System.Double)">
            <summary>
            
            </summary>
            <param name="pnt"></param>
            <param name="elevation"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.VisHelper.View(Trimble.Vce.Geometry.Point3D)">
            <summary>
            
            </summary>
            <param name="pnt"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.VisHelper.View(Morph.Services.Core.DataModel.PurchaseArea)">
            <summary>
            
            </summary>
            <param name="pa"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.VisHelper.WriteRubyToFile(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sFilePath"></param>
            <param name="sGroupName"></param>
            <param name="sRubyCode"></param>
            <param name="color"></param>
        </member>
        <member name="T:Morph.Services.Core.DataModel.PointTypeEnum">
            <summary>
            Point type, for hit test.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.PointTypeEnum.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.PointTypeEnum.Boundary">
            <summary>
            On a boundary
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.PointTypeEnum.Section">
            <summary>
            On a section area's interior
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.PointTypeEnum.ExclusionZone">
            <summary>
            On an exclusion zone's interior
            </summary>
        </member>
        <member name="T:Morph.Services.Core.DataModel.SectionErrorEnum">
            <summary>
            Section manager error codes
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.SectionErrorEnum.Ok">
            <summary>
            Ok (no error)
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.SectionErrorEnum.Open">
            <summary>
            Area is open (warning)
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.SectionErrorEnum.BadAreas">
            <summary>
            Some bad (nested) areas were created (warning)
            </summary>
        </member>
        <member name="F:Morph.Services.Core.DataModel.SectionErrorEnum.BadHinge">
            <summary>
            # points != 2, one Z is NaN but not the other.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.DataModel.SubField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.SubField.#ctor(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            
            </summary>
            <param name="boundary"></param>
        </member>
        <member name="P:Morph.Services.Core.DataModel.SubField.Boundary">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Section">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Section.Name">
            <summary>
            Section name
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Section.#ctor(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            
            </summary>
            <param name="boundary"></param>
        </member>
        <member name="T:Morph.Services.Core.DataModel.ExclusionZone">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.ExclusionZone.#ctor(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            
            </summary>
            <param name="boundary"></param>
        </member>
        <member name="T:Morph.Services.Core.DataModel.Field">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Field.#ctor(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            Constructor
            </summary>
            <param name="boundary">Entire field boundary</param>
        </member>
        <member name="P:Morph.Services.Core.DataModel.Field.Boundary">
            <summary>
            Field boundary
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Field.SubFields">
            <summary>
            List of comprehensive, non-overlapping sub-fields
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Field.FinalSections">
            <summary>
            Final field partitioning, after punching holes for exclusion zones.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Field.Clear">
            <summary>
            Remove all Subfields
            </summary>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Field.AddExclusionZone(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            Add exclusion zone, given its boundary.
            </summary>
            <param name="boundary"></param>
        </member>
        <member name="M:Morph.Services.Core.DataModel.Field.RemoveExclusionZone(Morph.Services.Core.DataModel.ExclusionZone)">
            <summary>
            Remove exclusion zone.
            </summary>
            <param name="zone"></param>
        </member>
        <member name="T:Morph.Services.Core.Grid.DXGridBFS">
            <summary>
            Implement a Breadth-First search in a grid to compute reachability.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridBFS.#ctor(System.Windows.Point,System.Double,System.Double[0:,0:])">
            <summary>
            Creates an instance to compute reachability given surface elevations.
            </summary>
            <param name="origin">World-coordinates of the grid origin.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="zs">Surface grid elevations.</param>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridBFS.Dispose">
            <summary>
            Free DirectX resources.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridBFS.ComputeFlowField">
            <summary>
            Returns the flow field of the specified surface.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Grid.NodeFlags">
            <summary>
            Marks a node with specific attributes.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeFlags.Exit">
            <summary>
            Node has an exit.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeFlags.Peak">
            <summary>
            Node is a peak.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeFlags.Sink">
            <summary>
            Node is a sink.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeFlags.Flat">
            <summary>
            Node is flat.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeFlags.Valid">
            <summary>
            Node is valid.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeFlags.Frontier">
            <summary>
            Node is in frontier.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeFlags.Visited">
            <summary>
            Node has been visited.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Grid.NodeLinks">
            <summary>
            Describes a surface triangle.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeLinks.Flags">
            <summary>
            Node flags.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeLinks.Value">
            <summary>
            The value of this node.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeLinks.Slope0">
            <summary>
            Left-lower slope: S0.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeLinks.Slope1">
            <summary>
            Center-lower slope: S1.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeLinks.Slope2">
            <summary>
            Right-lower slope: S2.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeLinks.Slope3">
            <summary>
            Left-center slope: S3.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeLinks.Slope4">
            <summary>
            Right-center slope: S4.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeLinks.Slope5">
            <summary>
            Left-upper slope: S5.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeLinks.Slope6">
            <summary>
            Center-upper slope: S6.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeLinks.Slope7">
            <summary>
            Right-upper slope: S7.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.NodeLinks.Item(System.Int32)">
            <summary>
            Array accessor.
            </summary>
            <param name="index">The position index.</param>
            <returns>The slope value.</returns>
        </member>
        <member name="F:Morph.Services.Core.Grid.NodeLinks.SizeInBytes">
            <summary>
            The size in bytes of this instance.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Grid.Globals">
            <summary>
            Describes a surface triangle.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.Globals.Peaks">
            <summary>
            Number of peaks.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.Globals.Sinks">
            <summary>
            Number of sinks.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.Globals.Flats">
            <summary>
            Number of flats.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.Globals.Frontiers">
            <summary>
            Number of frontiers.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.Globals.SizeInBytes">
            <summary>
            The size in bytes of this instance.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Grid.DXContour">
            <summary>
            This class is to compute surface contours using GPU compute shader.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXContour.#ctor(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Int32},System.Single[])">
            <summary>
            Creates an instance to compute contours given a surface with specified points and triangles and a list of elevations.
            </summary>
            <param name="points">Surface points</param>
            <param name="triangles">Surface triangles</param>
            <param name="elevations">Elevations for which contours need to be generated</param>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXContour.GetContours">
            <summary>
            Method to compute contours with shader
            </summary>
            <returns>Each contour is represented with series of 3D points</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXContour.Dispose">
            <summary>
            Deallocate DirectX resources.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Grid.Triangle3X3">
            <summary>
            Describes a surface triangle.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.Triangle3X3.P1">
            <summary>
            First triangle point.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.Triangle3X3.P2">
            <summary>
            Second triangle point.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.Triangle3X3.P3">
            <summary>
            Third triangle point.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Grid.Triangle3X3.#ctor(SlimDX.Vector3,SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
            Creates an instance with the specified points.
            </summary>
            <param name="p1">p1</param>
            <param name="p2">p2</param>
            <param name="p3">p3</param>
        </member>
        <member name="F:Morph.Services.Core.Grid.Triangle3X3.SizeInBytes">
            <summary>
            The size in bytes of this instance.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Grid.Segment3X2">
            <summary>
            Describes a contour segment.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.Segment3X2.P1">
            <summary>
            First segment point.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Grid.Segment3X2.P2">
            <summary>
            Second segment point.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Grid.Segment3X2.#ctor(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
            Creates an instance with the specified points.
            </summary>
            <param name="p1">p1</param>
            <param name="p2">p2</param>
        </member>
        <member name="F:Morph.Services.Core.Grid.Segment3X2.SizeInBytes">
            <summary>
            The size in bytes of this instance.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Grid.DXGridGradientDescent">
            <summary>
            Perform gradient descent using GPU
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Grid.DXGridGradientDescent.Function">
            <summary>
            Delegate that defines the performance function.
            </summary>
            <remarks>Evaluates the performance function at the given n-dimensional query point.</remarks>
            <param name="x">The n-dimensional query point.</param>
            <returns>The value of the performance function.</returns>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.Precision">
            <summary>
            The minimum distance required to accept a solution.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.Delta">
            <summary>
            The search step fraction.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.Momentum">
            <summary>
            The number of samples to use to keep gradient momentum.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.MaxIterations">
            <summary>
            The maximum number of iterations to attempt when finding a solution.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.CellSize">
            <summary>
            Grid spacing
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.Penalty">
            <summary>
            A constant to be multiplied to grandients
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.Regions">
            <summary>
            List of areas
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.RegionMembership">
            <summary>
            Membership of region for each data point
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.DataLength">
            <summary>
            Length of data
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.MinSlope">
            <summary>
            Mininum slope to be used to be used in gradients calculation when there is no area present
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.MaxSlope">
            <summary>
            Mininum slope to be used to be used in gradients calculation when there is no area present
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.MaxCutLimit">
            <summary>
            Maximum cut limit
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.MaxFillLimit">
            <summary>
            Maximum fill limit
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.MaxMagnitude">
            <summary>
            The maximum magnitude the gradient can have while attempting to finding a solution. Valid range [1,∞).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.Iterations">
            <summary>
            The number of iterations it took to arrive at the solution.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescent.Annealing">
            <summary>
            Enable annealing.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.Minimize(System.Predicate{Morph.Services.Core.Grid.DXGridGradientDescentProgress})">
            <summary>
            Uses gradient descent to compute and return the point at which the specified performance function is minimized (GPU version).
            </summary>
            <remarks>This method the specified functor to compute the gradient of the function.</remarks>
            <param name="callback">A predicate that it is called every iteration and allows the computation to continue (if any).</param>
            <returns>The point that best minimizes the performance function.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.Flatten(System.Double[0:,0:])">
            <summary>
            Returns a flatten enumerable of <c>double</c> from the specified bidimensional array.
            </summary>
            <param name="vector">The bidimensional array.</param>
            <returns>The bidimensional array as an enumerable of <c>double</c>.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.FlattenOnly(System.Double[0:,0:])">
            <summary>
            Returns a flatten enumerable of <c>double</c> from the specified bidimensional array including NaN.
            </summary>
            <param name="vector">The bidimensional array.</param>
            <returns>The bidimensional array as an enumerable of <c>double</c>.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.DXVCopy">
            <summary>
             Copies current gradient to previous gradient (Vdir to Vprv)
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.DXXCopy">
            <summary>
             Copies current elevation to previous elevation (Xnew to Xold)
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.DXScalar(System.Double)">
            <summary>
            Multiplies scalar to gradient
            </summary>
            <param name="scalar">scalar</param>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.Daxpy(System.Double,System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Computes the expression: <c>y = a x + y</c> in double precision using bidimensional arrays.
            </summary>
            <param name="alpha">The alpha constant.</param>
            <param name="x">The x bidimensional vector.</param>
            <param name="y">The y bidimensional vector.</param>
            <returns>The resulting bidimensional vector.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.DXDaxpy(System.Double)">
            <summary>
            Computes the expression: <c>xnew = a vdir + xold</c> in double precision using bidimensional arrays.
            </summary>
            <param name="alpha">The alpha constant.</param>
            <returns>The resulting bidimensional vector.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.DXDaxpby(System.Double,System.Double)">
            <summary>
            Computes the expression: <c>elevation (xnew) = a gradient (vprv) + b * elevation (xold)</c> in double precision using bidimensional arrays.
            </summary>
            <param name="alpha">The alpha constant.</param>
            <param name="beta">The beta constant.</param>
            <returns>The resulting bidimensional vector.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.GetOutput">
            <summary>
            Show output
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.CalculateDotVprvVnew">
            <summary>
            Calculate dot product between current and previous gradient
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.CalculateGradientNorm">
            <summary>
            Calculate norm of current gradient (vdir)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.DXWithin(System.Double)">
            <summary>
            Determine if previous and current elevation is within threshold value
            </summary>
            <param name="threshold">threshold value</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.GetXprv">
            <summary>
            Returns previous elevation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.GetXnew">
            <summary>
            Returns current elevation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.GetVprv">
            <summary>
            Returns previous gradient
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.GetVdir">
            <summary>
            Returns current gradient
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.Distance(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the Euclidean distance between two n-dimensional points.
            </summary>
            <param name="x">The first n-dimensional point.</param>
            <param name="y">The second n-dimendional point.</param>
            <returns>The Euclidean distance.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.DXGradientWithAreas">
            <summary>
            Calculate gradient with constraint areas
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.DXGradient">
            <summary>
            Calculate gradient with global constraints not with areas
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescent.Dispose">
            <summary>
            Deallocate DirectX resources.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Grid.DXGridGradientDescentProgress">
            <summary>
            Gradient descent solver progress event arguments.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescentProgress.Iteration">
            <summary>
            The current iteration.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescentProgress.Point">
            <summary>
            The current solution.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescentProgress.Gradient">
            <summary>
            The current gradient of the solution.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescentProgress.Norm">
            <summary>
            The norm of the current gradient.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Grid.DXGridGradientDescentProgress.Step">
            <summary>
            The current step size.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescentProgress.#ctor(System.Int32,System.Double[0:,0:],System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="!:GradientDescentProgress">GradientDescentProgress</see> class. 
            </summary>
            <param name="iteration">The current iteration.</param>
            <param name="point">The current solution.</param>
            <param name="gradient">The current gradient of the solution.</param>
            <param name="norm">The norm of the current gradient.</param>
            <param name="step">The current step size.</param>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXGridGradientDescentProgress.Initialize(System.Int32,System.Double[0:,0:],System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            Initializes this instance with the specified parameters. 
            </summary>
            <param name="iteration">The current iteration.</param>
            <param name="point">The current solution.</param>
            <param name="gradient">The current gradient of the solution.</param>
            <param name="norm">The norm of the current gradient.</param>
            <param name="step">The current step size.</param>
        </member>
        <member name="T:Morph.Services.Core.Grid.Region">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXSlope.SaveToFile(System.String)">
            <summary>
            Saves the target texture to the specified filename as a png.
            </summary>
            <remarks>This method is not reliable: sometimes images are all black.</remarks>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXBlitter.SaveToFile(System.String)">
            <summary>
            Saves the target texture to the specified filename as a png.
            </summary>
            <remarks>This method is not reliable: sometimes images are all black.</remarks>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Morph.Services.Core.Grid.DXSampler.SaveToFile(System.String)">
            <summary>
            Saves the target texture to the specified filename as a png.
            </summary>
            <remarks>This method is not reliable: sometimes images are all black.</remarks>
            <param name="filename">The filename.</param>
        </member>
        <member name="T:Morph.Services.Core.Grid.GridSupport">
            <summary>
            Defines grid generation support methods.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Grid.GridSupport.SampleElevations(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Int32,System.Int32,System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Generates a bitmap in the GPU with encoded z values as RGB.  Samples span between the given min and max points and using the given rows and columns.
            </summary>
            <remarks>
            Each pixel represents the elevation of the surface at the given pixel location. The value is encoded as normalized elevation: R/255 + G/255^2 + B/255^3.
            </remarks>
            <param name="min">The origin of the samples.</param>
            <param name="max">The maximum extents of the samples.</param>
            <param name="cols">The number of columns in the sampling grid.</param>
            <param name="rows">The number of rows in the sampling grid.</param>
            <param name="points">The list of points that defines the surface.</param>
            <param name="triangles">The list of triangles that defines surface.</param>
            <param name="inclusions">Enumeration of linestrings representing inclusion zones (or <c>null</c>).</param>
            <param name="exclusions">Enumeration of linestrings representing exclusion zones (or <c>null</c>).</param>
            <returns>The resulting bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.GridSupport.Blit(System.Windows.Media.Imaging.BitmapSource,System.String,System.String,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Blits the source bitmap in the GPU using the specified technique in the specified effect source code.
            </summary>
            <param name="source">The source bitmap with encoded elevations.</param>
            <param name="effectCode">The source code in HLSL that specifies the technique to use.</param>
            <param name="technique">The name of the technique to use.</param>
            <param name="min">The origin of the samples.</param>
            <param name="max">The maximum extents of the samples.</param>
            <returns>The resulting bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.GridSupport.CutFillViolationMap(System.Windows.Media.Imaging.BitmapSource,System.String,System.String,System.Single,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Creates a bitmap that is a color-coded map based on slopes at each sample according to the specified the min/max slopes.
            </summary>
            <param name="source">The source bitmap to blit.</param>
            <param name="effectCode">The source code in HLSL that specifies the technique to use.</param>
            <param name="technique">The name of the technique to use.</param>
            <param name="minZ">The minimum elevation of the cut fill surface.</param>
            <param name="min">The origin of the samples.</param>
            <param name="max">The maximum extents of the samples.</param>
            <param name="cols">The number of columns in the sampling grid.</param>
            <param name="rows">The number of rows in the sampling grid.</param>
            <param name="maxCutDepth">Maximum cut depth</param>
            <param name="maxFillDepth"> Maximum Fill depth</param>
            <returns>The resulting bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.GridSupport.OnGradeMap(System.Windows.Media.Imaging.BitmapSource,System.String,System.String,System.Single,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Int32,System.Int32,System.Single)">
            <summary>
            On Grade Band bitmap(not used)
            </summary>
            <param name="source"></param>
            <param name="effectCode"></param>
            <param name="technique"></param>
            <param name="minZ"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="cols"></param>
            <param name="rows"></param>
            <param name="onGrade"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.GridSupport.SlopeMap(System.Windows.Media.Imaging.BitmapSource,System.String,System.String,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a bitmap that is a color-coded map based on slopes at each sample according to the specified the min/max slopes.
            </summary>
            <param name="source">The source bitmap to blit.</param>
            <param name="effectCode">The source code in HLSL that specifies the technique to use.</param>
            <param name="technique">The name of the technique to use.</param>
            <param name="min">The origin of the samples.</param>
            <param name="max">The maximum extents of the samples.</param>
            <param name="cols">The number of columns in the sampling grid.</param>
            <param name="rows">The number of rows in the sampling grid.</param>
            <param name="maxSlope">The maximum slope</param>
            <returns>The resulting bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.GridSupport.SlopeMap(System.Windows.Media.Imaging.BitmapSource,System.String,System.String,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Int32,System.Int32,System.Single,System.Single,System.Windows.Media.Brush)">
            <summary>
            Creates a bitmap that is a color-coded map based on slopes at each sample according to the specified the min/max slopes and color-code brush.
            </summary>
            <remarks>
            Each sample point produces two slope values (horizontal and vertical). These values are normalized according to the specified min/max slopes into the [0,0] -> [1,1] space,
            where (0.5,0.5) is the origin.  The normalized values are used to access the corresponing color in the map specified by the given brush.
            </remarks>
            <param name="source">The source bitmap to blit.</param>
            <param name="effectCode">The source code in HLSL that specifies the technique to use.</param>
            <param name="technique">The name of the technique to use.</param>
            <param name="min">The origin of the samples.</param>
            <param name="max">The maximum extents of the samples.</param>
            <param name="cols">The number of columns in the sampling grid.</param>
            <param name="rows">The number of rows in the sampling grid.</param>
            <param name="minSlope">The mininum slope.</param>
            <param name="maxSlope">The maximum slope</param>
            <param name="colorCodeBrush">The brush that specifies the color-code</param>
            <returns>The resulting bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.GridSupport.SlopeMap(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Int32},System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Int32,System.Int32,System.Single,System.Single,System.Windows.Media.Brush)">
            <summary>
            Creates a bitmap that is a color-coded map based on slopes at each sample according to the specified the min/max slopes and color-code brush.
            </summary>
            <remarks>
            The slope at each sample point is the slope of the triangle that contains it. 
            The slope values are normalized according to the specified min/max slopes into the [0,0] -> [1,1] space,
            where (0.5,0.5) is the origin.  The normalized values are used to access the corresponing color in the map 
            specified by the given brush.
            </remarks>
            <param name="points">The list of points that defines the surface.</param>
            <param name="triangles">The list of triangles that defines surface.</param>
            <param name="min">The origin of the samples.</param>
            <param name="max">The maximum extents of the samples.</param>
            <param name="cols">The number of columns in the sampling grid.</param>
            <param name="rows">The number of rows in the sampling grid.</param>
            <param name="minSlope">The mininum slope.</param>
            <param name="maxSlope">The maximum slope</param>
            <param name="colorCodeBrush">The brush that specifies the color-code</param>
            <returns>The resulting bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.GridSupport.SlopeMap(System.Windows.Media.Imaging.BitmapSource,System.String,System.String,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Windows.Media.Brush)">
            <summary>
            Creates a bitmap that is a color-coded map based on slopes at each sample according to the specified the min/max slopes and color-code brush.
            </summary>
            <remarks>
            Each sample point produces two slope values (horizontal and vertical). These values are normalized according to the specified min/max slopes into the [0,0] -> [1,1] space,
            where (0.5,0.5) is the origin.  The normalized values are used to access the corresponing color in the map specified by the given brush.
            </remarks>
            <param name="source">The source bitmap to blit.</param>
            <param name="effectCode">The source code in HLSL that specifies the technique to use.</param>
            <param name="technique">The name of the technique to use.</param>
            <param name="min">The origin of the samples.</param>
            <param name="max">The maximum extents of the samples.</param>
            <param name="cols">The number of columns in the sampling grid.</param>
            <param name="rows">The number of rows in the sampling grid.</param>
            <param name="minSlope">The mininum slope.</param>
            <param name="maxSlope">The maximum slope</param>
            <param name="direction">The slope map direction measured from x-axis of cartesian coordnate in counter clockwise</param>
            <param name="colorCodeBrush">The brush that specifies the color-code</param>
            <returns>The resulting bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.GridSupport.GetEmbeddedResourceString(System.String)">
            <summary>
            Retrieves the string value of a resource in this assembly.
            </summary>
            <param name="resourceName">The resource name.</param>
            <returns>The value of the resource.</returns>
        </member>
        <member name="M:Morph.Services.Core.Grid.GridSupport.FromPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Constructs a <c>PolySeg</c> from a list of points.
            </summary>
            <param name="points">List of points.</param>
            <returns>The <c>PolySeg</c> instance.</returns>
        </member>
        <member name="T:Morph.Services.Core.Solvers.GraphSearch">
            <summary>
            Implement graph search algorithms including breath first, depth first, hybrid, etc.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Solvers.GraphSearch.BreathFirstSearch(Morph.Services.Core.Solvers.IGraph,Morph.Services.Core.Solvers.INode)">
            <summary>
            Breadth first search algorithm
            </summary>
            <param name="graph">object that implements IGraph interface</param>
            <param name="starter">Object that implements INode interface </param>
        </member>
        <member name="T:Morph.Services.Core.Solvers.INode">
            <summary>
            Interface for node in graph
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Solvers.INode.ID">
            <summary>
            Unique ID
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Solvers.INode.Processed">
            <summary>
            boolean variable for marking a node for visitation
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Solvers.INode.Level">
            <summary>
            level counted from root (level = 1 for root)
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Solvers.IGraph">
            <summary>
            Interface for graph class
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Solvers.IGraph.Expand(Morph.Services.Core.Solvers.INode)">
            <summary>
            Method for expanding nodes (get successors)
            </summary>
            <param name="n">Node that is used to find its successors</param>
            <returns>List of successor nodes</returns>
        </member>
        <member name="M:Morph.Services.Core.Solvers.IGraph.Process(Morph.Services.Core.Solvers.INode)">
            <summary>
            Method for processing node
            </summary>
            <param name="n"></param>
        </member>
        <member name="T:Morph.Services.Core.Solvers.PriorityQueue`1">
            <summary>
            This class implements a min-priority queue using a binary heap.
            </summary>
            <remarks>Lower items have highier priorities.</remarks>
            <typeparam name="T">The element type of the queue.</typeparam>
        </member>
        <member name="M:Morph.Services.Core.Solvers.PriorityQueue`1.#ctor">
            <summary>
            Constructs an empty priority queue.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Solvers.PriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs a priority queue using the specified collection of elements.
            </summary>
            <remarks>The elements should be in heap order.</remarks>
            <param name="elements"></param>
        </member>
        <member name="M:Morph.Services.Core.Solvers.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Adds an new item to the queue and updates the queue according to priority.
            </summary>
            <param name="item">The new item to be inserted.</param>
        </member>
        <member name="M:Morph.Services.Core.Solvers.PriorityQueue`1.Dequeue">
            <summary>
            Removes the top-level item and updates the queue according to priority.
            </summary>
            <returns>The top-level item.</returns>
        </member>
        <member name="M:Morph.Services.Core.Solvers.PriorityQueue`1.Update(`0)">
            <summary>
            Updates the priority queue by using a new value associated to the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Morph.Services.Core.Solvers.PriorityQueue`1.Contains(`0)">
            <summary>
            Determines whether an element is in the queue.
            </summary>
            <param name="element">The element to locate in the queue.</param>
            <returns>Returns <c>true</c> if the element is found in the queue; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Services.Core.Solvers.PriorityQueue`1.Peek">
            <summary>
            Returns the top-level item in the queue without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morph.Services.Core.Solvers.PriorityQueue`1.Count">
            <summary>
            Returns the number of items in the queue.
            </summary>
            <returns>The number of items.</returns>
        </member>
        <member name="M:Morph.Services.Core.Solvers.PriorityQueue`1.ToString">
            <summary>
            Turns the content into a string that represents the symbolic value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Solvers.PriorityQueue`1.IsConsistent">
            <summary>
            Returns <c>true</c> if the queue is consistent (ie., it is a valid binary heap).
            </summary>
            <returns>Returns <c>true</c> if consistent; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.DitchUtils">
            <summary>
            This class provides utility methods to compute rows.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.DitchUtils.ComputeNaturalDitches(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Int32},Morph.Services.Core.DataModel.Linestring,System.Double)">
            <summary>
            Computes candidates ditches by identifying/growing from points that are under threshold height
            </summary>
            <param name="points">Points of original survey data</param>
            <param name="triangles">Vertices represented by index of corresponding survey points</param>
            <param name="boundary">Linestring of boundary points</param>
            <param name="margin">Margin of identifying candidate ditches</param>
            <returns>Natural ditch segments</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.DitchUtils.ComputeCandidateDitches(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Int32},Morph.Services.Core.DataModel.Linestring,System.Double)">
            <summary>
            Computes candidates ditches by identifying/growing from points that are under threshold height
            </summary>
            <param name="points">Points of original survey data</param>
            <param name="triangles">Vertices represented by index of corresponding survey points</param>
            <param name="boundary">Linestring of boundary points</param>
            <param name="margin">Margin of identifying candidate ditches</param>
            <returns>Candidate 3D ditche segments</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.DitchUtils.AddDitch(System.Collections.Generic.IList{Morph.Services.Core.DataModel.Ditch3D},System.Int32,System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Int32},Morph.Services.Core.DataModel.Linestring,System.Collections.Generic.List{System.Int32},System.Double)">
            <summary>
            Adds a ditch to a given index of data point by identifying neighbour point that is below threshold height
            </summary>
            <param name="ditches">3D ditches</param>
            <param name="index">Index of current point in investigation</param>
            <param name="points">Points of original survey data</param>
            <param name="triangles">Vertices represented by index of corresponding survey points</param>
            <param name="boundary">Linestring of boundary points</param>
            <param name="processed">Indices of points that are alread added to the candidate ditches</param>
            <param name="cutZ">Threshold height</param>
        </member>
        <member name="T:Morph.Services.Core.Tools.DrainageUtils">
            <summary>
            This class provides utility methods to compute drainage information.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.DrainageUtils.ComputeControlPoints(System.Windows.Point,System.Windows.Point,System.Double,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Returns the list of rows that lie between the pipeline and a boundary at the given resolution and direction. It also takes into account exclusion zones.
            </summary>
            <param name="min">The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the pipeline where furrows originate.</param>
            <param name="max">The direction of the furrows.</param>
            <param name="cellSize">The separation between furrows.</param>
            <param name="boundary">The boundary that defines the limits of the surface.</param>
            <param name="exclusions">A list of boundaries that define the exclusion zones. It can be <c>null</c>.</param>
            <returns>A list of control points</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.DrainageUtils.ComputeFlowPaths(System.Double[0:,0:],System.Double,System.Windows.Point)">
            <summary>
            Computes flow path (toward lowest neighbour).
            </summary>
            <param name="zs">Height data</param>
            <param name="cellSize">Cell size</param>
            <param name="origin">Origin (the lowest and bottom)</param>
            <returns>List of segments that represent flow path</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.DrainageUtils.ComputePondMap(System.Double[0:,0:],System.Double,System.Windows.Point,System.Int32)">
            <summary>
            Generates bitmap for detected ponding.
            </summary>
            <param name="zs">Data points</param>
            <param name="cellSize">Cell size</param>
            <param name="origin">Origin (the lowest and bottom)</param>
            <param name="levels">Levels of color depth that shows the depth of pond</param>
            <returns>bitmap in byte array</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.DrainageUtils.ComputeWatershed(Morph.Services.Core.Tools.GridWaterShed,System.Threading.CancellationToken,System.Predicate{System.Single})">
            <summary>
            Generates bitmap for watershed.
            </summary>
            <param name="gw">GridWaterShed object</param>
            <param name="cancel">Cancellation token to be used to cancel the computation</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage [0,100] and returns <c>false</c> to continue or <c>true</c> to abort.</param>
            <returns>bitmap in byte array</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.DrainageUtils.ComputeFlowArea(Morph.Services.Core.Tools.GridWaterShed,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Compute flow are for a given control node by nodeId
            </summary>
            <param name="gw">GridWaterShed object</param>
            <param name="query">Point of interest</param>
        </member>
        <member name="T:Morph.Services.Core.Tools.GridNode">
            <summary>
            This class captures control node information that is used in watershed computation
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridNode.#ctor(System.Int32,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Instantiate GridNode object based on id (unique) and point information
            </summary>
            <param name="id">A unique integer identifier</param>
            <param name="point">A point 3D</param>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridNode.ID">
            <summary>
            Unique ID
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridNode.Point">
            <summary>
            Node location in point3D
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridNode.Processed">
            <summary>
            Indication whether the node has been processed in BFS algorithm
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridNode.Level">
            <summary>
            Indication of the level at which the node is processed in BFS algorithm
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridNode.IsLeaf">
            <summary>
            Indication whether the node is leaf or not
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridNode.Parent">
            <summary>
            Identification of parent
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridNode.FlowRate">
            <summary>
            Stores flow rate
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridNode.IsBoundary">
            <summary>
            Indication whether the node is field boundary or not
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridNode.GroupId">
            <summary>
            Indication of which watershed the node belong to (only applicable for watershed)
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridNode.InitialGroupId">
            <summary>
            Group Id that is assigned before merging
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridNode.ReceivedFrom">
            <summary>
            Node Id from which the water flows during merging
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridNode.SendTo">
            <summary>
            Node Id to which the water is flowing to during merging
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridNode.CompareTo(Morph.Services.Core.Solvers.INode)">
            <summary>
            Comparer for sorting
            </summary>
            <param name="node">Node to be compared</param>
            <returns></returns>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridNode.UpwardPaths">
            <summary>
            All <see cref="T:Morph.Services.Core.Tools.FlowPath"/> instances going upstream.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridNode.ToString">
            <summary>
            Returns a string that represents the current node.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridGraph.Expand(Morph.Services.Core.Solvers.INode)">
            <summary>
             Returns the next generation nodes to the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The list of children nodes.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridGraph.Process(Morph.Services.Core.Solvers.INode)">
            <summary>
            A node processing method (marks the node as processed and puts appropriate value for the corresponding pixel
            </summary>
            <param name="node">Node to be processed</param>
        </member>
        <member name="T:Morph.Services.Core.Tools.GridWaterShed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.Nodes">
            <summary>
            All the nodes
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.Edges">
            <summary>
            Connection to children (downward slope)
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.UpEdges">
            <summary>
            Connection to parent (upward slope)
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.Columns">
            <summary>
            Number of columns in grid
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.Rows">
            <summary>
            Number of rows in grid
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.Pixels">
            <summary>
            Pixels values for coloring
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.Roots">
            <summary>
            Surface peaks (no upward nodes connected), used during BFS
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.Exits">
            <summary>
            Exists and nadir of the pond
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.Levels">
            <summary>
            Indication of the level at which the node is processed in BFS algorithm
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.ClipElevation">
            <summary>
            Elevation cliper
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.Segments">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.Flows">
            <summary>
            A list of flow path
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.WaterSheds">
            <summary>
            Watersheds list
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.WaterShedInfo">
            <summary>
            Watershed info that is used to hold initial watershed information (used for merging and flow area calculation)
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.GridWaterShed.MergeRecords">
            <summary>
            Merge history
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridWaterShed.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridWaterShed.#ctor(System.Double[0:,0:],System.Double,System.Windows.Point,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="zs">Elevation in grided form</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="origin">The bottom-left corner of the grid.</param>
            <param name="levels">The number of color levels.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridWaterShed.Expand(Morph.Services.Core.Solvers.INode)">
            <summary>
             Returns the next generation nodes to the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The list of children nodes.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridWaterShed.Process(Morph.Services.Core.Solvers.INode)">
            <summary>
            A node processing method (marks the node as processed and puts appropriate value for the corresponding pixel
            </summary>
            <param name="n">Node to be processed</param>
        </member>
        <member name="T:Morph.Services.Core.Tools.FlowPath">
            <summary>
            Represents flow information from one node to another
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowPath.Start">
            <summary>
            Starting node
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowPath.End">
            <summary>
            Destination node
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowPath.Quantity">
            <summary>
            Flow quantity
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.FlowPath.#ctor(Morph.Services.Core.Tools.GridNode,Morph.Services.Core.Tools.GridNode,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="start">Start node</param>
            <param name="end">Destination node</param>
            <param name="quantity">Water quantity</param>
        </member>
        <member name="T:Morph.Services.Core.Tools.WaterShed">
            <summary>
            Represent watershed
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.WaterShed.Boundaries">
            <summary>
            Watershed boundary
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.WaterShed.Nodes">
            <summary>
            Nodes belong to watershed
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.WaterShed.IsMerged">
            <summary>
            Indication of whether this watershed has been merged
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.WaterShed.IsPond">
            <summary>
            Indication whether this watershed is pond
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.WaterShed.Id">
            <summary>
             Unique watershed Id
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Tools.WaterShedInfo">
            <summary>
            Hold informatioin about watershed (used for merging and flow area calculation)
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.WaterShedInfo.Id">
            <summary>
            Unique identifier
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.WaterShedInfo.NodeIds">
            <summary>
            Ids of nodes that belong to the watershed
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.WaterShedInfo.BoundaryIds">
            <summary>
            Id of boundary nodes
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.WaterShedInfo.TotalNodes">
            <summary>
            Total number of nodes
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Tools.FlowAnalysisToolsExtension">
            <summary>
            Flow analysis tools extension methods for ISurfaceInfo.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.FlowAnalysisToolsExtension.ComputeFlowField(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Threading.CancellationToken)">
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <param name="cancel">Cancellation token to be used to cancel the computation.</param>
            <returns>The <see cref="T:Morph.Services.Core.Tools.FlowField"/> instance for the specified surface.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.FlowAnalysisToolsExtension.GenerateCummulativeValueMap(Morph.Services.Core.Tools.ValueField,System.Double,System.Double,System.Collections.Generic.IList{System.Windows.Media.Color})">
            <summary>
            Generates a cummulative value color-coded bitmap for the given flow field.
            </summary>
            <param name="valueField">The <see cref="T:Morph.Services.Core.Tools.ValueField"/> instance.</param>
            <param name="minValue">The mininum cummulative value of the color-code palette.</param>
            <param name="maxValue">The maximum cummulative value of the color-code palette.</param>
            <param name="colors">Color palete to generate appropriate color for the cummulative values.</param>
            <returns>The resulting cummulative map color-coded bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.FlowAnalysisToolsExtension.GenerateFlowFieldMap(Morph.Services.Core.Tools.FlowField,System.String)">
            <summary>
            Generates a cummulative value color-coded bitmap for the given flow field.
            </summary>
            <param name="flowField">The <see cref="T:Morph.Services.Core.Tools.FlowField"/> instance.</param>
            <param name="nodeColor">The color for slope distribution (predefined name or #ARGB). The default is yellow.</param>
            <returns>The resulting cummulative map color-coded bitmap.</returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.SlopeField">
            <summary>
            Describes the nodes and their slope connections of a surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.SlopeField.Cols">
            <summary>
            Number of columns in the field.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.SlopeField.Rows">
            <summary>
            Number of rows in the field.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.SlopeField.Origin">
            <summary>
            Origin of the field.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.SlopeField.CellSize">
            <summary>
            Size of a bin.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.SlopeField.Nodes">
            <summary>
            Grid of flow nodes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.SlopeField.Peaks">
            <summary>
            List of source flow nodes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.SlopeField.Sinks">
            <summary>
            List of target flow nodes.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.SlopeField.#ctor(System.Windows.Point,System.Double,Morph.Services.Core.Tools.FlowNode[0:,0:],System.Collections.Generic.List{Morph.Services.Core.Tools.FlowNode},System.Collections.Generic.List{Morph.Services.Core.Tools.FlowNode})">
            <summary>
            Constructs an instance with the specified nodes and peaks.
            </summary>
            <param name="origin">The origin of the field.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="nodes">Grid of flow nodes.</param>
            <param name="peaks">List of source flow nodes.</param>
            <param name="sinks">List of target flow nodes.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.SlopeField.FromSurface(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Threading.CancellationToken)">
            <summary>
            Creates the flow nodes for the specified surface using the specified cell size.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <param name="cancel">Cancellation token to be used to cancel the computation.</param>
            <returns>A <c>SlopeField</c> instance with the content.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SlopeField.FromSurfaceNoExpand(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Threading.CancellationToken)">
            <summary>
            Creates the flow nodes for the specified surface using the specified cell size.  The surface sampling is not extrapolated.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <param name="cancel">Cancellation token to be used to cancel the computation.</param>
            <returns>A <c>SlopeField</c> instance with the content.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SlopeField.ComputeReachability(Morph.Services.Core.Tools.FlowNode)">
            <summary>
            Returns a reachability matrix based on slope of all the defined nodes according to the specified target node.
            </summary>
            <param name="target">The target node.</param>
            <returns>A reachability matrix: 0 not reachable, >0 reachable.</returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.FlowField">
            <summary>
            Describes the nodes and their flow connections of a surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowField.Cols">
            <summary>
            Number of columns in the field.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowField.Rows">
            <summary>
            Number of rows in the field.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowField.Origin">
            <summary>
            Origin of the field.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowField.CellSize">
            <summary>
            Size of a bin.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowField.Nodes">
            <summary>
            Grid of flow nodes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowField.Peaks">
            <summary>
            List of source flow nodes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowField.Sinks">
            <summary>
            List of target flow nodes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowField.Exit">
            <summary>
            Sink node.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.FlowField.#ctor(System.Windows.Point,System.Double,Morph.Services.Core.Tools.FlowNode[0:,0:],System.Collections.Generic.List{Morph.Services.Core.Tools.FlowNode},System.Collections.Generic.List{Morph.Services.Core.Tools.FlowNode},Morph.Services.Core.Tools.FlowNode)">
            <summary>
            Constructs an instance with the specified nodes and peaks.
            </summary>
            <param name="origin">The origin of the field.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="nodes">Grid of flow nodes.</param>
            <param name="peaks">List of source flow nodes.</param>
            <param name="sinks">List of target flow nodes.</param>
            <param name="exit">The flow node instance that captures all exists from the terrain.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.FlowField.FromSurface(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Threading.CancellationToken)">
            <summary>
            Creates the flow nodes for the specified surface using the specified cell size.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <param name="cancel">Cancellation token to be used to cancel the computation.</param>
            <returns>A <c>FlowField</c> instance with the content.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.FlowField.ComputeUpstreamContributingArea">
            <summary>
            Computes the upstream contributing area of each node.
            </summary>
            <returns>An instance of <see cref="T:Morph.Services.Core.Tools.ValueField"/> with the result.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.FlowField.ComputeRunoff(System.Double,System.Double)">
            <summary>
            Computes the downstream contributing area of each node.
            </summary>
            <param name="precipitation">Amount of water precipitation in height/area.</param>
            <param name="infiltration">Amount of water infiltration capacity in height/area.</param>
            <returns>An instance of <see cref="T:Morph.Services.Core.Tools.ValueField"/> with the result.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.FlowField.FromSurfaceGPU(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Samples the surface using the specified cell size.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <returns>The bidimensional array of sampled elevations.</returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.FlowNode">
            <summary>
            Represents a surface cell that captures flow information.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowNode.I">
            <summary>
            Column location of this node.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowNode.J">
            <summary>
            Row location of this node.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowNode.Z">
            <summary>
            Elevation of this node.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.FlowNode.Upwards">
            <summary>
            Links to the upward neighbors sorted by proportion in ascending order.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.FlowNode.Downwards">
            <summary>
            Links to the downward neighbors sorted by proportion in ascending order.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.FlowNode.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Creates an empty instance at a given location.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.FlowNode.Value">
            <summary>
            Value associated to this node via one of the accumulation computation methods.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.FlowNode.ToString">
            <summary>
            Returns a string that represents the current segment.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.FlowNode.CompareTo(Morph.Services.Core.Tools.FlowNode)">
            <summary>
            Compares the current instance with another flow node instance. The instance with the lesser Z value preceeds the other instance.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.ValueField">
            <summary>
            Represents the result of a flow field cummulative computation.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.ValueField.Cols">
            <summary>
            Number of columns in the field.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.ValueField.Rows">
            <summary>
            Number of rows in the field.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.ValueField.Origin">
            <summary>
            Origin of the field.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.ValueField.CellSize">
            <summary>
            Size of a bin.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.ValueField.MinValue">
            <summary>
            Minimum cummulative value of the computation.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.ValueField.MaxValue">
            <summary>
            Maximum cummulative value of the computation.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.ValueField.ExitValue">
            <summary>
            The total cummulative value exiting the field.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.ValueField.Values">
            <summary>
            The cummulative values of the computation.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.ValueField.HasExit">
            <summary>
            Flag to indicate if the node has an exit link.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.ValueField.#ctor(System.Windows.Point,System.Double,Morph.Services.Core.Tools.FlowNode[0:,0:],System.Double,System.Double,Morph.Services.Core.Tools.FlowNode)">
            <summary>
            Creates an instance with the specified parameters.
            </summary>
            <param name="origin">The origin of the field.</param>
            <param name="cellSize">The size of the bin.</param>
            <param name="nodes">The flow nodes.</param>
            <param name="minValue">The maximum cummulative value.</param>
            <param name="maxValue">The minimum cummulative value.</param>
            <param name="exit">The exit node of the field.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.ValueField.GetValue(System.Double,System.Double)">
            <summary>
            Returns the value of the bin that corresponds to the given easting and northing coordinates.
            </summary>
            <param name="east">The easting coordinate.</param>
            <param name="north">The northing coordinate.</param>
            <returns>The cummulative value at the specified location.</returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.FurrowsInfo">
            <summary>
            Class to encapsulate computations relevant to irrigation cases: layout of furrows within a surface.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Tools.GraphicsUtils">
            <summary>
            Graphics utility to understand the graphic card capability
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.GraphicsUtils.GetGraphicsFeatureLevel">
            <summary>
            Returns the graphics card ability.
            Returns an integer equivalent of the enum.  The caller does not need to reference SlimDX.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.GraphicsUtils.IsComputeShaderSupported">
            <summary>
            Returns <c>true</c> if graphics card supports compute shaders.
            </summary>
            <returns><c>true</c> if compute shaders is supported; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.GridUtils">
            <summary>
            This class provides utility methods to compute rows.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.ComputeGridRowsAndColumns(System.Double,System.Double,Morph.Services.Core.DataModel.Linestring,System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}}@,System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}}@)">
            <summary>
            Returns the list of rows and columns that lie within boundary at the given resolution and direction.
            </summary>
            <param name="direction">The direction of the furrows.</param>
            <param name="resolution">The separation between furrows.</param>
            <param name="boundary">The boundary that defines the limits of the surface.</param>
            <param name="rows">The list of rows (list of list of points).</param>
            <param name="columns">The list of columns (list of list of points).</param>
        </member>
        <member name="T:Morph.Services.Core.Tools.GridUtils.PointAdjustFunction">
            <summary>
            Adjusts point location.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.RotateGridRegion(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Double,System.Nullable{System.Windows.Media.Media3D.Point3D},Morph.Services.Core.Tools.GridUtils.PointAdjustFunction)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="headingDegrees"></param>
            <param name="cellSize"></param>
            <param name="rotationCenter"></param>
            <param name="paf"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.SaveGrid(System.String,System.Double[0:,0:])">
            <summary>
            Saves the specified bidimensional grid of elevations into a file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="grid">The bidimensional grid of elevations.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.SaveGrid(System.String,System.UInt32[0:,0:])">
            <summary>
            Saves the specified bidimensional grid of elevations into a file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="grid">The bidimensional grid of elevations.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.SaveGridCsv(System.String,System.Double[0:,0:])">
            <summary>
            Saves the specified bidimensional grid of elevations into a file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="grid">The bidimensional grid of elevations.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.SaveGridDataOnly(System.String,System.Double[0:,0:])">
            <summary>
            Saves the specified bidimensional grid of elevations into a file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="grid">The bidimensional grid of elevations.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.SaveBitmap(System.Windows.Media.Imaging.BitmapSource,System.String)">
            <summary>
            Saves the specified bitmap into a file in png format.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.ConvertBitmapToBytes(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts the specified bitmapSource into a byte array.
            </summary>
            <param name="bitmapSource">The bitmap.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.ConvertBytesToImage(System.Byte[])">
            <summary>
            Converts the specified bitmapSource into a byte array.
            </summary>
            <param name="imageData">The bitmap.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.CreateDefaultBrush">
            <summary>
            Creates default brush with Blue, Aqua, Green, Yellow, and Red
            </summary>
            <returns>Brush object</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.RotateImage(System.Windows.Media.Imaging.BitmapSource,System.Double)">
            <summary>
            Rotate bitmap source for a given angle in a clockwise direction
            </summary>
            <param name="image">Image source to be rotated</param>
            <param name="angle">Angle that is used to rotate image in clockwise direction</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.GetBitmapSourceFromBrush(System.Windows.Media.Brush)">
            <summary>
            Get bitmap source from a linear brush
            </summary>
            <param name="colorBrush"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.CreateSketchupFile(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D}},Morph.Services.Core.Interfaces.ISurfaceInfo[])">
            <summary>
            Creates sketch up file for given three surfaces (source, target, result)
            </summary>
            <param name="skuFile">Sketch up file name</param>
            <param name="areas">Areas</param>
            <param name="surfaces"></param>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridUtils.ConvertBitmapToBitmapSource(System.Drawing.Bitmap)">
            <summary>
            ConvertBitmapToBitmapSource
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.GridSamplingRegion">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.GridSamplingRegion.Origin">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.GridSamplingRegion.End">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.GridSamplingRegion.Rows">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.GridSamplingRegion.Columns">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.GridSamplingRegion.Heading">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.GridSamplingRegion.CellSize">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.GridSamplingRegion.RotationCenter">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.GridSamplingRegion.#ctor(System.Windows.Point,System.Windows.Point,System.Int32,System.Int32,System.Double,System.Double,System.Windows.Point)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Tools.PointLocator">
            <summary>
            This class efficiently finds the nearest neighbor point from a query point.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.PointLocator.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Creates an instance of this class with a given set of points.
            </summary>
            <param name="points">The set of points to use as targets.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.PointLocator.PickPoint(System.Windows.Point,System.Double)">
            <summary>
            Returns the nearest point from the set if its length to the query point is less than the given radius. Otherwise, returns the query point.
            </summary>
            <param name="query">The query point.</param>
            <param name="radius">The maximum radius.</param>
            <returns>The nearest point if wihin the radius; otherwise, the query point.</returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.Point3DLocator">
            <summary>
            This class efficiently finds the nearest neighbor point from a query point using 3D points.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.Point3DLocator.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Creates an instance of this class with a given set of points.
            </summary>
            <param name="points">The set of points to use as targets.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.Point3DLocator.PickPoint(System.Windows.Media.Media3D.Point3D,System.Double)">
            <summary>
            Returns the nearest point from the set if its length to the query point is less than the given radius. Otherwise, returns the query point.
            </summary>
            <param name="query">The query point.</param>
            <param name="radius">The maximum radius.</param>
            <returns>The nearest point if wihin the radius; otherwise, the query point.</returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.FurrowsUtils">
            <summary>
            This class provides utility methods to compute rows.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.FurrowsUtils.ComputeRows(Morph.Services.Core.DataModel.Linestring,System.Double,System.Double,Morph.Services.Core.DataModel.Linestring,System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Linestring})">
            <summary>
            Returns the list of rows that lie between the pipeline and a boundary at the given resolution and direction. It also takes into account exclusion zones.
            </summary>
            <param name="pipeline">The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the pipeline where furrows originate.</param>
            <param name="direction">Cartisian angle of the direction of the furrows in radians.</param>
            <param name="resolution">The separation between furrows.</param>
            <param name="boundary">The boundary that defines the limits of the surface.</param>
            <param name="exclusions">A list of boundaries that define the exclusion zones. It can be <c>null</c>.</param>
            <returns>A list of <see cref="T:Morph.Services.Core.DataModel.Linestring"/>. Each linestring is a furrow.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.FurrowsUtils.ComputeControlPoints(Morph.Services.Core.DataModel.Linestring,System.Double,System.Double,Morph.Services.Core.DataModel.Linestring,System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Linestring})">
            <summary>
            Returns the list of rows that lie between the pipeline and a boundary at the given resolution and direction. It also takes into account exclusion zones.
            </summary>
            <param name="pipeline">The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the pipeline where furrows originate.</param>
            <param name="direction">Cartisian angle of the direction of the furrows in radians.</param>
            <param name="resolution">The separation between furrows.</param>
            <param name="boundary">The boundary that defines the limits of the surface.</param>
            <param name="exclusions">A list of boundaries that define the exclusion zones. It can be <c>null</c>.</param>
            <returns>A list of <see cref="T:Morph.Services.Core.DataModel.Linestring"/>. Each linestring is a furrow.</returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.SurfaceInfoCommonExtension">
            <summary>
            Common extension methods for ISurfaceInfo.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoCommonExtension.PickTriangle(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Windows.Point)">
            <summary>
            Finds the index of the triangle that contains the specified query point (if any).
            </summary>
            <param name="surfaceInfo">The ISurfaceInfo interface.</param>
            <param name="query">The query point.</param>
            <returns>Index of triangle (none = -1).</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoCommonExtension.GetElevation(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Windows.Point,System.Object)">
            <summary>
            Returns the elevation at the query point (if any).
            </summary>
            <param name="surfaceInfo">The ISurfaceInfo interface.</param>
            <param name="query">The query point.</param>
            <param name="locator">Locator instance that can be used to efficently perform massive queries on a surface.</param>
            <returns>The elevation of the surface at the query point or <c>NaN</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoCommonExtension.DrapeLinestring(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Returns a 3D linestring by drapping the specified 2D linestring to the given surface.
            </summary>
            <param name="surface">The surface instance.</param>
            <param name="pipeline">The 2D linestring.</param>
            <returns>The 3D linestring.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoCommonExtension.GetNormal(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Windows.Point,System.Object)">
            <summary>
            Returns the normal of the surface at the query point (if any).
            </summary>
            <param name="surfaceInfo">The ISurfaceInfo interface.</param>
            <param name="query">The query point.</param>
            <param name="locator">Locator instance that can be used to efficently perform massive queries on a surface.</param>
            <returns>The normal of the surface at the query point or <c>NaN</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoCommonExtension.GetLocator(Morph.Services.Core.Interfaces.ISurfaceInfo)">
            <summary>
            Returns a locator instance that can be used to perform massive queries to a surface efficiently.
            </summary>
            <remarks>
            This method is expensive. You should call this method once to obtain a locator instance and then use that 
            instance to perform all queries.
            </remarks>
            <param name="surfaceInfo">The ISurfaceInfo instance.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoCommonExtension.AverageTriangleArea2D(Morph.Services.Core.Interfaces.ISurfaceInfo)">
            <summary>
            Returns the average plane area of all triangles in this surface.
            </summary>
            <param name="surfaceInfo">The ISurfaceInfo instance.</param>
            <returns>The average triangle plane area.</returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.DtmLocator">
            <summary>
            This class construts a KDTree associated with a given surface for the purpose of performing efficient queries.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Tools.SurfaceInfoToolsExtension">
            <summary>
            Analytic tools extension methods for ISurfaceInfo.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.SampleAsGrid(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Windows.Point,System.Double,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Double[0:,0:])">
            <summary>
            Samples the elevation of the surface in a grid pattern given an origin, cell size, and direction angle.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="origin">The bottom-left corner of the grid.</param>
            <param name="cellSize">The cell size.</param>
            <param name="inclusionZones">Enumeration of boundaries to include (if any).</param>
            <param name="exclusionZones">Enumeration of boundaries to exclude (if any).</param>
            <param name="grid">The elevation grid to populate (columns,rows).</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.SampleAsGrid(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Windows.Point,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Double[0:,0:])">
            <summary>
            Samples the elevation of the surface in a grid pattern given an origin, cell size, and direction angle.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="origin">The bottom-left corner of the grid.</param>
            <param name="cellSize">The cell size.</param>
            <param name="headingAngle">The heading of main direction in degrees.</param>
            <param name="inclusionZones">Enumeration of boundaries to include (if any).</param>
            <param name="exclusionZones">Enumeration of boundaries to exclude (if any).</param>
            <param name="grid">The elevation grid to populate (columns,rows).</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.SampleAsGridAndExpand(Morph.Services.Core.Interfaces.ISurfaceInfo,Morph.Services.Core.Tools.GridSamplingRegion,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Double[0:,0:],System.Double)">
            <summary>
            Samples the elevation of the surface in a grid pattern given an origin, cell size, and direction angle.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="rotatedSamplingRegion">The rotated grid sampling region.</param>
            <param name="inclusionZones">Enumeration of boundaries to include (if any).</param>
            <param name="exclusionZones">Enumeration of boundaries to exclude (if any).</param>
            <param name="grid">The elevation grid to populate (columns,rows).</param>
            <param name="expansionLimit">The radial distance from the boundary where the surface will be extended</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.SampleAsGridAndExtrapolate(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Windows.Point,System.Double,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Double[0:,0:])">
            <summary>
            Samples the elevation of the surface in a grid pattern given an origin and cell size.
            It extrapolates elevations on points that are just one cell size beyond the boundaries.
            Extrapolation is done by averaging all the elevations of immediate valid neighbors.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="minPoint">The bottom-left corner of the grid.</param>
            <param name="cellSize">The cell size.</param>
            <param name="inclusionZones">Enumeration of boundaries to include (if any).</param>
            <param name="exclusionZones">Enumeration of boundaries to exclude (if any).</param>
            <param name="grid">The elevation grid to populate (columns,rows).</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.ComputeEquivalentCellSize(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double)">
            <summary>
            Computes the cell size of the specified <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> such that the total 
            number of points of the regular grid over the surface is approximatelly the same as the
            surface (using the specified shrink factor).
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="shrinkFactor">The factor to reduce the total area of the surface.</param>
            <returns>The cell size that produce approximatelly the same number of points.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.ComputeCellSizeForNumberOfPoints(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Int32)">
            <summary>
            Computes the cell size such that the total number of points of the regular grid over the surface 
            does not exceed the specified point count.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="pointCount">The desired number of points.</param>
            <returns>The cell size that produce approximatelly the specifed point count.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.ComputeCellSizeForResolution(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Int32)">
            <summary>
            Computes the cell size of the specified <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> such that the total 
            number of points of the regular grid over the surface has the specified resolution.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="resolution">The number of pixels along the longest axis.</param>
            <returns>The cell size that produce approximatelly the same number of points.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.ComputeDrainageMinMaxSlopes(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Double@,System.Double@)">
            <summary>
            Computes the minimum and maximum drainage slopes for the given surface.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <param name="minSlope">The minimum drainage slope.</param>
            <param name="maxSlope">The maximum drainage slope.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.ComputeOmniMinMaxSlopes(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double@,System.Double@)">
            <summary>
            Computes the minimum and maximum omnidirectional slopes for the given surface.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="minSlope">The minimum omnidirectional slope.</param>
            <param name="maxSlope">The maximum omnidirectional slope.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.ComputeDirectionalMinMaxSlopes(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Double@,System.Double@)">
            <summary>
            Computes the minimum and maximum directional slopes for the given surface.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="headingAngle">The heading of main direction in degrees.</param>
            <param name="minSlope">The minimum directional slope.</param>
            <param name="maxSlope">The maximum directional slope.</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GenerateDrainageViolationsMap(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a drainage slope violations color-coded bitmap for the given surface.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="minSlope">The minimum allowable drainage slope.</param>
            <param name="maxSlope">The maximum allowable drainage slope.</param>
            <param name="boundary">The boundary that defines the bounds of the surface.</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <param name="minViolationColor">The color for minimum slope violation (predefined name or #ARGB). The default is blue.</param>
            <param name="maxViolationColor">The color for maximum slope violation (predefined name or #ARGB). The default is red.</param>
            <param name="vortexViolationColor">The color for maximum slope violation (predefined name or #ARGB). The default is black.</param>
            <param name="noViolationLightGreenColor"></param>
            <param name="noViolationGreenColor">The color for no violation (predefined name or #ARGB). The default is green.</param>
            <param name="noViolationDarkGreenColor"></param>
            <returns>The resulting drainage color-coded bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.NoOfPixelsPerColor32Bit(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Compute area for 32 bit color bitmap
            </summary>
            <param name="surfaceInfo"></param>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.NoOfPixelsPerColor8Bit(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Compute area for 8 bit color bitmap
            </summary>
            <param name="surfaceInfo"></param>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GenerateMaxCutFillViolationMap(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IList{System.Windows.Media.Color})">
            <summary>
            Generates a cut/fill violation map for the specified surface.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="maxCut">The maximum allowable cut depth.</param>
            <param name="maxFill">The maximum allowable fill height.</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <param name="violationColor">Violation colors <c>null</c>.</param>
            <returns>The resulting cut/fill violation color-coded bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GenerateOnGradeBandForSurface(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Generate on grade band on the selected surface (not used)
            </summary>
            <param name="surfaceInfo"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="resolution"></param>
            <param name="onGrade"></param>
            <param name="inclusionZones"></param>
            <param name="exclusionZones"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GeneratePondMap(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Generates a pond color-coded bitmap for the given surface and the specified levels.
            </summary>
            <remarks>The levels indicates a shading on the distance of cells from the vortex.</remarks>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="levels"></param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <returns>The resulting pond color-coded bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GeneratePondsAtElevationMap(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Double,System.Windows.Media.Brush,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="elevation">Elevation at which pond is investigated</param>
            <param name="colorCodeBrush">Color brush to generate appropriate color for slope analysis.</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <returns>The resulting pond color-coded bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GenerateWaterShedMap(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Int32,Morph.Services.Core.Tools.GridWaterShed@,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Threading.CancellationToken,System.Predicate{System.Single})">
            <summary>
            Generates a watershed color-coded bitmap for the given surface and the specified levels.
            </summary>
            <remarks>The levels indicates a shading on the distance of cells from the exit.</remarks>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="levels">The number of color levels.</param>
            <param name="gws">GridWaterShed object that store watershed information.</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <param name="cancel">Cancellation token to be used to cancel the computation.</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage [0,100] and returns <c>false</c> to continue or <c>true</c> to abort.</param>
            <returns>The resulting pond color-coded bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GenerateDirectionalSlopeMap(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Windows.Media.Brush)">
            <summary>
            Generate a directional slope map color-coded bitmap for the given surface.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="minSlope">Minimum slope.</param>
            <param name="maxSlope">Maximum slope.</param>
            <param name="headingAngle">The heading of main direction in degrees.</param>
            <param name="mainMode">Use <c>true</c> to compute slopes along main direction; <c>false</c> to compute slopes along cross direction.</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <param name="colorCodeBrush">Color brush to generate appropriate color for slope analysis.</param>
            <returns>The resulting slope map color-coded bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GenerateDrainageSlopeMap(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Windows.Media.Brush)">
            <summary>
            Generates a omnidirectional slope map color-coded bitmap for the given surface.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="minSlope">Minimum slope.</param>
            <param name="maxSlope">Maximum slope.</param>
            <param name="boundary">The boundary that defines the bounds of the surface.</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <param name="colorCodeBrush">Color brush to generate appropriate color for slope analysis.</param>
            <returns>The resulting slope map color-coded bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GenerateOmniSlopeMap(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Int32,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Windows.Media.Brush)">
            <summary>
            Generates a omnidirectional slope map color-coded bitmap for the given surface.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="resolution">The number of pixels along the longest direction (width/length).</param>
            <param name="minSlope">Minimum slope.</param>
            <param name="maxSlope">Maximum slope.</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <param name="colorCodeBrush">Color brush to generate appropriate color for slope analysis.</param>
            <returns>The resulting slope map color-coded bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GenerateFurrowsViolationSlopeMap(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Generates a directional slope map color-coded bitmap for the furrows surface.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="isMain">Boolean variable for indicating main/cross slope (true: main, false:cross)</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="minSlope">Minimum slope.</param>
            <param name="maxSlope">Maximum slope.</param>
            <param name="heading">The heading of main direction in degrees.</param>
            <param name="pipeline">Irrigation pipeline</param>
            <param name="surfaceBoundary">Original surface boundary</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GetContours(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Double)">
            <summary>
            Computes contour lines for the given surface at a range of elevations starting with a specified elevation and upper elevations
            at the specified interval.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="startElevation">The initial elevation value.</param>
            <param name="elevationInterval">The elevation interval.</param>
            <returns>The list of linestrings for all the contours.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GetContours(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double)">
            <summary>
            Computes contour lines for the given surface at the specified elevation.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="elevation">Elevation value</param>
            <returns>The list of linestrings for all the contours.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GenerateFlowSegments(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double,System.Collections.Generic.IList{Morph.Services.Core.Tools.Node}@,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Threading.CancellationToken)">
            <summary>
            Generates a list of flow segments for the given surface.
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="totalNodes">Nodes to be returned after calculation</param>
            <param name="inclusionZones">The boundaries of all the areas that need to be included or <c>null</c>. The default is the surface boundary.</param>
            <param name="exclusionZones">The boundaries of all the areas that need to be excluded or <c>null</c>.</param>
            <param name="cancel">Cancellation token to be used to cancel the computation.</param>
            <returns>The list of flow segment instances.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.ComputeCutFillDistribution(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Windows.Media.Imaging.BitmapSource,System.Double,System.Double)">
            <summary>
            Computes cut/fill distribution for each colored area
            </summary>
            <param name="surfaceInfo">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> instance.</param>
            <param name="img">Bitmap image (analysis image)</param>
            <param name="bulkageRatio">Bulkage ratio</param>
            <param name="haulCompactionRatio">Haul compaction ratio</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.ScaleBitmap(System.Windows.Media.Imaging.BitmapSource,System.Int32)">
            <summary>
            Scale the specified bitmap so that its largest dimension (width or length) reaches the desired size.
            </summary>
            <param name="bitmap">The source bitmap.</param>
            <param name="desiredSize">The desired size of the largest dimension.</param>
            <returns>The scaled bitmap.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.SurfaceInfoToolsExtension.GetGridedSurfacePoints(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Double)">
            <summary>
            Get Grided surface
            </summary>
            <param name="surfaceInfo"></param>
            <param name="cellSize"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.Node">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.Node.Index">
            <summary>
            Unique Id
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.Node.Point">
            <summary>
            Location
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.Node.Parent">
            <summary>
            Parent node Id (steapest ascendent)
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.Node.Value">
            <summary>
            Water quantity
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Tools.Node.IsBottom">
            <summary>
            Indication whether there is any downward descendant/children
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Tools.Node.#ctor(System.Int32,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Constructor
            </summary>
            <param name="index">Unique Id</param>
            <param name="point">Location</param>
        </member>
        <member name="M:Morph.Services.Core.Tools.ToolsCalcs.ComputeNeighborElevations(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns a [3,3] matrix with the elevation of the neighbors around the given point for the given grid.
            </summary>
            <remarks>Element [1,1] is the elevation of the query point.</remarks>
            <param name="zs">The grid of elevations.</param>
            <param name="c">The column coordinate of the query point.</param>
            <param name="r">The row column of the query point.</param>
            <returns>The [3,3] matrix with the elevation of the neighbors.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.ToolsCalcs.ComputeNeighborIndices(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a list of linearized indices of all the immediate neighbors of a given cell in a grid.
            </summary>
            <remarks>The linearized index of cell (i,j) is <c>j * Columns + i</c>.</remarks>
            <param name="cols">The number of columns in the grid.</param>
            <param name="rows">The number of rows in the grid.</param>
            <param name="c">The column coordinate of the cell.</param>
            <param name="r">The row coordinate of the cell.</param>
            <returns>The list of linearized indices of all immediate neighbors.</returns>
        </member>
        <member name="M:Morph.Services.Core.Tools.ToolsCalcs.ComputeGridNodes(System.Windows.Point,System.Double,System.Double[0:,0:])">
            <summary>
            Creates the linearized array of all the valid cells in a given grid.
            </summary>
            <param name="origin">The origin of the grid.</param>
            <param name="cellSize">The cell size.</param>
            <param name="grid">The grid elevation matrix.</param>
            <returns>The linearized array of all valid cells.</returns>
        </member>
        <member name="T:Morph.Services.Core.Tools.CutFillVisualization">
            <summary>
            Dictionary for cut/fill visualization
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.CutFillVisualization.CutDictionary">
            <summary>
            Cut information for each colored area
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Tools.CutFillVisualization.FillDictionary">
            <summary>
            Fill information for each colored area
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Engine.FixedPointNotInSectionException">
            <summary>
            Exception thrown when a fixed point is not located inside the section.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.FixedPointNotInSectionException.FixedPoint">
            <summary>
            The fixed points.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.FixedPointNotInSectionException.SectionName">
            <summary>
            The section name.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Engine.FixedPointNotInSectionException.#ctor(System.Windows.Media.Media3D.Point3D,System.String)">
            <summary>
            Creates the exception instance with the given parameters.
            </summary>
            <param name="fixedPoint">The fixed point.</param>
            <param name="sectionName">The section name.</param>
        </member>
        <member name="T:Morph.Services.Core.Engine.ExportVolumeMaxCutDepthException">
            <summary>
            Exception thrown when export volume requires a cut that violates the maximum cut depth.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.ExportVolumeMaxCutDepthException.ExportVolume">
            <summary>
            The export volume.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.ExportVolumeMaxCutDepthException.MaximumCutDepth">
            <summary>
            The maximum cut depth.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.ExportVolumeMaxCutDepthException.AreaName">
            <summary>
            Area name (section or subzone).
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Engine.ExportVolumeMaxCutDepthException.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Creates the exception instance with the given parameters and empty area name.
            </summary>
            <param name="exportVolume">The export volume.</param>
            <param name="maximumCutDepth">The maximum cut depth.</param>
            <param name="message">A message that describes this specific exception.</param>
        </member>
        <member name="M:Morph.Services.Core.Engine.ExportVolumeMaxCutDepthException.#ctor(System.Double,System.Double,System.String,System.String)">
            <summary>
            Creates the exception instance with the given parameters.
            </summary>
            <param name="exportVolume">The export volume.</param>
            <param name="maximumCutDepth">The maximum cut depth.</param>
            <param name="areaName">The area name.</param>
            <param name="message">A message that describes this specific exception.</param>
        </member>
        <member name="T:Morph.Services.Core.Engine.ExportVolumeMaxFillHeightException">
            <summary>
            Exception thrown when export volume requires a fill that violates the maximum fill height.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.ExportVolumeMaxFillHeightException.ExportVolume">
            <summary>
            The export volume.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.ExportVolumeMaxFillHeightException.MaximumFillHeight">
            <summary>
            The maximum fill height.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.ExportVolumeMaxFillHeightException.AreaName">
            <summary>
            Area name (section or subzone).
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Engine.ExportVolumeMaxFillHeightException.#ctor(System.Double,System.Double,System.String,System.String)">
            <summary>
            Creates the exception instance with the given parameters.
            </summary>
            <param name="exportVolume">The export volume.</param>
            <param name="maximumFillHeight">The maximum fill height.</param>
            <param name="areaName">The area name.</param>
            <param name="message">A message that describes this specific exception.</param>
        </member>
        <member name="T:Morph.Services.Core.Engine.ExportVolumeMinElevationException">
            <summary>
            Exception thrown when export volume requires an elevation violates the minimum elevation.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.ExportVolumeMinElevationException.ExportVolume">
            <summary>
            The export volume.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.ExportVolumeMinElevationException.MinimumElevation">
            <summary>
            The minimum elevation.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.ExportVolumeMinElevationException.AreaName">
            <summary>
            Area name (section or subzone).
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Engine.ExportVolumeMinElevationException.#ctor(System.Double,System.Double,System.String,System.String)">
            <summary>
            Creates the exception instance with the given parameters.
            </summary>
            <param name="exportVolume">The export volume.</param>
            <param name="minimumElevation">The maximum cut depth.</param>
            <param name="areaName">The area name.</param>
            <param name="message">A message that describes this specific exception.</param>
        </member>
        <member name="T:Morph.Services.Core.Engine.ExportVolumeMaxElevationException">
            <summary>
            Exception thrown when export volume requires an elevation violates the maximum elevation.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.ExportVolumeMaxElevationException.ExportVolume">
            <summary>
            The export volume.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.ExportVolumeMaxElevationException.MaximumElevation">
            <summary>
            The maximum elevation.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.ExportVolumeMaxElevationException.AreaName">
            <summary>
            Area name (section or subzone).
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Engine.ExportVolumeMaxElevationException.#ctor(System.Double,System.Double,System.String,System.String)">
            <summary>
            Creates the exception instance with the given parameters.
            </summary>
            <param name="exportVolume">The export volume.</param>
            <param name="maximumElevation">The maximum cut depth.</param>
            <param name="areaName">The area name.</param>
            <param name="message">A message that describes this specific exception.</param>
        </member>
        <member name="T:Morph.Services.Core.Engine.HingeConstraintViolationException">
            <summary>
            Exception thrown when a hinge constrained cannot be enforced.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.HingeConstraintViolationException.HingeName">
            <summary>
            Hinge name
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.HingeConstraintViolationException.Point1">
            <summary>
            Point 1 of hinge.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.HingeConstraintViolationException.Point2">
            <summary>
            Point 2 of hinge.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Engine.HingeConstraintViolationException.Violation">
            <summary>
            Amount of violation in hinge.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Engine.HingeConstraintViolationException.#ctor(System.String,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Double)">
            <summary>
            Creates the exception instance with the given parameters.
            </summary>
            <param name="name">Name of the hinge</param>
            <param name="point1">The first point of the hinge.</param>
            <param name="point2">The second point of the hinge.</param>
            <param name="violation">The violation amount.</param>
        </member>
        <member name="T:Morph.Services.Core.Engine.SelfIntersectingBoundaryException">
            <summary>
            Exception thrown when self-intersecting boundary is detected.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Engine.SelfIntersectingBoundaryException.#ctor(System.String)">
            <summary>
            Creates the exception instance with the given parameters.
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.IDitchManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.IDitchManager.Init(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}})">
            <summary>
            Initialize class instance
            </summary>
            <param name="lines"></param>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.IDitchManager.ValidDitches">
            <summary>
            Return output ditches
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.IDitchManager.DitchSegments">
            <summary>
            Unordered list of segments participating in ditches
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.ComputationModes">
            <summary>
            Lists the computation types for each optimization service.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Interfaces.ComputationModes.NoneGPU">
            <summary>
            Disable GPU computation for all calculations.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Interfaces.ComputationModes.SurfaceGPU">
            <summary>
            Enable GPU computation for drainage calculations.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Interfaces.ComputationModes.BasinGPU">
            <summary>
            Enable GPU computation for basin calculations.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Interfaces.ComputationModes.RowsGPU">
            <summary>
            Enable GPU computation for irrigation calculations.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Interfaces.ComputationModes.ZonesGPU">
            <summary>
            Enable GPU computation for subzones calculations.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Interfaces.ComputationModes.CutFillGPU">
            <summary>
            Enable GPU computation for cutfill calculations.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Interfaces.ComputationModes.AllGPU">
            <summary>
            Enable GPU computation for all calculations.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.PlanesConstraints">
            <summary>
            Defines the constraints to compute land leveling planes for a given input surface.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.PlanesConstraints.#ctor">
            <summary>
            Constructs an empty plane problem definition.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.PlanesConstraints.#ctor(Morph.Services.Core.Interfaces.PlanesConstraints)">
            <summary>
            Constructs an empty plane problem definition.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.Boundary">
            <summary>
            The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the limits of the plane.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.MinimumSlope">
            <summary>
            The minimum slope of the plane. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.MaximumSlope">
            <summary>
            The maximum slope of the plane. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.Heading">
            <summary>
            The heading angle in degrees of the main slope axis.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.MainSlope">
            <summary>
            The main slope of the plane along the direction. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.CrossSlope">
            <summary>
            The cross slope of the plane along the direction. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.Tag">
            <summary>
            Any string associated with this instance.  This same string will appear in the corresponding <see cref="T:Morph.Services.Core.DataModel.Plane"/> instance in the <see cref="T:Morph.Services.Core.DataModel.Design"/>.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.Shrinkage">
            <summary>
            The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.ShrinkageRatio">
            <summary>
            The factor to convert from bank cut volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.Bulkage">
            <summary>
            The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.BulkageRatio">
            <summary>
            The factor to convert from bank cut volumes to loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.HaulCompactionRatio">
            <summary>
            The factor use to compute from loose haul volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.ExportVolume">
            <summary>
            The resulting export loose haul volume to produce: cut - fill. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.FixedPoints">
            <summary>
            The list of fixed point constraints (if any).  There can be a maximum of
            3 non-colinear points.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.Hinges">
            <summary>
            The list of hinges (if any).
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.PlanesConstraints.Direction">
            <summary>
            The cartesian angle in radians of the main slope axis.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.PlanesConstraints.RemoveFixedPointsOutside">
            <summary>
            Removes all fixed points that lie outside the boundary.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.AreaConstraints">
            <summary>
            Defines the constraints applied to compute an drainage area for a given input surface.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.AreaConstraints.#ctor">
            <summary>
            Constructs an empty plane problem definition.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.AreaConstraints.Tag">
            <summary>
            Any string associated with this instance.  This same object will appear in the corresponding <see cref="T:Morph.Services.Core.DataModel.Subzone"/> instance in the <see cref="T:Morph.Services.Core.DataModel.Design"/>.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.AreaConstraints.Boundary">
            <summary>
            The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the limits of the drainage area.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.AreaConstraints.MinimumSlope">
            <summary>
            The minimum slope of any triangle in the drainage area. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.AreaConstraints.MaximumSlope">
            <summary>
            The maximum slope of any triangle in the drainage area. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.AreaConstraints.MaximumCutDepth">
            <summary>
            The maximum cut depth that can be applied to the original surface within this drainage area. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.AreaConstraints.MaximumFillHeight">
            <summary>
            The maximum cut depth that can be applied to the original surface within this drainage area. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.AreaConstraints.Shrinkage">
            <summary>
            The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.AreaConstraints.ShrinkageRatio">
            <summary>
            The factor to convert from bank cut volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.AreaConstraints.Bulkage">
            <summary>
            The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.AreaConstraints.BulkageRatio">
            <summary>
            The factor to convert from bank cut volumes to loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.AreaConstraints.HaulCompactionRatio">
            <summary>
            The factor use to compute from loose haul volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.AreaConstraints.ExportVolume">
            <summary>
            The resulting export loose haul volume to produce: cut - fill. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.SurfaceConstraints">
            <summary>
            Defines the constraints to compute drainage surfaces for a given input surface.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.SurfaceConstraints.#ctor">
            <summary>
            Constructs an empty plane problem definition.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SurfaceConstraints.Resolution">
            <summary>
            The cell size of the sampling grid.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SurfaceConstraints.Boundary">
            <summary>
            The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the limits of the design surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SurfaceConstraints.TargetDitch">
            <summary>
            The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the target ditch.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SurfaceConstraints.TargetDitches">
            <summary>
            The list of <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the target ditches.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SurfaceConstraints.ExclusionZones">
            <summary>
            List of exclusion zones.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SurfaceConstraints.Areas">
            <summary>
            The list of drainage areas in this design. Highier priority areas are first in the list.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.RowsConstraints">
            <summary>
            Defines the constraints to compute irrigation rows for a given input surface.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.RowsConstraints.#ctor">
            <summary>
            Constructs an empty plane problem definition.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.Boundary">
            <summary>
            The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the limits of the design surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.RowsDirection">
            <summary>
            The cartesian angle in radians of the irrigation rows.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.Resolution">
            <summary>
            The nominal distance between irrigation rows.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.MinimumSlope">
            <summary>
            The minimum slope of any triangle in the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.MaximumSlope">
            <summary>
            The maximum slope along the irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.MaximumSlopeChange">
            <summary>
            The maximum slope change along the irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.MinimumCrossSlope">
            <summary>
            The minimum slope accross irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.MaximumCrossSlope">
            <summary>
            The maximum slope accross irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.MaximumCrossSlopeChange">
            <summary>
            The maximum slope change accross irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.MaximumCutDepth">
            <summary>
            The maximum cut depth that can be applied to the original surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.Shrinkage">
            <summary>
            The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.ShrinkageRatio">
            <summary>
            The factor to convert from bank cut volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.Bulkage">
            <summary>
            The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.BulkageRatio">
            <summary>
            The factor to convert from bank cut volumes to loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.HaulCompactionRatio">
            <summary>
            The factor use to compute from loose haul volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.Pipeline">
            <summary>
            The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the pipeline (water source) for the irrigation rows.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.ExclusionZones">
            <summary>
            List of exclusion zones.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.RowsConstraints.ExportVolume">
            <summary>
            The resulting export loose haul volume to produce: cut - fill. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.SubzoneConstraints">
            <summary>
            Defines the constraints applied to compute an indiviual subzone for a given input surface.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.SubzoneConstraints.#ctor">
            <summary>
            Constructs an empty plane problem definition.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.Tag">
            <summary>
            Any string associated with this instance.  This same object will appear in the corresponding <see cref="T:Morph.Services.Core.DataModel.Subzone"/> instance in the <see cref="T:Morph.Services.Core.DataModel.Design"/>.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.Boundary">
            <summary>
            The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the limits of the design surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.MinimumSlope">
            <summary>
            The minimum slope of any triangle in the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.MaximumSlope">
            <summary>
            The maximum slope along the irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.MaximumSlopeChange">
            <summary>
            The maximum slope change along the irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.MinimumCrossSlope">
            <summary>
            The minimum slope accross irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.MaximumCrossSlope">
            <summary>
            The maximum slope accross irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.MaximumCrossSlopeChange">
            <summary>
            The maximum slope change accross irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.MaximumFillHeight">
            <summary>
            The maximum fill height that can be applied to the original surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.MaximumCutDepth">
            <summary>
            The maximum cut depth that can be applied to the original surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.MaximumElevation">
            <summary>
            The maximum elevation for the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.MinimumElevation">
            <summary>
            The minimum elevation for the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.Shrinkage">
            <summary>
            The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.ShrinkageRatio">
            <summary>
            The factor to convert from bank cut volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.Bulkage">
            <summary>
            The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.BulkageRatio">
            <summary>
            The factor to convert from bank cut volumes to loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.HaulCompactionRatio">
            <summary>
            The factor use to compute from loose haul volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.Heading">
            <summary>
            The heading angle in degrees of the main slope axis.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.Direction">
            <summary>
            The cartesian angle in radians of the main slope axis.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.SubzoneConstraints.ExportVolume">
            <summary>
            The resulting export loose haul volume to produce: cut - fill. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.ZonesConstraints">
            <summary>
            Defines the constraints to compute subzones for a given input surface.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ZonesConstraints.#ctor">
            <summary>
            Constructs an empty plane problem definition.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ZonesConstraints.Boundary">
            <summary>
            The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the limits of the design surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ZonesConstraints.MainDirection">
            <summary>
            The cartesian angle in radians of the direction of the main axis of the sampling grid.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ZonesConstraints.Resolution">
            <summary>
            The cell size of the sampling grid.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ZonesConstraints.ExclusionZones">
            <summary>
            List of exclusion zones.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ZonesConstraints.Subzones">
            <summary>
            The list of subzones in this design. Highier priority zones are first in the list.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ZonesConstraints.ExportVolume">
            <summary>
                Export volume
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.BasinConstraints">
            <summary>
            Defines the constraints applied to compute an drainage area for a given input surface.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.BasinConstraints.#ctor">
            <summary>
            Constructs an empty plane problem definition.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.Tag">
            <summary>
            Any string associated with this instance.  This same object will appear in the corresponding <see cref="T:Morph.Services.Core.DataModel.Subzone"/> instance in the <see cref="T:Morph.Services.Core.DataModel.Design"/>.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.Boundary">
            <summary>
            The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the limits of the design surface area.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.BasinBoundary">
            <summary>
            The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the limits of the basin area.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.Resolution">
            <summary>
            The cell size of the sampling grid.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.ExclusionZones">
            <summary>
            List of exclusion zones.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.ExitPoint">
            <summary>
            The basin exit point. 
            </summary>
            <remarks>A floating exit point has the <c>z</c> property set to <c>NaN</c>.</remarks>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.MinimumSlope">
            <summary>
            The minimum slope of any triangle in the drainage area. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.MaximumSlope">
            <summary>
            The maximum slope of any triangle in the drainage area. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.Shrinkage">
            <summary>
            The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.ShrinkageRatio">
            <summary>
            The factor to convert from bank cut volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.Bulkage">
            <summary>
            The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.BulkageRatio">
            <summary>
            The factor to convert from bank cut volumes to loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.HaulCompactionRatio">
            <summary>
            The factor use to compute from loose haul volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.BasinConstraints.ExportVolume">
            <summary>
            The resulting export loose haul volume to produce: cut - fill. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.ILandLeveling">
            <summary>
            This interface defines all the methods to interact with the engine that computes design surfaces in compliance with given problem constraints.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ILandLeveling.SolverFlags">
            <summary>
            Gets or sets the computation modes for the optimization services.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.CreateSurface(System.String,System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Double)">
            <summary>
            Creates a terrain surface using the specified enumeration of points and boundary 2D points.
            </summary>
            <remarks>The engine process the points and creates the surface triangulation using the default settings.</remarks>
            <param name="name">The name of the surface.</param>
            <param name="points">The enumeration of points, including boundary points.</param>
            <param name="triangles">The list of triangle indices. Must be a multiple of 3.</param>
            <param name="boundary">Enumeration of 2D points in boundary. May be <c>null</c>.</param>
            <param name="exclusions">Enumeration of exclusion zones. May be <c>null</c>.</param>
            <param name="maxEdgeLength">The maximum length of a triangle edge to be valid.</param>
            <returns>An instance of <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> with the result.</returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ImportSurface(System.String,System.Action{System.Single})">
            <summary>
            Imports a terrain surface into the engine via a dxf file.
            </summary>
            <param name="dxfFilename">The terrain surface.</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage.</param>
            <returns>An instance of <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> with the result.</returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.DefineSurface(Morph.Services.Core.Interfaces.ISurfaceInfo)">
            <summary>
            Provides a pre-existing terrain surface directly to the engine.
            </summary>
            <param name="surface">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> that describes the surface.</param>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ComputeBestFitPlanes(System.Collections.Generic.IList{Morph.Services.Core.Interfaces.PlanesConstraints},System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Linestring},System.Double)">
            <summary>
            Computes the best planes fit according to the specified constraints.
            </summary>
            <param name="constraints">The planes constraints instance.</param>
            <param name="exclusionZones">The enumeration of exclusion zones (if any). It can be <c>null</c>.</param>
            <param name="exportVolume">The resulting export loose haul volume to produce: cut - fill. Use <c>NaN</c> for undefined.</param>
            <returns>An list of <see cref="T:Morph.Services.Core.DataModel.Plane"/> instances that best matche the regions defined by the constraints.</returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ComputePlanes(System.Collections.Generic.IList{Morph.Services.Core.Interfaces.PlanesConstraints},System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Linestring},System.Double,System.Predicate{System.Single})">
            <summary>
            Computes the best planes fit according to the specified constraints.
            </summary>
            <param name="constraints">The planes constraints instance.</param>
            <param name="exclusionZones">The enumeration of exclusion zones (if any). It can be <c>null</c>.</param>
            <param name="exportVolume">The resulting export loose haul volume to produce: cut - fill. Use <c>NaN</c> for undefined.</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage [0,100] and returns <c>false</c> to continue or <c>true</c> to abort.</param>
            <returns>An instance of <see cref="T:Morph.Services.Core.DataModel.Design"/> with the result.</returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ComputeSurface(Morph.Services.Core.Interfaces.SurfaceConstraints,System.Predicate{System.Single})">
            <summary>
            Computes the best surface fit within the specified boundary.
            </summary>
            <param name="constraints">The surface constraints instance.</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage [0,100] and returns <c>false</c> to continue or <c>true</c> to abort.</param>
            <returns>An instance of <see cref="T:Morph.Services.Core.DataModel.Design"/> with the result.</returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ComputeRows(Morph.Services.Core.Interfaces.RowsConstraints,System.Predicate{System.Single})">
            <summary>
            Computes the best surface fit to accomodate irrigation rows at the given angle starting and the given pipeline.
            </summary>
            <param name="constraints">The irrigation constraints instance.</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage [0,100] and returns <c>false</c> to continue or <c>true</c> to abort.</param>
            <returns>An instance of <see cref="T:Morph.Services.Core.DataModel.Design"/> with the result.</returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ComputeZones(Morph.Services.Core.Interfaces.ZonesConstraints,System.Predicate{System.Single})">
            <summary>
            Computes the best surface fit to accomodate subzones constraints. All subzones use the grid defined by the main direction and resolution.
            </summary>
            <param name="constraints">The zones constraints instance.</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage [0,100] and returns <c>false</c> to continue or <c>true</c> to abort.</param>
            <returns>An instance of <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> with the result surface.</returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ComputeBasin(Morph.Services.Core.Interfaces.BasinConstraints,System.Predicate{System.Single})">
            <summary>
            Computes a surface that accomodates the specified basin constraints.
            </summary>
            <param name="constraints">The basin constraints instance.</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage [0,100] and returns <c>false</c> to continue or <c>true</c> to abort.</param>
            <returns>An instance of <see cref="T:Morph.Services.Core.DataModel.Design"/> with the result.</returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ComputeCutFill(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Computes the total cut and fill required to go from the working surface to the specified target surface.
            </summary>
            <remarks>
            Warning: this method is not efficient. Use only to validate or compute final results.
            </remarks>
            <param name="target">The target surface.</param>
            <param name="exclusions">Enumeration of exclusion boundaries.</param>
            <param name="bulkageRatio">The factor to convert from bank cut volumes to loose haul volumes.</param>
            <param name="haulCompactionRatio">The factor use to compute from loose haul volumes to bank fill volumes.</param>
            <param name="totalCut">The amount of cut volume in loose haul.</param>
            <param name="totalFill">The amount of fill volume in loose haul.</param>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ComputeCutFill(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Subzone},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Computes the total cut and fill required to go from the working surface to the specified target surface.
            </summary>
            <remarks>
            Warning: this method is not efficient. Use only to validate or compute final results.
            </remarks>
            <param name="target">The target surface.</param>
            <param name="subzones">The list of subzones in this report. Highier priority zones are first in the list. You should need to set the boundary property.</param>
            <param name="exclusions">Enumeration of exclusion boundaries.</param>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ComputeCutFillVolumes(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Computes cut/fill values for a given area on a surface.
            </summary>
            <param name="isopatch">The cut/fill surface.</param>
            <param name="area">The enclosing area (a polygon).</param>
            <param name="bulkageRatio">The factor to convert from bank cut volumes to loose haul volumes.</param>
            <param name="haulCompactionRatio">The factor use to compute from loose haul volumes to bank fill volumes.</param>
            <param name="totalCut">The amount of cut volume in loose haul.</param>
            <param name="totalFill">The amount of fill volume in loose haul.</param>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ComputeCutFillVolumes(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Computes cut/fill values for given areas on a surface.
            </summary>
            <param name="isopatch">The cut/fill surface.</param>
            <param name="areas">The enumeration of enclosed areas (polygons).</param>
            <param name="bulkageRatio">The factor to convert from bank cut volumes to loose haul volumes.</param>
            <param name="haulCompactionRatio">The factor use to compute from loose haul volumes to bank fill volumes.</param>
            <param name="totalCut">The amount of cut volume in loose haul.</param>
            <param name="totalFill">The amount of fill volume in loose haul.</param>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.MergeSurfaces(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Linestring},System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Linestring},System.Collections.Generic.IEnumerable{System.Windows.Point},System.Predicate{System.Single})">
            <summary>
            Merges two surfaces based on the specified areas (expressed in linestrings). Specifically, 
            the method creates a new surface that takes the points and triangles from the source surface but replaces 
            all the specified areas with the corresponding points and triangles from the target surface.
            </summary>
            <remarks>
            Warning: this method is not efficient. Use only to validate or compute final results.
            </remarks>
            <param name="target">The target surface.</param>
            <param name="areas">Areas to be merged from the target surface.</param>
            <param name="exclusionZones">An enumeration of exclusion zones. May be <c>null</c>.</param>
            <param name="boundary">Optional boundary defines the limits of the resulting surface. May be <c>null</c> (defaults to the union of the source and target boundaries).</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage [0,100] and returns <c>false</c> to continue or <c>true</c> to abort.</param>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ComputeDitchCutFill(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Computes cut/fill volume of the ditch only
            </summary>
            <param name="ditchLine">Points that are used to create ditch and its flow direction (center lines)</param>
            <param name="crossSection">Describe the shape of cross section of ditch (Points in 2D)</param>
            <param name="totalCut">The amount of cut volume.</param>
            <param name="totalFill">The amount of fill volume.</param>
            <param name="minSlope">Minimum longitudinal slope.</param>
            <param name="maxSlope">Maximum longitudinal slope.</param>
            <param name="gap">Distance between ditch boundary to source surface points.</param>
            <param name="bulkageRatio">The factor to convert from bank cut volumes to loose haul volumes.</param>
            <param name="haulCompactionRatio">The factor use to compute from loose haul volumes to bank fill volumes.</param>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.StampDitch(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Double,System.Double,System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Linestring},System.Predicate{System.Single})">
            <summary>
            Stamps ditch to the surface
            </summary>
            <param name="ditchLine">Points that are used to create ditch and its flow direction (center lines)</param>
            <param name="crossSection">Describe the shape of cross section of ditch (Points in 2D)</param>
            <param name="minSlope">Minimum slope</param>
            <param name="maxSlope">Maximum slope</param>
            <param name="gap">Distance between ditch boundary to source surface points</param>
            <param name="exclusionZones">An enumeration of exclusion zones. May be <c>null</c>.</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage [0,100] and returns <c>false</c> to continue or <c>true</c> to abort.</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ComputeSurfaceArea(Morph.Services.Core.Interfaces.ISurfaceInfo,Morph.Services.Core.DataModel.Linestring,System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Linestring})">
            <summary>
            Clip surface to boundary and exclusion zones, then add up the 3D areas of all triangles in clipped surface.
            </summary>
            <param name="surface">The <see cref="T:Morph.Services.Core.Interfaces.ISurfaceInfo"/> that describes the surface.</param>
            <param name="boundary">The <see cref="T:Morph.Services.Core.DataModel.Linestring"/> that defines the boundary. May be <c>null</c>.</param>
            <param name="exclusionZones">An enumeration of exclusion zones. May be <c>null</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILandLeveling.ComputeSurfaceArea(Morph.Services.Core.Interfaces.ISurfaceInfo,System.Collections.Generic.IList{Morph.Services.Core.DataModel.PurchaseArea})">
            <summary>
            Returns the sum of 3D areas for all purchase areas in the list.
            </summary>
            <param name="surface"></param>
            <param name="paList"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.ILogger">
            <summary>
            Interface to define common instrummentation methods supported by a logging service.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILogger.LogVerbose(System.String,System.String,System.Object[])">
            <summary>
            Log a verbose message.
            </summary>
            <param name="source">The object originating the message</param>
            <param name="message">The message format.</param>
            <param name="args">optional arguments to use in the message format</param>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILogger.LogInfo(System.String,System.String,System.Object[])">
            <summary>
            Logs an informational message.
            </summary>
            <param name="source">The object originating the message</param>
            <param name="message">The message format.</param>
            <param name="args">optional arguments to use in the message format</param>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILogger.LogWarning(System.String,System.String,System.Object[])">
            <summary>
            Logs a warning message.
            </summary>
            <param name="source">The object originating the message</param>
            <param name="message">The message format.</param>
            <param name="args">optional arguments to use in the message format</param>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILogger.LogError(System.String,System.String,System.Object[])">
            <summary>
            Logs a critical error message.
            </summary>
            <param name="source">The object originating the message</param>
            <param name="message">The message format.</param>
            <param name="args">optional arguments to use in the message format</param>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ILogger.LogException(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Logs an exception message.
            </summary>
            <param name="source">The object originating the message</param>
            <param name="exception">The exception instance that originated the message</param>
            <param name="message">The message format.</param>
            <param name="args">optional arguments to use in the message format</param>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.IPurchaseManager">
            <summary>
            List of field areas with optional 'holes' (exclusion zones)
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.IPurchaseManager.QueryPurchase(System.Collections.Generic.List{Morph.Services.Core.DataModel.PurchaseArea},Morph.Services.Core.Interfaces.ISurfaceInfo,Morph.Services.Core.DataModel.Linestring,System.Collections.Generic.List{Morph.Services.Core.DataModel.Linestring},System.Double@)">
            <summary>
            Given previous purchases and a new area to own (boundary + list of exclusion zones),
            returns a list of new purchases to make in order to achieve ownership of new area.
            Boundary and exclusionZones are in surface's local coordinates (n, e), previousPurchases and actualPurchase are in global (lon, lat).
            Return value will be an empty list if new area is already owned.
            </summary>
            <param name="previousPurchases"></param>
            <param name="surface"></param>
            <param name="boundary">Current purchase boundary</param>
            <param name="exclusionZones">Current purchase exclusion zones</param>
            <param name="areaToPurchase"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.IPurchaseManager.LocatePurchaseAreasForField(System.Collections.Generic.List{Morph.Services.Core.DataModel.PurchaseArea},Morph.Services.Core.Interfaces.ISurfaceInfo)">
            <summary>
            Given previous purchases and an original surface return a list of purchases (expired or not) within that field.
            Return value will be an empty list if new area is already owned.
            </summary>
            <param name="previousPurchases"></param>
            <param name="surface"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.ISectionManager">
            <summary>
            Given section lines and exclusion zones, partition a field into section areas.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ISectionManager.AddLine(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            Add section line
            </summary>
            <param name="linestring"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ISectionManager.AddArea(System.String,Morph.Services.Core.DataModel.Linestring)">
            <summary>
            Add section area
            </summary>
            <param name="name"></param>
            <param name="linestring"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ISectionManager.AddExclusionZone(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            Add exclusion zone
            </summary>
            <param name="linestring"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ISectionManager.AddBoundary(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            Add field boundary
            </summary>
            <param name="linestring"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ISectionManager.AddHinge(System.Object,Morph.Services.Core.DataModel.Linestring3D)">
            <summary>
            Add hinge
            </summary>
            <param name="hingeVm"></param>
            <param name="linestring">3D 2-point linestring. Both Z's are NaN, or none are.</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ISectionManager.Build(System.Collections.Generic.Dictionary{System.String,Morph.Services.Core.DataModel.Linestring}@,System.Collections.Generic.Dictionary{Morph.Services.Core.DataModel.Linestring3D,System.Object}@,System.Collections.Generic.List{Morph.Services.Core.DataModel.Linestring3D}@,System.Tuple{System.String,System.String}@)">
            <summary>
            Build new section areas from section lines. Try to match to old ones. Process hinges. Reject those that intersect other hinges.
            </summary>
            <param name="outAreas"></param>
            <param name="outHinges"></param>
            <param name="outRejectedHinges"></param>
            <param name="nameChanges"></param>
            <returns></returns>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ISectionManager.BadAreas">
            <summary>
            Areas rejected by section builder. Nested section areas.
            </summary>
        </member>
        <member name="T:Morph.Services.Core.Interfaces.ISurfaceInfo">
            <summary>
                Defines the accessors and methods to access information about a surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ISurfaceInfo.Name">
            <summary>
                Name of the surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ISurfaceInfo.MinElevation">
            <summary>
                Minimum elevation.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ISurfaceInfo.MaxElevation">
            <summary>
                Maximum elevation.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ISurfaceInfo.Points">
            <summary>
                List of points (vertices's) in the surface.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ISurfaceInfo.Triangles">
            <summary>
                List of triangles in the surface.
                Each triangle consists of three consecutive indices that correspond to its vertices.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Interfaces.ISurfaceInfo.Boundary">
            <summary>
                Returns the list of 2D points that defines the boundary of the surface.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ISurfaceInfo.Close">
            <summary>
            Closes the surface and releases internal resources. Subsequent access to this instance is undefined.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ISurfaceInfo.GetQuickContours(System.Double)">
            <summary>
            Get contours over a range of elevations
            </summary>
            <param name="elevInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Services.Core.Interfaces.ISurfaceInfo.GetContourLines(System.Boolean,System.Double,System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Media.Media3D.Point3D}}@,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Get contour lines
            </summary>
            <param name="bFullRange"></param>
            <param name="toDefault"></param>
            <param name="contourPoints"></param>
            <param name="exclusionAreas"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Services.Core.Logger">
            <summary>
            Library to instrument log messages.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Logger.DefaultTraceSourceName">
            <summary>
            Name of the <c>TraceSource</c> used to log events.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Logger.cTraceSource">
            <summary>
            Trace source for all messages generated by this instance. 
            This trace source may be defined in the <c>App.config</c> file under the <c>system.diagnostics</c> section.
            </summary>
        </member>
        <member name="P:Morph.Services.Core.Logger.TraceSource">
            <summary>
            The <c>TraceSource</c> instance used to log events.
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Logger.LoggerService">
            <summary>
            <see cref="T:Morph.Services.Core.Interfaces.ILogger"/> service.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Logger.Log(System.Diagnostics.TraceEventType,System.String,System.String,System.Object[])">
            <summary>
            Builds and writes a message using <c>System.Diagnostics.TraceSource</c> for this component.
            <seealso cref="T:System.Diagnostics.TraceSource"/>
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="source">The place where this message originated</param>
            <param name="message">The message</param>
            <param name="args">optional argument to format with the message</param>
        </member>
        <member name="T:Morph.Services.Core.Modules.CoreService">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Services.Core.Modules.CoreService.Name">
            <summary>
            The name of this module.
            </summary>
        </member>
        <member name="M:Morph.Services.Core.Modules.CoreService.Initialize">
            <summary>
            Initializes this module.
            </summary>
        </member>
        <member name="T:SkuTester.DataModel.ComputeEnum">
            <summary>
            Optimization type.
            </summary>
        </member>
        <member name="F:SkuTester.DataModel.ComputeEnum.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:SkuTester.DataModel.ComputeEnum.SinglePlaneBestFit">
            <summary>
            Compute best plane fit.
            </summary>
        </member>
        <member name="F:SkuTester.DataModel.ComputeEnum.SurfaceBestFit">
            <summary>
            Compute surface best fit.
            </summary>
        </member>
        <member name="F:SkuTester.DataModel.ComputeEnum.Furrows">
            <summary>
            Compute furrows.
            </summary>
        </member>
        <member name="F:SkuTester.DataModel.ComputeEnum.Subzones">
            <summary>
            Compute subzones.
            </summary>
        </member>
        <member name="F:SkuTester.DataModel.ComputeEnum.Basins">
            <summary>
            Compute basins.
            </summary>
        </member>
        <member name="F:SkuTester.DataModel.ComputeEnum.SectionManager">
            <summary>
            Compute section areas from boundary and section lines
            </summary>
        </member>
        <member name="T:SkuTester.DataModel.VizTool">
            <summary>
            Base class to all visualization tools.
            </summary>
        </member>
        <member name="T:SkuTester.DataModel.VizTool.ColorStop">
            <summary>
            Specification of a color to define a linear gradient.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.VizTool.ColorStop.Color">
            <summary>
            Color string value.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.VizTool.ColorStop.Offset">
            <summary>
            Offset value between 0 and 1.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.VizTool.ColorStop.GetGradientStop">
            <summary>
            Returns the <see cref="T:System.Windows.Media.GradientStop"/> instance from this instance.
            </summary>
            <returns>The <see cref="T:System.Windows.Media.GradientStop"/> instance.</returns>
        </member>
        <member name="M:SkuTester.DataModel.VizTool.GenerateAndSaveTexture(Morph.Services.Core.Interfaces.ISurfaceInfo,System.String,System.String)">
            <summary>
            Invoke the specific visualization tool and save it as a png with a dedicated name based on the specified sketchup file.
            </summary>
            <param name="surfaceInfo">The surface to use to generate the visualization.</param>
            <param name="skuFile">The sketchup file.</param>
            <param name="name">Name of the surface to use in the texture filename.</param>
            <returns>The texture as a bitmap.</returns>
        </member>
        <member name="T:SkuTester.DataModel.OmniSlope">
            <summary>
            Specification of the omni slope vizualization tool.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.OmniSlope.#ctor">
            <summary>
            Creates an instance of the omni slope tool.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.OmniSlope.Pixels">
            <summary>
            Image resolution.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.OmniSlope.MinSlope">
            <summary>
            Minimum slope.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.OmniSlope.MaxSlope">
            <summary>
            Maximum slope.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.OmniSlope.GradientStops">
            <summary>
            Gradient stops.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.OmniSlope.GenerateAndSaveTexture(Morph.Services.Core.Interfaces.ISurfaceInfo,System.String,System.String)">
            <summary>
            Generates and saves the bitmap.
            </summary>
            <param name="surfaceInfo">The surface to use to generate the visualization.</param>
            <param name="skuFile">The sketchup file.</param>
            <param name="name">Name of the surface to use in the texture filename.</param>
            <returns>The texture as a bitmap.</returns>
        </member>
        <member name="T:SkuTester.DataModel.DirectionalSlope">
            <summary>
            Specification of the directional slope vizualization tool.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.DirectionalSlope.#ctor">
            <summary>
            Creates an instance of the directional slope tool.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.DirectionalSlope.Resolution">
            <summary>
            Cell size.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.DirectionalSlope.HeadingAngle">
            <summary>
            The heading of main direction in degrees.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.DirectionalSlope.MinSlope">
            <summary>
            Minimum slope.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.DirectionalSlope.MaxSlope">
            <summary>
            Maximum slope.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.DirectionalSlope.GradientStops">
            <summary>
            Gradient stops.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.DirectionalSlope.GenerateAndSaveTexture(Morph.Services.Core.Interfaces.ISurfaceInfo,System.String,System.String)">
            <summary>
            Generates and saves the bitmap.
            </summary>
            <param name="surfaceInfo">The surface to use to generate the visualization.</param>
            <param name="skuFile">The sketchup file.</param>
            <param name="name">Name of the surface to use in the texture filename.</param>
            <returns>The texture as a bitmap.</returns>
        </member>
        <member name="T:SkuTester.DataModel.WaterShed">
            <summary>
            Specification of the water shed vizualization tool.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.WaterShed.#ctor">
            <summary>
            Creates an instance of the water shed slope tool.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.WaterShed.Resolution">
            <summary>
            Cell size.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.WaterShed.Levels">
            <summary>
            The number of color levels.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.WaterShed.GenerateAndSaveTexture(Morph.Services.Core.Interfaces.ISurfaceInfo,System.String,System.String)">
            <summary>
            Generates and saves the bitmap.
            </summary>
            <param name="surfaceInfo">The surface to use to generate the visualization.</param>
            <param name="skuFile">The sketchup file.</param>
            <param name="name">Name of the surface to use in the texture filename.</param>
            <returns>The texture as a bitmap.</returns>
        </member>
        <member name="T:SkuTester.DataModel.PondMap">
            <summary>
            Specification of the pond map vizualization tool.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.PondMap.#ctor">
            <summary>
            Creates an instance of the pond map slope tool.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.PondMap.Resolution">
            <summary>
            Cell size.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.PondMap.Levels">
            <summary>
            The number of color levels.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.PondMap.GenerateAndSaveTexture(Morph.Services.Core.Interfaces.ISurfaceInfo,System.String,System.String)">
            <summary>
            Generates and saves the bitmap.
            </summary>
            <param name="surfaceInfo">The surface to use to generate the visualization.</param>
            <param name="skuFile">The sketchup file.</param>
            <param name="name">Name of the surface to use in the texture filename.</param>
            <returns>The texture as a bitmap.</returns>
        </member>
        <member name="T:SkuTester.DataModel.DrainageViolations">
            <summary>
            Specification of the drainage violations vizualization tool.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.DrainageViolations.#ctor">
            <summary>
            Creates an instance of the directional slope tool.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.DrainageViolations.Resolution">
            <summary>
            Cell size.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.DrainageViolations.MinSlope">
            <summary>
            Minimum slope.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.DrainageViolations.MaxSlope">
            <summary>
            Maximum slope.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.DrainageViolations.MinSlopeColor">
            <summary>
            Minimum slope violation color.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.DrainageViolations.MaxSlopeColor">
            <summary>
            Maximum slope violation color.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.DrainageViolations.VortexColor">
            <summary>
            Vortex violation color.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.DrainageViolations.NoViolationColor">
            <summary>
            No violation color.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.DrainageViolations.GenerateAndSaveTexture(Morph.Services.Core.Interfaces.ISurfaceInfo,System.String,System.String)">
            <summary>
            Generates and saves the bitmap.
            </summary>
            <param name="surfaceInfo">The surface to use to generate the visualization.</param>
            <param name="skuFile">The sketchup file.</param>
            <param name="name">Name of the surface to use in the texture filename.</param>
            <returns>The texture as a bitmap.</returns>
        </member>
        <member name="T:SkuTester.DataModel.TestCase">
            <summary>
            Defines an optimization test case problem to be solved by the engine.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.TestCase.#ctor">
            <summary>
            Constructs an empty instance.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.TestCase.#ctor(SkuTester.DataModel.TestCase)">
            <summary>
            Construct a test case instance by copying the problem description from the given test case.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.Surface">
            <summary>
            The input surface.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.Resolution">
            <summary>
            The nominal distance between irrigation rows.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.MinSlope">
            <summary>
            The minimum slope. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.MaxSlope">
            <summary>
            The maimum slope. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.MaxSlopeChange">
            <summary>
            The maximum slope change along the irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.FurrowHeading">
            <summary>
            Specifies the absolute direction of the furrows comming out of the pipeline (0 degrees is north and increasing clockwise).
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.MainHeading">
            <summary>
            Specifies the absolute direction of the main axis of grid in subzones computation (0 degrees is north and increasing clockwise).
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.MinCrossSlope">
            <summary>
            Specifies the minimum cross-slope as a fraction: vertical/horizontal.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.MaxCrossSlope">
            <summary>
            Specifies the maxmum cross-slope as a fraction: vertical/horizontal.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.MaxCrossSlopeChange">
            <summary>
            Specifies the maxmum cross-slope change: previous cross-slope - current cross-slope.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.MaxCutDepth">
            <summary>
            Specifies the maxmum cut that can be applied to the original surface.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.MaxFillHeight">
            <summary>
            Specifies the maxmum fill height that can be applied to the original surface.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.HasPointIds">
            <summary>
            Specifies wether first column is the point id.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.IsXYZ">
            <summary>
            Specifies wether the order of the columns is X, Y, Z or Y, X, Z.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.IsMetric">
            <summary>
            Specifies wether the unit of length is meter or feet.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.Shrinkage">
            <summary>
            The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.Bulkage">
            <summary>
            The percentage volume expantion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.Compute">
            <summary>
            Computation type.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.Boundary">
            <summary>
            This is a closed linestring that limits the scope of the computation to the surface within the boundary.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.TargetDitch">
            <summary>
            This is an open linestring. Every triangle should face towards the closest point in the ditch polyline within 60 degrees.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.TargetDitches">
            <summary>
            The list of target ditches.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.Pipeline">
            <summary>
            This is an open linestring that represents the pipepline. Furrows originate from the linestring.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.SectionLines">
            <summary>
            The list of section lines.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.Sections">
            <summary>
            Section areas.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.ExclusionZones">
            <summary>
            Exclusion zones.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.Zones">
            <summary>
            Subzone constraints.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.Areas">
            <summary>
            Drainage area constraints.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.ExportVolume">
            <summary>
            The resulting export loose haul volume to produce: cut - fill.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.ExitPoint">
            <summary>
            The exit point in basin computations.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.OriginalVisualizationTools">
            <summary>
            List of vizualization tools applied to the original surface.
            </summary>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.DesignVisualizationTools">
            <summary>
            List of vizualization tools applied to the design surface.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.TestCase.Save(System.String)">
            <summary>
            Save the contest of this test case in the given xml filename.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="P:SkuTester.DataModel.TestCase.XmlAttributeOverrides">
            <summary>
            The XML attribute overrides.
            </summary>
        </member>
        <member name="M:SkuTester.DataModel.TestCase.Load(System.String)">
            <summary>
            Creates a test case instance with the contents of the given xml filename.
            </summary>
            <param name="xmlFilename"></param>
            <returns></returns>
        </member>
        <member name="M:SkuTester.DataModel.TestCase.AsMetric">
            <summary>
            Returns an instance of this test case in which all parameters are converted to meters when
            this instance is tagged as non-metric.
            </summary>
            <returns>The same instance but with all the contents converted to meters.</returns>
        </member>
        <member name="M:SkuTester.DataModel.TestCase.ConvertToBase(System.Double)">
            <summary>
            Converts a value from feet to meters (base unit).
            </summary>
            <param name="value">The value in feet.</param>
            <returns>The value in base unit.</returns>
        </member>
        <member name="M:SkuTester.DataModel.TestCase.ConvertToBase(System.Windows.Point)">
            <summary>
            Converts a <see cref="T:System.Windows.Point"/> from feet to meters (base unit).
            </summary>
            <param name="point">The point in feet.</param>
            <returns>The point in base unit.</returns>
        </member>
        <member name="M:SkuTester.DataModel.TestCase.ConvertToBase(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Converts a <see cref="T:System.Windows.Media.Media3D.Point3D"/> from feet to meters (base unit).
            </summary>
            <param name="point">The point in feet.</param>
            <returns>The point in base unit.</returns>
        </member>
        <member name="M:SkuTester.DataModel.TestCase.ConvertToBase(System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Converts an enumeration of <see cref="T:System.Windows.Media.Media3D.Point3D"/> from feet to meters (base unit).
            </summary>
            <param name="points">The enumeration of points in feet.</param>
            <returns>The enumeration of points in base unit.</returns>
        </member>
        <member name="M:SkuTester.DataModel.TestCase.ConvertToBase(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            Converts a <see cref="T:Morph.Services.Core.DataModel.Linestring"/> from feet to meters (base unit).
            </summary>
            <param name="ls">The linestring in feet.</param>
            <returns>The linestring in base unit.</returns>
        </member>
    </members>
</doc>
