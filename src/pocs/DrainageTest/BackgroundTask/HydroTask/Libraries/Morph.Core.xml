<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Morph.Core</name>
    </assembly>
    <members>
        <member name="T:Morph.Core.ClassExtensions.DeepCloneExtension">
            <summary>
                Class extension to deep clone objects using serialization
            </summary>
        </member>
        <member name="M:Morph.Core.ClassExtensions.DeepCloneExtension.Clone``1(``0,System.Type[])">
            <summary>
                Deep Clone an instance of a class
            </summary>
            <param name="source">source to clone</param>
            <param name="extraTypes">extra types for additional class information</param>
            <typeparam name="T">Object type to clone</typeparam>
            <returns>Deep clone of the source object</returns>
        </member>
        <member name="T:Morph.Core.ClassExtensions.EnumerableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Core.ClassExtensions.EnumerableExtensions.Section``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.ClassExtensions.GeometryExtension">
            <summary>
            Convert between degrees and radians.
            </summary>
        </member>
        <member name="M:Morph.Core.ClassExtensions.GeometryExtension.DegreesToRadians(System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">Input value in degrees.</param>
            <returns>Value in radians.</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.GeometryExtension.RadiansToDegrees(System.Double)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">Input value in degrees.</param>
            <returns>Value in radians.</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.GeometryExtension.NormalizeAngleRad(System.Double,System.Double)">
            <summary>
            Normalize an angle in radians between the range of [reference, reference + 2 PI).
            </summary>
            <param name="angle">angle in radians</param>
            <param name="reference">reference in radians</param>
            <returns>the normalized angle in radians</returns>
        </member>
        <member name="T:Morph.Core.ClassExtensions.PurchaseAreaExtension">
            <summary>
                Extension methods that support PurchaseArea class conversion to and from GeoJson.
            </summary>
        </member>
        <member name="M:Morph.Core.ClassExtensions.PurchaseAreaExtension.ToGeoJson(Morph.Services.Core.DataModel.PurchaseArea,System.Int64)">
            <summary>
                This extension will form the PurchaseArea into a GeoJson object for ACDC
                This will create a single Feature area.  
            </summary>
            <param name="area"></param>
            <param name="numberOfAcres"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.PurchaseAreaExtension.FromGeoJsonToPurchaseAreaEntity(Morph.Contracts.DataContracts.Services.Licensing.Feature,System.Guid,System.Nullable{System.DateTime},System.DateTime,System.Nullable{System.Int32})">
            <summary>
                Build the PurchaseAreaEntity from FeatureCollection
            </summary>
            <param name="feature"></param>
            <param name="id"></param>
            <param name="expirationDate"></param>
            <param name="grantedDate"></param>
            <param name="modificationDuration"></param>
        </member>
        <member name="M:Morph.Core.ClassExtensions.PurchaseAreaExtension.ToPurchaseAreaEntity(Morph.Services.Core.DataModel.PurchaseArea,System.Int64,System.Guid,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Convert to a PurchaseAreaEntity. 
            This will serialize without worrying about any future changes to PurchaseArea that will affect the cache on disk.
            </summary>
            <param name="numberOfAcres"></param>
            <param name="id"></param>
            <param name="expirationDate"></param>
            <param name="area"></param>
            <param name="grantedUtc"></param>
            <param name="modificationDuration"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.PurchaseAreaExtension.FromPurchaseAreaEntity(Morph.Contracts.DataContracts.Repository.License.PurchaseAreaEntity)">
            <summary>
            Convert the PurchaseAreaEntity back to a PurchaseArea
            </summary>
            <param name="areaEntity"></param>
        </member>
        <member name="T:Morph.Core.ClassExtensions.ContourLabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Core.ClassExtensions.ContourLabel.Elevation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Core.ClassExtensions.ContourLabel.MidPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Core.ClassExtensions.ContourLabel.Angle">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Core.ClassExtensions.DuplicateKeyComparer`1">
            <summary>
            Comparer for comparing two keys, handling equality as beeing greater
            Use this Comparer e.g. with SortedLists or SortedDictionaries, that don't allow duplicate keys
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Morph.Core.ClassExtensions.DuplicateKeyComparer`1.Compare(`0,`0)">
            <summary>
            Compare
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.ClassExtensions.Surface3DExtensions">
            <summary>
                Class for ISurface3D extensions
            </summary>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetTotalSize(Morph.Contracts.Interfaces.ISurface3D)">
            <summary>
            Get the total size of the surface
            </summary>
            <param name="surface"></param>
            <returns>total calculated size in bytes of the surface</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.ToSurface3D(Morph.Contracts.DataContracts.Repository.Surface3DEntity)">
            <summary>
                Convert a Surface3DEntity to a runtime Surface3D object
            </summary>
            <param name="surface">Surface3DEntity to convert</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.ToSurface3DEntity(Morph.Contracts.Interfaces.ISurface3D)">
            <summary>
                Convert to a Surface3DEntity instance
            </summary>
            <param name="surface">surface to be converted</param>
            <returns>MorphSurface3D instance from the input surface</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.ToMorphSurface3D(Morph.Contracts.Interfaces.ISurface3D)">
            <summary>
                Convert to a MorphSurface3D instance
            </summary>
            <param name="surface">surface to be converted</param>
            <returns>MorphSurface3D instance from the input surface</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetSurfaceCentroid(Morph.Contracts.Interfaces.ISurface3D)">
            <summary>
                Get centroid from points in the surface
            </summary>
            <param name="surface">(this) ISurface3D instance</param>
            <returns>a Point3D instance containing the centroid information</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetSurfaceExtents(Morph.Contracts.Interfaces.ISurface3D)">
            <summary>
                Get the surface extents
            </summary>
            <param name="surface">(this) ISurface3D instance</param>
            <returns>a Point3D instance containing the extents information</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetMaxVerticalExaggeration(Morph.Contracts.Interfaces.ISurface3D,System.Double)">
            <summary>
                Get the maximum vertical exaggeration for the surface
            </summary>
            <param name="surface">(this) ISurface3D instance</param>
            <param name="defaultValue">default value in case of error</param>
            <returns>Returns the max vertical scaling value for the surface</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetPointCollection(Morph.Contracts.Interfaces.ISurface3D)">
            <summary>
                Get the points as a Points3DCollection
            </summary>
            <param name="surface">(this) ISurface3D instance</param>
            <returns>an new instance of PointCollection created from the surface points</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetTriangleCollection(Morph.Contracts.Interfaces.ISurface3D)">
            <summary>
                Get the triangle indices's as an Int32Collection
            </summary>
            <param name="surface"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetTextureCoordinatesCollection(Morph.Contracts.Interfaces.ISurface3D)">
            <summary>
             Get TexttureCoordinates
            </summary>
            <param name="surface"></param>
            <returns>an new instance of PointCollection created from the surface point</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetSurfaceBounds(Morph.Contracts.Interfaces.ISurface3D)">
            <summary>
                Get surface bounds
            </summary>
            <param name="surface">(this) ISurface3D instance</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetBoundaryBounds(Morph.Contracts.Interfaces.ISurface3D)">
            <summary>
                Get surface boundary bounds
            </summary>
            <param name="surface">(this) ISurface3D instance</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetQuickContours(Morph.Contracts.Interfaces.ISurface3D,System.Boolean,System.Double)">
            <summary>
            
            </summary>
            <param name="surface">(this) ISurface3D instance</param>
            <param name="bFullRange"></param>
            <param name="elevInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetContourStartingElevation(Morph.Contracts.Interfaces.ISurface3D,System.Double,System.Double)">
            <summary>
            Get starting elevation for calculating the contours from
            </summary>
            <param name="surface">(this) ISurface3D instance</param>
            <param name="offSet">Interval value between contour lines (in SI unit)</param>
            <param name="minElevation">Minimum elevation of original surface</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetContourLines(Morph.Contracts.Interfaces.ISurface3D,System.Double,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            get contour lines
            </summary>
            <param name="surface"></param>
            <param name="elevationInterval"></param>
            <param name="bFullRange"></param>
            <param name="zones"></param>
            <param name="exclusionAreas"></param>
            <returns>List of contour lines</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetContourLabels(Morph.Contracts.Interfaces.ISurface3D,System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Media.Media3D.Point3D}},System.Double,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            get contour labels
            </summary>
            <param name="surface"></param>
            <param name="contourLines"></param>
            <param name="zoomFactor">calculate distance between labels based on zoom factor</param>
            <param name="viewportRect">filter out labels out of the viewport</param>
            <returns>List of contour labels</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.GetSurfaceElevation(Morph.Contracts.Interfaces.ISurface3D,System.Double@,System.Double@)">
            <summary>
            Return min, max elevation for points within the boundary
            </summary>
            <param name="surface"></param>
            <param name="max"></param>
            <param name="min"></param>
        </member>
        <member name="M:Morph.Core.ClassExtensions.Surface3DExtensions.ClassifySurfaces(Morph.Contracts.Interfaces.ISurface3D,System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}})">
            <summary>
            Return a SimpleSurface with the triangles inside each boundary
            </summary>
            <param name="surface"></param>
            <param name="boundaries"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.ClassExtensions.TextWriterExtension">
            <summary>
                Extensions for the text write class
            </summary>
        </member>
        <member name="M:Morph.Core.ClassExtensions.TextWriterExtension.WriteBenchmarks(System.IO.TextWriter,System.Collections.Generic.IEnumerable{Morph.Contracts.Interfaces.IFixedPoint},System.Boolean,System.Int32@)">
            <summary>
                Write bench marks to the file
            </summary>
            <param name="writer">TextWriter</param>
            <param name="benchmarks">benchmarks to be written</param>
            <param name="hasId">do we write out the ID</param>
            <param name="currentRecord">current record id</param>
        </member>
        <member name="M:Morph.Core.ClassExtensions.TextWriterExtension.WriteOrigin(System.IO.TextWriter,Core.Contracts.Interfaces.IOrigin,System.Boolean,System.Int32@)">
            <summary>
                Write origin to text writer stream
            </summary>
            <param name="writer">TextWriter</param>
            <param name="origin">origin record to be written to be written</param>
            <param name="hasId">do we write out the ID</param>
            <param name="currentRecord">current record id</param>
        </member>
        <member name="M:Morph.Core.ClassExtensions.TextWriterExtension.WriteBoundary(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D},System.Boolean,System.Int32@)">
            <summary>
                Write a boundary to text writer stream
            </summary>
            <param name="writer">TextWriter</param>
            <param name="points">boundary points to be written</param>
            <param name="hasId">do we write out the ID</param>
            <param name="currentRecord">current record id</param>
        </member>
        <member name="M:Morph.Core.ClassExtensions.TextWriterExtension.WritePoints(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D},System.Boolean,System.Int32@)">
            <summary>
                Write interior points to text writer stream
            </summary>
            <param name="writer">TextWriter</param>
            <param name="points">benchmarks to be written</param>
            <param name="hasId">do we write out the ID</param>
            <param name="currentRecord">current record id</param>
        </member>
        <member name="M:Morph.Core.ClassExtensions.TextWriterExtension.WriteSectionLines(System.IO.TextWriter,System.Collections.Generic.IEnumerable{Morph.Contracts.Interfaces.ISectionLine},System.Boolean,System.Int32@)">
            <summary>
                Write section line points to text writer stream
            </summary>
            <param name="writer">TextWriter</param>
            <param name="sectionLines">section lines to be written</param>
            <param name="hasId">do we write out the ID</param>
            <param name="currentRecord">current record id</param>
        </member>
        <member name="T:Morph.Core.ClassExtensions.UnitsExtension">
            <summary>
                Extension class for unit conversions
            </summary>
        </member>
        <member name="M:Morph.Core.ClassExtensions.UnitsExtension.#cctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Morph.Core.ClassExtensions.UnitsExtension.FromDefault(System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Convert a value from default units to target value by dimension
            </summary>
            <param name="value">value in metric form</param>
            <param name="dimension">unit dimension. area, depth, distance or volume</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.UnitsExtension.FromDefault(System.Windows.Media.Media3D.Point3D)">
            <summary>
                Convert a Point3D value from default units to target value
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.UnitsExtension.ToDefault(System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Convert a value from target unit to default unit value by dimension
            </summary>
            <param name="value">value in metric form</param>
            <param name="dimension">unit dimension. area, depth, distance or volume</param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.ClassExtensions.WindowStateExtension">
            <summary>
                Extension for windows to save / restore window state
            </summary>
        </member>
        <member name="M:Morph.Core.ClassExtensions.WindowStateExtension.GetScreens">
            <summary>
                Get state of all screens as a string
            </summary>
            <returns>string representation of all screens</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.WindowStateExtension.ToDouble(System.Xml.Linq.XElement)">
            <summary>
                Helper to convert XElement to double
            </summary>
            <param name="element">converts element value to a double</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.WindowStateExtension.GetWindowStateAsXml(System.Windows.Window)">
            <summary>
                Get the current window state as xml
            </summary>
            <param name="window">(this) window</param>
            <returns>xml representing the current window state with monitor screen states</returns>
        </member>
        <member name="M:Morph.Core.ClassExtensions.WindowStateExtension.RestoreWindowStateFromXml(System.Windows.Window,System.String)">
            <summary>
                Restore the window state from xml
            </summary>
            <param name="window">(this) window</param>
            <param name="xml">previously stored xml of the window and monitor states</param>
        </member>
        <member name="T:Morph.Core.ClassExtensions.XmlWriterExtension">
            <summary>
                Extensions for the XML write class
            </summary>
        </member>
        <member name="M:Morph.Core.ClassExtensions.XmlWriterExtension.WriteXmlHeader(System.Xml.XmlWriter)">
            <summary>
                Write benchmarks to the file
            </summary>
            <param name="writer">XmlWriter</param>
        </member>
        <member name="M:Morph.Core.ClassExtensions.XmlWriterExtension.WriteXmlFooter(System.Xml.XmlWriter)">
            <summary>
                Write benchmarks to the file
            </summary>
            <param name="writer">XmlWriter</param>
        </member>
        <member name="M:Morph.Core.ClassExtensions.XmlWriterExtension.WriteOrigin(System.Xml.XmlWriter,Core.Contracts.Interfaces.IOrigin)">
            <summary>
                Write origin to XML writer stream
            </summary>
            <param name="writer">XmlWriter</param>
            <param name="origin">origin record to be written to be written</param>
        </member>
        <member name="M:Morph.Core.ClassExtensions.XmlWriterExtension.WriteBenchmarks(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{Morph.Contracts.Interfaces.IFixedPoint})">
            <summary>
                Write benchmarks to the file
            </summary>
            <param name="writer">XmlWriter</param>
            <param name="benchmarks">benchmarks to be written</param>
        </member>
        <member name="M:Morph.Core.ClassExtensions.XmlWriterExtension.WriteBoundary(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D})">
            <summary>
                Write a boundary to XML writer stream
            </summary>
            <param name="writer">XmlWriter</param>
            <param name="points">boundary points to be written</param>
        </member>
        <member name="M:Morph.Core.ClassExtensions.XmlWriterExtension.WriteSectionLines(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{Morph.Contracts.Interfaces.ViewModels.ISectionLineViewModel},System.Double)">
            <summary>
                Write section line points to XML writer stream
            </summary>
            <param name="writer">XmlWriter</param>
            <param name="sectionLines">section lines to be written</param>
            <param name="originAltitude">master benchmark altitude</param>
        </member>
        <member name="M:Morph.Core.ClassExtensions.XmlWriterExtension.WritePoints(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D})">
            <summary>
                Write interior survey points to XML writer stream
            </summary>
            <param name="writer">XmlWriter</param>
            <param name="points">benchmarks to be written</param>
        </member>
        <member name="T:Morph.Core.Controls.ArrowLine">
            <summary>
                Draws a straight line between two points with 
                optional arrows on the ends.
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.ArrowLine.X1Property">
            <summary>
                Identifies the X1 dependency property.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.ArrowLine.X1">
            <summary>
                Gets or sets the x-coordinate of the ArrowLine start point.
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.ArrowLine.Y1Property">
            <summary>
                Identifies the Y1 dependency property.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.ArrowLine.Y1">
            <summary>
                Gets or sets the y-coordinate of the ArrowLine start point.
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.ArrowLine.X2Property">
            <summary>
                Identifies the X2 dependency property.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.ArrowLine.X2">
            <summary>
                Gets or sets the x-coordinate of the ArrowLine end point.
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.ArrowLine.Y2Property">
            <summary>
                Identifies the Y2 dependency property.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.ArrowLine.Y2">
            <summary>
                Gets or sets the y-coordinate of the ArrowLine end point.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.ArrowLine.DefiningGeometry">
            <summary>
                Gets a value that represents the Geometry of the ArrowLine.
            </summary>
        </member>
        <member name="T:Morph.Core.Controls.ArrowEnds">
            <summary>
                Indicates which end of the line has an arrow.
            </summary>
        </member>
        <member name="T:Morph.Core.Controls.ArrowLineBase">
            <summary>
                Provides a base class for ArrowLine and ArrowPolyline.
                This class is abstract.
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.ArrowLineBase.ArrowAngleProperty">
            <summary>
                Identifies the ArrowAngle dependency property.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.ArrowLineBase.ArrowAngle">
            <summary>
                Gets or sets the angle between the two sides of the arrowhead.
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.ArrowLineBase.ArrowLengthProperty">
            <summary>
                Identifies the ArrowLength dependency property.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.ArrowLineBase.ArrowLength">
            <summary>
                Gets or sets the length of the two sides of the arrowhead.
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.ArrowLineBase.ArrowEndsProperty">
            <summary>
                Identifies the ArrowEnds dependency property.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.ArrowLineBase.ArrowEnds">
            <summary>
                Gets or sets the property that determines which ends of the
                line have arrows.
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.ArrowLineBase.IsArrowClosedProperty">
            <summary>
                Identifies the IsArrowClosed dependency property.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.ArrowLineBase.IsArrowClosed">
            <summary>
                Gets or sets the property that determines if the arrow head
                is closed to resemble a triangle.
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.ArrowLineBase.#ctor">
            <summary>
                Initializes a new instance of ArrowLineBase.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.ArrowLineBase.DefiningGeometry">
            <summary>
                Gets a value that represents the Geometry of the ArrowLine.
            </summary>
        </member>
        <member name="T:Morph.Core.Controls.RangeSlider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.#cctor">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.#ctor">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.HigherRangeBackgroundProperty">
            <summary>
            # TODODOC
            Get/Set the Brush for the Range between higher/maximum values. (Brush)
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.HigherRangeBackground">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.HigherRangeStyleProperty">
            <summary>
            # TODODOC
            Get/Set the Style for the Range between Higher/Maximum values. (Style)
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.HigherRangeStyle">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.HigherRangeWidthPropertyKey">
            <summary>
            # TODODOC          
            
            HigherRangeWidth property is a readonly property, used to calculate the percentage of the  HigherRange within the entire min/max range.
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.HigherRangeWidthProperty">
            <summary>    
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.HigherRangeWidth">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.HigherThumbBackgroundProperty">
            <summary>
            # TODODOC
            Get/Set the Brush for the HigherValue thumb back of the icons [active state]. (Brush)
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.HigherThumbBackground">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.HigherValueProperty">
            <summary>
            # TODODOC          
            
            HigherValue property represents the higher value within the selected range.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.HigherValue">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.OnHigherValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.OnHigherValueChanged(System.Double,System.Double)">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.LowerRangeBackgroundProperty">
            <summary>
            # TODODOC
            Get/Set the Brush for the Range between minimum/lower values . (Brush)
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.LowerRangeBackground">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.LowerRangeStyleProperty">
            <summary>
            # TODODOC
            Get/Set the Style for the Range between Minimum/Lower values. (Style)
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.LowerRangeStyle">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.LowerRangeWidthPropertyKey">
            <summary>
            # TODODOC          
            
            LowerRangeWidth property is a readonly property, used to calculate the percentage of the  LowerRange, within the entire min/max range.
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.LowerRangeWidthProperty">
            <summary>    
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.LowerRangeWidth">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.LowerThumbBackgroundProperty">
            <summary>
            # TODODOC          
            Get/Set the Brush for the LowerValue thumb back of the icons [active state]. (Brush)
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.LowerThumbBackground">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.LowerValueProperty">
            <summary>
            # TODODOC          
            LowerValue property represents the lower value within the selected range.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.LowerValue">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.OnLowerValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.OnLowerValueChanged(System.Double,System.Double)">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.MaximumProperty">
            <summary>
            # TODODOC          
            Maximum property represents the maximum value, which can be selected, in a range.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.Maximum">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.OnMaximumChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.OnMaximumChanged(System.Double,System.Double)">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.MinimumProperty">
            <summary>
            //#TODODOC          
            Minimum property represents the minimum value, which can be selected, in a range.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.Minimum">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.OnMinimumChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.OnMinimumChanged(System.Double,System.Double)">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.OrientationProperty">
            <summary>
            # TODODOC
            Get/Set the RangeSlider orientation.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.Orientation">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.OnOrientationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.OnOrientationChanged(System.Windows.Controls.Orientation,System.Windows.Controls.Orientation)">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.RangeBackgroundProperty">
            <summary>
            # TODODOC
            Get/Set the Brush for the Range between lower/higher values [active state]. (Brush)
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.RangeBackground">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.RangeStyleProperty">
            <summary>
            # TODODOC
            Get/Set the Style for the Range between Lower/Higher values. (Style)
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.RangeStyle">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.RangeWidthPropertyKey">
            <summary>
            # TODODOC          
            
            RangeWidth property is a readonly property, used to calculate the percentage of the range within the entire min/max range.
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.RangeWidthProperty">
            <summary>    
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.RangeWidth">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.StepProperty">
            <summary>
            # TODODOC          
            
            Step property is used to identify the RangeSlider's size of individual move, while clicking on the LowerRange, HigherRange, not while scrolling the thumbs.
            </summary>
        </member>
        <member name="P:Morph.Core.Controls.RangeSlider.Step">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.CoerceStep(System.Windows.DependencyObject,System.Object)">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.OnApplyTemplate">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.ToString">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.GetThumbWidth(System.Windows.Controls.Slider)">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.GetThumbHeight(System.Windows.Controls.Slider)">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.AdjustView">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.SetSlidersMargins">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.GetCoercedValues">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.SetLowerSliderValues(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.SetHigherSliderValues(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.SetSliderValues(System.Windows.Controls.Slider,System.Windows.RoutedPropertyChangedEventHandler{System.Double},System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.LowerValueChangedEvent">
            <summary>    
            </summary>
        </member>
        <member name="E:Morph.Core.Controls.RangeSlider.LowerValueChanged">
            <summary>    
            </summary>
        </member>
        <member name="F:Morph.Core.Controls.RangeSlider.HigherValueChangedEvent">
            <summary>    
            </summary>
        </member>
        <member name="E:Morph.Core.Controls.RangeSlider.HigherValueChanged">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.LowerRange_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.HigherRange_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.RangeSlider_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.Slider_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.LowerSlider_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>    
            </summary>
        </member>
        <member name="M:Morph.Core.Controls.RangeSlider.HigherSlider_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>    
            </summary>
        </member>
        <member name="T:Morph.Core.Controls.RangeSlider.CoercedValues">
            <summary>    
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.Behaviors.EditableComboBox">
            <summary>
            Editable Combobox behavior
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.EditableComboBox.OnAttached">
            <summary>
                On attached handler
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.EditableComboBox.AssociatedObject_PreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Preview Key down
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.EditableComboBox.AssociatedObject_DropDownClosed(System.Object,System.EventArgs)">
            <summary>
            Drop down closed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.EditableComboBox.AssociatedObject_LostKeyboardFocus(System.Object,System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            On lost keyboard focus 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.EditableComboBox.AssociatedObject_GotKeyboardFocus(System.Object,System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            On got keyboard focus
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.EditableComboBox.MoveFocusToNextUIElement(System.Windows.Input.KeyEventArgs)">
            <summary>
            Move Focus to next element
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.EditableComboBox.OnDetaching">
            <summary>
                On detached handler
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.Behaviors.AutoPopulateExportedViewsBehavior">
            <summary>
                Auto populate exported views behavior
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.AutoPopulateExportedViewsBehavior.RegisteredViews">
            <summary>
                All registered views
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.AutoPopulateExportedViewsBehavior.OnImportsSatisfied">
            <summary>
                Called when all imports are satisfied
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.AutoPopulateExportedViewsBehavior.OnAttach">
            <summary>
                Called when the control is attached
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.AutoPopulateExportedViewsBehavior.AddRegisteredViews">
            <summary>
                Add registered views to the region
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.Behaviors.DialogActivationBehavior">
            <summary>
            Defines a behavior that creates a Dialog to display the active view of the target <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.Behaviors.DialogActivationBehavior.BehaviorKey">
            <summary>
            The key of this behavior
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.DialogActivationBehavior.HostControl">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is attached to.
            </summary>
            <value>A <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is attached to.
            This is usually a <see cref="T:System.Windows.FrameworkElement"/> that is part of the tree.</value>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.DialogActivationBehavior.OnAttach">
            <summary>
            Performs the logic after the behavior has been attached.
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.DialogActivationBehavior.CreateWindow">
            <summary>
            Override this method to create an instance of the <see cref="T:Morph.Core.Infrastructure.Behaviors.IWindow"/> that 
            will be shown when a view is activated.
            </summary>
            <returns>
            An instance of <see cref="T:Morph.Core.Infrastructure.Behaviors.IWindow"/> that will be shown when a 
            view is activated on the target <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.Behaviors.IWindow">
            <summary>
            Defines the interface for the Dialogs that are shown by <see cref="T:Morph.Core.Infrastructure.Behaviors.DialogActivationBehavior"/>.
            </summary>
        </member>
        <member name="E:Morph.Core.Infrastructure.Behaviors.IWindow.Closed">
            <summary>
            Ocurrs when the <see cref="T:Morph.Core.Infrastructure.Behaviors.IWindow"/> is closed.
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.IWindow.Content">
            <summary>
            Gets or sets the content for the <see cref="T:Morph.Core.Infrastructure.Behaviors.IWindow"/>.
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.IWindow.Owner">
            <summary>
            Gets or sets the owner control of the <see cref="T:Morph.Core.Infrastructure.Behaviors.IWindow"/>.
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.IWindow.Style">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style"/> to apply to the <see cref="T:Morph.Core.Infrastructure.Behaviors.IWindow"/>.
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.IWindow.Show">
            <summary>
            Opens the <see cref="T:Morph.Core.Infrastructure.Behaviors.IWindow"/>.
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.IWindow.Close">
            <summary>
            Closes the <see cref="T:Morph.Core.Infrastructure.Behaviors.IWindow"/>.
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.Behaviors.NumericTextboxBehavior">
            <summary>
                Numeric text box behavior for only allowing valid double values
                The attached data context will be notified of the error but must
                support SetError / ClearError methods as seen below
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.Behaviors.NumericTextboxBehavior.IsNumericOnlyProperty">
            <summary>
                Selected item dependency property
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.Behaviors.NumericTextboxBehavior.FieldNameProperty">
            <summary>
                Selected item dependency property
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.Behaviors.NumericTextboxBehavior.OptionalTextProperty">
            <summary>
                Selected item dependency property
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.NumericTextboxBehavior.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.NumericTextboxBehavior.OptionalText">
            <summary>
                Optional string text
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.NumericTextboxBehavior.IsNumericOnly">
            <summary>
                Public access to the selected item
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.NumericTextboxBehavior.FieldName">
            <summary>
                Name for the field
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.NumericTextboxBehavior.OnAttached">
            <summary>
                Called when control is attached
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.NumericTextboxBehavior.OnDetaching">
            <summary>
                Called when control is detached
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.Behaviors.RegionPopupBehaviors">
            <summary>
            Declares the Attached Properties and Behaviors for implementing Popup regions.
            </summary>
            <remarks>
            Although the fastest way is to create a RegionAdapter for a Window and register it with the RegionAdapterMappings,
            this would be conceptually incorrect because we want to create a new popup window everytime a view is added 
            (instead of having a Window as a host control and replacing its contents everytime Views are added, as other adapters do).
            This is why we have a different class for this behavior, instead of reusing the <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionNameProperty"/> attached property.
            </remarks>
        </member>
        <member name="F:Morph.Core.Infrastructure.Behaviors.RegionPopupBehaviors.CreatePopupRegionWithNameProperty">
            <summary>
            The name of the Popup <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.Behaviors.RegionPopupBehaviors.ContainerWindowStyleProperty">
            <summary>
            The <see cref="T:System.Windows.Style"/> to set to the Popup.
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.RegionPopupBehaviors.GetCreatePopupRegionWithName(System.Windows.DependencyObject)">
            <summary>
            Gets the name of the Popup <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </summary>
            <param name="owner">Owner of the Popup.</param>
            <returns>The name of the Popup <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.</returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.RegionPopupBehaviors.SetCreatePopupRegionWithName(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the name of the Popup <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </summary>
            <param name="owner">Owner of the Popup.</param>
            <param name="value">NewProjectName of the Popup <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.</param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.RegionPopupBehaviors.GetContainerWindowStyle(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:System.Windows.Style"/> for the Popup.
            </summary>
            <param name="owner">Owner of the Popup.</param>
            <returns>The <see cref="T:System.Windows.Style"/> for the Popup.</returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.RegionPopupBehaviors.SetContainerWindowStyle(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Sets the <see cref="T:System.Windows.Style"/> for the Popup.
            </summary>
            <param name="owner">Owner of the Popup.</param>
            <param name="style"><see cref="T:System.Windows.Style"/> for the Popup.</param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.RegionPopupBehaviors.RegisterNewPopupRegion(System.Windows.DependencyObject,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> and registers it in the default <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/>
            attaching to it a <see cref="T:Morph.Core.Infrastructure.Behaviors.DialogActivationBehavior"/> behavior.
            </summary>
            <param name="owner">The owner of the Popup.</param>
            <param name="regionName">The name of the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.</param>
            <remarks>
            This method would typically not be called directly, instead the behavior 
            should be set through the Attached Property <see cref="F:Morph.Core.Infrastructure.Behaviors.RegionPopupBehaviors.CreatePopupRegionWithNameProperty"/>.
            </remarks>
        </member>
        <member name="T:Morph.Core.Infrastructure.Behaviors.WatermarkTextboxBehavior">
            <summary>
                Watermark text box behavior
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.Behaviors.WatermarkTextboxBehavior.TextProperty">
            <summary>
                Text property
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.Behaviors.WatermarkTextboxBehavior.IsWatermarkedProperty">
            <summary>
                Is watermarked property
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.WatermarkTextboxBehavior.IsWatermarked">
            <summary>
                Is watermarked bindable property
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.WatermarkTextboxBehavior.Text">
            <summary>
                Watermark text
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.WatermarkTextboxBehavior.GetIsWatermarked(System.Windows.Controls.TextBox)">
            <summary>
                Is the texbox watermarked
            </summary>
            <param name="tb">text box for check</param>
            <returns>true if marked, else false</returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.WatermarkTextboxBehavior.OnAttached">
            <summary>
                On attached handler
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.WatermarkTextboxBehavior.OnTextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
                On text changed handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.WatermarkTextboxBehavior.OnDetaching">
            <summary>
                On detached handler
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.WatermarkTextboxBehavior.OnGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
                On got focus handler
            </summary>
            <param name="sender">text box</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.WatermarkTextboxBehavior.OnLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
                On lost focus handler
            </summary>
            <param name="sender">text box</param>
            <param name="e">event args</param>
        </member>
        <member name="T:Morph.Core.Infrastructure.Behaviors.WindowDialogActivationBehavior">
            <summary>
            Specifies the <see cref="T:Morph.Core.Infrastructure.Behaviors.DialogActivationBehavior"/> class for using the behavior on WPF.
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.WindowDialogActivationBehavior.CreateWindow">
            <summary>
            Creates a wrapper for the WPF <see cref="T:System.Windows.Window"/>.
            </summary>
            <returns>Instance of the <see cref="T:System.Windows.Window"/> wrapper.</returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.Behaviors.WindowWrapper">
            <summary>
            Defines a wrapper for the <see cref="T:System.Windows.Window"/> class that implements the <see cref="T:Morph.Core.Infrastructure.Behaviors.IWindow"/> interface.
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.WindowWrapper.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Morph.Core.Infrastructure.Behaviors.WindowWrapper"/>.
            </summary>
        </member>
        <member name="E:Morph.Core.Infrastructure.Behaviors.WindowWrapper.Closed">
            <summary>
            Ocurrs when the <see cref="T:System.Windows.Window"/> is closed.
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.WindowWrapper.Content">
            <summary>
            Gets or Sets the content for the <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.WindowWrapper.Owner">
            <summary>
            Gets or Sets the <see cref="P:System.Windows.Window.Owner"/> control of the <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.WindowWrapper.Style">
            <summary>
            Gets or Sets the <see cref="P:System.Windows.FrameworkElement.Style"/> to apply to the <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.WindowWrapper.Show">
            <summary>
            Opens the <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.WindowWrapper.Close">
            <summary>
            Closes the <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.Behaviors.CursorPositionBehavior">
            <summary>
            Mouse cursor position behavior
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.CursorPositionBehavior.OnAttached">
            <summary>
                On attached handler
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.CursorPositionBehavior.AssociatedObject_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.CursorPositionBehavior.OnDetaching">
            <summary>
                On detached handler
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Behaviors.CursorPositionBehavior.GetMousePosition(System.Windows.Input.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.CursorPositionBehavior.RelativeTo">
            <summary>
            Relative to object
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.Behaviors.CursorPositionBehavior.RelativeToProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.Behaviors.CursorPositionBehavior.Transform">
            <summary>
            Transform
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.Behaviors.CursorPositionBehavior.TransformProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.DragDropHelper">
            <summary>
            Drag drop helper
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.DragDropHelper.GetIsDragSource(System.Windows.DependencyObject)">
            <summary>
            Get is drag source
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.DragDropHelper.SetIsDragSource(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Set is drag source
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Morph.Core.Infrastructure.DragDropHelper.IsDragSourceProperty">
            <summary>
            Is drag source property
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.DragDropHelper.GetIsDropTarget(System.Windows.DependencyObject)">
            <summary>
            Get is drop target
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.DragDropHelper.SetIsDropTarget(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Set is drop target
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Morph.Core.Infrastructure.DragDropHelper.IsDropTargetProperty">
            <summary>
            Is drop target property
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.DragDropHelper.GetDragDropTemplate(System.Windows.DependencyObject)">
            <summary>
            Get drag drop template
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.DragDropHelper.SetDragDropTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Set drag drop template
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Morph.Core.Infrastructure.DragDropHelper.DragDropTemplateProperty">
            <summary>
            Drag drop template property
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.DraggedAdorner">
            <summary>
            Dragged adorner
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.DraggedAdorner.#ctor(System.Object,System.Windows.DataTemplate,System.Windows.UIElement,System.Windows.Documents.AdornerLayer)">
            <summary>
            Helper constructor
            </summary>
            <param name="dragDropData"></param>
            <param name="dragDropTemplate"></param>
            <param name="adornedElement"></param>
            <param name="adornerLayer"></param>
        </member>
        <member name="M:Morph.Core.Infrastructure.DraggedAdorner.SetPosition(System.Double,System.Double)">
            <summary>
            Set position
            </summary>
            <param name="left"></param>
            <param name="top"></param>
        </member>
        <member name="M:Morph.Core.Infrastructure.DraggedAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.DraggedAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.DraggedAdorner.GetVisualChild(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Morph.Core.Infrastructure.DraggedAdorner.VisualChildrenCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.DraggedAdorner.GetDesiredTransform(System.Windows.Media.GeneralTransform)">
            <summary>
            
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.DraggedAdorner.Detach">
            <summary>
            Detach from control
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.InsertionAdorner">
            <summary>
            Insert adorner
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.InsertionAdorner.IsInFirstHalf">
            <summary>
            Is in first half
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.InsertionAdorner.#ctor(System.Boolean,System.Boolean,System.Windows.UIElement,System.Windows.Documents.AdornerLayer)">
            <summary>
            Helper constructor
            </summary>
            <param name="isSeparatorHorizontal"></param>
            <param name="isInFirstHalf"></param>
            <param name="adornedElement"></param>
            <param name="adornerLayer"></param>
        </member>
        <member name="M:Morph.Core.Infrastructure.InsertionAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            On Render
            This draws one line and two triangles at each end of the line.
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="M:Morph.Core.Infrastructure.InsertionAdorner.Detach">
            <summary>
            detach adorner
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.Logger">
            <summary>
            Send messages to the <see cref="T:Morph.Services.Core.Interfaces.ILogger"/> instance when the configurable switch matches the trace level.
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.Logger.DefaultTraceSourceName">
            <summary>
            Name of the <c>TraceSource</c> used to log events.
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.Logger.TraceSource">
            <summary>
            Trace source for all messages generated by this instance. 
            This trace source may be defined in the <c>App.config</c> file under the <c>system.diagnostics</c> section.
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.Logger.LoggerService">
            <summary>
            The default <see cref="T:Morph.Services.Core.Interfaces.ILogger"/> service.
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Logger.#ctor(System.String)">
            <summary>
            Creates an instance using the specified default trace source name.
            The switch defined in the app.config for <see cref="F:Morph.Core.Infrastructure.Logger.TraceSource"/> controls the log level for this trace source.
            </summary>
            <param name="defaultTraceSourceName">The default trace source name.</param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Logger.LogVerbose(System.String,System.String,System.Object[])">
            <summary>
            Log a verbose message.
            </summary>
            <param name="source">The object originating the message</param>
            <param name="message">The message format.</param>
            <param name="args">optional arguments to use in the message format</param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Logger.LogInfo(System.String,System.String,System.Object[])">
            <summary>
            Logs an informational message.
            </summary>
            <param name="source">The object originating the message</param>
            <param name="message">The message format.</param>
            <param name="args">optional arguments to use in the message format</param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Logger.LogWarning(System.String,System.String,System.Object[])">
            <summary>
            Logs a warning message.
            </summary>
            <param name="source">The object originating the message</param>
            <param name="message">The message format.</param>
            <param name="args">optional arguments to use in the message format</param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Logger.LogError(System.String,System.String,System.Object[])">
            <summary>
            Logs a critical error message.
            </summary>
            <param name="source">The object originating the message</param>
            <param name="message">The message format.</param>
            <param name="args">optional arguments to use in the message format</param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Logger.LogException(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Logs an exception message.
            </summary>
            <param name="source">The object originating the message</param>
            <param name="exception">The exception instance that originated the message</param>
            <param name="message">The message format.</param>
            <param name="args">optional arguments to use in the message format</param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Logger.Log(System.Diagnostics.TraceEventType,System.String,System.String,System.Object[])">
            <summary>
            Builds and writes a message using <c>System.Diagnostics.TraceSource</c> for this component.
            <seealso cref="T:System.Diagnostics.TraceSource"/>
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="source">The place where this message originated</param>
            <param name="message">The message</param>
            <param name="args">optional argument to format with the message</param>
        </member>
        <member name="T:Morph.Core.Infrastructure.StaticSettings">
            <summary>
                Holder for some static settings
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.StaticSettings.CursorPosUpdateThrottle">
            <summary>
                Cursor throttle for status updates
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.Utilities">
            <summary>
            Drad and drop utilities
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Utilities.HasVerticalOrientation(System.Windows.FrameworkElement)">
            <summary>
            Has vertical orientation
            </summary>
            <param name="itemContainer"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Utilities.InsertItemInItemsControl(System.Windows.Controls.ItemsControl,System.Object,System.Int32)">
            <summary>
            Insert item in items control
            </summary>
            <param name="itemsControl"></param>
            <param name="itemToInsert"></param>
            <param name="insertionIndex"></param>
        </member>
        <member name="M:Morph.Core.Infrastructure.Utilities.RemoveItemFromItemsControl(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Remove item from items control
            </summary>
            <param name="itemsControl"></param>
            <param name="itemToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Utilities.IsInFirstHalf(System.Windows.FrameworkElement,System.Windows.Point,System.Boolean)">
            <summary>
            Is in first half
            </summary>
            <param name="container"></param>
            <param name="clickedPoint"></param>
            <param name="hasVerticalOrientation"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Utilities.IsMovementBigEnough(System.Windows.Point,System.Windows.Point)">
            <summary>
            Is drag movement large enough
            </summary>
            <param name="initialMousePosition"></param>
            <param name="currentPosition"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.ErrorsToStringConverter">
            <summary>
            Converts a list of <c>ValidationError</c> instances to a string (error message).
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.ErrorsToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Accumulates all the Validation errors into a string.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.ErrorsToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.InverseBooleanConverter">
            <summary>
            Inverse boolean converter
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.InverseBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Morph.Core.Infrastructure.InverseBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Morph.Core.Infrastructure.EnumToBooleanConverter">
            <summary>
                Converts Enum value to Boolean and vice versa
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.EnumToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert enum to boolean
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.EnumToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert bool to enum
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.BooleanConverter">
            <summary>
            Boolean converter
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.BooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.BooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.Converters.AreaConverter">
            <summary>
                Converter for area units
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.AreaConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert to an area double in selected display units
            </summary>
            <param name="value">value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter for convert</param>
            <param name="culture">culture</param>
            <returns>return string version of the double</returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.AreaConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert back from string to an area double in defaults (meters)
            </summary>
            <param name="value">string value</param>
            <param name="targetType">target type</param>
            <param name="parameter">call parameter</param>
            <param name="culture">culture</param>
            <returns>double value from string input</returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.Converters.DepthConverter">
            <summary>
                Converter for depth units
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.DepthConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert to a depth double in selected display units
            </summary>
            <param name="value">value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter for convert</param>
            <param name="culture">culture</param>
            <returns>return string version of the double</returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.DepthConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert back from string to a depth double in defaults (meters)
            </summary>
            <param name="value">string value</param>
            <param name="targetType">target type</param>
            <param name="parameter">call parameter</param>
            <param name="culture">culture</param>
            <returns>double value from string input</returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.Converters.DistanceConverter">
            <summary>
                Converter for distance units
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.DistanceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert to a distance double in selected display units
            </summary>
            <param name="value">value</param>
            <param name="targetType">target type</param>
            <param name="parameter">optional string value used to denote use of an optional field</param>
            <param name="culture">culture</param>
            <returns>return string version of the double</returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.DistanceConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert back from string to a distance double in defaults (meters)
            </summary>
            <param name="value">string value</param>
            <param name="targetType">target type</param>
            <param name="parameter">optional string value used to denote use of an optional field</param>
            <param name="culture">culture</param>
            <returns>double value from string input</returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.Converters.DistanceNoFormatConverter">
            <summary>
                Converter for distance units
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.DistanceNoFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert to a distance double in selected display units
            </summary>
            <param name="value">value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter for convert</param>
            <param name="culture">culture</param>
            <returns>return string version of the double</returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.DistanceNoFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert back from string to a distance double in defaults (meters)
            </summary>
            <param name="value">string value</param>
            <param name="targetType">target type</param>
            <param name="parameter">call parameter</param>
            <param name="culture">culture</param>
            <returns>double value from string input</returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.Converters.DoubleConverter">
            <summary>
                Double convert class.
                use this to support IDataErrorInfo from the view model
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.DoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert to a double
            </summary>
            <param name="value">value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter for convert</param>
            <param name="culture">culture</param>
            <returns>return string version of the double</returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.DoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert back from string to double
            </summary>
            <param name="value">string value</param>
            <param name="targetType">target type</param>
            <param name="parameter">call parameter</param>
            <param name="culture">culture</param>
            <returns>double value from string input</returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.Converters.EnumToBoolConverter">
            <summary>
            Enum to boolean converter
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.EnumToBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert to boolean
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.EnumToBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back to enum
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.Converters.PercentageConverter">
            <summary>
                Percentage convert class
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.PercentageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert to a distance double in selected display units
            </summary>
            <param name="value">value</param>
            <param name="targetType">target type</param>
            <param name="parameter">optional string value used to denote use of an optional field</param>
            <param name="culture">culture</param>
            <returns>return string version of the double</returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.PercentageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert back from string to a distance double in defaults (meters)
            </summary>
            <param name="value">string value</param>
            <param name="targetType">target type</param>
            <param name="parameter">optional string value used to denote use of an optional field</param>
            <param name="culture">culture</param>
            <returns>double value from string input</returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.Converters.SmallDistanceConverter">
            <summary>
                Converter for distance units
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.SmallDistanceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert to a distance double in selected display units
            </summary>
            <param name="value">value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter for convert</param>
            <param name="culture">culture</param>
            <returns>return string version of the double</returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.SmallDistanceConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert back from string to a distance double in defaults (meters)
            </summary>
            <param name="value">string value</param>
            <param name="targetType">target type</param>
            <param name="parameter">call parameter</param>
            <param name="culture">culture</param>
            <returns>double value from string input</returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.Converters.VisibilityConverter">
            <summary>
            Visibility converter
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.VisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from bool to visibility
            </summary>
            <param name="value">(boolean) value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameters</param>
            <param name="culture">culture</param>
            <returns>visibility based on boolean input value of visible or collapsed</returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.VisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.Converters.InverseVisibilityConverter">
            <summary>
            Inverse visibility converter
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.InverseVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert method
            </summary>
            <param name="value">value to convert</param>
            <param name="targetType">target type</param>
            <param name="parameter">any parameter</param>
            <param name="culture">parameter culture</param>
            <returns>visibility based on bool value</returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.InverseVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.Converters.VolumeConverter">
            <summary>
                Converter for volume units
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.VolumeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert to a volume double in selected display units
            </summary>
            <param name="value">value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter for convert</param>
            <param name="culture">culture</param>
            <returns>return string version of the double</returns>
        </member>
        <member name="M:Morph.Core.Infrastructure.Converters.VolumeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert back from string to a volume double in defaults (meters)
            </summary>
            <param name="value">string value</param>
            <param name="targetType">target type</param>
            <param name="parameter">call parameter</param>
            <param name="culture">culture</param>
            <returns>double value from string input</returns>
        </member>
        <member name="T:Morph.Core.Infrastructure.DesignViewNames">
            <summary>
                Class for holding design view names
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.DesignViewNames.ConstraintsView">
            <summary>
            Name for the constraints view
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.DesignViewNames.CutFillInteractiveView">
            <summary>
                Name for the cut fill 3D interactive view
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.DesignViewNames.ProposedDesignInteractiveView">
            <summary>
                Proposed design interactive view
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.DesignViewNames.CutFillReportView">
            <summary>
                Name for the cut fill report view
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.DesignViewNames.DesignReportView">
            <summary>
                Name for the design report view
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.DesignViewNames.QuoteReportView">
            <summary>
                Name for the quote report view
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.DesignViewNames.VolumetricReportView">
            <summary>
            Name for volumetric report view
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.DesignViewNames.EditortView">
            <summary>
            Name for volumetric report view
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.IViewRegionRegistration">
            <summary>
            Interface used to register a view region
            </summary>
        </member>
        <member name="P:Morph.Core.Infrastructure.IViewRegionRegistration.RegionName">
            <summary>
            Region name read only
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.NavParams">
            <summary>
            Parameters sent in navigation
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.NavParams.DesignGuid">
            <summary>
            Design guid parameter
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.NavParams.DesignName">
            <summary>
            Design name parameter
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.NavParams.FieldName">
            <summary>
            Field name parameter
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.NavParams.FieldGuid">
            <summary>
            Field name parameter
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.NavParams.ProjectName">
            <summary>
            Project name parameter
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.NavParams.ProjectGuid">
            <summary>
            Project name parameter
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.NavParams.IterationGuid">
            <summary>
            Iteration guid parameter
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.ViewExportAttribute">
            <summary>
            Attribute used to export views
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.ViewExportAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Morph.Core.Infrastructure.ViewExportAttribute.#ctor(System.String)">
            <summary>
            Constructor accepting the view name
            </summary>
            <param name="viewName">name of the view</param>
        </member>
        <member name="P:Morph.Core.Infrastructure.ViewExportAttribute.RegionName">
            <summary>
            The region name this view is associated with
            </summary>
        </member>
        <member name="T:Morph.Core.Infrastructure.RegionNames">
            <summary>
            Each property of <see cref="T:Morph.Core.Infrastructure.RegionNames"/> names a specific region in the top window of the application.
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.RegionNames.MainToolBarRegion">
            <summary>
            This region hosts the main menu.
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.RegionNames.MainRegion">
            <summary>
            This region hosts the 3D/2D views.
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.RegionNames.ExplorerRegion">
            <summary>
            This region hosts the tree with all the entities in the project.
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.RegionNames.ActionRegion">
            <summary>
            This region hosts the edit/command property panels.
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.RegionNames.StatusRegion">
            <summary>
            This region hosts the dynamic status panels.
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.RegionNames.DialogRegion">
            <summary>
            This region hosts the root for main dialogs.
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.RegionNames.IterationsRegion">
            <summary>
            Iterations regions
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.RegionNames.DesignViewRegion">
            <summary>
            Design view region
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.RegionNames.ConstraintsRegion">
            <summary>
             Constraints region
            </summary>
        </member>
        <member name="F:Morph.Core.Infrastructure.RegionNames.DesignNavigationRegion">
            <summary>
            Design navigation region
            </summary>
        </member>
        <member name="T:Morph.Core.Interactivity.NotificationViewModel">
            <summary>
                Notification view model
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.NotificationViewModel.Errors">
            <summary>
                Dictionary that holds error messages by property.  Supports <c>IDataErrorInfo</c> interface.
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.NotificationViewModel.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="E:Morph.Core.Interactivity.NotificationViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.NotificationViewModel.OnUnitsChanged">
            <summary>
                Called when units are changed
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.NotificationViewModel.HasUnits">
            <summary>
                Override to return has units
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Interactivity.NotificationViewModel._unitsManager_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
                Handler for unit changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.Interactivity.NotificationViewModel.NotifyPropertyChanged(System.String)">
            <summary>
                Helper to notify when a property changes
            </summary>
            <param name="info"></param>
        </member>
        <member name="P:Morph.Core.Interactivity.NotificationViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.NotificationViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="P:Morph.Core.Interactivity.NotificationViewModel.UnitArea">
            <summary>
                Unit area string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.NotificationViewModel.UnitPercentage">
            <summary>
                Unit percentage string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.NotificationViewModel.UnitDepth">
            <summary>
                Unit depth string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.NotificationViewModel.UnitDistance">
            <summary>
                Unit distance string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.NotificationViewModel.UnitSmallDistance">
            <summary>
                Unit small distance string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.NotificationViewModel.UnitVolume">
            <summary>
                Unit volume string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.NotificationViewModel.UnitFlow">
            <summary>
                Unit flow string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.NotificationViewModel.UnitPrecipitation">
            <summary>
                Unit precipitation string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.NotificationViewModel.UnitCapacity">
            <summary>
                Unit capacity string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.NotificationViewModel.UnitDegree">
            <summary>
            Unit degree string (Only deg for now)
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.NotificationViewModel.SetError(System.String,System.String)">
            <summary>
            Set an error condition
            </summary>
            <param name="fieldName"></param>
            <param name="error"></param>
        </member>
        <member name="M:Morph.Core.Interactivity.NotificationViewModel.ClearError(System.String)">
            <summary>
            Clear an error
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:Morph.Core.Interactivity.NotificationViewModel.IsValidDouble(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Helper to validate double values.
                Errors will be loaded into the error dictionary by property name.
            </summary>
            <param name="value">double value</param>
            <param name="propertyExpression">property for IDataErrorInfo notification</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="dimension"></param>
            <returns>true if valid, else false</returns>
        </member>
        <member name="T:Morph.Core.Interactivity.ConfirmationDialogWindow">
            <summary>
             A basic confirmation child window that can host content and provides OK and Cancel buttons.
            </summary>
            <summary>
            ConfirmationDialogWindow
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.ConfirmationDialogWindow.ConfirmationTemplateProperty">
            <summary>
             The content template to use when showing <see cref="T:Microsoft.Practices.Prism.Interactivity.InteractionRequest.Confirmation"/> data.
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.ConfirmationDialogWindow.#ctor">
            <summary>
            Creates a new instance of ConfirmationChildWindow.
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.ConfirmationDialogWindow.ConfirmationTemplate">
            <summary>
             The content template to use when showing <see cref="T:Microsoft.Practices.Prism.Interactivity.InteractionRequest.Confirmation"/> data.
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.ConfirmationDialogWindow.CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Disable the ConfirmationDialog's [Ok] button if the current content provider's (e.g. VM instance) Error property is not empty.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.Interactivity.ConfirmationDialogWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Morph.Core.Interactivity.CommonDialogAction">
            <summary>
                Class for trigger actions that handle an interaction request by popping up a dialog window.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.CommonDialogAction.TitleProperty">
            <summary>
                Defines the default title that is display in the common dialog.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.CommonDialogAction.AddExtensionProperty">
            <summary>
                Defines the default value indicating whether a file dialog automatically adds an extension to a filename if the
                user omits an extension.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.CommonDialogAction.DefaultExtProperty">
            <summary>
                Defines the default default extension string to use to filter the list of files that are displayed.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.CommonDialogAction.FilterProperty">
            <summary>
                Defines the default filter string that determines what types of files are displayed from either the OpenFileDialog
                or SaveFileDialog.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.CommonDialogAction.AllowFullOpenProperty">
            <summary>
                Defines the default value that indicates whether the user can use the color dialog box to define custom colors.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.CommonDialogAction.FullOpenProperty">
            <summary>
                Defines the default value that indicates whether the controls used to create custom colors are visible when the
                color dialog box is opened.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.CommonDialogAction.SolidColorOnlyProperty">
            <summary>
                Defines the default value that indicates whether the dialog box will restrict users to selecting solid colors only.
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.CommonDialogAction.Title">
            <summary>
                Gets or sets the default title that is display in the common dialog.
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.CommonDialogAction.AddExtension">
            <summary>
                Gets or sets a value indicating whether a file dialog automatically adds an extension to a filename if the user
                omits an extension.
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.CommonDialogAction.DefaultExt">
            <summary>
                Gets or sets a value that specifies the default extension string to use to filter the list of files that are
                displayed.
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.CommonDialogAction.Filter">
            <summary>
                Gets or sets the filter string that determines what types of files are displayed from either the OpenFileDialog or
                SaveFileDialog.
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.CommonDialogAction.AllowFullOpen">
            <summary>
                Gets or sets a value indicating whether the user can use the color dialog box to define custom colors.
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.CommonDialogAction.FullOpen">
            <summary>
                Gets or sets a value indicating whether the controls used to create custom colors are visible when the color dialog
                box is opened
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.CommonDialogAction.SolidColorOnly">
            <summary>
                Gets or sets a value indicating whether the dialog box will restrict users to selecting solid colors only.
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.CommonDialogAction.Invoke(System.Object)">
            <summary>
                Displays the dialog window and collects results for <see cref="T:Microsoft.Practices.Prism.Interactivity.InteractionRequest.IInteractionRequest" />.
            </summary>
            <param name="parameter">
                The parameter to the action. If the action does not require a parameter, the parameter may be
                set to a null reference.
            </param>
        </member>
        <member name="T:Morph.Core.Interactivity.ConfirmationViewModel">
            <summary>
                Confirmation view model
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.ConfirmationViewModel.Errors">
            <summary>
                Dictionary that holds error messages by property.  Supports <c>IDataErrorInfo</c> interface.
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.ConfirmationViewModel.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="E:Morph.Core.Interactivity.ConfirmationViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.ConfirmationViewModel.OnUnitsChanged">
            <summary>
                Called when units are changed
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.ConfirmationViewModel.HasUnits">
            <summary>
                Override to return has units
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Interactivity.ConfirmationViewModel._unitsManager_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
                Handler for unit changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.Interactivity.ConfirmationViewModel.NotifyPropertyChanged(System.String)">
            <summary>
                Helper to notify when a property changes
            </summary>
            <param name="info"></param>
        </member>
        <member name="P:Morph.Core.Interactivity.ConfirmationViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.ConfirmationViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="P:Morph.Core.Interactivity.ConfirmationViewModel.UnitArea">
            <summary>
                Unit area string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.ConfirmationViewModel.UnitPercentage">
            <summary>
                Unit percentage string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.ConfirmationViewModel.UnitDepth">
            <summary>
                Unit depth string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.ConfirmationViewModel.UnitDistance">
            <summary>
                Unit distance string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.ConfirmationViewModel.UnitSmallDistance">
            <summary>
                Unit small distance string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.ConfirmationViewModel.UnitVolume">
            <summary>
                Unit volume string
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.ConfirmationViewModel.UnitDegree">
            <summary>
            Unit degree string (Only deg for now)
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.ConfirmationViewModel.SetError(System.String,System.String)">
            <summary>
            Set an error condition
            </summary>
            <param name="fieldName"></param>
            <param name="error"></param>
        </member>
        <member name="M:Morph.Core.Interactivity.ConfirmationViewModel.ClearError(System.String)">
            <summary>
            Clear an error
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="T:Morph.Core.Interactivity.OpenFolderRequest">
            <summary>
            Represents an interaction request to prompt the user to specify a folder location.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.OpenFolderRequest.SelectedPath">
            <summary>
             Gets or sets a string containing the folder path selected
            </summary>
        </member>
        <member name="T:Morph.Core.Interactivity.PopupDialogRequest">
            <summary>
                Pop up dialog request
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.PopupDialogRequest.Raise(System.String,Microsoft.Practices.Prism.Interactivity.InteractionRequest.InteractionRequest{Microsoft.Practices.Prism.Interactivity.InteractionRequest.Confirmation},Microsoft.Practices.Prism.Interactivity.InteractionRequest.Confirmation,System.Action{Microsoft.Practices.Prism.Interactivity.InteractionRequest.Confirmation})">
            <summary>
                Show the dialog and call back the action
                Aids in mocking dialog calls for unit testing
            </summary>
            <param name="popupContentWindow">name of the pop up content window</param>
            <param name="request">interaction request</param>
            <param name="confirmation">confirmation for dialog</param>
            <param name="callback">callback action for the dialog</param>
        </member>
        <member name="T:Morph.Core.Interactivity.PopupWindow">
            <summary>
            Class for trigger actions that handle an interaction request by popping up a dialog window.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.PopupWindow.DialogViewProperty">
            <summary>
            The dialog window to display as part of the popup.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.PopupWindow.ContentTemplateProperty">
            <summary>
            The <see cref="T:System.Windows.DataTemplate"/> to apply to the popup content.
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.PopupWindow.DialogView">
            <summary>
            Gets or sets the dialog view type to pop up.
            </summary>
            <remarks>
            If not specified, a default dialog window is used instead.
            </remarks>
        </member>
        <member name="P:Morph.Core.Interactivity.PopupWindow.ContentTemplate">
            <summary>
            Gets or sets the content template for a default dialog window.
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.PopupWindow.Invoke(System.Object)">
            <summary>
            Displays the dialog window and collects results for <see cref="T:Microsoft.Practices.Prism.Interactivity.InteractionRequest.IInteractionRequest"/>.
            </summary>
            <param name="parameter">The parameter to the action. If the action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:Morph.Core.Interactivity.PopupWindow.GetDialogWindow(Microsoft.Practices.Prism.Interactivity.InteractionRequest.Notification)">
            <summary>
            Returns the child window to display as part of the trigger action.
            </summary>
            <param name="notification">The notification to display in the child window.</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Interactivity.PopupWindow.CreateDefaultWindow(Microsoft.Practices.Prism.Interactivity.InteractionRequest.Notification)">
            <summary>
            Returns the child window to display as part of the trigger action.
            </summary>
            <param name="notification">The notification to display in the child window.</param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Interactivity.MessageButton">
            <summary>
            Specifies the buttons that are displayed on a message box.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageButton.OK">
            <summary>
            The message box displays an OK button.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageButton.OkCancel">
            <summary>
            The message box displays OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageButton.YesNoCancel">
            <summary>
            The message box displays Yes, No, and Cancel buttons.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageButton.YesNo">
            <summary>
            The message box displays Yes and No buttons.
            </summary>
        </member>
        <member name="T:Morph.Core.Interactivity.MessageImage">
            <summary>
            Specifies the icon that is displayed by a message box.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageImage.None">
            <summary>
            No icon is displayed.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageImage.Hand">
            <summary>
            The message box contains a symbol consisting of a white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageImage.Question">
            <summary>
            The message box contains a symbol consisting of a question mark in a circle.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageImage.Exclamation">
            <summary>
            The message box contains a symbol consisting of an exclamation point in a triangle with a yellow background.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageImage.Asterisk">
            <summary>
            The message box contains a symbol consisting of a lowercase letter i in a circle.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageImage.Stop">
            <summary>
            The message box contains a symbol consisting of white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageImage.Error">
            <summary>
            The message box contains a symbol consisting of white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageImage.Warning">
            <summary>
            The message box contains a symbol consisting of an exclamation point in a triangle with a yellow background.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageImage.Information">
            <summary>
            The message box contains a symbol consisting of a lowercase letter i in a circle.
            </summary>
        </member>
        <member name="T:Morph.Core.Interactivity.MessageResult">
            <summary>
            Specifies which message box button that a user clicks.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageResult.None">
            <summary>
            The message box returns no result.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageResult.OK">
            <summary>
            The result value of the message box is OK.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageResult.Cancel">
            <summary>
            The result value of the message box is Cancel.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageResult.Yes">
            <summary>
            The result value of the message box is Yes.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageResult.No">
            <summary>
            The result value of the message box is No.
            </summary>
        </member>
        <member name="T:Morph.Core.Interactivity.MessageBoxRequest">
            <summary>
            Represents an interaction request to prompt the user using a common message box.
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.MessageBoxRequest.Message">
            <summary>
            A <see cref="T:System.String"/> that specifies the text to display.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageBoxRequest.Button">
            <summary>
            A <see cref="T:Morph.Core.Interactivity.MessageButton"/> value that specifies which button or buttons to display.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageBoxRequest.Image">
            <summary>
            A <see cref="T:Morph.Core.Interactivity.MessageImage"/> value that specifies the icon to display.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageBoxRequest.DefaultResult">
            <summary>
            A <see cref="T:Morph.Core.Interactivity.MessageResult"/> value that specifies the default result of the message box.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.MessageBoxRequest.Result">
            <summary>
            A <see cref="T:Morph.Core.Interactivity.MessageResult"/> value that specifies which message box button is clicked by the user.
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.MessageBoxRequest.Confirmed">
            <summary>
            Indicates whether the user accepted or cancel the message box.
            </summary>
        </member>
        <member name="T:Morph.Core.Interactivity.PrintRequest">
            <summary>
                Print request confirmation class
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.PrintRequest.PrintDialog">
            <summary>
                Contains the instance of the PrintDialog created by the request
            </summary>
        </member>
        <member name="T:Morph.Core.Interactivity.SelectColorRequest">
            <summary>
            Represents an interaction request to prompt the user to select a color.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.SelectColorRequest.FullOpen">
            <summary>
            Gets or sets a value indicating whether the controls used to create custom colors are visible when the dialog box is opened.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.SelectColorRequest.AllowFullOpen">
            <summary>
            Gets or sets a value indicating whether the user can use the dialog box to define custom colors.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.SelectColorRequest.SolidColorOnly">
            <summary>
            Gets or sets a value indicating whether the dialog box will restrict users to selecting solid colors only.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.SelectColorRequest.Color">
            <summary>
            Gets or sets the color selected by the user.
            </summary>
        </member>
        <member name="T:Morph.Core.Interactivity.SaveFileRequest">
            <summary>
            Represents an interaction request to prompt the user to specify a filename to save a file as.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.SaveFileRequest.AddExtension">
            <summary>
            Gets or sets a value indicating whether a file dialog automatically adds an extension to a file name if the user omits an extension.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.SaveFileRequest.DefaultExt">
            <summary>
            Gets or sets a value that specifies the default extension string to use to filter the list of files that are displayed.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.SaveFileRequest.FileName">
            <summary>
            Gets or sets a string containing the full path of the file selected in a file dialog.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.SaveFileRequest.Filter">
            <summary>
            Gets or sets the filter string that determines what types of files are displayed from the SaveFileDialog.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.SaveFileRequest.InitialDirectory">
            <summary>
            Gets or sets the initial directory that is displayed by a file dialog.
            </summary>
        </member>
        <member name="T:Morph.Core.Interactivity.NotificationDialogWindow">
            <summary>
             The notification <see cref="T:System.Windows.Window"/> to use when displaying <c>Notification</c> messages.
            </summary>
            <summary>
            NotificationDialogWindow
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.NotificationDialogWindow.NotificationTemplateProperty">
            <summary>
             The <see cref="T:System.Windows.DataTemplate"/> to apply when displaying <c>Notification</c> data.
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.NotificationDialogWindow.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Morph.Core.Interactivity.NotificationDialogWindow"/>
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.NotificationDialogWindow.NotificationTemplate">
            <summary>
             The <see cref="T:System.Windows.DataTemplate"/> to apply when displaying <c>Notification</c> data.
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.NotificationDialogWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Morph.Core.Interactivity.OpenFileRequest">
            <summary>
            Represents an interaction request to prompt the user to specify a filename for one or more files to open.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.OpenFileRequest.AddExtension">
            <summary>
            Gets or sets a value indicating whether a file dialog automatically adds an extension to a file name if the user omits an extension.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.OpenFileRequest.DefaultExt">
            <summary>
            Gets or sets a value that specifies the default extension string to use to filter the list of files that are displayed.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.OpenFileRequest.FileName">
            <summary>
            Gets or sets a string containing the full path of the file selected in a file dialog.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.OpenFileRequest.Filter">
            <summary>
            Gets or sets the filter string that determines what types of files are displayed from the OpenFileDialog.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.OpenFileRequest.InitialDirectory">
            <summary>
            Gets or sets the initial directory that is displayed by a file dialog.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.OpenFileRequest.Multiselect">
            <summary>
            Gets and sets where multiple selection is allowed or not 
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.OpenFileRequest.FileNames">
            <summary>
            Gets and sets the selected file names
            </summary>
        </member>
        <member name="T:Morph.Core.Interactivity.PopupDialogAction">
            <summary>
            Class for trigger actions that handle an interaction request by popping up a dialog window.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.PopupDialogAction.DialogViewProperty">
            <summary>
            The dialog window to display as part of the popup.
            </summary>
        </member>
        <member name="F:Morph.Core.Interactivity.PopupDialogAction.ContentTemplateProperty">
            <summary>
            The <see cref="T:System.Windows.DataTemplate"/> to apply to the popup content.
            </summary>
        </member>
        <member name="P:Morph.Core.Interactivity.PopupDialogAction.DialogView">
            <summary>
            Gets or sets the dialog view type to pop up.
            </summary>
            <remarks>
            If not specified, a default dialog window is used instead.
            </remarks>
        </member>
        <member name="P:Morph.Core.Interactivity.PopupDialogAction.ContentTemplate">
            <summary>
            Gets or sets the content template for a default dialog window.
            </summary>
        </member>
        <member name="M:Morph.Core.Interactivity.PopupDialogAction.Invoke(System.Object)">
            <summary>
            Displays the dialog window and collects results for <see cref="T:Microsoft.Practices.Prism.Interactivity.InteractionRequest.IInteractionRequest"/>.
            </summary>
            <param name="parameter">The parameter to the action. If the action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:Morph.Core.Interactivity.PopupDialogAction.GetDialogWindow(Microsoft.Practices.Prism.Interactivity.InteractionRequest.Notification)">
            <summary>
            Returns the child window to display as part of the trigger action.
            </summary>
            <param name="notification">The notification to display in the child window.</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Interactivity.PopupDialogAction.CreateDefaultWindow(Microsoft.Practices.Prism.Interactivity.InteractionRequest.Notification)">
            <summary>
            Returns the child window to display as part of the trigger action.
            </summary>
            <param name="notification">The notification to display in the child window.</param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Logger">
            <summary>
            Send messages to the <see cref="T:Morph.Services.Core.Interfaces.ILogger"/> instance when the configurable switch matches the trace level.
            </summary>
        </member>
        <member name="F:Morph.Core.Logger.TraceSourceName">
            <summary>
            Name of the <c>TraceSource</c> used to log events.
            </summary>
        </member>
        <member name="M:Morph.Core.Logger.#ctor">
            <summary>
            Instantiates the unique logger for this assembly.
            </summary>
        </member>
        <member name="T:Morph.Core.Patches.PatchManager">
            <summary>
                Patch manager (single instance)
            </summary>
        </member>
        <member name="M:Morph.Core.Patches.PatchManager.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Morph.Core.Patches.PatchManager.AddWorkspacePatch(Morph.Contracts.DataContracts.PatchInfo{System.Object})">
            <summary>
                Add patch for workspace files
            </summary>
            <param name="patchInfo"></param>
        </member>
        <member name="M:Morph.Core.Patches.PatchManager.GetWorkspacePatches(System.Version)">
            <summary>
                Get all workspace patches in order
            </summary>
            <param name="sourceVersion">source version for check.</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Patches.PatchManager.SetCurrentVersion(System.Version)">
            <summary>
                Set the current version
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Morph.Core.Patches.PatchManager.AddLicensingPatch(Morph.Contracts.DataContracts.PatchInfo{System.Object})">
            <summary>
                Add a patch for licensing
            </summary>
        </member>
        <member name="M:Morph.Core.Patches.PatchManager.GetLicensingPatches(System.Version)">
            <summary>
                Get all licensing patches in order
            </summary>
            <param name="sourceVersion">source version for check.</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Patches.PatchManager.ExecuteWorkspacePatches(System.Version,System.Object)">
            <summary>
                Execute all workspace patches for source version
            </summary>
            <param name="sourceVersion">version of the source</param>
            <param name="source">source object (WorkspaceEntity)</param>
            <returns>true if no errors encountered</returns>
        </member>
        <member name="M:Morph.Core.Patches.PatchManager.ExecuteLicensingPatches(System.Version,System.Object)">
            <summary>
                Execute all licensing patches for source version
            </summary>
            <param name="sourceVersion">version of the source</param>
            <param name="source">source object</param>
        </member>
        <member name="M:Morph.Core.Patches.PatchManager.ExecutePatches(System.Collections.Generic.List{Morph.Contracts.DataContracts.PatchInfo{System.Object}},System.Object)">
            <summary>
                Execute patches
            </summary>
            <param name="patches">patch list</param>
            <param name="source">patch data object</param>
        </member>
        <member name="T:Morph.Core.UserControl.ArrowControl">
            <summary>
            Interaction logic for ArrowControl.xaml
            </summary>
            <summary>
            ArrowControl
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.ArrowControl.AngleProperty">
            <summary>
            Angle Property
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.ArrowControl.#ctor">
            <summary>
            CTOR
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.ArrowControl.Angle">
            <summary>
            Angle
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.ArrowControl.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            OnRenderSizeChanged
            </summary>
            <param name="sizeInfo"></param>
        </member>
        <member name="M:Morph.Core.UserControl.ArrowControl.CoerceValueCallback(System.Windows.DependencyObject,System.Object)">
            <summary>
            CoerceValueCallback
            </summary>
            <param name="d"></param>
            <param name="baseValue"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.UserControl.ArrowControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Morph.Core.UserControl.CompassControl">
            <summary>
            Interaction logic for CompassControl.xaml
            </summary>
            <summary>
            CompassControl
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.CompassControl.AngleProperty">
            <summary>
            Angle Property
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.CompassControl.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.CompassControl.Angle">
            <summary>
            Angle
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.CompassControl.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>
            OnLostMouseCapture
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.UserControl.CompassControl.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.UserControl.CompassControl.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            OnMouseMove
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.UserControl.CompassControl.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            OnMouseUp
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.UserControl.CompassControl.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            OnRenderSizeChanged
            </summary>
            <param name="sizeInfo"></param>
        </member>
        <member name="M:Morph.Core.UserControl.CompassControl.CoerceValueCallback(System.Windows.DependencyObject,System.Object)">
            <summary>
            CoerceValueCallback
            </summary>
            <param name="d"></param>
            <param name="baseValue"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.UserControl.CompassControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Morph.Core.UserControl.CustomProfileView">
            <summary>
            Interaction logic for ElementPropertiesView.xaml
            </summary>
            <summary>
            CustomProfileView
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.CustomProfileView.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.CustomProfileView.SpinePointIndexProperty">
            <summary>
            origin point tagged to a point at index
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.CustomProfileView.SpinePointIndex">
            <summary>
            origin point tagged to a point at index
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.CustomProfileView.SpineOffSetProperty">
            <summary>
            Spine origin for ditch profile
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.CustomProfileView.SpineOffSet">
            <summary>
            Spine origin for ditch profile
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.CustomProfileView.NodesProperty">
            <summary>
            nodes to be drawn
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.CustomProfileView.Nodes">
            <summary>
            Drawing nodes
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.CustomProfileView.OnChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TransformProperty changed callback
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.UserControl.CustomProfileView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Morph.Core.UserControl.DitchProfileView">
            <summary>
            Interaction logic for ElementPropertiesView.xaml
            </summary>
            <summary>
            DitchProfileView
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.DitchProfileView.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.DitchProfileView.ViewPreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            On preview key down
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.UserControl.DitchProfileView.FrameworkElement_OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.UserControl.DitchProfileView.Selector_OnSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.UserControl.DitchProfileView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Morph.Core.UserControl.FlowPathPointInfoView">
            <summary>
            Interaction logic for FlowPathPointInfoView.xaml
            </summary>
            <summary>
            FlowPathPointInfoView
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.FlowPathPointInfoView.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.FlowPathPointInfoView.Transform">
            <summary>
            Transform
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.FlowPathPointInfoView.TransformProperty">
            <summary>
            TransformProperty
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.FlowPathPointInfoView.TransformChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TransformProperty changed callback
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="P:Morph.Core.UserControl.FlowPathPointInfoView.CursorPosition">
            <summary>
            CursorPosition
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.FlowPathPointInfoView.CursorPositionProperty">
            <summary>
            CursorPositionProperty
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.FlowPathPointInfoView.CursorPositionChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CursorPositionChangedCallback
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.UserControl.FlowPathPointInfoView.UpdateControlPosition(Morph.Core.UserControl.FlowPathPointInfoView)">
            <summary>
            Update control position
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.FlowPathPointInfoView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Morph.Core.UserControl.LicenseDemoControl">
            <summary>
            Interaction logic for LicenseDemoControl.xaml
            </summary>
            <summary>
            LicenseDemoControl
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.LicenseDemoControl.#ctor">
            <summary>
            User control that show some demo information.
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.LicenseDemoControl.Demolicense">
            <summary>
            Display whether we are expired or if not expired how many days are left.
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.LicenseDemoControl.IsEvalMode">
            <summary>
                Is in eval mode flag
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.LicenseDemoControl.Hyperlink_RequestNavigate(System.Object,System.Windows.Navigation.RequestNavigateEventArgs)">
            <summary>
            This handles loading the url that was selected in the control.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.UserControl.LicenseDemoControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Morph.Core.UserControl.MapLegend">
            <summary>
            Interaction logic for MapLegend.xaml
            </summary>
            <summary>
            MapLegend
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.MapLegend.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.MapLegend.MapLegend_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            On Mouse double click, launch settings dialog
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Morph.Core.UserControl.MapLegend.LegendBrush">
            <summary>
            Brush property
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.MapLegend.LegendBrushProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.MapLegend.MinElevation">
            <summary>
            Min elevation property
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.MapLegend.MinElevationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.MapLegend.MaxElevation">
            <summary>
            Min elevation property
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.MapLegend.MaxElevationProperty">
            <summary>
            Max elevation property
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.MapLegend.ShowZeroElevation">
            <summary>
            show zero elevation markert property
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.MapLegend.ShowZeroElevationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.MapLegend.ShowCutFillColorPalette">
            <summary>
            property to launch the color palette in user settings dialog
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.MapLegend.OnLegendBrushPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            On Legend brush change
            </summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.UserControl.MapLegend.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Morph.Core.UserControl.AnalysisLegend">
            <summary>
            Interaction logic for AnalysisLegend.xaml
            </summary>
            <summary>
            AnalysisLegend
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.AnalysisLegend.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.AnalysisLegend.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Morph.Core.UserControl.ScaleLegend">
            <summary>
            Interaction logic for ScaleLegend.xaml
            </summary>
            <summary>
            ScaleLegend
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.ScaleLegend.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.ScaleLegend.ScaleTextProperty">
            <summary>
            Scale Text
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.ScaleLegend.ScaleText">
            <summary>
            Scale Text
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.ScaleLegend.ScaleWidthProperty">
            <summary>
            Scale Width
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.ScaleLegend.ScaleWidth">
            <summary>
            Scale Width
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.ScaleLegend.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Morph.Core.UserControl.ToolsDropDown">
            <summary>
            Interaction logic for ToolsDropDown.xaml
            </summary>
            <summary>
            ToolsDropDown
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.ToolsDropDown.#ctor">
            <summary>
            toolsbox
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.ToolsDropDown.CustomButton_OnClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            On Click eventhandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Morph.Core.UserControl.ToolsDropDown.CellSizeProperty">
            <summary>
            Cell Size
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.ToolsDropDown.CellSize">
            <summary>
            Cell size
            </summary>
        </member>
        <member name="F:Morph.Core.UserControl.ToolsDropDown.AnalysisToolsProperty">
            <summary>
            Tools
            </summary>
        </member>
        <member name="P:Morph.Core.UserControl.ToolsDropDown.AnalysisTools">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.ToolsDropDown.OnToolsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Tools property changed callback
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.UserControl.ToolsDropDown.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Morph.Core.UserControl.WaitControl">
            <summary>
                Interaction logic for WaitControl.xaml
            </summary>
            <summary>
            WaitControl
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.WaitControl.#ctor">
            <summary>
                Wait control constructor
            </summary>
        </member>
        <member name="M:Morph.Core.UserControl.WaitControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Morph.Core.DataAccessLayers.FeatureUsageDalXml">
            <summary>
                The feature usage DAL
            </summary>
        </member>
        <member name="M:Morph.Core.DataAccessLayers.FeatureUsageDalXml.#ctor(System.String,System.Nullable{System.Guid})">
            <summary>
                Constructor with path to XML
            </summary>
            <param name="filePath">path to XML</param>
            <param name="organizationGuid"></param>
        </member>
        <member name="T:Morph.Core.DataAccessLayers.MorphIdentificationDalXml">
            <summary>
            Morph identification Data access layer
            </summary>
        </member>
        <member name="M:Morph.Core.DataAccessLayers.MorphIdentificationDalXml.#ctor(System.String,System.Nullable{System.Guid})">
            <summary>
                Constructor with path to XML
            </summary>
            <param name="filePath">path to XML</param>
            <param name="organizationGuid"></param>
        </member>
        <member name="M:Morph.Core.DataAccessLayers.MorphIdentificationDalXml.Add(Morph.Contracts.DataContracts.Repository.License.MorphIdentificationEntity)">
            <summary>
                Add a workspace (only one allowed for now)
            </summary>
            <param name="entity">workspace to add</param>
        </member>
        <member name="T:Morph.Core.DataAccessLayers.UserCacheDalJson">
            <summary>
            Handles the user cache json form
            </summary>
        </member>
        <member name="M:Morph.Core.DataAccessLayers.UserCacheDalJson.#ctor(System.String,System.Nullable{System.Guid})">
            <summary>
                Constructor with path to JSON file
            </summary>
            <param name="filePath">path to json file</param>
            <param name="organizationGuid"></param>
        </member>
        <member name="T:Morph.Core.DataAccessLayers.UserCacheDalXml">
            <summary>
            Handles the user cache XML form
            </summary>
        </member>
        <member name="M:Morph.Core.DataAccessLayers.UserCacheDalXml.#ctor(System.String,System.Nullable{System.Guid})">
            <summary>
                Constructor with path to XML
            </summary>
            <param name="filePath">path to XML</param>
            <param name="organizationGuid"></param>
        </member>
        <member name="T:Morph.Core.DataAccessLayers.UserOrganizationCacheDalXml">
            <summary>
            User organization cache DAL
            </summary>
        </member>
        <member name="M:Morph.Core.DataAccessLayers.UserOrganizationCacheDalXml.#ctor(System.String,System.Nullable{System.Guid})">
            <summary>
                Constructor with path to XML
            </summary>
            <param name="filePath">path to XML</param>
            <param name="organizationGuid"></param>
        </member>
        <member name="M:Morph.Core.DataAccessLayers.UserOrganizationCacheDalXml.Add(Morph.Contracts.DataContracts.Repository.License.UserOrganizationCachedEntity)">
            <summary>
                Add a workspace (only one allowed for now)
            </summary>
            <param name="entity">workspace to add</param>
        </member>
        <member name="T:Morph.Core.DataAccessLayers.WorkspaceDalJson">
            <summary>
                Workspace DAL for JSON
            </summary>
        </member>
        <member name="M:Morph.Core.DataAccessLayers.WorkspaceDalJson.#ctor(System.String)">
            <summary>
                Constructor with path to XML
            </summary>
            <param name="filePath">path to XML</param>
        </member>
        <member name="M:Morph.Core.DataAccessLayers.WorkspaceDalJson.#ctor(System.String,System.Boolean,System.Nullable{System.Guid})">
            <summary>
                Constructor with path to XML
            </summary>
            <param name="filePath">path to XML</param>
            <param name="isSaveOnly"></param>
            <param name="organizationGuid"></param>
        </member>
        <member name="M:Morph.Core.DataAccessLayers.WorkspaceDalJson.Add(Morph.Contracts.DataContracts.Repository.WorkspaceEntity)">
            <summary>
                Add a workspace (only one allowed for now)
            </summary>
            <param name="entity">workspace to add</param>
        </member>
        <member name="T:Morph.Core.DataAccessLayers.WorkspaceDalXml">
            <summary>
                DAL to XML for Workspace object
            </summary>
        </member>
        <member name="M:Morph.Core.DataAccessLayers.WorkspaceDalXml.#ctor(System.String)">
            <summary>
                Constructor with path to XML
            </summary>
            <param name="filePath">path to XML</param>
        </member>
        <member name="M:Morph.Core.DataAccessLayers.WorkspaceDalXml.#ctor(System.String,System.Boolean,System.Nullable{System.Guid})">
            <summary>
                Constructor with path to XML
            </summary>
            <param name="filePath">path to XML</param>
            <param name="isSaveOnly"></param>
            <param name="organizationGuid"></param>
        </member>
        <member name="M:Morph.Core.DataAccessLayers.WorkspaceDalXml.Add(Morph.Contracts.DataContracts.Repository.WorkspaceEntity)">
            <summary>
                Add a workspace (only one allowed for now)
            </summary>
            <param name="entity">workspace to add</param>
        </member>
        <member name="T:Morph.Core.Repositories.FeatureUsageRepository">
            <summary>
                Feature usage repository
            </summary>
        </member>
        <member name="M:Morph.Core.Repositories.FeatureUsageRepository.#ctor(Morph.Contracts.Interfaces.Repository.IMorphDataAccessLayer{Morph.Contracts.DataContracts.Repository.License.LicenseFeatureUsageEntity})">
            <summary>
                Constructor used to inject the DAL
            </summary>
            <param name="dal">data access layer for this repository</param>
        </member>
        <member name="T:Morph.Core.Repositories.MorphIdentificationRepository">
            <summary>
            Morph identificaiton bits.
            </summary>
        </member>
        <member name="M:Morph.Core.Repositories.MorphIdentificationRepository.#ctor(Morph.Contracts.Interfaces.Repository.IMorphDataAccessLayer{Morph.Contracts.DataContracts.Repository.License.MorphIdentificationEntity})">
            <summary>
                Constructor used to inject the DAL
            </summary>
            <param name="dal">data access layer for this repository</param>
        </member>
        <member name="T:Morph.Core.Repositories.UserCacheRepository">
            <summary>
            User cache repository
            This handles reading and writing user cahced records
            </summary>
        </member>
        <member name="M:Morph.Core.Repositories.UserCacheRepository.#ctor(Morph.Contracts.Interfaces.Repository.IMorphDataAccessLayer{Morph.Contracts.DataContracts.Repository.License.UserCachedEntity})">
            <summary>
                Constructor used to inject the DAL
            </summary>
            <param name="dal">data access layer for this repository</param>
        </member>
        <member name="T:Morph.Core.Repositories.UserOrganizationCacheRepository">
            <summary>
            Users last organization and SSO User
            </summary>
        </member>
        <member name="M:Morph.Core.Repositories.UserOrganizationCacheRepository.#ctor(Morph.Contracts.Interfaces.Repository.IMorphDataAccessLayer{Morph.Contracts.DataContracts.Repository.License.UserOrganizationCachedEntity})">
            <summary>
                Constructor used to inject the DAL
            </summary>
            <param name="dal">data access layer for this repository</param>
        </member>
        <member name="T:Morph.Core.Repositories.WorkspaceRepository">
            <summary>
                Workspace repository
            </summary>
        </member>
        <member name="M:Morph.Core.Repositories.WorkspaceRepository.#ctor(Morph.Contracts.Interfaces.Repository.IMorphDataAccessLayer{Morph.Contracts.DataContracts.Repository.WorkspaceEntity})">
            <summary>
                Constructor used to inject the DAL
            </summary>
            <param name="dal">data access layer for this repository</param>
        </member>
        <member name="M:Morph.Core.Repositories.WorkspaceRepository.GetProjects">
            <summary>
                Get projects in the workspace
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Repositories.WorkspaceRepository.AddProject(Morph.Contracts.DataContracts.Repository.ProjectEntity)">
            <summary>
                Add a project to the workspace
            </summary>
            <param name="project">project to be added</param>
        </member>
        <member name="T:Morph.Core.Repository.DalJson`1">
            <summary>
                Data access layer using JSON data
            </summary>
        </member>
        <member name="M:Morph.Core.Repository.DalJson`1.#ctor(System.String,System.Nullable{System.Guid})">
            <summary>
                Constructor
            </summary>
            <param name="filePath"></param>
            <param name="organizationGuid"></param>
        </member>
        <member name="M:Morph.Core.Repository.DalJson`1.LoadFromDisk">
            <summary>
            Load from disk
            </summary>
        </member>
        <member name="M:Morph.Core.Repository.DalJson`1.SaveToDisk">
            <summary>
            Save to disk
            </summary>
        </member>
        <member name="M:Morph.Core.Repository.DalJson`1.Initialize(System.String,System.Boolean)">
            <summary>
                Override for initialization
            </summary>
            <param name="filePath"></param>
            <param name="isSaveOnly"></param>
        </member>
        <member name="M:Morph.Core.Repository.DalJson`1.SaveChanges">
            <summary>
                Persist the changes
            </summary>
        </member>
        <member name="T:Morph.Core.Repository.DalXml`1">
            <summary>
                DAL for XML base
            </summary>
        </member>
        <member name="M:Morph.Core.Repository.DalXml`1.#ctor(System.String,System.Nullable{System.Guid})">
            <summary>
                Constructor
            </summary>
            <param name="filePath"></param>
            <param name="organizationGuid"></param>
        </member>
        <member name="M:Morph.Core.Repository.DalXml`1.GetAll">
            <summary>
                Get all entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Repository.DalXml`1.Get(System.String)">
            <summary>
                Get entity by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Repository.DalXml`1.Add(`0)">
            <summary>
                Add an entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Morph.Core.Repository.DalXml`1.Update(`0)">
            <summary>
                Update an entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Morph.Core.Repository.DalXml`1.Delete(`0)">
            <summary>
                Delete an entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Morph.Core.Repository.DalXml`1.SaveChanges">
            <summary>
                Persist the changes
            </summary>
        </member>
        <member name="M:Morph.Core.Repository.DalXml`1.Initialize(System.String,System.Boolean)">
            <summary>
                Initialize with path to XML file containing the workspace object
            </summary>
            <param name="filePath"></param>
            <param name="isSaveOnly"></param>
        </member>
        <member name="M:Morph.Core.Repository.DalXml`1.Encrypt(System.String)">
            <summary>
            Encrypts a string.  Use the organization Guid if available else do the default encryption
            </summary>
            <param name="cleartext"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Repository.DalXml`1.Decrypt(System.String,System.Byte[])">
            <summary>
            Decrypt string
            
            </summary>
            <param name="cipher"></param>
            <param name="maskBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Repository.DalXml`1.EncryptToDisk(System.Runtime.Serialization.XmlObjectSerializer)">
            <summary>
            Encrypt to disk.
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:Morph.Core.Repository.DalXml`1.DecryptFromDisk(System.Runtime.Serialization.XmlObjectSerializer)">
            <summary>
            Decrypt from disk
            </summary>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Repository.MorphRepository`1">
            <summary>
                Morph repository base class
            </summary>
        </member>
        <member name="F:Morph.Core.Repository.MorphRepository`1._dal">
            <summary>
                Injected data access layer
            </summary>
        </member>
        <member name="M:Morph.Core.Repository.MorphRepository`1.#ctor(Morph.Contracts.Interfaces.Repository.IMorphDataAccessLayer{`0})">
            <summary>
                Constructor used to inject the DAL
            </summary>
            <param name="dal">data access layer for this repository</param>
        </member>
        <member name="M:Morph.Core.Repository.MorphRepository`1.GetAll">
            <summary>
                Get all entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Repository.MorphRepository`1.Get(System.String)">
            <summary>
                Get entity by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Repository.MorphRepository`1.Add(`0)">
            <summary>
                Add an entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Morph.Core.Repository.MorphRepository`1.Update(`0)">
            <summary>
                Update an entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Morph.Core.Repository.MorphRepository`1.Delete(`0)">
            <summary>
                Delete an entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Morph.Core.Repository.MorphRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Return single instance found by expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Repository.MorphRepository`1.SaveChanges">
            <summary>
                Persist the changes
            </summary>
        </member>
        <member name="T:Morph.Core.Repository.DalRepositoryEnum">
            <summary>
            Data access layer repository type
            </summary>
        </member>
        <member name="F:Morph.Core.Repository.DalRepositoryEnum.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Morph.Core.Repository.DalRepositoryEnum.Xml">
            <summary>
            XML type repository
            </summary>
        </member>
        <member name="F:Morph.Core.Repository.DalRepositoryEnum.Json">
            <summary>
            JSON type repository
            </summary>
        </member>
        <member name="T:Morph.Core.Repository.RepositoryFactory">
            <summary>
                Repository factory
            </summary>
        </member>
        <member name="M:Morph.Core.Repository.RepositoryFactory.CreateWorkspaceRepository(System.String,System.Boolean,Morph.Core.Repository.DalRepositoryEnum,System.Nullable{System.Guid})">
            <summary>
                Workspace Repository Creator
            </summary>
            <param name="filePath">path to file</param>
            <param name="isSaveOnly">used to speed up when only overwriting / saving file</param>
            <param name="dalRepository">repository type</param>
            <param name="organizationGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Repository.RepositoryFactory.CreateUserCacheRepository(System.String,Morph.Core.Repository.DalRepositoryEnum,System.Nullable{System.Guid})">
            <summary>
                User cache Repository Creator
            </summary>
            <param name="filePath"></param>
            <param name="dalRepository"></param>
            <param name="organizationGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Repository.RepositoryFactory.CreateUserOrganizationCacheRepository(System.String,System.Nullable{System.Guid})">
            <summary>
                User organization cache Repository Creator
            </summary>
            <param name="filePath"></param>
            <param name="organizationGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Repository.RepositoryFactory.CreateMorphIdentificationRepository(System.String,System.Nullable{System.Guid})">
            <summary>
               Morph identification Repository Creator
            </summary>
            <param name="filePath"></param>
            <param name="organizationGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Repository.RepositoryFactory.CreateFeatureUsageRepository(System.String,System.Nullable{System.Guid})">
            <summary>
               Feaute usgae Repository Creator
            </summary>
            <param name="filePath"></param>
            <param name="organizationGuid"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Utility.BackgroundTask`1">
            <summary>
                Background task execution class
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.BackgroundTask`1.#ctor(`0,System.Threading.Tasks.TaskScheduler,System.Threading.CancellationToken,System.Action{`0},System.Action{`0},System.Func{`0,System.Int32,System.Boolean},System.Action{`0,System.Exception},System.Action{`0,System.Func{`0,System.Int32,System.Boolean}})">
            <summary>
                Task constructor
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.BackgroundTask`1.GetCancellationToken">
            <summary>
            Get the cancellation token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.BackgroundTask`1.OnStarted(`0)">
            <summary>
                Called when the task has been started
            </summary>
            <param name="state">user supplied task state</param>
        </member>
        <member name="M:Morph.Core.Utility.BackgroundTask`1.OnCompleted(`0)">
            <summary>
                Handler called when task is completed
            </summary>
            <param name="state">user supplied task state</param>
        </member>
        <member name="M:Morph.Core.Utility.BackgroundTask`1.OnProgress(`0,System.Int32)">
            <summary>
                Called when progress is updated
            </summary>
            <param name="state">user supplied task state</param>
            <param name="progress">current progress (0-100) or -1 for unknown</param>
            <returns>return true if the task should be canceled</returns>
        </member>
        <member name="M:Morph.Core.Utility.BackgroundTask`1.OnError(`0,System.Exception)">
            <summary>
                Called when an error has occurred in the executing task
            </summary>
            <param name="state">user supplied task state</param>
            <param name="ex">Exception that generated the error</param>
        </member>
        <member name="M:Morph.Core.Utility.BackgroundTask`1.ExecTask">
            <summary>
                Execute the background task
            </summary>
        </member>
        <member name="T:Morph.Core.Utility.CultureManager">
            <summary>
            Handles setting the culture form Morph
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.CultureManager.#ctor">
            <summary>
            CTOR sets up the culture manager.
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.CultureManager.GetCulture">
            <summary>
            Get the language culture.  Returns the culture value from the user settings.
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.CultureManager.SetCulture">
            <summary>
            Sets the language culture
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.CultureManager.GetSupportedLanguages">
            <summary>
            Returns list of pretty language names.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Utility.EngineComputationUtility">
            <summary>
            Utility class to uses formulas in Service.Core
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.EngineComputationUtility.#ctor">
            <summary>
                CTOR
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.EngineComputationUtility.Shrinkage">
            <summary>
            The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.EngineComputationUtility.Bulkage">
            <summary>
            The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.EngineComputationUtility.HaulCompaction">
            <summary>
            The percentage volume reduction between loose haul and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.EngineComputationUtility.CutFillRatio">
            <summary>
            The factor use to compute from bank fill volumes to bank cut volumes.
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.EngineComputationUtility.ComputeHaulCompaction(System.Double,System.Double)">
            <summary>
            Computes haul compaction from the given shrinkage and bulkage.
            </summary>
            <param name="shrinkage">The shrinkage percentage value between 0 and 99.</param>
            <param name="bulkage">The bulkage percentage value between 0 and 99.</param>
            <returns>Compaction as a double.</returns>
        </member>
        <member name="M:Morph.Core.Utility.EngineComputationUtility.ComputeShrinkage(System.Double,System.Double)">
            <summary>
            Computes shrinkage from the given bulkage and haul compaction.
            </summary>
            <param name="bulkage">The shrinkage percentage value between 0 and 99.</param>
            <param name="haulCompaction">The bulkage percentage value between 0 and 99.</param>
            <returns>Shrinkage as a double.</returns>
        </member>
        <member name="M:Morph.Core.Utility.EngineComputationUtility.ComputeBulkage(System.Double,System.Double)">
            <summary>
            Computes bulkage from the given haul compaction and shrinkage.
            </summary>
            <param name="haulCompaction">The bulkage percentage value between 0 and 99.</param>
            <param name="shrinkage">The shrinkage percentage value between 0 and 99.</param>
            <returns>Bulkage as a double.</returns>
        </member>
        <member name="M:Morph.Core.Utility.EngineComputationUtility.ComputeCompactionBulkageShrinkage(System.Double)">
            <summary>
            Computes haul compaction, bulkage and shrinkage from cut fill ratio
            and saves in the properties.
            </summary>
            <param name="cutFillRatio">The cut fill ratio value</param>
        </member>
        <member name="T:Morph.Core.Utility.EnterKeyTraversal">
            <summary>
            Utility to help capture Return key press and interpret it as a Tab key press and move the focus to the next control.
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.EnterKeyTraversal.GetIsEnabled(System.Windows.DependencyObject)">
            <summary>
            Accessor to get the value of the <c>IsEnabled</c> dependency property.
            </summary>
            <param name="obj"></param>
            <returns>the value of the property</returns>
        </member>
        <member name="M:Morph.Core.Utility.EnterKeyTraversal.SetIsEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Accessor to set the value of the <c>IsEnabled</c> dependecy property.
            </summary>
            <param name="obj"></param>
            <param name="value">the new value of the property</param>
        </member>
        <member name="F:Morph.Core.Utility.EnterKeyTraversal.IsEnabledProperty">
            <summary>
            IsEnabled dependency property.
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.EnterKeyTraversal.ue_PreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Preview mouse key
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.Utility.EnterKeyTraversal.ue_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            On UnLoaded
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.Utility.EnterKeyTraversal.ue_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            On Loaded
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Morph.Core.Utility.EnumHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.EnumHelper.GetDescription(System.Enum)">
            <summary>
            Retrieve the description on the enum, e.g.
            [Description("Bright Pink")]
            BrightPink = 2,
            Then when you pass in the enum, it will retrieve the description
            </summary>
            <param name="en">The Enumeration</param>
            <returns>A string representing the friendly name</returns>
        </member>
        <member name="T:Morph.Core.Utility.ExportUtility">
            <summary>
            Utility class to export to various formats
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.ExportUtility.DoExportHtml(Morph.Contracts.Interfaces.ISurface3D,System.String,Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel)">
            <summary>
                Export to HTML
            </summary>
            <param name="originalSurface"></param>
            <param name="fieldName"></param>
            <param name="designIterationViewModel"></param>
        </member>
        <member name="M:Morph.Core.Utility.ExportUtility.DoExportToSketchup(Morph.Contracts.Interfaces.ISurface3D,System.String,Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel)">
            <summary>
                Export to SketchUp
            </summary>
            <param name="originalSurface"></param>
            <param name="fieldName"></param>
            <param name="designIterationViewModel"></param>
        </member>
        <member name="M:Morph.Core.Utility.ExportUtility.DoExportToFmx(Morph.Contracts.Interfaces.ISurface3D,System.String,Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel)">
            <summary>
                Export to GPS
            </summary>
            <param name="originalSurface"></param>
            <param name="fieldName"></param>
            <param name="designIterationViewModel"></param>
        </member>
        <member name="M:Morph.Core.Utility.ExportUtility.IsFileLocked(System.Exception)">
            <summary>
            Is file locked by other program
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Utility.GeoAngle">
            <summary>
            Class to help convert double degrees to lat / long format
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.GeoAngle.IsNegative">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.GeoAngle.Degrees">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.GeoAngle.Minutes">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.GeoAngle.Seconds">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.GeoAngle.Milliseconds">
            <summary>
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.GeoAngle.FromDouble(System.Double)">
            <summary>
            </summary>
            <param name="angleInDegrees"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.GeoAngle.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.GeoAngle.ToString(System.String)">
            <summary>
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Utility.LegendsUtil">
            <summary>
            Utility class for legends
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.LegendsUtil.NoViolationLightGreenColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.LegendsUtil.NoViolationGreenColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.LegendsUtil.NoViolationDarkGreenColor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.LegendsUtil.GetColorTemplates(System.Int32)">
            <summary>
            Get ColorTemplates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.LegendsUtil.GetPredefinedColorTemplates(System.Int32)">
            <summary>
            Get predefined color templates from file
            </summary>
            <param name="templateSize"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.LegendsUtil.WriteFileToDisk(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Media.Color}},System.Int32)">
            <summary>
            Write file to disk
            </summary>        
            <param name="colors"></param>
            <param name="templateSize"></param>
        </member>
        <member name="M:Morph.Core.Utility.LegendsUtil.GetSelectedToolPreferenceString(Morph.Contracts.Interfaces.AnalysisToolType)">
            <summary>
            Get preferences for the selected tool
            </summary>
            <param name="tool"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.LegendsUtil.GetPondingBrush">
            <summary>
            Get ponding brush
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.LegendsUtil.GetCutFillViolationLegendItems">
            <summary>
            Cut fill violation legend
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.LegendsUtil.UpdateCutFillViolationLegend(System.Double,System.Double)">
            <summary>
            UpdateCutFillViolationLegend
            </summary>
            <param name="lowerValue"></param>
            <param name="upperValue"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.LegendsUtil.ValidateGivenSlopeRange(System.Double,System.Double@,System.Double,System.Double@)">
            <summary>
            Validate given slope range to have atleast 0.08 difference between lower and upper level
            </summary>
            <param name="lowerValue"></param>
            <param name="modifiedLowerValue"></param>
            <param name="upperValue"></param>
            <param name="modifiedUpperValue"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.LegendsUtil.UpdateSlopeLegend(System.Double,System.Double,Morph.Contracts.Interfaces.AnalysisToolType,System.Windows.Media.LinearGradientBrush@,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Update slope legend
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.LegendsUtil.GetAnalysisTools(Morph.Contracts.DataContracts.Repository.FieldDesignType,Morph.Contracts.Interfaces.IAnalysisToolSettings)">
            <summary>
            Get analysis tools
            </summary>
            <param name="designType"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.LegendsUtil.GetSlopesLegendTitleForSelectedSlopeType(Morph.Contracts.Interfaces.AnalysisToolType)">
            <summary>
            Get slope legend title
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.LegendsUtil.ConvertToClosestLowerScaleBarWidth(System.Double)">
            <summary>
            Find the closest, lower value to the input value, maxScaleBarWidthInWorld, that is a power of 10 of 1, 2, or 5.
            </summary>
            <param name="maxScaleBarWidthInWorld">Maximum width of scale bar in world space.</param>
            <returns>Closest, lower value to the input value that is a power of 10 of 1, 2, or 5.</returns>
        </member>
        <member name="T:Morph.Core.Utility.NtpNetworkTime">
            <summary>
                Get netowrk time from Microsoft's time.windows.com
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.NtpNetworkTime.GetLocalNetworkTime">
            <summary>
                Get the local network time from time.windows.com
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.NtpNetworkTime.GetUtcNetworkTime">
            <summary>
                Get the local network time from time.windows.com
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.NtpNetworkTime.GetNetworkTime">
            <summary>
                Get the network time.
                StackOverflow.com http://stackoverflow.com/questions/1193955/how-to-query-an-ntp-server-using-c
            
                NOTE: on 2/4/2014 decision was made by DF, SC and myself to use the local system's time and not rely on the network time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.NtpNetworkTime.SwapEndianness(System.UInt64)">
            <summary>
                stackoverflow.com/a/3294698/162671
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Utility.ProgressBackgroundTask`1">
            <summary>
                Background task supporting updating progress
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.ProgressBackgroundTask`1._completeMessage">
            <summary>
                Completed message to display in status bar
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.ProgressBackgroundTask`1._progressText">
            <summary>
                Text for progress message
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.ProgressBackgroundTask`1._startMessage">
            <summary>
                Startup message to display in status bar
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.ProgressBackgroundTask`1._statusMessages">
            <summary>
                Supports progress messages and status line messages
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.ProgressBackgroundTask`1._progressBarId">
            <summary>
                Progress bar Id
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.ProgressBackgroundTask`1._navigationParams">
            <summary>
            Navigation parameters
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.ProgressBackgroundTask`1._cancellationTokenSource">
            <summary>
            Cancellation token sourcec
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.ProgressBackgroundTask`1.#ctor(`0,System.Threading.Tasks.TaskScheduler,System.Threading.CancellationTokenSource,Morph.Contracts.DataContracts.NavigationParams,System.Action{`0},System.Action{`0},System.Func{`0,System.Int32,System.Boolean},System.Action{`0,System.Exception},System.Action{`0,System.Func{`0,System.Int32,System.Boolean}},System.String,System.String,System.String)">
            <summary>
                Constructor for progress background task
            </summary>
            <param name="taskState">user supplied task state object</param>
            <param name="uiTaskScheduler">UI task scheduler</param>
            <param name="cancellationTokenSource">cancellation token source</param>
            <param name="navigationParams">navigation parameters</param>
            <param name="onCompleted">callback when completed</param>
            <param name="onStarted">callback when started</param>
            <param name="onProgress">callback for progress update</param>
            <param name="onError">callback for errors</param>
            <param name="execAction">action to execute in the back ground</param>
            <param name="progressText">text for progress messages</param>
            <param name="startMessage">startup message to display</param>
            <param name="completeMessage">completed message to display</param>
        </member>
        <member name="M:Morph.Core.Utility.ProgressBackgroundTask`1.OnStarted(`0)">
            <summary>
                Override on started to start the progress
            </summary>
            <param name="state">user supplied state object</param>
        </member>
        <member name="M:Morph.Core.Utility.ProgressBackgroundTask`1.OnProgress(`0,System.Int32)">
            <summary>
                Override on progress to update progress
            </summary>
            <param name="state">user supplied state object</param>
            <param name="progress">current progress percentage or -1 for unknown</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.ProgressBackgroundTask`1.OnCompleted(`0)">
            <summary>
                Override on completed to stop progress updates
            </summary>
            <param name="state">user supplied state object</param>
        </member>
        <member name="M:Morph.Core.Utility.ProgressBackgroundTask`1.OnError(`0,System.Exception)">
            <summary>
                Override on error to stop progress updates
            </summary>
            <param name="state"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Morph.Core.Utility.Types">
            <summary>
                Helper class for storing types
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.Types.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.Types.#ctor(System.Type[])">
            <summary>
                Helper constructor to populate from array of types
            </summary>
            <param name="types">array of known Type(s)</param>
        </member>
        <member name="P:Morph.Core.Utility.Types.ExtraTypes">
            <summary>
                List of string representation of full type name
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.Types.ToTypeArray">
            <summary>
                Return Type array of known Type(s)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Utility.Serialization">
            <summary>
                Helper class for serializing data contracts
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.Serialization.SerializeToDisk``1(System.String,``0,System.Type[])">
            <summary>
                Serialize object to disk
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="filename">filename used to store the object</param>
            <param name="obj">the object to be stored</param>
            <param name="extraTypes">array of concrete classes required to serialize the object</param>
        </member>
        <member name="M:Morph.Core.Utility.Serialization.DeserializeFromDisk``1(System.String)">
            <summary>
                De-serialize object from disk
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="filename">filename used to store the object</param>
            <returns>deserialized object from disk referenced by filename</returns>
        </member>
        <member name="M:Morph.Core.Utility.Serialization.SerializeToJSON``1(``0,System.Type[])">
            <summary>
            Serialize object to JSON
            
            Exceptions:
                ArgumentNullException if typeObject is null
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="typeObject">the object to be converted to JSON</param>
            <returns>JSON byte array serialized from obj</returns>
            <param name="extraTypes">Concrete types used to serialize interfaces, null is allowed.</param>
        </member>
        <member name="M:Morph.Core.Utility.Serialization.DeserializeFromJSON``1(System.Byte[])">
            <summary>
            De-serialize object from JSON data
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="jsonData">JSON byte array</param>
            <returns>Deserialized object from JSON byte array</returns>
        </member>
        <member name="M:Morph.Core.Utility.Serialization.SerializeFromNetToJson(System.Object)">
            <summary>
            This converts a .NET class to a JSON string utilizing Newtonsoft.Json (Json.Net).
            </summary>
            <param name="netClass"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.Serialization.DeserializeFromJsonToNet``1(System.String)">
            <summary>
            Create a .NET class from JSON data
            Uses Newtonsoft.Json
            </summary>
            <param name="jsonData"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Utility.SortableObservableCollection`1">
            <summary>
            Specializes <c>ObservableCollection</c> to keep entries sorted.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Morph.Core.Utility.SortableObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance and fills it with specified collection.
            </summary>
            <param name="collection">collection of items</param>
        </member>
        <member name="M:Morph.Core.Utility.SortableObservableCollection`1.Sort``1(System.Func{`0,``0},System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the items in this collection according to the specified functor.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <param name="direction"></param>
        </member>
        <member name="M:Morph.Core.Utility.SortableObservableCollection`1.Sort``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the items in this collection according to the specified functor.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <param name="comparer"></param>
        </member>
        <member name="T:Morph.Core.Utility.SubzoneComputationUtility">
            <summary>
                Provides methods to convert between component and composite slopes.
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.SubzoneComputationUtility.CompositeToComponentSlopes(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
                Produce components along the global primary and cross slope components given a composite magnitude and bearing.
            </summary>
            <param name="globalBearing">
                Orientation, in degrees, of the global primary slope bearing. The cross slope direction is
                90 degrees counter clockwise from the primary slope bearing.
            </param>
            <param name="compositeSlopeBearing">Orientation, in degrees, of the composite slope.</param>
            <param name="compositeSlopeMagnitude">Magnitude of the composite slope.</param>
            <param name="componentAlongPrimary">Magnitude of the component slope along the global primary slope bearing.</param>
            <param name="componentAlongCross">Magnitude of the component slope along the global cross slope bearing.</param>
        </member>
        <member name="M:Morph.Core.Utility.SubzoneComputationUtility.CompositesToComponentSlopes(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Produce components along the global primary and cross slope components given a composite magnitude and bearing.
            </summary>
            <param name="globalBearing">
                Orientation, in degrees, of the global primary slope bearing. The cross slope direction is
                90 degrees counter clockwise from the primary slope bearing.
            </param>
            <param name="compositeSlopeBearing">Orientation, in degrees, of the composite slope.</param>
            <param name="compositeMinSlopeMagnitude">Magnitude of the composite minimum slope.</param>
            <param name="compositeMaxSlopeMagnitude">Magnitude of the composite maximum slope.</param>
            <returns>
                componentAlongPrimaryMin - Magnitude of the component minimum slope along the global primary slope bearing.
                componentAlongPrimaryMax - Magnitude of the component maximum slope along the global primary slope bearing.
                componentAlongCrossMin - Magnitude of the component minimum slope along the global cross slope bearing.
                componentAlongCrossMax - Magnitude of the component maximum slope along the global cross slope bearing.
            </returns>
        </member>
        <member name="M:Morph.Core.Utility.SubzoneComputationUtility.ComponentToCompositeSlopes(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
                Produce a composite slope magnitude and bearing given primary and cross slope components.
            </summary>
            <param name="globalBearing">
                Orientation, in degrees, of the global primary slope bearing. The cross slope direction is
                90 degrees counter clockwise from the global primary slope direction.
            </param>
            <param name="primarySlopeMagnitude">Magnitude of the primary slope along the global primary direction.</param>
            <param name="crossSlopeMagnitude">Magnitude of the cross slope along the global cross slope direction.</param>
            <param name="compositeOrientation">Orientation, in degrees, of the composite slope.</param>
            <param name="compositeSlope">Magnitude of the composite slope.</param>
        </member>
        <member name="T:Morph.Core.Utility.TaskHelper">
            <summary>
                Helper class to sleep and free up UI before continuing
                to work on the UI thread
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.TaskHelper.SleepAndContinue(System.Int32,System.Action)">
            <summary>
                Helper to sleep and continue on the UI thread.
                This method assumes it will be called from the current UI thread.
            </summary>
            <param name="sleepMilliseconds"></param>
            <param name="action"></param>
        </member>
        <member name="T:Morph.Core.Utility.UnitConverter">
            <summary>
            Provides constants and static methods to perform unit conversions.
            </summary>
        </member>
        <member name="T:Morph.Core.Utility.UnitConverter.Dimension">
            <summary>
            Constants that define the dimnesion of a unit.
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.UnitConverter.Dimension.None">
            <summary>A dimensional unit: e.g.: percentage (%)</summary>
        </member>
        <member name="F:Morph.Core.Utility.UnitConverter.Dimension.Time">
            <summary>A unit of time: e.g.: second (s)</summary>
        </member>
        <member name="F:Morph.Core.Utility.UnitConverter.Dimension.Length">
            <summary>A unit of length: e.g.: meter (m)</summary>
        </member>
        <member name="F:Morph.Core.Utility.UnitConverter.Dimension.Mass">
            <summary>A unit of mass: e.g.: kilogram (kg)</summary>
        </member>
        <member name="F:Morph.Core.Utility.UnitConverter.Dimension.Angle">
            <summary>A unit of angle spawn: e.g.: degree (deg)</summary>
        </member>
        <member name="F:Morph.Core.Utility.UnitConverter.Dimension.Area">
            <summary>A unit of area: e.g.: length^2 (m2)</summary>
        </member>
        <member name="F:Morph.Core.Utility.UnitConverter.Dimension.Volume">
            <summary>A unit of volume: e.g.: length^3 (m3)</summary>
        </member>
        <member name="F:Morph.Core.Utility.UnitConverter.Dimension.Speed">
            <summary>A unit of speed: e.g.: length/time (m/s)</summary>
        </member>
        <member name="F:Morph.Core.Utility.UnitConverter.Dimension.Density">
            <summary>A unit of mass density: e.g.: mass/volume (kg/m3)</summary>
        </member>
        <member name="F:Morph.Core.Utility.UnitConverter.Dimension.Flow">
            <summary>A unit of flow: e.g.: volume/time (gal/h)</summary>
        </member>
        <member name="M:Morph.Core.Utility.UnitConverter.#ctor">
            <summary>
            Had to make public for unit tests
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.UnitConverter.Convert(System.Double,System.String,System.String)">
            <summary>
            Converts the specified value from the source unit to the target unit.
            </summary>
            <param name="value">The value.</param>
            <param name="sourceUnit">The source unit.</param>
            <param name="targetUnit">The target unit.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Morph.Core.Utility.UnitConverter.IsUnit(System.String)">
            <summary>
            Determines whether the specified unit exits.
            </summary>
            <param name="unit">The unit.</param>
            <returns>
            	<c>true</c> if the specified unit exits; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Morph.Core.Utility.UnitConverter.GetUnitDimension(System.String)">
            <summary>
            Gets the dimension of the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The dimension.</returns>
        </member>
        <member name="M:Morph.Core.Utility.UnitConverter.GetUnits(Morph.Core.Utility.UnitConverter.Dimension)">
            <summary>
            Gets all the units of the specified dimension.
            </summary>
            <param name="dimension">The dimension.</param>
            <returns>An array with all the units.</returns>
        </member>
        <member name="T:Morph.Core.Utility.FileNameEnumerator">
            <summary>
                Handles enumerating a file name so that you can have a number incremented.
                ie.     if textfile (1).txt exist it will return textfile (2).txt.
                if textfile (1).txt and textfile (2).txt then it will return textfile (3).txt
            See: http://stackoverflow.com/questions/1078003/c-how-would-you-make-a-unique-filename-by-adding-a-number
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.FileNameEnumerator.NextAvailableFilename(System.String,System.Int32@)">
            <summary>
                Return the next available name
            </summary>
            <param name="path"></param>
            <param name="assignedNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.Utility.FileNameEnumerator.getNextFilename(System.String,System.Int32@)">
            <summary>
                Iterate through files to get the latest number file
            </summary>
            <param name="pattern"></param>
            <param name="assignedNumber"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Utility.UnitsManager.UnitDetails">
            <summary>
                Unit details for units manager
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.UnitsManager.UnitDetails.#ctor(System.String,System.String,System.String,Morph.Contracts.UnitDimension)">
            <summary>
                Helper constructor
            </summary>
            <param name="key">key associated with the unit (maps to UnitConverter)</param>
            <param name="shortName">short display name</param>
            <param name="longName">long display name</param>
            <param name="dimension">unit dimension</param>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitDetails.Key">
            <summary>
                Key for the unit. (% / ft / in ...)
                Used for conversions
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitDetails.ShortName">
            <summary>
                Short display name for the unit
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitDetails.LongName">
            <summary>
                Long display name for the unit
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitDetails.Dimension">
            <summary>
                Unit dimension
            </summary>
        </member>
        <member name="T:Morph.Core.Utility.UnitsManager.UnitsManager">
            <summary>
                Units manager
                Maintains the currently selected settings and
                handle conversion calls
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.UnitsManager.UnitsManager._unitConverter">
            <summary>
                Unit converter utility
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.UnitsManager.UnitsManager._unitDetails">
            <summary>
                Dictionary of unit details
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.UnitsManager.UnitsManager._userSettings">
            <summary>
                User settings
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.UnitsManager.UnitsManager.#ctor(Morph.Core.Utility.UnitConverter,Morph.Contracts.Interfaces.IPreferences)">
            <summary>
                Constructor with instance of unit converter to use
            </summary>
            <param name="unitConverter">unit converter utility helper</param>
            <param name="userSettings">Interface for user settings</param>
        </member>
        <member name="M:Morph.Core.Utility.UnitsManager.UnitsManager.#ctor">
            <summary>
                Private default constructor
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.Percentage">
            <summary>
                Unit details for percentage
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.CurrentAreaDetails">
            <summary>
                Current area details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.CurrentDistanceDetails">
            <summary>
                Current distance details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.CurrentSmallDistanceDetails">
            <summary>
                Current distance details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.CurrentDepthDetails">
            <summary>
                Current depth details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.CurrentVolumeDetails">
            <summary>
                Current volume details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.CurrentPrecipitationDetails">
            <summary>
                Current precipitation details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.CurrentCapacityDetails">
            <summary>
                Current precipitation details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.CurrentFlowDetails">
            <summary>
                Current flow details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.AreaDetails">
            <summary>
                List of all area details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.DistanceDetails">
            <summary>
                List of all distance details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.SmallDistanceDetails">
            <summary>
                List of all distance details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.DepthDetails">
            <summary>
                List of all depth details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.VolumeDetails">
            <summary>
                List of all volume details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.PrecipitationDetails">
            <summary>
                List of all precipitation details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.FlowDetails">
            <summary>
                List of all flow details
            </summary>
        </member>
        <member name="P:Morph.Core.Utility.UnitsManager.UnitsManager.UnitsChanged">
            <summary>
                Just used to notify that units have changed
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.UnitsManager.UnitsManager.Convert(System.Double,Morph.Core.Utility.UnitsManager.UnitDetails,Morph.Core.Utility.UnitsManager.UnitDetails)">
            <summary>
                Converts the specified value from the source unit to the target unit.
            </summary>
            <param name="value">The value.</param>
            <param name="sourceUnit">The source unit.</param>
            <param name="targetUnit">The target unit.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Morph.Core.Utility.UnitsManager.UnitsManager.Convert(System.Double,System.String,System.String)">
            <summary>
                Converts the specified value from the source unit to the target unit.
            </summary>
            <param name="value">The value.</param>
            <param name="sourceUnitKey">The source unit.</param>
            <param name="targetUnitKey">The target unit.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Morph.Core.Utility.UnitsManager.UnitsManager.GetUnitDetails(Morph.Contracts.UnitDimension)">
            <summary>
                Get the current setting by dimension
            </summary>
            <param name="dimension">requested dimension</param>
            <returns>UnitDetails describing the unit</returns>
        </member>
        <member name="M:Morph.Core.Utility.UnitsManager.UnitsManager.GetUnitDetailsForDefaults(Morph.Contracts.UnitDimension)">
            <summary>
                Get the unit details by dimension for default units
            </summary>
            <param name="dimension">requested dimension</param>
            <returns>UnitDetails describing the unit</returns>
        </member>
        <member name="M:Morph.Core.Utility.UnitsManager.UnitsManager.Save(Morph.Core.Utility.UnitsManager.UnitDetails,Morph.Core.Utility.UnitsManager.UnitDetails,Morph.Core.Utility.UnitsManager.UnitDetails,Morph.Core.Utility.UnitsManager.UnitDetails,Morph.Core.Utility.UnitsManager.UnitDetails,Morph.Core.Utility.UnitsManager.UnitDetails,Morph.Core.Utility.UnitsManager.UnitDetails)">
            <summary>
                Save current user settings
            </summary>
            <param name="area">current area</param>
            <param name="depth">current depth</param>
            <param name="distance">current distance</param>
            <param name="volume">current volume</param>
            <param name="precipitation">current precipitation</param>
            /// <param name="capacity">current capacity</param>
            <param name="flow">current flow</param>
        </member>
        <member name="M:Morph.Core.Utility.UnitsManager.UnitsManager.GetUnitDetails(System.String)">
            <summary>
                Get the unit details from storage
            </summary>
            <param name="userSettingKey">user setting key</param>
            <returns>the UnitDetails associated with the user setting</returns>
        </member>
        <member name="M:Morph.Core.Utility.UnitsManager.UnitsManager.SetUnitDetails(System.String,Morph.Core.Utility.UnitsManager.UnitDetails)">
            <summary>
                Set the unit details in storage
            </summary>
            <param name="userSettingKey">user setting key</param>
            <param name="unitDetails">UnitDetials to be stored</param>
        </member>
        <member name="M:Morph.Core.Utility.UnitsManager.UnitsManager.GetUnitsByDimension(Morph.Contracts.UnitDimension)">
            <summary>
                Return list of units by dimension
            </summary>
            <param name="dimension">dimension type to return</param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Utility.VolumeCalculator">
            <summary>
            Helper class to calculate volumes
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.VolumeCalculator.CalculateImport(System.Double,System.Double)">
            <summary>
            Calculate import from cut/fill
            </summary>
            <param name="cut"></param>
            <param name="fill"></param>
        </member>
        <member name="M:Morph.Core.Utility.VolumeCalculator.CalculateExport(System.Double,System.Double)">
            <summary>
            Calculate export from cut/fill
            </summary>
            <param name="cut"></param>
            <param name="fill"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.Utility.WaitCursor">
            <summary>
                Helper to handle wait cursor on long operations
            </summary>
        </member>
        <member name="F:Morph.Core.Utility.WaitCursor._previousCursor">
            <summary>
                Previous cursor
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.WaitCursor.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Morph.Core.Utility.WaitCursor.#ctor(System.Windows.Input.Cursor)">
            <summary>
                Helper for cursor
            </summary>
            <param name="newCursor">cursor to display</param>
        </member>
        <member name="M:Morph.Core.Utility.WaitCursor.Dispose">
            <summary>
                When the object is disposed, set to previous cursor
            </summary>
        </member>
        <member name="T:Morph.Core.ViewModel.AnalysisToolTypeViewModel">
            <summary>
             helper vm to bind analysis tool type enum to dropdown ui elements
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.AnalysisToolTypeViewModel.#ctor(Morph.Contracts.Interfaces.AnalysisToolType)">
            <summary>
            
            </summary>
            <param name="toolType"></param>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisToolTypeViewModel.ToolType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisToolTypeViewModel.DisplayName">
            <summary>
                Display name for the unit
            </summary>
        </member>
        <member name="T:Morph.Core.ViewModel.BaseViewModel">
            <summary>
                Base view model used to create actual view models
            </summary>
        </member>
        <member name="F:Morph.Core.ViewModel.BaseViewModel.Errors">
            <summary>
                Dictionary that holds error messages by property.  Supports <c>IDataErrorInfo</c> interface.
            </summary>
        </member>
        <member name="F:Morph.Core.ViewModel.BaseViewModel._unitsManager">
            <summary>
                Units manager
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.#ctor">
            <summary>
                Constructor for base view model class
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BaseViewModel.HasError">
            <summary>
                True if the view model has an error else false
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.GetErrorKeys">
            <summary>
                Return a list of error keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.Dispose">
            <summary>
                Dispose implementation
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BaseViewModel.UnitArea">
            <summary>
                Unit area string
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BaseViewModel.UnitPercentage">
            <summary>
                Unit percentage string
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BaseViewModel.UnitDepth">
            <summary>
                Unit depth string
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BaseViewModel.UnitDistance">
            <summary>
                Unit distance string
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BaseViewModel.UnitSmallDistance">
            <summary>
                Unit distance string
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BaseViewModel.UnitVolume">
            <summary>
                Unit volume string
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BaseViewModel.UnitDegree">
            <summary>
                Unit degree string (Only deg for now)
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BaseViewModel.UnitFlow">
            <summary>
            Unit flow string
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BaseViewModel.f">
            <summary>
                Unit precipitation string
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BaseViewModel.UnitCapacity">
            <summary>
                Unit capacity string
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BaseViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BaseViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.OnInitialize">
            <summary>
                Initialize the instance.
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.IsValidDouble(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Helper to validate double values.
                Errors will be loaded into the error dictionary by property name.
            </summary>
            <param name="value">double value</param>
            <param name="propertyExpression">property for IDataErrorInfo notification</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="dimension"></param>
            <returns>true if valid, else false</returns>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.SetError(System.String,System.String)">
            <summary>
                Set an error condition
            </summary>
            <param name="fieldName"></param>
            <param name="error"></param>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.ClearError(System.String)">
            <summary>
                Clear an error
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.ClearErrors">
            <summary>
                Clear all errors
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.RemoveErrorIfContains(System.String,System.String)">
            <summary>
                Remove a field from errors if it contains the target value
            </summary>
            <param name="fieldName">field name to be removed</param>
            <param name="target">target value for conditional removal</param>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.Dispose(System.Boolean)">
            <summary>
                Virtual dispose method
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.ValidateMinMax(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Validate min / max properties
            </summary>
            <param name="value"></param>
            <param name="minProperty"></param>
            <param name="maxProperty"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="unitDimension"></param>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.ValidateMaxMin(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Validate max / min properties
            </summary>
            <param name="value"></param>
            <param name="minProperty"></param>
            <param name="maxProperty"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="unitDimension"></param>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.ValidateOptionalDoubleValue(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Validate optional double value
            </summary>
            <param name="value">value to evaluate</param>
            <param name="sourceProperty">source property</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="unitDimension"></param>
        </member>
        <member name="M:Morph.Core.ViewModel.BaseViewModel.ValidateRateChangeDistanceFormula(System.Double,System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.String)">
            <summary>
                Validates the change rate and distance formula.
            </summary>
            <param name="rateChangeValue"></param>
            <param name="distanceChangeValue"></param>
            <param name="sourceProperty"></param>
            <param name="sourceFormulaProperty"></param>
            <param name="minAllowed"></param>
            <param name="error"></param>
        </member>
        <member name="T:Morph.Core.ViewModel.DitchProfileViewModel">
            <summary>
            Element properties
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.NameExists">
            <summary>
            Callback function to determine if a name exists
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.#ctor(Morph.Core.ViewModel.DitchProfile)">
            <summary>
            CTOR
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.Confirmation">
            <summary>
            Gets the confirmation.
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.AnyProfiles">
            <summary>
            Flag to toggle visibility based on profiles
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.Title">
            <summary>
            Title of the dialog
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.AutoCalcVertical">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.AutoCalcHorizontal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.AutoCalcSlope">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.IsSaveEnabled">
            <summary>
            Gets a value indicating whether [is save enabled].
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.IsDirty">
            <summary>
            Flag to check if anything changed
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.IsNew">
            <summary>
            Flag to check if it's a new ditch profile
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.ProfileNodes">
            <summary>
            Ditch profiles
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.SelectedProfilePoints">
            <summary>
            Ditch profiles
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.VerticalHeader">
            <summary>
            Vertical header label for table
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.HorizontalHeader">
            <summary>
            Horizontal header label for table
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.SpinePoint">
            <summary>
            Origin
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.SpineOffSetX">
            <summary>
            spine point offset x
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.SpineOffSetY">
            <summary>
            spine point offset Y
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.SpinePointIndex">
            <summary>
            Origin tagged to the selected node
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.NodeTags">
            <summary>
            List of node tags exposed for origin point
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.SelectedDitchProfile">
            <summary>
            Selected ditch profile
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.DitchProfiles">
            <summary>
            List of ditch profiles to be displayed in the preview pane
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.SelectedNodeIndex">
            <summary>
            Selected row index in the table
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.DeleteCancelLabel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.SaveProfileCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.CreateProfileCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.DeleteProfileCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.CancelEditsCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.DoSaveProfileCommand">
            <summary>
            Save the new profile to the disk
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.DoCreateProfileCommand">
            <summary>
            Save the new profile to the disk
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.DoCancelEditsCommand">
            <summary>
            Cancel the edits
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.DoDeleteProfileCommand(System.Object)">
            <summary>
            Delete the selected ditch profile
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.InsertNodeCommand">
            <summary>
            Finalize exclusion zone command
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.DoInsertNodeCommand">
            <summary>
            Insert a node
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfileViewModel.DeleteNodeCommand">
            <summary>
            delte node from profile
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.DoDeleteNodeCommand">
            <summary>
            Delete the node
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.GetDrawingNodes">
            <summary>
            Get Drawing nodes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.ProfileNodes_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            List changed notification used to initialize and bind when user clicks on the table row to add one more record
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.UpdateProfileNodes">
            <summary>
            Reset ditch profile indeces
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.GetDitchProfileNames">
            <summary>
            Helper method to retreive ditch profile names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.LoadSelectedDitchProfile">
            <summary>
            load pre-defined ditch profiles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.WriteCurrentDitchProfileToDisk">
            <summary>
            Write ditch profile in file to disk
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.GetDitchProfilesList(System.Boolean)">
            <summary>
            load pre-defined ditch profiles to be displayed in the preview
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.DeleteDitchProfile(Morph.Core.ViewModel.DitchProfile)">
            <summary>
            Delete the selected ditch profile from the file system
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.ValidateMinMax(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Validate min / max properties
            </summary>
            <param name="value"></param>
            <param name="minProperty"></param>
            <param name="maxProperty"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="unitDimension"></param>
        </member>
        <member name="M:Morph.Core.ViewModel.DitchProfileViewModel.IsValidDouble(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Helper to validate double values.
                Errors will be loaded into the error dictionary by property name.
            </summary>
            <param name="value">double value</param>
            <param name="propertyExpression">property for IDataErrorInfo notification</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="dimension"></param>
            <returns>true if valid, else false</returns>
        </member>
        <member name="T:Morph.Core.ViewModel.ProfileNode">
            <summary>
            Ditch profile
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ProfileNode.AutoCalculateVertical">
            <summary>
            flag to enabled/disable Vertical field editing
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ProfileNode.AutoCalculateHorizontal">
            <summary>
            flag to enabled/disable horizontal field editing
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ProfileNode.AutoCalculateSlope">
            <summary>
            flag to enabled/disable slope field editing
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ProfileNode.Index">
            <summary>
            Node index
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ProfileNode.Tag">
            <summary>
            Node Tag
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ProfileNode.Vertical">
            <summary>
            Vertical distance
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ProfileNode.Horizontal">
            <summary>
            Horizontal distance
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ProfileNode.Slope">
            <summary>
            Slope
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.ProfileNode.AutoCalculate">
            <summary>
            Auto calculate the disabled field
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.ProfileNode.ValidateRowData">
            <summary>
            Validate the row data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.ViewModel.DitchProfile">
            <summary>
            profile preview to be displayed in the list
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfile.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfile.Name">
            <summary>
            Profile name
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfile.SpineOffSet">
            <summary>
            Node index
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfile.SpinePointIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfile.Points">
            <summary>
            Profile points
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.DitchProfile.IsDeleteable">
            <summary>
            Flag to hide/show deleteable button
            </summary>
        </member>
        <member name="T:Morph.Core.ViewModel.RowDataInfoValidationRule">
            <summary>
            Validation rule to highlight errors in the table row
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.RowDataInfoValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>When overridden in a derived class, performs validation checks on a value.</summary>
            <returns>A <see cref="T:System.Windows.Controls.ValidationResult" /> object.</returns>
            <param name="value">The value from the binding target to check.</param>
            <param name="cultureInfo">The culture to use in this rule.</param>
        </member>
        <member name="T:Morph.Core.ViewModel.CellDataInfoValidationRule">
            <summary>
            Validation rule to highlight errors in the table column
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.CellDataInfoValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>When overridden in a derived class, performs validation checks on a value.</summary>
            <returns>A <see cref="T:System.Windows.Controls.ValidationResult" /> object.</returns>
            <param name="value">The value from the binding target to check.</param>
            <param name="cultureInfo">The culture to use in this rule.</param>
        </member>
        <member name="T:Morph.Core.ViewModel.BindingProxy">
            <summary>
            helping utility to enable disable the table column using a flag.
            used in the xaml file of the view
            </summary>
        </member>
        <member name="F:Morph.Core.ViewModel.BindingProxy.DataProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.BindingProxy.Data">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.BindingProxy.CreateInstanceCore">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.ViewModel.FlowPathPointInfoViewModel">
            <summary>
            Flow path point Info vm to show Are and RunOff volume of water on flow path nodes.
            </summary>
        </member>
        <member name="F:Morph.Core.ViewModel.FlowPathPointInfoViewModel._contributingAreaValueField">
            <summary>
            Contributing area value field
            </summary>
        </member>
        <member name="F:Morph.Core.ViewModel.FlowPathPointInfoViewModel._runOffValueField">
            <summary>
            RunOffValueField value field
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.FlowPathPointInfoViewModel.#ctor(System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Flow3D})">
            <summary>
            Ctor
            </summary>
            <param name="flow3D"></param>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathPointInfoViewModel.CellSize">
            <summary>
            Cell size
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathPointInfoViewModel.IsSnapped">
            <summary>
             Any point snapped
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathPointInfoViewModel.CursorPosition">
            <summary>
             Area that this point covers
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathPointInfoViewModel.Area">
            <summary>
             Area that this point covers?
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathPointInfoViewModel.Volume">
            <summary>
             Volume at this point
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathPointInfoViewModel.RunOff">
            <summary>
             Volume at this point
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathPointInfoViewModel.FlowField">
            <summary>
            Flow Field
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathPointInfoViewModel.Precipitation">
            <summary>
            Precipitation
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathPointInfoViewModel.Capacity">
            <summary>
            Capacity
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.FlowPathPointInfoViewModel.UpdateNodeInformation(System.Windows.Point)">
            <summary>
            Compute area for the given node
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Morph.Core.ViewModel.FlowPathPointInfoViewModel.GetNearestSnappingNode(System.Single,System.Windows.Point@,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Compute the nearest point in the list of points for a given point and snapping distance
            </summary>
            <param name="snappingOffset"></param>
            <param name="point"></param>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Core.ViewModel.PlaneInfoViewModel">
            <summary>
                View model for plane info
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.PlaneInfoViewModel.#ctor(Morph.Contracts.DataContracts.Repository.PlaneInfo,System.Double)">
            <summary>
            Ctor, used in design summary report
            </summary>
            <param name="planeInfo"></param>
            <param name="laserHeading"></param>
        </member>
        <member name="M:Morph.Core.ViewModel.PlaneInfoViewModel.#ctor(Morph.Contracts.DataContracts.Repository.PlaneInfo)">
            <summary>
                Helper constructor
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.PlaneInfoViewModel.ConvertDirectionToDescription(System.Double)">
            <summary>
            
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ViewModel.PlaneInfoViewModel.GetMainOrientation(Morph.Contracts.DataContracts.Repository.PlaneInfo)">
            <summary>
            Determines main orienation
            </summary>
            <param name="planeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ViewModel.PlaneInfoViewModel.GetSecondaryOrientation(Morph.Contracts.DataContracts.Repository.PlaneInfo)">
            <summary>
            Determines secondary orienation
            </summary>
            <param name="planeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ViewModel.PlaneInfoViewModel.GetCompositeOrientation(Morph.Contracts.DataContracts.Repository.PlaneInfo)">
            <summary>
            Determines composite orienation
            </summary>
            <param name="planeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ViewModel.PlaneInfoViewModel.GetOrientation(Morph.Contracts.DataContracts.Repository.PlaneInfo)">
            <summary>
            Get orientation
            NOTE: This code was copied from the engines Planes.cs class.
            </summary>
            <param name="planeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ViewModel.PlaneInfoViewModel.GetPercentInHeading(Morph.Contracts.DataContracts.Repository.PlaneInfo,System.Double)">
            <summary>
            Get orientation
            NOTE: This code was copied from the engines Planes.cs class.
            </summary>
            <param name="planeInfo"></param>
            <param name="direction"></param>
            <returns>Component length of direction along SlopeAngle</returns>
        </member>
        <member name="M:Morph.Core.ViewModel.PlaneInfoViewModel.DoUserSettingsChanged(Morph.Contracts.Events.UserSettingsInfo)">
            <summary>
            User settings changed handler
            </summary>
            <param name="userSettingsInfo">payload for the UserSettingsEvent</param>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.FillVolumeConverted">
            <summary>
                Fill volume converted between bank / loose haul
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.CutVolumeConverted">
            <summary>
                Cut volume converted between bank / loose haul
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.ImportVolume">
            <summary>
                Inport volume 
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.ExportVolume">
            <summary>
                Export volume 
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.Name">
            <summary>
                Name for the plane (section)
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.MainSlope">
            <summary>
                Slope angle and percent along X axis.
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.MainSlopePercentage">
            <summary>
                Slope percent along X axis.
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.MainSlopeAngle">
            <summary>
                Slope percent along X axis.
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.MainOrientation">
            <summary>
                Orientation
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.SecondarySlope">
            <summary>
                Slope angle and percent along Y axis.
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.SecondarySlopePercentage">
            <summary>
                Slope percent along Y axis.
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.SecondarySlopeAngle">
            <summary>
                Slope angle along Y axis.
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.SecondaryOrientation">
            <summary>
                Orientation
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.SlopeAngle">
            <summary>
                Normal vector's angle when projected onto the X-Y plane, in degrees.
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.SlopePercent">
            <summary>
                Normal vector's percent rate of descent along <see cref="P:Morph.Core.ViewModel.PlaneInfoViewModel.SlopeAngle" /> direction.
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.TotalSlope">
            <summary>
                Slope angle and percent.
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.TotalSlopePercentage">
            <summary>
                Slope percentage
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.TotalSlopeAngle">
            <summary>
                Slope angle
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.TotalOrientation">
            <summary>
                Orientation
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.FlatArea">
            <summary>
                Area of the plane
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.CutVolume">
            <summary>
                Cut volume of the plane
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.FillVolume">
            <summary>
                Fill volume of the plane
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.CutFillPerArea">
            <summary>
                Calculate cut fill per area
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.CutFillPerAreaRounded">
            <summary>
                Calculate cut fill per area rounded to 3
                Support for flow document.
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.A">
            <summary>
                Plane 'A' coefficient
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.B">
            <summary>
                Plane 'B' coefficient
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.C">
            <summary>
                Plane 'C' coefficient
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.PlaneInfoViewModel.Boundary">
            <summary>
                Plane boundary
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.PlaneInfoViewModel.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="T:Morph.Core.ViewModel.RelayCommand">
            A command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is 'true'.  This class does not allow you to accept command parameters in the
            Execute and CanExecute callback methods.
        </member>
        <member name="M:Morph.Core.ViewModel.RelayCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the RelayCommand class that 
            can always execute.
            </summary>
            <param name="execute">The execution logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:Morph.Core.ViewModel.RelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:Morph.Core.ViewModel.RelayCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Parameter of the command (if any)</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="E:Morph.Core.ViewModel.RelayCommand.CanExecuteChanged">
            <summary>
            Occurs when the <see cref="T:System.Windows.Input.CommandManager"/> should detect conditions that might change the ability of a command to execute
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.RelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked. 
            </summary>
            <param name="parameter">Parameter of the command (if any)</param>
        </member>
        <member name="T:Morph.Core.ViewModel.AnalysisLegendItem">
            <summary>
            LegendItem
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.AnalysisLegendItem.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendItem.RangeText">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendItem.RangeColor">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendItem.RangeArea">
            <summary>
            Area
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendItem.ShowArea">
            <summary>
            Show area
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendItem.CutVolume">
            <summary>
            CutVolume
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendItem.FillVolume">
            <summary>
            FillVolume
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendItem.ShowCutFillVolume">
            <summary>
            Show cut fill volume
            </summary>
        </member>
        <member name="T:Morph.Core.ViewModel.AnalysisLegendViewModel">
            <summary>
            Tool legend class viewmodel
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.SelectedAnalysisTool">
            <summary>
            Selection analysis tool type
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.TotalArea">
            <summary>
            Total area displayed in the title
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.LegendItems">
            <summary>
            Legend Items
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.ShowRangeSelection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.Minimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.Maximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.UpperValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.LowerValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.LegendBrush">
            <summary>
            Legend brush
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.IsUpperSameAsMaximum">
            <summary>
            Is upper value same as maximum
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.IsLowerSameAsMinimum">
            <summary>
            Is lower value same as minimum value
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.IsCutFillViolationLegend">
            <summary>
            Flag to show hide different sliders (Cut Fill Violation or Slope Range slider
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.AnalysisLegendViewModel.IsPondingLegend">
            <summary>
            Flag to show hide ponding legend which is different from other tool types
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.AnalysisLegendViewModel.MouseDoubleClick">
            <summary>
            command to launch color settings dialog for the tool
            </summary>
        </member>
        <member name="T:Morph.Core.ViewModel.ToolsDropDownViewModel">
            <summary>
            ToolsDropDownViewModel
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ToolsDropDownViewModel.ToolType">
            <summary>
            tool type
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ToolsDropDownViewModel.IsVisible">
            <summary>
            is it selected
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ToolsDropDownViewModel.IsSelected">
            <summary>
            is it selected
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ToolsDropDownViewModel.IsSelectable">
            <summary>
            Flag to mark it selectable 
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ToolsDropDownViewModel.Name">
            <summary>
             Name of the tool
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ToolsDropDownViewModel.IsRange">
            <summary>
            Is a range
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ToolsDropDownViewModel.Minimum">
            <summary>
            starting value of range
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ToolsDropDownViewModel.Maximum">
            <summary>
            ending value of range
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ToolsDropDownViewModel.Current">
            <summary>
            current value from the range
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ToolsDropDownViewModel.ImageSource">
            <summary>
            Image source
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.ToolsDropDownViewModel.IsGrouped">
            <summary>
            Group Name
            </summary>
        </member>
        <member name="T:Morph.Core.ViewModel.FlowPathsViewModel">
            <summary>
            Flow path view model
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathsViewModel.IsVisible">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathsViewModel.BinIndex">
            <summary>
            Stroke brush 
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathsViewModel.StrokeBrush">
            <summary>
            Stroke brush 
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathsViewModel.Figures">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathsViewModel.Segments">
            <summary>
            Point segments used by Design Report
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathsViewModel.Geometries">
            <summary>
            Stream geometries used by Design Report
            </summary>
        </member>
        <member name="P:Morph.Core.ViewModel.FlowPathsViewModel.Flow3D">
            <summary>
            List of Flow3Ds for this group
            </summary>
        </member>
        <member name="T:Morph.Core.ViewModel.Extension">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Core.ViewModel.Extension.Lerp(System.Windows.Media.Color,System.Windows.Media.Color,System.Single)">
            <summary>
            
            </summary>
            <param name="colour"></param>
            <param name="to"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Core.ViewModel.Extension.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:FlowDocumentApp.FlowDocuments.Helpers.FixupDataContext(System.Windows.FrameworkContentElement)">
            <summary>
            If you use a bindable flow document element more than once, you may encounter a "Collection was modified" exception.
            The error occurs when the binding is updated because of a change to an inherited dependency property. The most common scenario 
            is when the inherited DataContext changes. It appears that an inherited properly like DataContext is propagated to its descendants. 
            When the enumeration of descendants gets to a BindableXXX, the dependency properties of that element change according to the new 
            DataContext, which change the (non-dependency) properties. However, for some reason, changing the flow content invalidates the 
            enumeration and raises an exception. 
            To work around this, one can either DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType=FrameworkElement}}" 
            in code. This is clumsy, so every derived type calls this function instead (which performs the same thing).
            See http://code.logos.com/blog/2008/01/data_binding_in_a_flowdocument.html
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:FlowDocumentApp.FlowDocuments.Helpers.ConvertToBlock(System.Object,System.Object)">
            <summary>
            Convert "data" to a flow document block object. If data is already a block, the return value is data recast.
            </summary>
            <param name="dataContext">only used when bindable content needs to be created</param>
            <param name="data"></param>
            <returns></returns>
        </member>
    </members>
</doc>
