using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Dapper;
using VSS.VisionLink.Utilization.Common.Interfaces;
using VSS.VisionLink.Utilization.Common.Models;

namespace VSS.VisionLink.Utilization.Repositories
{
  public class SegmentRepository : RepositoryBase, ISegmentRepository
  {
    public SegmentRepository(string connectionString)
      : base(connectionString)
    {      
    }

    public async Task<int> StoreSegments(IEnumerable<WorkSegment> segments)
    {
      int upsertedCount = 0;
      await Task.WhenAll(segments.Select(async segment =>
      {
        upsertedCount = await UpsertSegment(segment);

      }).ToArray());
      return upsertedCount;      
    }

    private async Task<int> UpsertSegment(WorkSegment segment)
    {
      PerhapsOpenConnection();
      log.DebugFormat("UtilizationDataFeed: Upsert segment");
      int upsertedCount = 0;

      WorkSegment existing = (await connection.QueryAsync<WorkSegment>
        (@"SELECT
              AssetUID, EventUTC, fk_WorkDefinitionTypeID AS WorkDefinitionType, 
              EventDeviceTime, EventKeyDate, fk_SegmentTypeID AS SegmentType 
            FROM Segment
            WHERE AssetUID = @assetUid
              AND EventUTC = @eventUtc
              AND fk_WorkDefinitionTypeID = @workDefinitionType"
          , new { assetUid = segment.AssetUid, eventUtc = segment.EventUtc, workDefinitionType = segment.WorkDefinitionType }
        )).FirstOrDefault();

      if (existing == null)
      {
        const string insert =
          @"INSERT Segment
              (AssetUID, EventUTC, fk_WorkDefinitionTypeID, EventDeviceTime, EventKeyDate, fk_SegmentTypeID)
            VALUES
              (@AssetUid, @EventUtc, @WorkDefinitionType, @EventDeviceTime, @EventKeyDate, @SegmentType)";
        upsertedCount = await connection.ExecuteAsync(insert, segment);
      }
      else
      {
        const string update =
          @"UPDATE Segment                
                SET fk_SegmentTypeID = @SegmentType
              WHERE AssetUID = @assetUid
                AND EventUTC = @eventUtc
                AND fk_WorkDefinitionTypeID = @workDefinitionType";
        upsertedCount = await connection.ExecuteAsync(update, segment);
      }

      return upsertedCount;
    }

    public List<WorkSegment> GetSegments(string assetUid, int keyDate, WorkDefinitionTypeEnum workDefinitionType )
    {
      PerhapsOpenConnection();
      List<WorkSegment> segments = connection.Query<WorkSegment>
        (@"SELECT
              AssetUID, EventUTC, fk_WorkDefinitionTypeID AS WorkDefinitionType, 
              EventDeviceTime, EventKeyDate, fk_SegmentTypeID AS SegmentType
            FROM Segment
            WHERE AssetUID = @assetUid 
              AND EventKeyDate = @keyDate
              AND fk_WorkDefinitionTypeID = @workDefinitionType
            ORDER BY EventDeviceTime"
          , new { assetUid, keyDate, workDefinitionType }
        ).ToList();

      return segments;      
    }

    public WorkSegment GetSegmentPriorTo(string assetUid, int keyDate, WorkDefinitionTypeEnum workDefinitionType)
    {
      PerhapsOpenConnection();
      WorkSegment segment = connection.Query<WorkSegment>
        (@"SELECT
              AssetUID, EventUTC, fk_WorkDefinitionTypeID AS WorkDefinitionType, 
              EventDeviceTime, EventKeyDate, fk_SegmentTypeID AS SegmentType
            FROM Segment
            WHERE AssetUID = @assetUid 
              AND EventKeyDate < @keyDate
              AND fk_WorkDefinitionTypeID = @workDefinitionType
            ORDER BY EventDeviceTime DESC
            LIMIT 1"
          , new { assetUid, keyDate, workDefinitionType }
        ).FirstOrDefault();

      return segment;      
    }

<<<<<<< HEAD
    public async Task<int> DeleteSegments(string assetUid, int startKeyDate, int endKeyDate, WorkDefinitionTypeEnum workDefinitionType)
=======
    public async Task<int> DeleteSegments(string assetUid, DateTime startUtc, DateTime endUtc)
>>>>>>> Dev
    {
      PerhapsOpenConnection();
      int deletedCount = 0;

      const string delete =
        @"DELETE FROM Segment
              WHERE AssetUID = @assetUid 
<<<<<<< HEAD
              AND EventKeyDate >= @startKeyDate
              AND EventKeyDate <= @endKeyDate
              AND fk_WorkDefinitionTypeID = @workDefinitionType";
      deletedCount = await connection.ExecuteAsync(delete,
          new { assetUid, startKeyDate, endKeyDate, workDefinitionType });
=======
              AND EventUTC >= @startUtc
              AND EventUTC <= @endUtc";
      deletedCount = await connection.ExecuteAsync(delete,
          new { assetUid, startUtc, endUtc });
>>>>>>> Dev

      return deletedCount;     
    }

  }
}
