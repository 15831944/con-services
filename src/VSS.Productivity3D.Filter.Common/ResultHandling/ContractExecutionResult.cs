using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;

namespace VSS.Productivity3D.Filter.Common.ResultHandling
{
  /// <summary>
  ///   Represents general (minimal) reponse generated by a sevice. All other responses should be derived from this class.
  /// </summary>
  public class ContractExecutionResult
  {
    public const string DefaultMessage = "success";

    /// <summary>
    ///   Initializes a new instance of the <see cref="ContractExecutionResult" /> class.
    /// </summary>
    /// <param name="code">
    ///   The resulting code. Default value is <see cref="ContractExecutionStatesEnum.Success" />
    /// </param>
    /// <param name="message">The verbose user-friendly message. Default value is empty string.</param>
    public ContractExecutionResult(int code, string message = DefaultMessage)
    {
      Code = code;
      Message = message;
    }

    /// <summary>
    ///   Initializes a new instance of the <see cref="ContractExecutionResult" /> class with default
    ///   <see cref="ContractExecutionStatesEnum.Success" /> result
    /// </summary>
    /// <param name="message">The verbose user-friendly message.</param>
    protected ContractExecutionResult(string message)
      : this(ContractExecutionStatesEnum.ExecutedSuccessfully, message)
    {
    }

    /// <summary>
    ///   Initializes a new instance of the <see cref="ContractExecutionResult" /> class with default
    ///   <see cref="ContractExecutionStatesEnum.Success" /> result and "success" message
    /// </summary>
    public ContractExecutionResult()
      : this(DefaultMessage)
    {
    }


    /// <summary>
    ///   Defines machine-readable code.
    /// </summary>
    /// <value>
    ///   Result code.
    /// </value>
    [JsonProperty(PropertyName = "Code", Required = Required.Always)]
    [Required]
    public int Code { get; protected set; }

    /// <summary>
    ///   Defines user-friendly message.
    /// </summary>
    /// <value>
    ///   The message string.
    /// </value>
    [JsonProperty(PropertyName = "Message", Required = Required.Always)]
    [Required]
    public string Message { get; protected set; }
  }

  /// <summary>
  ///   Defines standard return codes for a contract.
  /// </summary>
  public class ContractExecutionStatesEnum : GenericEnum<ContractExecutionStatesEnum, int>
  {
    public ContractExecutionStatesEnum()
    {
      DynamicAddwithOffset("Invalid projectUid.", 1);
      DynamicAddwithOffset("Invalid filterUid.", 2);
      DynamicAddwithOffset("Invalid name. Should not be null.", 3);
      DynamicAddwithOffset("Invalid filterJson. Should not be null.", 4);
      DynamicAddwithOffset("GetFilter By filterUid. Invalid parameters.", 5);
      DynamicAddwithOffset("GetFilter By filterUid. Unable to retrieve filters. Exception: {0}.", 6);
      DynamicAddwithOffset("Validation of Customer/Project failed. Exception: {0}.", 7);
      DynamicAddwithOffset("Validation of Customer/Project failed. Not allowed.", 8);
      DynamicAddwithOffset("GetFilters By projectUid. Invalid parameters.", 9);
      DynamicAddwithOffset("GetFilters By projectUid. Unable to retrieve filters. Exception: {0}.", 10);
      DynamicAddwithOffset("DeleteFilter failed. Unable to find filterUid.", 11);
      DynamicAddwithOffset("DeleteFilter failed. Unable to delete filterUid.", 12);
      DynamicAddwithOffset("DeleteFilter failed. Unable to delete filterUid. Exception: {0}.", 13);
      DynamicAddwithOffset("DeleteFilter failed. Unable to write to Kafka. Exception: {0}.", 14);
      DynamicAddwithOffset("UpsertFilter failed. Unable to read filters for project. Exception: {0}.", 15);
      DynamicAddwithOffset("UpsertFilter failed. Unable to find transient filterUid provided.", 16);
      DynamicAddwithOffset("UpsertFilter failed. Unable to update transient filter.", 17);
      DynamicAddwithOffset("UpsertFilter failed. Unable to update transient filter. Exception: {0}.", 18);
      DynamicAddwithOffset("UpsertFilter failed. Unable to create transient filter.", 19);
      DynamicAddwithOffset("UpsertFilter failed. Unable to create transient filter. Exception: {0}.", 20);
      DynamicAddwithOffset("UpsertFilter failed. Unable to find persistant filterUid provided.", 21);
      DynamicAddwithOffset("UpsertFilter failed. Unable to delete persistant filter.", 22);
      DynamicAddwithOffset("UpsertFilter failed. Unable to delete persistant filter. Exception: {0}.", 23);
      DynamicAddwithOffset("UpsertFilter failed. Unable to create persistant filter.", 24);
      DynamicAddwithOffset("UpsertFilter failed. Unable to create persistant filter. Exception: {0}.", 25);
      DynamicAddwithOffset("UpsertFilter failed. Unable to write to Kafka. Exception: {0}.", 26);
      DynamicAddwithOffset("Invalid customerUid.", 27);
      DynamicAddwithOffset("Invalid userUid.", 28);
    }

    /// <summary>
    /// The execution result offset to create dynamically add custom errors
    /// </summary>
    private const int executionResultOffset = 2500;

    /// <summary>
    ///   Service request executed successfully
    /// </summary>
    public static readonly int ExecutedSuccessfully = 0;


    /// <summary>
    ///   Supplied data didn't pass validation
    /// </summary>
    public static readonly int ValidationError = -1;

    /// <summary>
    ///   Serializing request erors
    /// </summary>
    public static readonly int SerializationError = -2;

    /// <summary>
    ///   Internal processing error
    /// </summary>
    public static readonly int InternalProcessingError = -3;


    /// <summary>
    /// Dynamically adds new error messages addwith offset.
    /// </summary>
    /// <param name="name">The name of error.</param>
    /// <param name="value">The value of code.</param>
    public void DynamicAddwithOffset(string name, int value)
    {
      DynamicAdd(name, value + executionResultOffset);
    }

    /// <summary>
    /// Gets the error numberwith offset.
    /// </summary>
    /// <param name="errorNum">The error number.</param>
    /// <returns></returns>
    public int GetErrorNumberwithOffset(int errorNum)
    {
      return errorNum + executionResultOffset;
    }

    /// <summary>
    /// Gets the frist available name of a error code taking into account 
    /// </summary>
    /// <param name="value">The code vale to get the name against.</param>
    /// <returns></returns>
    public string FirstNameWithOffset(int value)
    {
      return FirstNameWith(value + executionResultOffset);
    }
  }
}
