<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Morph.Contracts</name>
    </assembly>
    <members>
        <member name="T:Morph.Contracts.ClipboardDataFormats">
            <summary>
            Helper class that contains the names of custom data formats
            used when custom copy / paste methods are required.
            </summary>
        </member>
        <member name="F:Morph.Contracts.ClipboardDataFormats._prefix">
            <summary>
            Prefix for our custom data formats
            </summary>
        </member>
        <member name="F:Morph.Contracts.ClipboardDataFormats.LandLevelingConstraint">
            <summary>
            Land leveling constraint custom data
            </summary>
        </member>
        <member name="F:Morph.Contracts.ClipboardDataFormats.DitchData">
            <summary>
            Ditch data
            </summary>
        </member>
        <member name="F:Morph.Contracts.ClipboardDataFormats.ExclusionAreaData">
            <summary>
            ExclusionArea data
            </summary>
        </member>
        <member name="F:Morph.Contracts.ClipboardDataFormats.PipeLineData">
            <summary>
            PipeLine data
            </summary>
        </member>
        <member name="F:Morph.Contracts.ClipboardDataFormats.ActivityAreaData">
            <summary>
            Activity area data
            </summary>
        </member>
        <member name="F:Morph.Contracts.ClipboardDataFormats.BasinData">
            <summary>
            Basin data
            </summary>
        </member>
        <member name="F:Morph.Contracts.ClipboardDataFormats.SubZoneData">
            <summary>
            SubZone data
            </summary>
        </member>
        <member name="F:Morph.Contracts.ClipboardDataFormats.SectionLineData">
            <summary>
            SectionLine data
            </summary>
        </member>
        <member name="F:Morph.Contracts.ClipboardDataFormats.HingeData">
            <summary>
            Hinge data
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.FieldInfo">
            <summary>
                Contains information about a field
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.FieldInfo.Name">
            <summary>
                Field name
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.FieldInfo.ProjectName">
            <summary>
                Name of the project containing the field
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.FieldInfo.Boundary">
            <summary>
                Field boundary
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.FieldInfo.PurchasedAreas">
            <summary>
            List of purchased areas, current and expired
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.FieldInfo.TotalAcresPurchased">
            <summary>
            Total acres purchased rounded
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.FieldInfo.TotalAcresReal">
            <summary>
            Total acres purchased not rounded
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.FieldInfo.TotalPurchasedAreas">
            <summary>
            Number of purchased areas.  This is a distinct count because a single purchase could have multiple polygons defining it.
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.FieldInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.FieldInfoPurchases">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.FieldInfoPurchases.Boundary">
            <summary>
                Field boundary
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.FieldInfoPurchases.ExclusionZones">
            <summary>
            This contains the list of exclusion zones
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.FieldInfoPurchases.ExpirationUtc">
            <summary>
                Expiration date, in UTC.
                Purchase Manager does not need to this property but it comes into play when the IsAreaIncludedInOriginalSurface property is
                set to true.  The licensing code will find the the date the expires the soonest.
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.FieldInfoPurchases.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.PatchInfo`1">
            <summary>
                Information used to patch WM-FORM
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.PatchInfo`1.#ctor(Morph.Contracts.DataContracts.PatchInfo{`0})">
            <summary>
                Helper copy constructor
            </summary>
            <param name="patchInfo"></param>
        </member>
        <member name="M:Morph.Contracts.DataContracts.PatchInfo`1.#ctor(System.Version,System.Action{`0})">
            <summary>
                Helper constructor
            </summary>
            <param name="version">version number belonging to the patch</param>
            <param name="patchAction">action to execute for the patch</param>
        </member>
        <member name="P:Morph.Contracts.DataContracts.PatchInfo`1.TargetVersion">
            <summary>
                Target version for this patch
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.PatchInfo`1.ExecutePatch(`0)">
            <summary>
                Execute the patch
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.BasinAreaEntity">
            <summary>
            Basin area design results
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.BasinAreaEntity.#ctor">
            <summary>
            CTOR
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.BasinAreaEntity.Name">
            <summary>
                Name for the activity area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.BasinAreaEntity.Area">
            <summary>
            The area acreage value
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.BasinAreaEntity.Cut">
            <summary>
            Cut value for the area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.BasinAreaEntity.Fill">
            <summary>
            Fill for the area
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.BasinAreaConstraint">
            <summary>
            Basin area constraints
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.BasinAreaConstraint.#ctor">
            <summary>
            CTOR
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.BasinAreaConstraint.#ctor(Morph.Contracts.DataContracts.Repository.BasinAreaConstraint)">
            <summary>
            Helper CTOR
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.BasinAreaConstraint.Id">
            <summary>
            ID for the constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.BasinAreaConstraint.Name">
            <summary>
                Gets or sets the name of the activity area.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.BasinAreaConstraint.MaterialConstraint">
            <summary>
            Material Constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.BasinAreaConstraint.TypeName">
            <summary>
            Volume mode name
                ie. Balanced, Free...
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.BasinAreaConstraint.Volume">
            <summary>
            Area volume
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.BasinAreaConstraint.MinSlope">
            <summary>
            Helper for min slope for activity area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.BasinAreaConstraint.MaxSlope">
            <summary>
            Helper for max sloper for activity area
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint">
            <summary>
            Activity area constraints
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint.#ctor">
            <summary>
            CTOR
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint.#ctor(Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint)">
            <summary>
            Helper CTOR
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint.Id">
            <summary>
            ID for the constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint.Name">
            <summary>
                Gets or sets the name of the activity area.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint.MaterialConstraint">
            <summary>
            Material Constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint.TypeName">
            <summary>
            Volume mode name
                ie. Balanced, Free...
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint.Volume">
            <summary>
            Area volume
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint.IsMaxCutDepthEnabled">
            <summary>
            Is Max Cut enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint.MaxCutDepth">
            <summary>
            Max cut depth activity area.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint.IsMaxFillDepthEnabled">
            <summary>
            Is the max fill depth enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint.MaxFillDepth">
            <summary>
            Max fill depth activity area.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint.MinSlope">
            <summary>
            Helper for min slope for activity area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaConstraint.MaxSlope">
            <summary>
            Helper for max sloper for activity area
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.BasinAreaDataEntity">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.BasinAreaDataEntity.Id">
            <summary>
                Unique Id for sub zone
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.BasinAreaDataEntity.VortexPoint">
            <summary>
            Vortex
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.ActivityAreaEntity">
            <summary>
            Activity area design results
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.ActivityAreaEntity.#ctor">
            <summary>
            CTOR
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaEntity.Name">
            <summary>
                Name for the activity area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaEntity.Area">
            <summary>
            The area acreage value
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaEntity.Cut">
            <summary>
            Cut value for the area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaEntity.Fill">
            <summary>
            Fill for the area
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.ToolSettings">
            <summary>
            Individual analysis tool settings
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ToolSettings.IsInitialized">
            <summary>
            is this tool initialized
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ToolSettings.Surface">
            <summary>
            selected surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ToolSettings.AnalysisTool">
            <summary>
            this tool type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ToolSettings.LowerValue">
            <summary>
            selected lower value
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ToolSettings.UpperValue">
            <summary>
            selected upper value
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.ActivityAreaDataEntity">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaDataEntity.Id">
            <summary>
                Unique Id for sub zone
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ActivityAreaDataEntity.IsFieldActivity">
            <summary>
            IsFieldActivity
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.DitchEntity">
            <summary>
            Ditch entity
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.IsDefaultProfile">
            <summary>
            Is it default profile
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.SelectedDitchProfileNodes">
            <summary>
            Selected ditch profile
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.PointZList">
            <summary>
            Z value for each point if they are fixed, else double.NAN
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.BottomWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.Rise">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.Run">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.TransitionGap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.MinSlope">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.MaxSlope">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.FillVolume">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.CutVolume">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.StampType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.SpinePoint">
            <summary>
            ditch profile origin
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DitchEntity.SpinePointIndex">
            <summary>
            Origin tagged to the given node index
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.NoteDataEntity">
            <summary>
            Note data
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.NoteDataEntity.Title">
            <summary>
            The name of the BaseLine.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.NoteDataEntity.Description">
            <summary>
            Notes about the element
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.NoteDataEntity.Position">
            <summary>
            Points for the line
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.NoteDataEntity.IsExpanded">
            <summary>
            IsExpanded
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.NoteDataEntity.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.SamplingGridConstraint">
            <summary>
            sampling grid constraint
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.SamplingGridConstraint.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SamplingGridConstraint.Bearing">
            <summary>
            Grid bearing (direction 0 to 360)
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SamplingGridConstraint.GridSpacing">
            <summary>
            Spacing for the sub zone grid
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.CustomerHeader">
            <summary>
                Customer information
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CustomerHeader.Version">
            <summary>
                Software version that created the header
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CustomerHeader.Contact">
            <summary>
                Customer contact information
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CustomerHeader.EmailAddress">
            <summary>
                Customer contact email address
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CustomerHeader.DateTimeCreated">
            <summary>
                Date and time of creation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CustomerHeader.Notes">
            <summary>
                Notes added by the customer
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CustomerHeader.ProjectName">
            <summary>
                Original file name for the project
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CustomerHeader.DiagnosticsLogData">
            <summary>
            Data from the diagnostics log
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CustomerHeader.DitchProfilesData">
            <summary>
            Data from the ditch profiles
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CustomerHeader.MorphHeader">
            <summary>
                Morph header record
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.HingeResultEntity">
            <summary>
            Hinge results returned from the engine for a design
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.HingeResultEntity.Tag">
            <summary>
            Any object associated with this instance. 
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.HingeResultEntity.Point1">
            <summary>
            Initial point.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.HingeResultEntity.Point2">
            <summary>
            Final point.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.HingeResultEntity.MainSlope">
            <summary>
            The value of the desired slope along this segment.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.HingeResultEntity.CrossSlopeRight">
            <summary>
            The value of the desired slope to the right of this segment.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.HingeResultEntity.CrossSlopeLeft">
            <summary>
            The value of the desired slope to the right of this segment.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.MorphHeader">
            <summary>
                Morph header file
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MorphHeader.OrgName">
            <summary>
                Organization name
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MorphHeader.OrgId">
            <summary>
                Organization id
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MorphHeader.Version">
            <summary>
                Version of morph saving the file
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MorphHeader.FileBody">
            <summary>
                Body of the morph file
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.SubZoneBearingConstraint">
            <summary>
            Sub zone bearing constraint
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.SubZoneBearingConstraint.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZoneBearingConstraint.Bearing">
            <summary>
            Grid bearing (direction 0 to 360)
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZoneBearingConstraint.GridSpacing">
            <summary>
            Spacing for the sub zone grid
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.SubZoneResultsEntity">
            <summary>
                Class to contain calculated sub zone results
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZoneResultsEntity.Id">
            <summary>
                Sub zone Id
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZoneResultsEntity.Name">
            <summary>
                Name for the sub zone
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZoneResultsEntity.FlatBoundary">
            <summary>
                Boundary for the sub zone
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZoneResultsEntity.FlatArea">
            <summary>
                Total flat area of this section.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZoneResultsEntity.SurfaceArea">
            <summary>
                Total surface area of this section.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZoneResultsEntity.CutVolume">
            <summary>
                Cut volume of this section.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZoneResultsEntity.FillVolume">
            <summary>
                Fill volume of this section.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.SubZonesConstraints">
            <summary>
            Land leveling constraints
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.#ctor(Morph.Contracts.DataContracts.Repository.SubZonesConstraints)">
            <summary>
            Creation helper class
            </summary>
            <param name="subZonesConstraints"></param>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.TypeName">
            <summary>
            Volume mode name
                ie. Balanced, Free...
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.Volume">
            <summary>
            Area volume
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaterialConstraint">
            <summary>
            Material Constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.SubZoneTypeName">
            <summary>
            Sub zone type name
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.Id">
            <summary>
            ID for the constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.Name">
            <summary>
                Gets or sets the name of the section.
            </summary>
            <value>
                The name of the section.
            </value>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.SubZoneType">
            <summary>
            Sub zone type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.IsMaxCutDepthEnabled">
            <summary>
            Is Max Cut enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxCutDepth">
            <summary>
            Max cut depth sub zone.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.IsMaxFillDepthEnabled">
            <summary>
            Is the max fill depth enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxFillDepth">
            <summary>
            Max fill depth sub zone.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.IsMinElevationEnabled">
            <summary>
            Is min elevation enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MinElevation">
            <summary>
            Minimum elevation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.IsMaxElevationEnabled">
            <summary>
            Is min elevation enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxElevation">
            <summary>
            Maximum elevation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.IsMinMainSlopeEnabled">
            <summary>
            Is min main slope enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MinMainSlope">
            <summary>
            Min slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.IsMaxMainSlopeEnabled">
            <summary>
            Is max main slope enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxMainSlope">
            <summary>
            Max slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.IsMaxMainRateChangeEnabled">
            <summary>
            Is max main rate change enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxMainRateChange">
            <summary>
            Max rate of change
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxMainRateDistanceChange">
            <summary>
            Max rate of distance change
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxMainRateChangeReport">
            <summary>
                Gets the maximum change rate for the report.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.IsMinCrossSlopeEnabled">
            <summary>
            Is min cross slope enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MinCrossSlope">
            <summary>
            Min slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.IsMaxCrossSlopeEnabled">
            <summary>
            Is max cross slope enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxCrossSlope">
            <summary>
            Max slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxCrossRateChange">
            <summary>
            Max cross rate of change
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxCrossRateDistanceChange">
            <summary>
            Max cross rate of distance change
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxCrossRateChangeReport">
            <summary>
                Gets the maximum cross change rate for the report.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.Orientation">
            <summary>
            Helper for Orientation for pipe bed / tail ditch
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MinSlope">
            <summary>
            Helper for min slope for pipe bed / tail ditch
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxSlope">
            <summary>
            Helper for max sloper for pipe bed / tail ditch
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxChangeRate">
            <summary>
            Helper for max rate change for pipe bed / tail ditch
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MinElevationLevelPad">
            <summary>
            Helper for minimum elevation Level Pad
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZonesConstraints.MaxElevationLevelPad">
            <summary>
            Helper for maximum elevation Level Pad
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.PlaneInfo">
            <summary>
                Information about plane(s) returned from engine design
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.PlaneInfo.#ctor">
            <summary>
            CTOR
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.Name">
            <summary>
                Name for the plane (section)
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.MainSlope">
            <summary>
                Slope angle and percent along X axis.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.SecondarySlope">
            <summary>
                Slope angle and percent along Y axis.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.SlopeAngle">
            <summary>
                Normal vector's angle when projected onto the X-Y plane, in degrees.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.SlopePercent">
            <summary>
                Normal vector's percent rate of descent along <see cref="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.SlopeAngle" /> direction.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.TotalSlope">
            <summary>
                Slope angle and percent.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.Direction">
            <summary>
            Direction of the main axis in radians (cartesian coordinate).
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.Normal">
            <summary>
            The normal vector that defines the orientation of the plane.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.FlatArea">
            <summary>
                Area of the plane
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.CutVolume">
            <summary>
                Cut volume of the plane
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.FillVolume">
            <summary>
                Fill volume of the plane
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.A">
            <summary>
                Plane 'A' coefficient
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.B">
            <summary>
                Plane 'B' coefficient
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.C">
            <summary>
                Plane 'C' coefficient
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.Boundary">
            <summary>
                Plane boundary
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.ExportVolume">
            <summary>
                Export volume of the plane
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.ImportVolume">
            <summary>
                Import volume of the plane
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.Shrinkage">
            <summary>
                The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.PlaneInfo.Bulkage">
            <summary>
                The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.Benchmark">
            <summary>
                Benchmark class
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.Benchmark.Name">
            <summary>
                Name for the benchmark
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.Benchmark.Point">
            <summary>
                Point for the benchmark
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.CameraSettings">
            <summary>
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.CameraSettings.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CameraSettings.Position">
            <summary>
                Camera position
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CameraSettings.UpDirection">
            <summary>
                Camera up direction
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CameraSettings.LookDirection">
            <summary>
                Camera look direction
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CameraSettings.FieldOfView">
            <summary>
                Camera field of view
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CameraSettings.Width">
            <summary>
                Camera viewing box width, in world units
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CameraSettings.NearPlaneDistance">
            <summary>
                Camera NearPlaneDistance
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CameraSettings.FarPlaneDistance">
            <summary>
                Camera FarPlaneDistance
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CameraSettings.IsOrthographic">
            <summary>
             Is it Orthographic Camera 
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.DesignEntity">
            <summary>
            Data contract for the design entity
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEntity.AreViewsInSync">
            <summary>
            Are views in sync
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEntity.SelectedIterationGuid">
            <summary>
            The selected iteration guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEntity.FieldDesignType">
            <summary>
                Field design type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEntity.DesignIterations">
            <summary>
                Iterations for this design
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEntity.IsExpanded">
            <summary>
                Is expanded flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEntity.IsSelected">
            <summary>
                Is selected flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEntity.Name">
            <summary>
                Design display name
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.DesignType">
            <summary>
            Design type data
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignType.Name">
            <summary>
            Display name for the design type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignType.FieldDesignType">
            <summary>
            Field design type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignType.Description">
            <summary>
            Description for the design type
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.HingeEntity">
            <summary>
            Hinge entity
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.HingeEntity.PointZList">
            <summary>
            Z value for each point (hinge case) for Points in the line
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.HingeEntity.IsZFloating">
            <summary>
            Is Z floating (hinge case)
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.HingeEntity.CrossSlopeRight">
            <summary>
            Cross slope right
            Valid values -100.00 thru 100.00
                Optional
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.HingeEntity.CrossSlopeLeft">
            <summary>
            Cross slope left
            Valid values -100.00 thru 100.00
                Optional
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.HingeEntity.MainSlope">
            <summary>
            Main slope
            Valid values -100.00 thru 100.00
                Optional
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.LandFormingConstraints">
            <summary>
            Land Forming constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LandFormingConstraints.SubZoneData">
            <summary>
            SubZone Data
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.DesignEditImports">
            <summary>
                Design edits from imports
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditImports.MasterBenchmark">
            <summary>
                Design master benchmark
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditImports.Benchmarks">
            <summary>
                Benchmarks
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditImports.SectionLines">
            <summary>
                Section lines.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.DesignIteration">
            <summary>
                Design iteration data
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.DesignIteration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignIteration.IterationGuid">
            <summary>
            Design iteration guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignIteration.Name">
            <summary>
                Name of the design iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignIteration.EarliestExpirationDateTime">
            <summary>
                The earlier expiration data for the iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignIteration.DesignEdits">
            <summary>
                Design edits
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignIteration.DesignResults">
            <summary>
                Design results from calculation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignIteration.DesignConstraints">
            <summary>
                Design constraints for this iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignIteration.DesignViewSettings">
            <summary>
                Design view current settings
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignIteration.LastToggleSelected">
            <summary>
            Selected view for this iteration
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.CrossSlopeConstraint">
            <summary>
                Entity for cross slope data
                This is a design constraint
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.CrossSlopeConstraint.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CrossSlopeConstraint.SlopeOrientation">
            <summary>
                Slope orientation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CrossSlopeConstraint.MinSlope">
            <summary>
                Minimum slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CrossSlopeConstraint.MaxSlope">
            <summary>
                Maximum slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CrossSlopeConstraint.MaxChangeRate">
            <summary>
                Maximum rate change of slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.CrossSlopeConstraint.MaxDistanceRate">
            <summary>
                Rate change distance
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.DesignEditsEntity">
            <summary>
            Design edits
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.DesignEditsEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditsEntity.SectionAreas">
            <summary>
                Section areas
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditsEntity.Ditches">
            <summary>
                Design ditches
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditsEntity.Hinges">
            <summary>
                Design hinges
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditsEntity.ReturnedHinges">
            <summary>
            ReturnedHinges
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditsEntity.SectionLines">
            <summary>
                Design section lines
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditsEntity.ExclusionAreas">
            <summary>
                Design exclusion areas
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditsEntity.ActivityAreas">
            <summary>
                Design activity areas
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditsEntity.BasinAreas">
            <summary>
                Design basin areas
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditsEntity.PipeLines">
            <summary>
                Design pipe lines
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditsEntity.FixedPoints">
            <summary>
                Design field points
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditsEntity.SubZones">
            <summary>
                Design Sub Zones
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignEditsEntity.Notes">
            <summary>
            Sticky notes
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.DesignItemEnum">
            <summary>
                Enumeration of design items
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.DesignItemEnum.None">
            <summary>
                No design item
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.DesignItemEnum.Quote">
            <summary>
                Quote design item
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.DesignItemEnum.Volumetric">
            <summary>
                Volumetric design item
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.DesignItemEnum.DesignReport">
            <summary>
                Design report item
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.DesignItemEnum.CutFillReport">
            <summary>
                Cut fill report item
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.DesignItemEnum.ProposedView">
            <summary>
                Proposed design view
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.DesignItemEnum.CutFillMapView">
            <summary>
                Cut fill map view
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.DesignResultsEntity">
            <summary>
                Entity for design results
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.IsPurchaseRequired">
            <summary>
            Is a purchase required for this result
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.Rows">
            <summary>
                Design result rows
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.Columns">
            <summary>
                Design result columns
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.FieldDesignType">
            <summary>
                Field design type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.DesignIterations">
            <summary>
                Iterations for this design
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.Name">
            <summary>
                Design result display name
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.DesignConstraints">
            <summary>
                Design constraints for this design result
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.ProposedDesignResult">
            <summary>
                Result surface defined in bytes
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.CutFillMapResult">
            <summary>
                Result cut file map surface defined in bytes
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.TotalExport">
            <summary>
                Total volume exported
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.TotalImport">
            <summary>
                Total volume imported
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.TotalArea">
            <summary>
                Total design area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.TotalFill">
            <summary>
                Total fill for the design
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.TotalCut">
            <summary>
                Total cut for the design
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.TotalShrinkage">
            <summary>
                The percentage volume reduction between total bank cut and total bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.TotalBulkage">
            <summary>
                The percentage volume expansion between total bank cut and total loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.DateCreated">
            <summary>
                Date and time the design was created
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.IsExpanded">
            <summary>
                Is expanded flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.IsSelected">
            <summary>
                Is selected flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.Fee">
            <summary>
                Non-calculated fee for the design
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.CostPerVolume">
            <summary>
                Cost per volume
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.IsFeeCalculated">
            <summary>
                Flag to indicate usage of the Fee or a calculated Fee
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.CalculatedUnitsKey">
            <summary>
            The currently selected volume units used when the fee was calculated
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.CalculatedFee">
            <summary>
            The value of the calculated fee
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.DesignEdits">
            <summary>
            The design edits used to create this design
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.PlaneInfos">
            <summary>
            Information about planes
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.SubZoneResults">
            <summary>
            Sub zone results
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.HingeResults">
            <summary>
            Hinge results returned from the engine
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.DesignResultsEntity.ActivityAreaResults">
            <summary>
            Activity area results
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.FieldImportEnum">
            <summary>
                Surface import types
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.FieldImportEnum.None">
            <summary>
                Invalid surface
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.FieldImportEnum.Dxf">
            <summary>
                DXF file format
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.FieldImportEnum.Fmx">
            <summary>
                FMX file format
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.FieldImportEnum.Multiplane">
            <summary>
                Multiplane file format
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.FieldImportEnum.Dmg">
            <summary>
                Dmg file format
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.FieldImportEnum.Tmx">
            <summary>
                Tmx file format
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.FieldImportEnum.Shp">
            <summary>
                Shp file format
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.FieldImportEnum.Gps">
            <summary>
                Gps file format
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.FieldDesignType">
            <summary>
                Field design type enumeration
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.FieldDesignType.None">
            <summary>
                None specified
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.FieldDesignType.Drainage">
            <summary>
                Drainage design type
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.FieldDesignType.Irrigation">
            <summary>
                Irrigation design type
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.FieldDesignType.LandLeveling">
            <summary>
                Land leveling design type
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.FieldDesignType.SubZones">
            <summary>
            Subzone design type
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.FieldEntity">
            <summary>
            Entity to hold field data
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.Name">
            <summary>
                THe display name of the field
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.OriginalSurface">
            <summary>
                Field surface defined by bytes
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.DesignResults">
            <summary>
                List of Morph design results
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.IsExpanded">
            <summary>
                Is expanded flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.IsSelected">
            <summary>
                Is selected flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.FieldType">
            <summary>
                Field Type enum
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.DesignType">
            <summary>
                Field design type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.DesignEditImports">
            <summary>
            Design edit item imported from surface file
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.PointsOfInterest">
            <summary>
            Points of interest
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.MapData">
            <summary>
            Map Image data
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.MapQueryBounds">
            <summary>
            Map Query bounds
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.MapScaleFactor">
            <summary>
            Map scale factor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.MapWorldLocation">
            <summary>
            world location of the map
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.AutoGenerateBoundary">
            <summary>
            flag to allow auto generated boundary
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.EdgeLength">
            <summary>
            Max edge length used for inserting a boundary if it's missing
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.FieldEntity.SurveyPoints">
            <summary>
            survey points of the imported surface
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.LandLevelingConstraints">
            <summary>
            Land leveling constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LandLevelingConstraints.SectionName">
            <summary>
                Gets or sets the name of the section.
            </summary>
            <value>
                The name of the section.
            </value>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LandLevelingConstraints.ArePointsConstraintsEnabled">
            <summary>
            Are the point constraints enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LandLevelingConstraints.IsOrientationSelected">
            <summary>
                Flag for orientation selected
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LandLevelingConstraints.IsSlopeSelected">
            <summary>
                Flag for slope selected
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LandLevelingConstraints.IsCrossSlopeSelected">
            <summary>
                Flag for cross slope selected
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LandLevelingConstraints.Orientation">
            <summary>
                Orientation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LandLevelingConstraints.Slope">
            <summary>
                Slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LandLevelingConstraints.CrossSlope">
            <summary>
                Cross slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LandLevelingConstraints.NumberOfFixedPoints">
            <summary>
                Number of fixed points
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LandLevelingConstraints.DownhillDirectionIsRight">
            <summary>
            Gets or sets a value indicating whether [_downhill direction is right].
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LandLevelingConstraints.MaterialConstraint">
            <summary>
            Material constraint for independent section areas
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.License.LicenseFeatureUsageEntity">
            <summary>
            This holds a list of records that need to be sent to ACDC to provide usage statistics.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.LicenseFeatureUsageEntity.FeatureCode">
            <summary>
            Land leveleveling of land forming
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.LicenseFeatureUsageEntity.StartUtc">
            <summary>
            Starting UTC of the usage
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.LicenseFeatureUsageEntity.EndUtc">
            <summary>
            Ending UTC of the usage.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.LicenseFeatureUsageEntity.ConnectedFarmUser">
            <summary>
            Current connect farm user
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.LicenseFeatureUsageEntity.CurrentOrganizationId">
            <summary>
            Current organization ID.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.License.PurchaseAreaEntity">
            <summary>
                This is a class that describes the purchased areas.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.PurchaseAreaEntity.Boundary">
            <summary>
                This is a list of points that define the boundary
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.PurchaseAreaEntity.ExclusionZones">
            <summary>
                This is a list of list of points that describe the exclusion areas in the boundary
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.PurchaseAreaEntity.ExpirationUtc">
            <summary>
                Expiration date, in UTC
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.PurchaseAreaEntity.GrantedUtc">
            <summary>
                Granted date, in UTC
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.PurchaseAreaEntity.ConfirmationId">
            <summary>
                Confirmation Id passed back by ACDC when purchased.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.PurchaseAreaEntity.ModificationDuration">
            <summary>
            This is the number of days that the fiedl can be modified
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.PurchaseAreaEntity.Area3D">
            <summary>
            Sum of the 3D areas of all triangles after clipping the parent surface using the boundary and the exclusion zones.
                Done in m2 units
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.PurchaseAreaEntity.TotalAcresPerId">
            <summary>
            This is the total acres purchased per Confirmation ID.  So if you have multiple polygons with
            the same Confirmation ID then this is the total acreage for all the polygons.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity">
            <summary>
            License feature entity
            The organization license type for land forming is LandFormingApplication
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.LicenseFeatureTypeEnum">
            <summary>
            Defines the type of morph license
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.LicenseFeatureTypeEnum.NoLandFormingLicense">
            <summary>
            If we do not have a land forming license then return this.
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.LicenseFeatureTypeEnum.LandFormingApplication">
            <summary>
            Land Forming
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.LicenseFeatureTypeEnum.LandLevelingApplication">
            <summary>
            Land leveling
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.LicenseFeatureTypeEnum.LandFormingDrainageApplication">
            <summary>
            Land Forming
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.LicenseFeatureTypeEnum.LandFormingIrrigationApplication">
            <summary>
            Land Forming
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.LicenseFeatureTypeEnum.SubZoneApplication">
            <summary>
            SubZones
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.IsEvalMode">
            <summary>
                Flag for eval mode
                if not eval mode then is perpetual
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.EvalExpirationDate">
            <summary>
                Eval expiration date
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.ActivationDate">
            <summary>
                Activation date
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.IsActivated">
            <summary>
            Is the user/org been activated
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.TotalCredits">
            <summary>
                Total number of purchased credits
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.LicenseType">
            <summary>
            Perpetual or Evaluation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.CanExport">
            <summary>
            Does this license allow for export
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.LicenseFeatures">
            <summary>
            License features.
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.License.MorphIdentificationEntity">
            <summary>
            Morph Identification 
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.MorphIdentificationEntity.DeviceApplicationId">
            <summary>
            Guid that identifies the application/device to ACDC
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.MorphIdentificationEntity.HasRegistered">
            <summary>
            Has the Morph system registered successfully with the Connected Farm
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.MorphIdentificationEntity.LastRegistrationDateTime">
            <summary>
            Last registration datetime
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.MorphIdentificationEntity.FarmWorksRegistrationData">
            <summary>
            The last registration data sent to the Connected Farm
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.License.MorphIdentificationEntity.#ctor">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity">
            <summary>
                This contains the windows user, SSO user, OrganizationName, licesne features and acquired areas.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.WindowsUser">
            <summary>
                Windows user - Primary key
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.TrimbleSsoUserId">
            <summary>
                Trimble SSO UserID - Secondary key
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.TrimblePd">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.SavePd">
            <summary>
            Flag to indicate that the password is save or not
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.OrganizationName">
            <summary>
                Trimble OrganizationName - Third key
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.OrganizationId">
            <summary>
            The id associated with Organization name
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.OrganizationGuid">
            <summary>
            Used to encrypt an .mph file for an organization.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.PrimaryOrgId">
            <summary>
            This user's primary organization.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.RemainingAcresAvailable">
            <summary>
            Remaining acres available for an organization
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.RestrictedRegion">
            <summary>
            Restricted region South America, Central America, India and China
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.Organizations">
            <summary>
                This is a list of organizations the user belongs to.
                A dictionary of OrganizationName
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.Features">
            <summary>
                This contains the licens features
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.AcquiredAreasPolygons">
            <summary>
                This is a list of acquired areas for a specific user/organization
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.EntitlementDetails">
            <summary>
            This holds the application entitlement details (see ApplicationEntitlements.cs to see how this is populated)
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.License.UserCachedEntity.#ctor">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.License.UserOrganizationCachedEntity">
            <summary>
            This is the last user/organization state.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserOrganizationCachedEntity.WindowsUser">
            <summary>
            Windows user 
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserOrganizationCachedEntity.TrimbleSsoUserId">
            <summary>
            Trimble SSO UserID 
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserOrganizationCachedEntity.Organization">
            <summary>
            Trimble OrganizationName 
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserOrganizationCachedEntity.OrganizationId">
            <summary>
            The ID associated with Organization
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserOrganizationCachedEntity.OrganizationGuid">
            <summary>
            Used to encrypt an .mph file for an organization.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.License.UserOrganizationCachedEntity.LastRunDateTime">
            <summary>
                Last run date 
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.License.UserOrganizationCachedEntity.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.LineDataEntity">
            <summary>
            Line data for edits
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LineDataEntity.LineType">
            <summary>
            Line type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LineDataEntity.Name">
            <summary>
            The name of the BaseLine.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LineDataEntity.Priority">
            <summary>
            Priority of the element
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LineDataEntity.Notes">
            <summary>
            Notes about the element
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LineDataEntity.Points">
            <summary>
            Points for the line
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.LineDataEntity.IsSelected">
            <summary>
            IsSelected
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.MaterialVolumeEnum">
            <summary>
            Material enum
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.MaterialVolumeEnum.Shrinkage">
            <summary>
            Shrinkage
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.MaterialVolumeEnum.HaulBulkage">
            <summary>
            Haul Bulkage
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.MaterialVolumeEnum.HaulCompaction">
            <summary>
            Haul Compaction
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.MaterialOptionsEnum">
            <summary>
            Options for material processing
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.MaterialOptionsEnum.None">
            <summary>
            Unspecified
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.MaterialOptionsEnum.Balanced">
            <summary>
            Balance cut and fill
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.MaterialOptionsEnum.ImportVolume">
            <summary>
            Balanced by import volume
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.MaterialOptionsEnum.ExportVolume">
            <summary>
            Balanced by export volume
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Repository.MaterialOptionsEnum.Free">
            <summary>
            No constraints
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.MaterialConstraint">
            <summary>
            Material model
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.MaterialConstraint.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MaterialConstraint.IsMaxCutDepthEnabled">
            <summary>
            Is the max cut depth constraint enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MaterialConstraint.ExportVolume">
            <summary>
                Export volume in material type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MaterialConstraint.Shrinkage">
            <summary>
                Material shrinkage
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MaterialConstraint.HaulBulkage">
            <summary>
                Material bulkage
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MaterialConstraint.HaulCompaction">
            <summary>
                Material Compaction
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MaterialConstraint.MaxCutDepth">
            <summary>
                Maximum cut depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MaterialConstraint.MaxFillHeight">
            <summary>
                Maximum fill height
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MaterialConstraint.IsMaxFillHeightEnabled">
            <summary>
            Is the max fill depth enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MaterialConstraint.CutFillRatio">
            <summary>
            Cut fill ratio
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MaterialConstraint.MaterialVolume">
            <summary>
            Material Volume
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MaterialConstraint.MaterialOption">
            <summary>
            Selected material options
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.MorphEntity">
            <summary>
                Morph entity base
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.MorphEntity.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MorphEntity.Id">
            <summary>
                ID for entity
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MorphEntity.Version">
            <summary>
                Morph build version
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.MorphEntity.UpdateVersionNumber">
            <summary>
                Update the version number to current build
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.ProjectEntity">
            <summary>
            Project entity
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ProjectEntity.Name">
            <summary>
                Display name for project
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ProjectEntity.Fields">
            <summary>
                List of fields in the project
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ProjectEntity.IsExpanded">
            <summary>
                Is expanded flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.ProjectEntity.IsSelected">
            <summary>
                Is selected flag
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.RowConstraint">
            <summary>
                Rows constraints
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.RowConstraint.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.RowConstraint.Orientation">
            <summary>
                Row orientation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.RowConstraint.Width">
            <summary>
                Row width
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.RowConstraint.MinSlope">
            <summary>
                Minimum slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.RowConstraint.MaxSlope">
            <summary>
                Maximum slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.RowConstraint.MaxChangeRate">
            <summary>
                Maximum slope rate change
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.RowConstraint.MaxDistanceRate">
            <summary>
                Rate change distance
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.SectionAreaEntity">
            <summary>
            Section area data
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SectionAreaEntity.CenterPoint">
            <summary>
             center point to lay the label on the section
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SectionAreaEntity.Area">
            <summary>
             Area of the closed polygon
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SectionAreaEntity.FixedPoints">
            <summary>
            Fixed points in this section area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SectionAreaEntity.Hinges">
            <summary>
            Hinges in this section area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SectionAreaEntity.PlaneInfo">
            <summary>
            Planar information
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SectionAreaEntity.IsCurrentArea">
            <summary>
            Currently selected area
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.SlopeConstraint">
            <summary>
            Slope model
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.SlopeConstraint.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SlopeConstraint.MinSlope">
            <summary>
                Minimum slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SlopeConstraint.MaxSlope">
            <summary>
                Maximum slope
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.SubZoneDataEntity">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZoneDataEntity.SubZoneType">
            <summary>
                SubZone Type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZoneDataEntity.Id">
            <summary>
                Unique Id for sub zone
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SubZoneDataEntity.IsFieldSubZone">
            <summary>
            IsFieldSubZone
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.Surface3DEntity">
            <summary>
            Surface 3D model
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.Surface3DEntity.Name">
            <summary>
                Name of the surface.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.Surface3DEntity.MinElevation">
            <summary>
                Minimum elevation.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.Surface3DEntity.MaxElevation">
            <summary>
                Maximum elevation.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.Surface3DEntity.Points">
            <summary>
                List of points (vertices's) in the surface.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.Surface3DEntity.Triangles">
            <summary>
                List of triangles in the surface.
                Each triangle consists of three consecutive indices that correspond to its vertices.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.Surface3DEntity.Boundary">
            <summary>
                Returns the <see cref="T:Morph.Services.Core.DataModel.Linestring" /> instance that defines the boundary of the surface.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.Surface3DEntity.SurfaceColor">
            <summary>
                Color of the surface material
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.Surface3DEntity.FmXGpsOrigin">
            <summary>
                GPS origin for FmX
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.WorkspaceEntity">
            <summary>
                Workspace model
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.WorkspaceEntity.Projects">
            <summary>
                List of projects in the workspace
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.WorkspaceEntity.IsExpanded">
            <summary>
                Is expanded flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.WorkspaceEntity.IsSelected">
            <summary>
                Is selected flag
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.SectionLine">
            <summary>
                Section line Class
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SectionLine.Id">
            <summary>
                Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SectionLine.Name">
            <summary>
                Gets or sets the name for the section line.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.SectionLine.points">
            <summary>
                Gets or sets the points for the line segment.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.MasterBenchmark">
            <summary>
                Class for the master benchmark
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MasterBenchmark.Benchmark">
            <summary>
                Benchmark data for the master benchmark
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MasterBenchmark.Latitude">
            <summary>
                Master benchmark latitude
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.MasterBenchmark.Longitude">
            <summary>
                Master benchmark longitude
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Repository.NameValuePair">
            <summary>
                Class to contain a name / value pairing
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.NameValuePair.#ctor">
            <summary>
                Default constructor for name value pair class
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Repository.NameValuePair.#ctor(System.String,System.Object)">
            <summary>
                Helper constructor for the name value pair class
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.NameValuePair.Name">
            <summary>
                Name for the object
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Repository.NameValuePair.Value">
            <summary>
                Value for the object
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Engine.BasinAreaConstraints">
            <summary>
            Basin area constraints used in Surface constraints for drainage calculation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BasinAreaConstraints.Id">
            <summary>
            Id of the area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BasinAreaConstraints.Name">
            <summary>
            Name of the area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BasinAreaConstraints.Vortex">
            <summary>
            Exit point
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BasinAreaConstraints.Boundary">
            <summary>
            Boundary constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BasinAreaConstraints.MinimumSlope">
            <summary>
            Minimum slope constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BasinAreaConstraints.MaximumSlope">
            <summary>
            Maximum slope constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BasinAreaConstraints.ExportVolume">
            <summary>
            Export volume constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BasinAreaConstraints.Shrinkage">
            <summary>
            Shrinkage constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BasinAreaConstraints.ShrinkageRatio">
            <summary>
            Shrinkage ratio
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BasinAreaConstraints.Bulkage">
            <summary>
            Bulkage constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BasinAreaConstraints.BulkageRatio">
            <summary>
            Bulkage ration
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BasinAreaConstraints.HaulCompactionRatio">
            <summary>
            Haul compaction ration
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Engine.BestFitInfo">
            <summary>
            Best fit info returned from engine
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BestFitInfo.Tag">
            <summary>
            Tag for the section area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BestFitInfo.Direction">
            <summary>
            Direction in degrees
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BestFitInfo.MainSlope">
            <summary>
            Main slope percentage
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.BestFitInfo.CrossSlope">
            <summary>
            Cross slope percentage
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints">
            <summary>
            Activity area constraints used in Surface constraints for drainage calculation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints.Id">
            <summary>
            Id of the area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints.Name">
            <summary>
            Name of the area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints.Boundary">
            <summary>
            Boundary constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints.MaxCutDepth">
            <summary>
            Maximum cut depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints.MaxFillHeight">
            <summary>
            Maximum fill height
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints.MinimumSlope">
            <summary>
            Minimum slope constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints.MaximumSlope">
            <summary>
            Maximum slope constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints.Shrinkage">
            <summary>
            Shrinkage constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints.ShrinkageRatio">
            <summary>
            Shrinkage ratio
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints.Bulkage">
            <summary>
            Bulkage constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints.BulkageRatio">
            <summary>
            Bulkage ration
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints.HaulCompactionRatio">
            <summary>
            Haul compaction ration
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ActivityAreaConstraints.ExportVolume">
            <summary>
            Export volume constraints
            0 = Balanced
            positive = export
            negative = import 
            Nan = free
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Engine.QAInputOutput.InputEngineLandFormingSubDesign">
            <summary>
            Land forming sub design inputs.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.QAInputOutput.InputEngineLandFormingSubDesign.ZonesConstraints">
            <summary>
            Zone constraints
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Engine.QAInputOutput.InputEngineLandFormingDrainage">
            <summary>
            Input data to calculation engine for land forming drainage
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.QAInputOutput.InputEngineLandFormingDrainage.SurfaceConstraints">
            <summary>
            Constraints for drainage
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Engine.QAInputOutput.InputEngineLandFormingIrrigation">
            <summary>
            Input data to calculation engine for land forming drainage
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.QAInputOutput.InputEngineLandFormingIrrigation.RowConstraints">
            <summary>
            Drainage design constraints
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Engine.QAInputOutput.InputEngineLandLevel">
            <summary>
            Inputs into level design
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.QAInputOutput.InputEngineLandLevel.Constraints">
            <summary>
            Input Plane constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.QAInputOutput.InputEngineLandLevel.ExclusionZones">
            <summary>
            List of exclusion zones
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.QAInputOutput.InputEngineLandLevel.ExportVolume">
            <summary>
            Export volume value
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Services.Engine.QAInputOutput.InputEngineLandLevel.#ctor">
            <summary>
            CTOR
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints">
            <summary>
            Sub zone constraints
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.Id">
            <summary>
            Sub zone id
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.Name">
            <summary>
            Sub zone name
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.SubZoneType">
            <summary>
            Sub zone type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.MaxCutDepth">
            <summary>
             max cut depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.MaxFillDepth">
            <summary>
             max fill depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.MinElevation">
            <summary>
            min elevation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.MaxElevation">
            <summary>
            max elevation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.MinMainSlope">
            <summary>
            min main slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.MaxMainSlope">
            <summary>
            max main slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.MaxMainRateChange">
            <summary>
            max main rate change
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.MinCrossSlope">
            <summary>
            min cross slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.MaxCrossSlope">
            <summary>
            max cross slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.MaxCrossRateChange">
            <summary>
            max cross rate change
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.Boundary">
            <summary>
            Sub zone boundary
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.ExportVolume">
            <summary>
            Export volume constraints
            0 = Balanced
            positive = export
            negative = import 
            Nan = free
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.Shrinkage">
            <summary>
            Shrinkage constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.ShrinkageRatio">
            <summary>
            Shrinkage ratio
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.Bulkage">
            <summary>
            Bulkage constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.BulkageRatio">
            <summary>
            Bulkage ration
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.HaulCompactionRatio">
            <summary>
            Haul compaction ration
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SubZoneConstraints.Orientation">
            <summary>
            Sub design area orientation
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Engine.ZoneConstraints">
            <summary>
            Zone constraints for the engine
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ZoneConstraints.ExportVolume">
            <summary>
            Export volume
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ZoneConstraints.Boundary">
            <summary>
            boundary
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ZoneConstraints.MainDirection">
            <summary>
            main direction
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ZoneConstraints.Resolution">
            <summary>
            resolution
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ZoneConstraints.ExclusionZones">
            <summary>
            exclusion zones
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ZoneConstraints.SubZoneConstraints">
            <summary>
            sub zone constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ZoneConstraints.Shrinkage">
            <summary>
            Shrinkage factor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ZoneConstraints.Bulkage">
            <summary>
            Bulkage factor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ZoneConstraints.TargetDitches">
            <summary>
            List of all ditches
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.ZoneConstraints.DitchConstraints">
            <summary>
            Ditch constraints
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Engine.DitchConstraints">
            <summary>
                Ditch constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.DitchConstraints.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.DitchConstraints.Name">
            <value>
                The name of the ditch.
            </value>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.DitchConstraints.MinimumSlope">
            <summary>
                The minimum slope of any triangle in the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.DitchConstraints.MaximumSlope">
            <summary>
                The maximum slope of any triangle in the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.DitchConstraints.Points">
            <summary>
            ditch points
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.DitchConstraints.CrossSectionProfile">
            <summary>
            Cross Section Profile
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.DitchConstraints.Depth">
            <summary>
            Ditch depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.DitchConstraints.BottomWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.DitchConstraints.Rise">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.DitchConstraints.Run">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.DitchConstraints.TransitionGap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.DitchConstraints.StampType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Engine.RowConstraints">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.Boundary">
            <summary>
            Surface boundary constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.RowsDirection">
            <summary>
            Direction heading for the rows
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.Resolution">
            <summary>
            Distance between rows
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.MinimumSlope">
            <summary>
            Minimum row slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.MaximumSlope">
            <summary>
            Maximum row slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.MaximumSlopeChange">
            <summary>
            Maximum row slope change
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.MinimumCrossSlope">
            <summary>
            Minimum row cross slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.MaximumCrossSlope">
            <summary>
            Maximum row cross slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.MaximumCrossSlopeChange">
            <summary>
            Maximum row cross slope change
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.Shrinkage">
            <summary>
            Shrinkage ration
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.Bulkage">
            <summary>
            Bulkage ration
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.Pipeline">
            <summary>
            Pipeline constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.MaxCutDepth">
            <summary>
            Maximum cut depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.ExclusionZones">
            <summary>
            ExclusionAreas
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.TargetDitches">
            <summary>
            List of all ditches
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.DitchConstraints">
            <summary>
            Ditch constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.RowConstraints.ExportVolume">
            <summary>
            Export volume constraints
            0 = Balanced
            positive = export
            negative = import 
            Nan = free
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints">
            <summary>
            Surface constraints for drainage calculation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.MaxCutDepth">
            <summary>
            Maximum cut depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.MaxFillHeight">
            <summary>
            Maximum fill height
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.Boundary">
            <summary>
            Boundary constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.Resolution">
            <summary>
            Resolution/sampling grid
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.MinimumSlope">
            <summary>
            Minimum slope constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.MaximumSlope">
            <summary>
            Maximum slope constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.Shrinkage">
            <summary>
            Shrinkage constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.ShrinkageRatio">
            <summary>
            Shrinkage ratio
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.Bulkage">
            <summary>
            Bulkage constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.BulkageRatio">
            <summary>
            Bulkage ration
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.HaulCompactionRatio">
            <summary>
            Haul compaction ration
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.TargetDitches">
            <summary>
            List of all ditches
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.ExclusionZones">
            <summary>
            Exclusion areas
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.ExportVolume">
            <summary>
            Export volume constraints
            0 = Balanced
            positive = export
            negative = import 
            Nan = free
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.AreaConstraints">
            <summary>
            Activity area constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.BasinAreaConstraints">
            <summary>
            Basin area constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Engine.SurfaceConstraints.DitchConstraints">
            <summary>
            Ditch constraints
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementDetails">
            <summary>
            Details record for application entitlements
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementDetails.Id">
            <summary>
            The record identification
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementDetails.LicenseType">
            <summary>
            A value which identifies the specific entitlement/license type.
            A 32-bit integer; can be one of the values for the 'licenseType' input parameter documented above.
            Valid values:
            Land Forming Application = 19
            Land Forming Expiring = 20
            Land Forming Unlimited = 21
            Land Level = 23
            GeoFence licenses 35-38
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementDetails.ResellerOrgId">
            <summary>
            The ID of the reseller org that purchased the entitlement/license from the store
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementDetails.PurchasedAmount">
            <summary>
            The total quantity of the particular license type that was purchased by the organization. 
            This is only relevant for entitlements for which consumption is to be tracked.
            An optional, 32-bit integer value. Only valid for consumption based entitlements/licenses.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementDetails.PurchasedUtc">
            <summary>
            The date/time that the license was purchased from the store
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementDetails.IsDemo">
            <summary>
            A flag indicating whether the entitlement is for a demo license
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementDetails.PartNumber">
            <summary>
            The part number for this entitlement/license
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementDetails.EffectiveUtc">
            <summary>
            The date/time that the entitlement became effective, i.e. the date/time the license was transferred thus creating the entitlement.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementDetails.ExpirationUtc">
            <summary>
            The date/time that the entitlement expires.
                - Only valid for entitlements with expiration intervals.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementDetails.OrgId">
            <summary>
            The ID of the org to which the entitlement belongs
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementDetails.IsExpired">
            <summary>
            A flag indicating whether the entitlement has expired
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementDetails.ConsumedAmount">
            <summary>
            The total quantity of the particular license type that has been consumed by the organization. 
            This is only relevant for entitlements for which consumption is to be tracked.
            An optional, 32-bit integer value. Only valid for consumption based entitlements/licenses.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementSummary">
            <summary>
            The response class for Get Application entitlement summary
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementSummary.LicenseType">
            <summary>
            A value which identifies the specific entitlement/license type, within the specified application type, for which the summary is being provided
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementSummary.Count">
            <summary>
            A count of the number of entitlements/licenses of the specified type within the organization.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementSummary.PurchasedAmount">
            <summary>
            The total quantity of the particular license type that was purchased by the organization. 
            This is only relevant for entitlements for which consumption is to be tracked.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationEntitlementSummary.ConsumedAmount">
            <summary>
            The total quantity of the particular license type that has been consumed by the organization. 
            This is only relevant for entitlements for which consumption is to be tracked.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.ApplicationFeatureList">
            <summary>
            Holds an array of feature codes.
            Currently supports Land forming 300 and Land leveling 301
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationFeatureList.FeatureList">
            <summary>
            Array of feature codes
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.RemainingUsagesSummary">
            <summary>
             Gets a summary or remaining usages
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.RemainingUsagesSummary.FeatureCode">
            <summary>
            The license feature code
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.RemainingUsagesSummary.Summary">
            <summary>
            Array of summaries
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.RemainingEntitlementsSummary">
            <summary>
            Reports on the remaining acres avaialble for an organization
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.RemainingEntitlementsSummary.FeatureCode">
            <summary>
                This is the integer equivalent of LandForming
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.RemainingEntitlementsSummary.AmountRemaining">
            <summary>
                This is integer value of acres remaining for the organization
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.RemainingEntitlementsSummary.NextUsageExpiryUtc">
            <summary>
            This could be null coming from the server so that is why it is nullable
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.RemainingEntitlementsSummary.NextUsageExpiryAmount">
            <summary>
            This could be null coming from the server so that is why it is nullable
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.FileContentResponse">
            <summary>
            Handles downloading the contents of a Field Level file.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.FileContentResponse.FileContents">
            <summary>
                The file contents
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.FileContentResponse.ResultCode">
            <summary>
                The result of the field level file read
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.FileListResponse">
            <summary>
            List of files from Connected Farm
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.FileListResponse.FileList">
            <summary>
                List of the files
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.FileListResponse.ResultCode">
            <summary>
                The result of the entitlement usage request
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Services.Licensing.FileListResponse.#ctor">
            <summary>
            CTOR
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.LicenseWebException">
            <summary>
            This handle returning the important bits from a WebException
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LicenseWebException.StatusCode">
            <summary>
            The HttpStatusCode return in WebException
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LicenseWebException.Message">
            <summary>
            The HTTP response 'Message:
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.Summary">
            <summary>
            Summary of all of the usages
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Summary.Type">
            <summary>
            Types of restrictions
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Summary.AmountRemaining">
            <summary>
            Amount of remaining area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Summary.NextUsageExpiryUtc">
            <summary>
            This could be null coming from the server so that is why it is nullable
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Summary.NextUsageExpiryAmount">
            <summary>
            This could be null coming from the server so that is why it is nullable
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.ApplicationFeaturesInformation">
            <summary>
            Application features information
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationFeaturesInformation.FeatureCode">
            <summary>
                The feature code.  ie. LandLeveling
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.ApplicationFeatureUsageRequest">
            <summary>
            Supports the reporting of application feature usage
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ApplicationFeatureUsageRequest.FeatureUsageList">
            <summary>
            List of usage records
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.EntitlementsConsumedInformation">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementsConsumedInformation.ConfirmationId">
            <summary>
                Confirmation ID (Guid)
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementsConsumedInformation.AreaAmount">
            <summary>
                This is the area size ie. 25 acres
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementsConsumedInformation.AreaGeometry">
            <summary>
                This is the GeoJson in string format
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementsConsumedInformation.ExpirationUtc">
            <summary>
                Expiration date for the area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementsConsumedInformation.GrantedUtc">
            <summary>
                Granted date, in UTC
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementsConsumedInformation.ModificationDuration">
            <summary>
            This is the number of days that the fiedl can be modified
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.EntitlementUsage">
            <summary>
                Class to use when purchaing areas.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementUsage.FeatureCode">
            <summary>
                This is the integer equivalent of LandFormingExpiringArea or LandFormingUnlimitedArea.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementUsage.UsageAmount">
            <summary>
                This is integer value of acres needed
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementUsage.UsageArea">
            <summary>
                This is GeoJson data for the area to purchase
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementUsage.LastGrantedUtc">
            <summary>
            This is the last granted date from my cache.
            ACDC will tell me if I have stale data.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.EntitlementUsageConfirmation">
            <summary>
                Entitlement usage request confirmation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementUsageConfirmation.ConfirmationId">
            <summary>
                Confirmation ID (Guid)
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementUsageConfirmation.ExpirationUtc">
            <summary>
                Expiration date for the area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementUsageConfirmation.GrantedUtc">
            <summary>
                Granted date, in UTC
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.EntitlementUsageConfirmation.ModificationDuration">
            <summary>
            This is the number of days that the fiedl can be modified
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.Feature">
            <summary>
                GeoJson Feature class
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Feature.Type">
            <summary>
                Feature type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Feature.Geometry">
            <summary>
                Feature geometry type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Feature.Properties">
            <summary>
                Property bag specific to purchase areas
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.FeatureCollection">
            <summary>
                GeoJson Feature collection class
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.FeatureCollection.Type">
            <summary>
                Type of feature collection
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.FeatureCollection.Features">
            <summary>
                Array of GeoJson features
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.FeatureUsage">
            <summary>
            Class the define the feature usage record
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.FeatureUsage.FeatureCode">
            <summary>
            Land leveleveling of land forming
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.FeatureUsage.StartUtc">
            <summary>
            Starting UTC of the usage
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.FeatureUsage.EndUtc">
            <summary>
            Ending UTC of the usage.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.Geometry">
            <summary>
                GeoJson geometry class
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Geometry.Type">
            <summary>
                Geometry Type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Geometry.Coordinates">
            <summary>
                Linestring double multi-dimension array
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.LoginRequest">
            <summary>
            Used to login into ACDC
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LoginRequest.UserName">
            <summary>
            Description: The identifier for the User.
            Business Rules: The Trimble SSO username.
            Required: Yes
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LoginRequest.Password">
            <summary>
            Description: The Users password.
            Business Rules: The Trimble SSO password.
            Required: Yes
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LoginRequest.ApplicationName">
            <summary>
            Description: The name of the client application
            Business Rules: This application name must be registered with ACDC
            Required: Yes
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LoginRequest.ApplicationId">
            <summary>
            This is the ID (Guid for this machine and the software).
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.LoginResponse">
            <summary>
            Login response class returned from ACDC
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LoginResponse.AccessToken">
            <summary>
            Access token.  Used in a subsequent call to select an organization          
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LoginResponse.Organizations">
            <summary>
            This is a list of organizations the user belongs to.  
            A dictionary of Organization
                Business rule:
                This list will be returned only if the user's authentication was successful 
                but they have access to multiple orgs. In this case the user must be asked 
                to select an organization since tokens apply to a single organization
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LoginResponse.PrimaryOrgId">
            <summary>
            This is the organization ID , this is used by Morph as part of the key to the user cache
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LoginResponse.ExternalOrgIdentifier">
            <summary>
            This is used as the encryption mask for an organization.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LoginResponse.BrandName">
            <summary>
            Brand Name - Need more information about this.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.OrganizationIdentification">
            <summary>
            This handles organiztion identification
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.OrganizationIdentification.Id">
            <summary>
                Organization ID
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.OrganizationIdentification.Name">
            <summary>
                Organization name
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.Properties">
            <summary>
                GeoJson property bag class
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Properties.ExpirationDate">
            <summary>
                Expiration data for the purchased area
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Properties.ExclusionAreas">
            <summary>
                Exclusion areas within the boundary
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Properties.Area3D">
            <summary>
            Sum of the 3D areas of all triangles after clipping the parent surface using the boundary and the exclusion zones.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Properties.TotalAcres">
            <summary>
            The is the total acres
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.Registration">
            <summary>
            Use to register application and device info to ACDC
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Registration.ApplicationId">
            <summary>
            Unique GUID for the device/application
            Required
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Registration.ApplicationName">
            <summary>
            Application name 
            Required
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Registration.SoftwareVersion">
            <summary>
            Morph Software Version
            Required
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Registration.SoftwareBuildNumber">
            <summary>
            Morph Software build number
            Optional
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Registration.HardwareName">
            <summary>
            Hardware name
            Optional
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Registration.HardwareSn">
            <summary>
            MAC Address
            Optional
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Registration.HardwareType">
            <summary>
            Hardware type
            Optional
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Registration.HardwareModelName">
            <summary>
            HardwareModelName
            Optional
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.Registration.HardwareOsName">
            <summary>
            OS name 
            Optional
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Services.Licensing.Registration.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Services.Licensing.Registration.Equals(Morph.Contracts.DataContracts.Services.Licensing.Registration)">
            <summary>
            Check for equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.RegistrationResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.RegistrationResponse.AccessToken">
            <summary>
            Access tokenreturned from registration
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.ResponseResultCode">
            <summary>
            This is a simple JSON to NET class for result codes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.ResponseResultCode.ResultCode">
            <summary>
                Result code in the response
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.WebExceptionResponse">
            <summary>
                This is the JSON that is returned in WebException HTTP response
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.WebExceptionResponse.Message">
            <summary>
                Message in the HTTP response
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.WebExceptionResponse.ExceptionMessage">
            <summary>
                Exception Message
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.SelectOrganizationResponse">
            <summary>
            Select organization response from ACDC
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.SelectOrganizationResponse.AccessToken">
            <summary>
            Access token.  Used in a subsequent calls for an organization          
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.SelectOrganizationResponse.BrandName">
            <summary>
            Brand Name - Need more information about this.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.Licensing.LicenseInfo">
            <summary>
                Contains mock license information for testing
                
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LicenseInfo.IsEvalMode">
            <summary>
                Flag for eval mode
                if not eval mode then is perpetual
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LicenseInfo.EvalExpirationDate">
            <summary>
                Eval expiration date
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LicenseInfo.TotalCredits">
            <summary>
                Total number of purchased credits
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LicenseInfo.MaintenanceExpiration">
            <summary>
                Maintenance expiration date
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LicenseInfo.DoesLandLevelingRequireCredits">
            <summary>
                Land leveling requires credits flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LicenseInfo.DoesLandFormingRequireCredits">
            <summary>
                Land forming requires credits flag
                Support drainage and irrigation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LicenseInfo.IsLandLevelingFeatureEnabled">
            <summary>
                Land leveling feature enabled flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LicenseInfo.IsLandFormingFeatureEnabled">
            <summary>
                Land forming feature enabled flag
                Support drainage and irrigation
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.Licensing.LicenseInfo.RegisteredId">
            <summary>
                Unique registration ID.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.TPASS.TokenResp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.TokenResp.Success">
            <summary>
            Success or failure of the token request
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.TokenResp.Message">
            <summary>
            Error message on failure
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.TokenResp.AccessToken">
            <summary>
            Access token
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.TokenResp.TokenType">
            <summary>
            Token type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.TokenResp.ExpiresIn">
            <summary>
            Expires in (seconds)
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.TokenResp.RefreshToken">
            <summary>
            Refresh token
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.TPASS.ExpressOrderResp">
            <summary>
            Get Oders from TPASS
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.ExpressOrderResp.ExpressOrder">
            <summary>
            Express Order
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.TPASS.OrderResp">
            <summary>
            Get Oders from TPASS
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.OrderResp.Status">
            <summary>
            Executing/Finished/Failed
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.OrderResp.DownLoadFiles">
            <summary>
            Success or failure of the token request
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.OrderResp.Token">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.OrderResp.ProcessingId">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.TPASS.DownLoadFilesResp">
            <summary>
            TPASS Order file download
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.DownLoadFilesResp.Name">
            <summary>
            Name of the file
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.DownLoadFilesResp.MD5">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.DownLoadFilesResp.URL">
            <summary>
            download url of the file
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.DownLoadFilesResp.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.DownLoadFilesResp.Compressed">
            <summary>
            Is it compressed file
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.DownLoadFilesResp.UploadedAt">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.DownLoadFilesResp.FileSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.TPASS.Rootobject">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.Rootobject.express_order">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.TPASS.Express_Order">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.Express_Order.dataset_token">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.Express_Order.Params">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Services.TPASS.Params">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.Params.north">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.Params.south">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.Params.east">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.Params.west">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.Params.tiles_cache_type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.Params.tiles_client_id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.Params.tiles_zoom_level">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.Params.geocrop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.Params.tiles_service_api_key">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Services.TPASS.Params.tiles_service_source_token">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.SurfaceInfo">
            <summary>
            Data contract for surface info
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.SurfaceInfo.Boundary">
            <summary>
                List of 2D points for the surface boundary
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.SurfaceInfo.Points">
            <summary>
                3D Point collection of surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.SurfaceInfo.Triangles">
            <summary>
                Triangle indices's for the surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.SurfaceInfo.Name">
            <summary>
                Name for the surface
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.LastToggleSelectedEnum">
            <summary>
            Last toggle selected for nav reports
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.LastToggleSelectedEnum.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.LastToggleSelectedEnum.DesignEditor">
            <summary>
            Design editor
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.LastToggleSelectedEnum.QuoteReport">
            <summary>
            Quote report
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.LastToggleSelectedEnum.CutFillReport">
            <summary>
            Cut fill report
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.LastToggleSelectedEnum.DesignReport">
            <summary>
            Design report
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.LastToggleSelectedEnum.VolumetricReport">
            <summary>
            Volumetric report
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.LastToggleSelectedEnum.ProposedDesignView">
            <summary>
            Proposed design view
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.LastToggleSelectedEnum.ConstraintsReportView">
            <summary>
            Constraints report view
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.LastToggleSelectedEnum.MultiPageSummaryReportView">
            <summary>
            Mult page summary report
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.NavigationParams">
            <summary>
            Navigation parameters
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.NavigationParams.ProjectGuid">
            <summary>
            Project guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.NavigationParams.ProjectName">
            <summary>
            Project name
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.NavigationParams.FieldGuid">
            <summary>
            Field guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.NavigationParams.FieldName">
            <summary>
            Field name
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.NavigationParams.DesignGuid">
            <summary>
            Design guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.NavigationParams.DesignName">
            <summary>
            Design name
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.NavigationParams.IterationGuid">
            <summary>
            Iteration guid
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.NewFieldInfo">
            <summary>
            Contains information required to create a new field
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.NewFieldInfo.FilePath">
            <summary>
            Path to the field file
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.NewFieldInfo.FieldName">
            <summary>
            Name of the field
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.NewFieldInfo.FieldDesignType">
            <summary>
            Field design type
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.NewFieldInfo.MultiPlaneSettings">
            <summary>
            Settings for the MultiPlane import
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.NewProjectInfo">
            <summary>
            Information for new project
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.NewProjectInfo.#ctor(Morph.Contracts.DataContracts.NewFieldInfo)">
            <summary>
            Importing constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.NewProjectInfo.NewFieldInfo">
            <summary>
            Information for creating a field
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.NewProjectInfo.ProjectName">
            <summary>
            Name for the project
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Shape">
            <summary>
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Shape.ShapeType">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Shape.ShapeType.NullShape">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Shape.ShapeType.Point">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Shape.ShapeType.PolyLine">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Shape.ShapeType.Polygon">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Shape.ShapeType.MultiPoint">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Shape.ShapeType.PointZ">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Shape.ShapeType.PolyLineZ">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Shape.ShapeType.PolygonZ">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Shape.ShapeType.MultuPointZ">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Shape.ShapeType.PointM">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Shape.ShapeType.PolyLineM">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Shape.ShapeType.MultiPointM">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.DataContracts.Shape.ShapeType.MultiPatch">
            <summary>
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Shape.ShapeFile">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFile.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFile.FileHeader">
            <summary>
            Gets or sets the file header.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFile.Records">
            <summary>
            Gets or sets the records.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFile.ShapeRecordsAttributes">
            <summary>
            Gets or sets the shape records attributes.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Shape.ShapeRecord">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeRecord.ShapeType">
            <summary>
            Gets or sets the type of the shape.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeRecord.Box">
            <summary>
            Gets or sets the box.
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Shape.ShapeRecord.#ctor(Morph.Contracts.DataContracts.Shape.ShapeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Morph.Contracts.DataContracts.Shape.ShapeRecord"/> class.
            </summary>
            <param name="shapeType">Type of the shape.</param>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeRecord.Points">
            <summary>
            Gets or sets the points.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeRecord.LineStrings">
            <summary>
            Gets or sets the line strings.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeRecord.RecordNumber">
            <summary>
            Gets or sets the record number.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Shape.BoundingBox">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.BoundingBox.XMin">
            <summary>
            Gets or sets the x minimum.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.BoundingBox.YMin">
            <summary>
            Gets or sets the y minimum.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.BoundingBox.XMax">
            <summary>
            Gets or sets the x maximum.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.BoundingBox.YMax">
            <summary>
            Gets or sets the y maximum.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Shape.ShapeFileHeader">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFileHeader.FileCode">
            <summary>
            Gets or sets the file code.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFileHeader.FileLength">
            <summary>
            Gets or sets the length of the file.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFileHeader.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFileHeader.ShapeType">
            <summary>
            Gets or sets the type of the shape.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFileHeader.BoundingBoxXmin">
            <summary>
            Gets or sets the bounding box Xmin value.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFileHeader.BoundingBoxYmin">
            <summary>
            Gets or sets the bounding box Ymin value.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFileHeader.BoundingBoxXmax">
            <summary>
            Gets or sets the bounding box Xmax value.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFileHeader.BoundingBoxYmax">
            <summary>
            Gets or sets the bounding box Ymax value.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFileHeader.BoundingBoxZmin">
            <summary>
            Gets or sets the bounding box Zmin value.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFileHeader.BoundingBoxZmax">
            <summary>
            Gets or sets the bounding box Zmax value.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFileHeader.BoundingBoxMmin">
            <summary>
            Gets or sets the bounding box Mmin value.
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Shape.ShapeFileHeader.BoundingBoxMmax">
            <summary>
            Gets or sets the bounding box Mmax value.
            </summary>
        </member>
        <member name="T:Morph.Contracts.DataContracts.Surface3D">
            <summary>
                Defines a 3d surface for the Morph application
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Surface3D.SurfaceBoundary">
            <summary>
                Boundary created the surface was created
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Surface3D.SurfaceColor">
            <summary>
                Surface color
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Surface3D.Points">
            <summary>
                3D Point collection of surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Surface3D.Triangles">
            <summary>
                Triangle indices's for the surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Surface3D.Name">
            <summary>
                Name for the surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Surface3D.MinElevation">
            <summary>
                Minimum elevation for the surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Surface3D.MaxElevation">
            <summary>
                Maximum elevation for the surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Surface3D.Boundary">
            <summary>
                List of 2D points for the surface boundary
            </summary>
        </member>
        <member name="P:Morph.Contracts.DataContracts.Surface3D.FmXGpsOrigin">
            <summary>
                Origin for Fmx device
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Surface3D.Clone">
            <summary>
                Clone this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Surface3D.Close">
            <summary>
                Close the instance
            </summary>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Surface3D.GetQuickContours(System.Double)">
            <summary>
                Get contours over a range of elevations
            </summary>
            <param name="elevInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.DataContracts.Surface3D.GetContourLines(System.Boolean,System.Double,System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Media.Media3D.Point3D}}@,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            
            </summary>
            <param name="bFullRange"></param>
            <param name="toDefault"></param>
            <param name="contourPoints"></param>
            <param name="exclusionAreas"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.ConstraintsEvent">
            <summary>
            Print event
            </summary>
        </member>
        <member name="T:Morph.Contracts.ConstraintsInfo">
            <summary>
            Info for print event
            </summary>
        </member>
        <member name="P:Morph.Contracts.ConstraintsInfo.FieldGuid">
            <summary>
            Field Guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.ConstraintsInfo.DesignGuid">
            <summary>
            Design guid for iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.ConstraintsInfo.SelectedSection">
            <summary>
            Optional selected section
            </summary>
        </member>
        <member name="P:Morph.Contracts.ConstraintsInfo.IterationGuid">
            <summary>
            Optional iteration guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.ConstraintsInfo.IsInitOnly">
            <summary>
            Flag to inform if its for initialization
            </summary>
        </member>
        <member name="P:Morph.Contracts.ConstraintsInfo.AddedSections">
            <summary>
            Names of added sections; LL only
            </summary>
        </member>
        <member name="P:Morph.Contracts.ConstraintsInfo.DeletedSections">
            <summary>
            Names of deleted sections; LL only
            </summary>
        </member>
        <member name="P:Morph.Contracts.ConstraintsInfo.ChangedSections">
            <summary>
            Names of changed sections; LL only
            </summary>
        </member>
        <member name="P:Morph.Contracts.ConstraintsInfo.RenamedSection">
            <summary>
            Names of renamed section; null if no section was renamed. LL only.
            Item1: Old name. Item2: New name.
            </summary>
        </member>
        <member name="P:Morph.Contracts.ConstraintsInfo.ForceRecalc">
            <summary>
            Force a recalculation - land leveling only
            </summary>
        </member>
        <member name="P:Morph.Contracts.ConstraintsInfo.IsIncludedChanged">
            <summary>
            Set when include / exclude has changed
            </summary>
        </member>
        <member name="P:Morph.Contracts.ConstraintsInfo.IsIncluded">
            <summary>
            Include state for section area
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ApplicationBusyEvent">
            <summary>
            Application busy event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ApplicationBusyInfo">
            <summary>
            Payload for the ApplicationBusyEvent
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ApplicationBusyInfo.IsBusy">
            <summary>
            Is application busy
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ApplicationBusyInfo.Message">
            <summary>
            Message associated with the event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ClipboardAction">
            <summary>
            Clipboard action type
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.ClipboardAction.Cut">
            <summary>
            Cut
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.ClipboardAction.Copy">
            <summary>
            Copy
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.ClipboardAction.Paste">
            <summary>
            Paste
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ConstraintClipboardEvent">
            <summary>
            Constraint clipboard event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ConstraintClipboardInfo">
            <summary>
            Info for print event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ConstraintClipboardInfo.Action">
            <summary>
            Clipboard action (cut/copy or paste)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ConstraintClipboardInfo.DataFormat">
            <summary>
            Data format for clipboard
            Get from ClipboardDataFormats
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ConstraintClipboardInfo.FieldGuid">
            <summary>
            Field Guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ConstraintClipboardInfo.DesignGuid">
            <summary>
            Design guid for iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ConstraintClipboardInfo.IterationGuid">
            <summary>
            Optional iteration guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ConstraintClipboardInfo.SectionName">
            <summary>
            Section name when the field type is land leveling
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ErasedPointsEvent">
            <summary>
            Erased points event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ErasedPointsInfo">
            <summary>
            Info for print event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ErasedPointsInfo.Points">
            <summary>
            points to be erased
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ErasedPointsInfo.FieldGuid">
            <summary>
            Field guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ErasedPointsInfo.DesignGuid">
            <summary>
            Design guid for iteration
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ChangeStrokeThicknessEvent">
            <summary>
            Update Strokethickness event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.StrokeSizeInfo">
            <summary>
            Info for stroke size event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.StrokeSizeInfo.Thickness">
            <summary>
            thickness of the stroke
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.StrokeSizeInfo.FieldGuid">
            <summary>
            Field guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.StrokeSizeInfo.DesignGuid">
            <summary>
            Design guid for iteration
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.LaserHeadingChangeEvent">
            <summary>
            Laser heading change event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.LaserHeadingInfo">
            <summary>
            Laser heading info class
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.LaserHeadingInfo.LaserHeading">
            <summary>
            Laser heading associated with the event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ExplorerItemRenamedEvent">
            <summary>
                Explorer Item renamed event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ExplorerItemRenamedEventInfo">
            <summary>
                Payload for Explorer Item renamed
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ExplorerItemRenamedEventInfo.IterationGuid">
            <summary>
                Iteration guid 
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ExplorerItemRenamedEventInfo.FieldGuid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ExplorerItemRenamedEventInfo.DesignGuid">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.LegendColorSelectionEvent">
            <summary>
                Legend color selection event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.LegendColorSelectionEventInfo">
            <summary>
                Payload for LegendColorSelectionEvent
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.LegendColorSelectionEventInfo.SelectedAnalysisTool">
            <summary>
             selected tools to change the legend color for
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.SelectedDitchEvent">
            <summary>
                Ditch selection changed event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.SelectedDitchInfo">
            <summary>
                Payload for SelectedDitchEvent
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.IterationGuid">
            <summary>
                Iteration guid containing the section area
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.CutVolume">
            <summary>
            Cut volumes
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.FillVolume">
            <summary>
            Fill volumes
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.NetVolume">
            <summary>
            Net Volumes
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.NetText">
            <summary>
            Net Volume Text
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.MinSlope">
            <summary>
            Min. slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.HasMinSlope">
            <summary>
            Has some min slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.MaxSlope">
            <summary>
            Max slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.HasMaxSlope">
            <summary>
            Has some min slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.Depth">
            <summary>
            Depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.HasDepth">
            <summary>
            Has some depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.BottomWidth">
            <summary>
            Bottom Width
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.HasBottomWidth">
            <summary>
            Has some depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.Rise">
            <summary>
            Rise
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.Run">
            <summary>
            Run
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.TransitionGap">
            <summary>
            Transition Gap
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.HasTransitionGap">
            <summary>
            Has some depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.StampType">
            <summary>
            ditch stamp type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.CutFillNotAvailable">
            <summary>
            Cut Fill Volumes not available on design surface flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.CalculatingCutFill">
            <summary>
            flag to show progress bar
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SelectedDitchInfo.IsDefaultProfile">
            <summary>
            Is default profile
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.StampDitchEvent">
            <summary>
            Stamp Ditch event event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.StampDitchEventInfo">
            <summary>
            Info for stamp ditch event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.StampDitchEventInfo.Id">
            <summary>
            Ditch id used to locate ditch
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.StampDitchEventInfo.IterationGuid">
            <summary>
            Iteration for the ditch stamp
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.SelectedIterationChangedEvent">
            <summary>
            Selected iteration changed event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.SelectedIterationChangedInfo">
            <summary>
            Selected iteration changed info
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.UpdateBackgroundMapEvent">
            <summary>
            Update background map event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.UpdateBackgroundMapInfo">
            <summary>
            Info for Update background map event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UpdateBackgroundMapInfo.IterationGuid">
            <summary>
            Current editor iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UpdateBackgroundMapInfo.FieldGuid">
            <summary>
            Matching field
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.UpdateVortexPointEvent">
            <summary>
                Update vortex point event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.UpdateVortexPointEventInfo">
            <summary>
                Payload for Vortex point
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UpdateVortexPointEventInfo.IterationGuid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UpdateVortexPointEventInfo.VortexPoint">
            <summary>
            Vortex point
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UpdateVortexPointEventInfo.Id">
            <summary>
            Basin id
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.UpdateHingeEvent">
            <summary>
                Rename section area event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.UpdateHingeEventInfo">
            <summary>
                Payload for SectionAreaEvent
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UpdateHingeEventInfo.IterationGuid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UpdateHingeEventInfo.Hinges">
            <summary>
            Hinge constraint values engine
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.SourceSettings">
            <summary>
            Source of Settings
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.SourceSettings.Editor">
            <summary>
            Editor settings
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.SourceSettings.Report">
            <summary>
            Report settings 
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.SourceSettings.None">
            <summary>
            None settings
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.HideShowSettingsDialogEvent">
            <summary>
            Hide Show event for settings dialog
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.SettingsDialogInfo">
            <summary>
            settings dialog info
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SettingsDialogInfo.Source">
            <summary>
            Source of the settings
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SettingsDialogInfo.Visibility">
            <summary>
            Visibility
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.EditorSettingsContextChangedEvent">
            <summary>
            DataContext changed event for settings dialog
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.SettingsDataContextInfo">
            <summary>
            Settings Data Context info
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SettingsDataContextInfo.Source">
            <summary>
            Source of the settings
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SettingsDataContextInfo.DataContext">
            <summary>
            Data context for the settings dialog
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ExplorerItemChangedEvent">
            <summary>
            Event for currently selected item changed event in the explorer view
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ExplorerItemChanged">
            <summary>
            Payload for the ExplorerItemChangedEvent
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ExplorerItemChanged.SelectedItem">
            <summary>
            Currently selected item in the explorer view
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ExportEnabledEvent">
            <summary>
            Used to indicate that the state of the export enable boolean has updated
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ExportEnableInfo">
            <summary>
            Class that supports the export enable event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ExportEnableInfo.IsEnabled">
            <summary>
            Is export enabled?
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.IterationActionRequestEvent">
            <summary>
            Print event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.IterationActions">
            <summary>
            Iteration actions enumeration
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.IterationActions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.IterationActions.Delete">
            <summary>
            Delete action
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.IterationActions.Rename">
            <summary>
            Rename action
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.IterationActionInfo">
            <summary>
            Info for print event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.IterationActionInfo.Action">
            <summary>
            Requested action
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.IterationActionInfo.IterationGuid">
            <summary>
            Iteration for the action
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.IterationActionInfo.DesignGuid">
            <summary>
            Design guid for the action
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.IterationActionInfo.NewName">
            <summary>
            Used for rename action
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.LoginEvent">
            <summary>
             This event is sent out each time we log in.
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.LoginInfo">
            <summary>
            Logged information
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.LoginInfo.Username">
            <summary>
            User name for who logged in
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.LoginInfo.OrganizationId">
            <summary>
            Selected organization
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.LoginInfo.OrganizationName">
            <summary>
            Organization name
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ProjectLoadSaveEvent">
            <summary>
                Event local to this view model.
                Used to close the view's window
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.ProjectLoadSaveInfo">
            <summary>
                Info for the load / save event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.ProjectLoadSaveInfo.IsCloseRequested">
            <summary>
                Request to close window
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.SectionAreaSelectionChangedEvent">
            <summary>
                Section area selection changed event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.SectionAreaSelectionInfo">
            <summary>
                Payload for SectionAreaSelectionChangedEvent
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SectionAreaSelectionInfo.CurrentSectionName">
            <summary>
                Current section name
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SectionAreaSelectionInfo.IterationGuid">
            <summary>
                Iteration guid containing the section area
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.SectionAreaRenamedEvent">
            <summary>
                Section area renamed event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.SectionAreaRenamedInfo">
            <summary>
                Payload for Section area renamed event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SectionAreaRenamedInfo.OldName">
            <summary>
                Old section name
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SectionAreaRenamedInfo.NewName">
            <summary>
                New section name
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SectionAreaRenamedInfo.IterationGuid">
            <summary>
                Iteration guid containing the section area
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SectionAreaRenamedInfo.FieldGuid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.SectionAreaRenamedInfo.DesignGuid">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.UserSettingsEvent">
            <summary>
                User settings changed event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.UserSettingsInfo">
            <summary>
                Payload for user settings event
            </summary>
        </member>
        <member name="M:Morph.Contracts.Events.UserSettingsInfo.#ctor(System.Collections.Generic.List{Morph.Contracts.Events.UserSettingsChangeTypeEnum})">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UserSettingsInfo.CategoriesChanged">
            <summary>
                Categories that were changed
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UserSettingsInfo.HaveUnitsChanged">
            <summary>
                Have units changed flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UserSettingsInfo.HaveGeneralChanged">
            <summary>
                Have general settings changed flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UserSettingsInfo.HaveMaterialsChanged">
            <summary>
                Have materials settings changed flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UserSettingsInfo.HaveReportsChanged">
            <summary>
                Have reports settings changed flag
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.UserSettingsChangeTypeEnum">
            <summary>
                User settings change type enumeration
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.UserSettingsChangeTypeEnum.Unknown">
            <summary>
                Unknown
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.UserSettingsChangeTypeEnum.Units">
            <summary>
                Units setting
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.UserSettingsChangeTypeEnum.Reports">
            <summary>
                Report settings
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.UserSettingsChangeTypeEnum.Folders">
            <summary>
                Folder settings
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.UserSettingsChangeTypeEnum.Materials">
            <summary>
                Material settings
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.UserSettingsChangeTypeEnum.General">
            <summary>
                General settings
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.PurchaseEvent">
            <summary>
            Purchase event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.PurchaseInfo">
            <summary>
            Purchase event payload
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.PurchaseInfo.ProjectGuid">
            <summary>
            Project guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.PurchaseInfo.FieldGuid">
            <summary>
            Field guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.PurchaseInfo.IterationGuid">
            <summary>
            Iteration for the print
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.PurchaseInfo.DesignGuid">
            <summary>
            Design guid for iteration
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.UpdateDesignEvent">
            <summary>
            Print event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.UpdateDesignInfo">
            <summary>
            Info for design update event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UpdateDesignInfo.FieldGuid">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.UpdateFieldEvent">
            <summary>
            Print event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.UpdateFieldInfo">
            <summary>
            Info for field update event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.UpdateFieldInfo.FieldGuid">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.PrintEvent">
            <summary>
            Print event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.PrintInfo">
            <summary>
            Info for print event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.PrintInfo.PrintView">
            <summary>
            View for the print
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.PrintInfo.IterationGuid">
            <summary>
            Iteration for the print
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.PrintInfo.DesignGuid">
            <summary>
            Design guid for iteration
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.TaskStatusEvent">
            <summary>
                Task status event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.TaskTypeEnum">
            <summary>
            Task types
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.TaskTypeEnum.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.TaskTypeEnum.Calculation">
            <summary>
            Calculation task
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.TaskTypeEnum.UserInterface">
            <summary>
            User interface task
            </summary>
        </member>
        <member name="F:Morph.Contracts.Events.TaskTypeEnum.Export">
            <summary>
            Export task
            </summary>
        </member>
        <member name="T:Morph.Contracts.Events.TaskStatusInfo">
            <summary>
                Task status info
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.TaskStatusInfo.TaskType">
            <summary>
            Type of task executing
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.TaskStatusInfo.ProjectGuid">
            <summary>
            Project guid for the task
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.TaskStatusInfo.FieldGuid">
            <summary>
            Field guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.TaskStatusInfo.DesignGuid">
            <summary>
            Design guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.TaskStatusInfo.IterationGuid">
            <summary>
            Optional iteration guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.TaskStatusInfo.TaskName">
            <summary>
                Name for the task
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.TaskStatusInfo.TaskGuid">
            <summary>
                Guid for this task
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.TaskStatusInfo.IsRunning">
            <summary>
                Is running flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.Events.TaskStatusInfo.IsLandLeveling">
            <summary>
            Is this a land leveling calculation
            </summary>
        </member>
        <member name="T:Morph.Contracts.Exceptions.InvalidHeaderFormatException">
            <summary>
                Invalid header format exception
            </summary>
        </member>
        <member name="M:Morph.Contracts.Exceptions.InvalidHeaderFormatException.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Morph.Contracts.Exceptions.InvalidHeaderFormatException.#ctor(System.String)">
            <summary>
                Constructor with message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Morph.Contracts.Exceptions.InvalidHeaderFormatException.#ctor(System.String,System.Exception)">
            <summary>
                Constructor with message and inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Morph.Contracts.Exceptions.InvalidHeaderFormatException.#ctor(System.String,System.String)">
            <summary>
                Constructor with message and file path
            </summary>
            <param name="message"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:Morph.Contracts.Exceptions.InvalidHeaderFormatException.#ctor(System.String,System.Exception,System.String)">
            <summary>
                Constructor with message, inner exception and file path
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <param name="filePath"></param>
        </member>
        <member name="P:Morph.Contracts.Exceptions.InvalidHeaderFormatException.FilePath">
            <summary>
                Path to file with bad header information
            </summary>
        </member>
        <member name="T:Morph.Contracts.Exceptions.InvalidLicenseException">
            <summary>
            Invalid license exception.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Exceptions.InvalidLicenseException.#ctor">
            <summary>
                Default Constructor
            </summary>
        </member>
        <member name="M:Morph.Contracts.Exceptions.InvalidLicenseException.#ctor(System.String)">
            <summary>
                Constructor with message
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Morph.Contracts.Exceptions.OrganizationMismatchException">
            <summary>
                Organization mismatch exception
            </summary>
        </member>
        <member name="M:Morph.Contracts.Exceptions.OrganizationMismatchException.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Morph.Contracts.Exceptions.OrganizationMismatchException.#ctor(System.String)">
            <summary>
                Constructor with message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Morph.Contracts.Exceptions.OrganizationMismatchException.#ctor(System.String,System.Exception)">
            <summary>
                Constructor with message and inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Morph.Contracts.Exceptions.OrganizationMismatchException.#ctor(System.String,System.Int32)">
            <summary>
                Constructor with org name and org id
            </summary>
        </member>
        <member name="M:Morph.Contracts.Exceptions.OrganizationMismatchException.#ctor(System.String,System.String,System.Int32)">
            <summary>
                Constructor with message, org name and org id
            </summary>
        </member>
        <member name="P:Morph.Contracts.Exceptions.OrganizationMismatchException.OrgName">
            <summary>
                Organization name
            </summary>
        </member>
        <member name="P:Morph.Contracts.Exceptions.OrganizationMismatchException.OrgId">
            <summary>
                Organization ID
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IAnalysisToolSettings">
            <summary>
            Analysis tools
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.CellSize">
            <summary>
            Cell size
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.SlopeDirection">
            <summary>
            slope direction
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ShowElevations">
            <summary>
            Show elevation map
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ShowGrayScale">
            <summary>
            Show gray scale map
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ShowBlackSurface">
            <summary>
            Show black surface map
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ShowSurfaceSlopes">
            <summary>
            Show surface slopes
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ShowDrainageSlopes">
            <summary>
            Show drainage slopes
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ShowMainSlope">
            <summary>
            Show main slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ShowCrossSlope">
            <summary>
            Show cross slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ShowDrainageViolations">
            <summary>
            Show drainage violations
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ShowPonding">
            <summary>
            Show surface ponding
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ShowWaterSheds">
            <summary>
            Show water sheds
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ShowCutFillViolations">
            <summary>
            Show cut fill violations
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ShowCutFillMap">
            <summary>
            Show cut fill map
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ShowFlowPaths">
            <summary>
            Show surface flow paths
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IAnalysisToolSettings.ToolSettings">
            <summary>
            Tool Settings
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IToolSettings">
            <summary>
            Individual tool settings
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IToolSettings.IsInitialized">
            <summary>
            is this tool initialized
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IToolSettings.Surface">
            <summary>
            selected surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IToolSettings.AnalysisTool">
            <summary>
            this tool type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IToolSettings.LowerValue">
            <summary>
            selected lower value
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IToolSettings.UpperValue">
            <summary>
            selected upper value
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IConstraintsViewSettings">
            <summary>
            Interface for constraint view settings
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IConstraintsViewSettings.UseIndependentAreaCalculation">
            <summary>
            Use independent area calculation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IConstraintsViewSettings.LaserHeading">
            <summary>
            Laser heading
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IConstraintsViewSettings.UseAutoBestFit">
            <summary>
            Use auto best fit when running calculations
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IConstraintsViewSettings.UseAccordion">
            <summary>
            Use accordion feature
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.TPASS.ITrimbleDataExpressService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.TPASS.ITrimbleDataExpressService.GetAccessToken">
            <summary>
            Get TpassAccessToken
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.TPASS.ITrimbleDataExpressService.GetExpressDataSet(System.String)">
            <summary>
            Get TpassAccessToken (Don't need if it's always imagery we are interested in)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.TPASS.ITrimbleDataExpressService.SubmitExpressOrder(System.Double,System.Double,System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Submit mapping order to express api
            </summary>
            <param name="north"></param>
            <param name="south"></param>
            <param name="east"></param>
            <param name="west"></param>
            <param name="accessToken"></param>
            <param name="zoomLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.TPASS.ITrimbleDataExpressService.GetExpressOrder(System.String,System.String)">
            <summary>
            Get Express Order using the orderId (token received when order was submitted) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.TPASS.ITrimbleDataExpressService.DownloadAndWriteExpressOrderToDisk(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="url"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.TPASS.ITrimbleDataExpressService.GetStitchedMapImage(System.String,System.Windows.Point@,System.Int32,System.Windows.Point@,Core.Contracts.Interfaces.IOrigin)">
            <summary>
            Get stitched map image
            </summary>
            <param name="fileName"></param>
            <param name="position"></param>
            <param name="zoomLevel"></param>
            <param name="mapWorldeLocation"></param>
            <param name="fmXGpsOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.TPASS.ITrimbleDataExpressService.ConvertWorldPointsToDecimalDegrees(Core.Contracts.Interfaces.IOrigin,System.Collections.Generic.List{System.Windows.Point},System.Collections.Generic.List{System.Windows.Point}@)">
            <summary>
            Convert points from world coordinates to decimal degree coordinates.
            </summary>
            <param name="fmXGpsOrigin">Fmx origin data.</param>
            <param name="worldPoints">Points in world coordinates. Units are in meters.</param>
            <param name="decimalDegreePoints">Points in decimal degree coordinates.</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.TPASS.ITrimbleDataExpressService.MapScaleFactor(System.Int32,System.Double)">
            <summary>
            Length, in meters, of a pixel for a given resolution background image at a given latitude.
            This gives the amount to scale an image tile based on its zoom level and latitude.
            </summary>
            <param name="zoomLevel"></param>
            <param name="latitude"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints">
            <summary>
                Interface for ditch constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints.Name">
            <value>
                The name of the ditch.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints.MinimumSlope">
            <summary>
                The minimum slope of any triangle in the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints.MaximumSlope">
            <summary>
                The maximum slope of any triangle in the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints.Points">
            <summary>
            List of 3D points for the ditch
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints.CrossSectionProfile">
            <summary>
            Cross Section Profile
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints.BottomWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints.Rise">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints.Run">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints.TransitionGap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints.StampType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.IBasinAreaConstraints">
            <summary>
                Interface for basin area constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IBasinAreaConstraints.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IBasinAreaConstraints.Name">
            <value>
                The name of the section.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IBasinAreaConstraints.Vortex">
            <summary>
            Exit point
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IBasinAreaConstraints.Boundary">
            <summary>
                The boundary that defines the limits of the design surface.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IBasinAreaConstraints.MinimumSlope">
            <summary>
                The minimum slope of any triangle in the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IBasinAreaConstraints.MaximumSlope">
            <summary>
                The maximum slope of any triangle in the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IBasinAreaConstraints.ExportVolume">
            <summary>
            Export volume constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IBasinAreaConstraints.Shrinkage">
            <summary>
            Shrinkage constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IBasinAreaConstraints.ShrinkageRatio">
            <summary>
            Shrinkage ratio
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IBasinAreaConstraints.Bulkage">
            <summary>
            Bulkage constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IBasinAreaConstraints.BulkageRatio">
            <summary>
            Bulkage ratio
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IBasinAreaConstraints.HaulCompactionRatio">
            <summary>
            Haul compaction ratio
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints">
            <summary>
                Interface for activity area constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints.Name">
            <value>
                The name of the section.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints.Boundary">
            <summary>
                The boundary that defines the limits of the design surface.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints.ExportVolume">
            <summary>
            Export volume constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints.MaxCutDepth">
            <summary>
            Maximum cut depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints.MaxFillHeight">
            <summary>
            Maximum fill height
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints.MinimumSlope">
            <summary>
                The minimum slope of any triangle in the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints.MaximumSlope">
            <summary>
                The maximum slope of any triangle in the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints.Shrinkage">
            <summary>
                The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints.ShrinkageRatio">
            <summary>
                The factor to convert from bank cut volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints.Bulkage">
            <summary>
                The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints.BulkageRatio">
            <summary>
                The factor to convert from bank cut volumes to loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IActivityAreaConstraints.HaulCompactionRatio">
            <summary>
                The factor use to compute from loose haul volumes to bank fill volumes.
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.IDitchManagerService">
            <summary>
            Interface for the ditch manager service.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.IDitchManagerService.Init(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}})">
            <summary>
            Initialize class instance
            </summary>
            <param name="lines"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.IDitchManagerService.ValidDitches">
            <summary>
            Return output ditches
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.IDitchManagerService.DitchSegments">
            <summary>
            Unordered list of segments participating in ditches
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.IEngineComputations">
            <summary>
            Utility class to uses formulas in Service.Core
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IEngineComputations.Shrinkage">
            <summary>
            The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IEngineComputations.Bulkage">
            <summary>
            The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IEngineComputations.HaulCompaction">
            <summary>
            The percentage volume reduction between loose haul and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IEngineComputations.CutFillRatio">
            <summary>
            The factor use to compute from bank fill volumes to bank cut volumes.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.IEngineComputations.ComputeHaulCompaction(System.Double,System.Double)">
            <summary>
            Computes haul compaction from the given shrinkage and bulkage.
            </summary>
            <param name="shrinkage">The shrinkage percentage value between 0 and 99.</param>
            <param name="bulkage">The bulkage percentage value between 0 and 99.</param>
            <returns>Compaction as a double.</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.IEngineComputations.ComputeShrinkage(System.Double,System.Double)">
            <summary>
            Computes shrinkage from the given bulkage and haul compaction.
            </summary>
            <param name="bulkage">The shrinkage percentage value between 0 and 99.</param>
            <param name="haulCompaction">The bulkage percentage value between 0 and 99.</param>
            <returns>Shrinkage as a double.</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.IEngineComputations.ComputeBulkage(System.Double,System.Double)">
            <summary>
            Computes bulkage from the given haul compaction and shrinkage.
            </summary>
            <param name="haulCompaction">The bulkage percentage value between 0 and 99.</param>
            <param name="shrinkage">The shrinkage percentage value between 0 and 99.</param>
            <returns>Bulkage as a double.</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.IEngineComputations.ComputeCompactionBulkageShrinkage(System.Double)">
            <summary>
            Computes compaction, bulkage and shrinkage from cut fill ratio
            </summary>
            <param name="cutFillratio">The cut fill ratio value</param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.IExportCutSheetReportAsHTML">
            <summary>
                Interface to Export to HTML Data
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.IExportCutSheetReportAsHTML.ExportAsHTMLFile(System.String,Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.ISurface3D,System.String,System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},System.Double,System.Boolean,System.Boolean,System.Boolean,System.Predicate{System.Double})">
            <summary>
                Export the GPS data to a file
            </summary>
            <param name="filename">export file name</param>
            <param name="original">original surface</param>
            <param name="cutFill"></param>
            <param name="proposed">proposed surface</param>
            <param name="fieldName"></param>
            <param name="exclusionAreas">exclusion areas of the original surface</param>
            <param name="subAreaBoundaries">Sub Area boundaries of result surface</param>
            <param name="gridCellSize"></param>
            <param name="showExisting">Show existing elevation</param>
            <param name="showDesign">Show design elevation</param>
            <param name="showCutFill">Show cut fill elevation</param>
            <param name="onProgress"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints">
            <summary>
                Sub zone constraint for the engine
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.Id">
            <summary>
                ID for the constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.Boundary">
            <summary>
                Boundary for the sub zone
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.Name">
            <value>
                The name of the section.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.SubZoneType">
            <summary>
                Sub zone type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.MaxCutDepth">
            <summary>
                Max cut depth sub zone.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.MaxFillDepth">
            <summary>
                Max fill depth sub zone.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.MinElevation">
            <summary>
                Minimum elevation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.MaxElevation">
            <summary>
                Maximum elevation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.MinMainSlope">
            <summary>
                Min slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.MaxMainSlope">
            <summary>
                Max slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.MaxMainRateChange">
            <summary>
                Max rate of change
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.MinCrossSlope">
            <summary>
                Min slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.MaxCrossSlope">
            <summary>
                Max slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.MaxCrossRateChange">
            <summary>
                Max rate of change
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.ExportVolume">
            <summary>
            Export volume constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.Shrinkage">
            <summary>
                The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.ShrinkageRatio">
            <summary>
                The factor to convert from bank cut volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.Bulkage">
            <summary>
                The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.BulkageRatio">
            <summary>
                The factor to convert from bank cut volumes to loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.HaulCompactionRatio">
            <summary>
                The factor use to compute from loose haul volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISubZoneConstraints.Orientation">
            <summary>
            Sub design area orientation
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.IZoneConstraints">
            <summary>
                Sub zone constraints for the engine
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IZoneConstraints.Shrinkage">
            <summary>
                Shrinkage factor
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IZoneConstraints.Bulkage">
            <summary>
                Bulkage factor
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IZoneConstraints.Boundary">
            <summary>
                Boundary for zone
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IZoneConstraints.ExportVolume">
            <summary>
                Export volume
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IZoneConstraints.MainDirection">
            <summary>
                Main direction
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IZoneConstraints.Resolution">
            <summary>
                Resolution
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IZoneConstraints.ExclusionZones">
            <summary>
                Exclusion zones
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IZoneConstraints.SubZoneConstraints">
            <summary>
                List of all sub zone constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IZoneConstraints.TargetDitches">
            <summary>
                The points that defines the target ditches.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IZoneConstraints.DitchConstraints">
            <summary>
            Ditch constraints
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.IGpsData">
            <summary>
                Interface for GPS data
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.IGpsData.ExportGpsToFile(System.String,Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.ISurface3D,Core.Contracts.Interfaces.IOrigin,System.Double,System.Double,System.String,Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel,Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel,System.Boolean,System.Double,System.Predicate{System.Double})">
            <summary>
                Export the GPS data to a file
            </summary>
            <param name="filename">export file name</param>
            <param name="original">original surface</param>
            <param name="cutFill"></param>
            <param name="proposed">proposed surface</param>
            <param name="origin">field origin</param>
            <param name="rotationAngle"></param>
            <param name="boundaryExtension"></param>
            <param name="fieldName"></param>
            <param name="designEditorViewModel"></param>
            <param name="designResultsViewModel"></param>
            <param name="isHighRes"></param>
            <param name="gridCellSize"></param>
            <param name="onProgress"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.IGpsData.InitValues(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Init values related to export file size.
            </summary>
            <param name="proposed"></param>
            <param name="designEditorViewModel"></param>
            <param name="rotationCenter"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.IGpsData.MinCellSize(System.Boolean,System.Nullable{System.Double},System.Double,Morph.Contracts.Interfaces.ISurface3D,System.Double@,System.Int32@,System.Double@)">
            <summary>
            Any cell size less than this will cause the GpsData to overflow the maximum allowed space
            </summary>
            <param name="isHighRes"></param>
            <param name="rotationAngle"></param>
            <param name="boundaryExtension"></param>
            <param name="proposed"></param>
            <param name="outMaxCellSize"></param>
            <param name="headerBytes"></param>
            <param name="numPoints"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.IPurchaseManagerService">
            <summary>
            Interface for the purchase list service
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.IPurchaseManagerService.QueryPurchase(System.Collections.Generic.List{Morph.Services.Core.DataModel.PurchaseArea},Morph.Services.Core.Interfaces.ISurfaceInfo,Morph.Services.Core.DataModel.Linestring,System.Collections.Generic.List{Morph.Services.Core.DataModel.Linestring},System.Double@)">
            <summary>
            Given previous purchases and a new area to own (boundary + list of exclusion zones),
            returns a list of new purchases to make in order to achieve ownership of new area.
            Boundary and exclusionZones are in surface's local coordinates (n, e), previousPurchases and actualPurchase are in global (lon, lat).
            Return value will be an empty list if new area is already owned.
            </summary>
            <param name="previousPurchases"></param>
            <param name="surface"></param>
            <param name="boundary">Current purchase boundary</param>
            <param name="exclusionZones">Current purchase exclusion zones</param>
            <param name="areaToPurchase"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.IPurchaseManagerService.LocatePurchaseAreasForField(System.Collections.Generic.List{Morph.Services.Core.DataModel.PurchaseArea},Morph.Services.Core.Interfaces.ISurfaceInfo)">
            <summary>
            Given previous purchases and an original surface return a list of purchases (expired or not) within that field.
            Return value will be an empty list if new area is already owned.
            </summary>
            <param name="previousPurchases"></param>
            <param name="surface"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints">
            <summary>
                Row constraints for the irrigation calculation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.ExportVolume">
            <summary>
            Export volume constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.MaxCutDepth">
            <summary>
            Maximum cut depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.Boundary">
            <summary>
                The that defines the limits of the design surface.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.RowsDirection">
            <summary>
                The Cartesian angle in radians of the irrigation rows.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.Resolution">
            <summary>
                The nominal distance between irrigation rows.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.MinimumSlope">
            <summary>
                The minimum slope of any triangle in the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.MaximumSlope">
            <summary>
                The maximum slope along the irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.MaximumSlopeChange">
            <summary>
                The maximum slope change along the irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.MinimumCrossSlope">
            <summary>
                The minimum slope across irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.MaximumCrossSlope">
            <summary>
                The maximum slope across irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.MaximumCrossSlopeChange">
            <summary>
                The maximum slope change across irrigation rows. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.Shrinkage">
            <summary>
                The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.Bulkage">
            <summary>
                The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.Pipeline">
            <summary>
                The line string that defines the pipeline (water source) for the irrigation rows.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.ExclusionZones">
            <summary>
            Exclusion areas
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.TargetDitches">
            <summary>
                The points that defines the target ditches.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints.DitchConstraints">
            <summary>
            Ditch constraints
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.ISectionManagerService">
            <summary>
            Interface for the section manager service.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ISectionManagerService.AddLine(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            Add section line
            </summary>
            <param name="linestring"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ISectionManagerService.AddArea(System.String,Morph.Services.Core.DataModel.Linestring)">
            <summary>
            Add section area
            </summary>
            <param name="name"></param>
            <param name="linestring"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ISectionManagerService.AddExclusionZone(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            Add exclusion zone
            </summary>
            <param name="linestring"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ISectionManagerService.AddBoundary(Morph.Services.Core.DataModel.Linestring)">
            <summary>
            Add field boundary
            </summary>
            <param name="linestring"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ISectionManagerService.AddHinge(System.Object,Morph.Services.Core.DataModel.Linestring3D)">
            <summary>
            Add hinge
            </summary>
            <param name="hingeVm"></param>
            <param name="linestring">3D 2-point linestring. Both Z's are NaN, or none are.</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ISectionManagerService.Build(System.Collections.Generic.Dictionary{System.String,Morph.Services.Core.DataModel.Linestring}@,System.Collections.Generic.Dictionary{Morph.Services.Core.DataModel.Linestring3D,System.Object}@,System.Collections.Generic.List{Morph.Services.Core.DataModel.Linestring3D}@,System.Tuple{System.String,System.String}@)">
            <summary>
            Build new section areas from section lines. Try to match to old ones. Process hinges. Reject those that intersect other hinges.
            </summary>
            <param name="outAreas"></param>
            <param name="outHinges"></param>
            <param name="outRejectedHinges"></param>
            <param name="nameChanges"></param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISectionManagerService.BadAreas">
            <summary>
            Areas rejected by section builder. Nested section areas.
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService">
            <summary>
                Interface for the land leveling service
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.EnableCutFillGPU">
            <summary>
            Enable GPU computation of cut/fill.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.CreateSurface(System.String,System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Double)">
            <summary>
                Create a surface from points
            </summary>
            <param name="name">surface name</param>
            <param name="points">points for the surface</param>
            <param name="triangles">The list of triangle indices (must be a multiple of 3)</param>
            <param name="boundary">2D points for the surface boundary</param>
            <param name="exclusions">exclusion areas in the surface</param>
            <param name="maxEdgeLength">max edge length for boundary</param>
            <returns>the generated surface</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.ImportSurface(System.String)">
            <summary>
                Import a surface from a .dxf file
            </summary>
            <param name="dxfFileName">input .dxf file name</param>
            <returns>the generated surface</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.ComputeSurface(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints,System.Predicate{System.Single},Morph.Contracts.Interfaces.ISurface3D@,Morph.Contracts.Interfaces.ISurface3D@)">
            <summary>
                Computes the best surface fit within the specified boundary.
            </summary>
            <param name="originalSurface">The original surface</param>
            <param name="constraints">The surface constraints instance.</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage.</param>
            <param name="proposedSurface">Output of the proposed surface</param>
            <param name="cutFillSurface">Output of the cut fill surface</param>
            <returns>An instance of <see cref="T:Morph.Contracts.Interfaces.ISurface3D" /> with the result surface.</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.ComputeDrainage(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints,System.Predicate{System.Single},Morph.Contracts.Interfaces.ISurface3D@,Morph.Contracts.Interfaces.ISurface3D@)">
            <summary>
                Computes the drainage design (combination of ditch, activity, basin areas, etc).
            </summary>
            <param name="originalSurface">The original surface</param>
            <param name="constraints">The surface constraints instance.</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage.</param>
            <param name="proposedSurface">Output of the proposed surface</param>
            <param name="cutFillSurface">Output of the cut fill surface</param>
            <returns>An instance of <see cref="T:Morph.Contracts.Interfaces.ISurface3D" /> with the result surface.</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.CompareSurfaces(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints,System.Predicate{System.Single},Morph.Contracts.Interfaces.ISurface3D@,Morph.Contracts.Interfaces.ISurface3D@)">
            <summary>
                Computes the drainage design (combination of ditch, activity, basin areas, etc).
            </summary>
            <param name="originalSurface">The original surface</param>
            <param name="designSurface">The original surface</param>
            <param name="constraints">The surface constraints instance.</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage.</param>
            <param name="proposedSurface">Output of the proposed surface</param>
            <param name="cutFillSurface">Output of the cut fill surface</param>
            <returns>An instance of <see cref="T:Morph.Contracts.Interfaces.ISurface3D" /> with the result surface.</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.ComputeIrrigation(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints,System.Predicate{System.Single},Morph.Contracts.Interfaces.ISurface3D@,Morph.Contracts.Interfaces.ISurface3D@)">
            <summary>
                Computes the best surface fit within the specified boundary.
            </summary>
            <param name="originalSurface">The original surface</param>
            <param name="constraints">The irrigation (rows) constraints instance.</param>
            <param name="progressCallback">Progress callback delegate. Reports percentage.</param>
            <param name="proposedSurface">Output of the proposed surface</param>
            <param name="cutFillSurface">Output of the cut fill surface</param>
            <returns>An instance of <see cref="T:Morph.Contracts.Interfaces.ISurface3D" /> with the result surface.</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.CreateSurfaceInfo(System.String,System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}})">
            <summary>
                Create and ISurfaceInfo from points
            </summary>
            <param name="name">Surface name</param>
            <param name="points">Surface points</param>
            <param name="triangles">The list of triangle indices (must be a multiple of 3)</param>
            <param name="boundary">Surface boundary</param>
            <param name="exclusions"></param>
            <returns>ISurfaceInfo containing the surface results</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.ComputePlanes(Morph.Contracts.Interfaces.ISurface3D,System.Collections.Generic.IList{Morph.Services.Core.Interfaces.PlanesConstraints},System.Collections.Generic.List{Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints},System.Double,System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Predicate{System.Single},Morph.Contracts.Interfaces.ISurface3D@,Morph.Contracts.Interfaces.ISurface3D@)">
            <summary>
                Compute planes
            </summary>
            <param name="originalSurface">Original surface</param>
            <param name="constraints">constraints</param>
            <param name="ditchConstraints">constraints</param>
            <param name="exclusionZones">exclusion zones</param>
            <param name="progressCallback">progress callback</param>
            <param name="proposedSurface">output proposed surface</param>
            <param name="cutFillSurface">output cut fill surface</param>
            <param name="exportVolume">0 = Balanced, positive = export, negative = import, NaN = free</param>
            <returns>design generated by the engine</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.ComputeBestFitPlanes(Morph.Contracts.Interfaces.ISurface3D,System.Collections.Generic.IList{Morph.Services.Core.Interfaces.PlanesConstraints},System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Double)">
            <summary>
            
            </summary>
            <param name="originalSurface"></param>
            <param name="sections"></param>
            <param name="exclusionZones"></param>
            <param name="exportVolume"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.ComputeZones(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.Services.Engine.IZoneConstraints,System.Predicate{System.Single},Morph.Contracts.Interfaces.ISurface3D@,Morph.Contracts.Interfaces.ISurface3D@)">
            <summary>
                Compute zones
            </summary>
            <param name="originalSurface">Original surface</param>
            <param name="constraints">Zone constraints</param>
            <param name="progressCallback">Progress callback</param>
            <param name="proposedSurface">output proposed surface</param>
            <param name="cutFillSurface">output cut fill surface</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.Get3DArea(Morph.Contracts.Interfaces.ISurface3D,Morph.Services.Core.DataModel.Linestring,System.Collections.Generic.List{Morph.Services.Core.DataModel.Linestring})">
            <summary>
            Clip surface to boundary and exclusion zones, then add up the 3D areas of all triangles in clipped surface.
            </summary>
            <param name="surface"></param>
            <param name="boundary"></param>
            <param name="exclusionZones"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.ParseEngineException(System.Exception)">
            <summary>
            Parse out the exceptions from the engine
            </summary>
            <param name="exeception"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.GetBestFitInfo(System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Plane})">
            <summary>
            Convert list of Plane info to Best fit info
            </summary>
            <param name="planeInfoList">list of Plane returned from the engine</param>
            <returns>list of BestFitInfo converted from Plane and normalized</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.MergeSurfaces(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.ISurface3D,System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Linestring},System.Predicate{System.Single},System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Linestring},System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Merges two surfaces based on the specified areas (expressed in linestrings)
            </summary>
            <param name="sourceSurface">The source surface.</param>
            <param name="targetSurface">The target surface.</param>
            <param name="areas">Areas to be merged from the target surfaces.</param>
            <param name="progressCallback">progress callback</param>
            <param name="exclusionZones">An enumeration of exclusion zones. May be <c>null</c>.</param>
            <param name="boundary">Expected boundary of resultant surface.</param>        
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.ComputeCutFillVolumes(Morph.Contracts.Interfaces.ISurface3D,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Compute cut fill volumes on a given surface
            </summary>
            <param name="sourceSurface"></param>
            <param name="area"></param>
            <param name="bulkageRatio"></param>
            <param name="haulCompactionRatio"></param>
            <param name="totalCut"></param>
            <param name="totalFill"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILandLevelingService.ComputeDitchCutFill(Morph.Contracts.Interfaces.ISurface3D,System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Compute ditch cut fill volumes
            </summary>
            <param name="sourceSurface"></param>
            <param name="ditchLine"></param>
            <param name="crossSection"></param>
            <param name="totalCut"></param>
            <param name="totalFill"></param>
            <param name="minSlope"></param>
            <param name="maxSlope"></param>
            <param name="gap"></param>
            <param name="bulkageRatio"></param>
            <param name="haulCompactionRatio"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.ILinestring">
            <summary>
                Interface for Linestring
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ILinestring.Segments">
            <summary>
                Returns a list of all segments in the linestring.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ILinestring.Centroid">
            <summary>
                Returns the centroid of this instance.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ILinestring.Area">
            <summary>
                Returns the signed area of this instance.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILinestring.FindClosestPoint(System.Windows.Point)">
            <summary>
                Returns the point on the linestring closest to the specified query point.
            </summary>
            <param name="query">the query point</param>
            <returns>the closest point</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILinestring.FindIntersection(System.Windows.Point,System.Double,System.Windows.Point@)">
            <summary>
                Finds the intersection of a semi-line with this linestring.
            </summary>
            <param name="point">The origin of the semi-line.</param>
            <param name="direction">The angle of the semi-line.</param>
            <param name="result">The intersection point (if any)</param>
            <returns><c>true</c> if an intersection is found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ILinestring.ToString">
            <summary>
                Convert to a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.ISegment">
            <summary>
                Interface for segment
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISegment.Point1">
            <summary>
            First point
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISegment.Point2">
            <summary>
            Second point
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISegment.Direction">
            <summary>
                The normal vector in the direction of this segment.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISegment.Normal">
            <summary>
                The normal vector towards the right side of this segment.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISegment.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISegment.DeltaX">
            <summary>
            Delta X
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISegment.DeltaY">
            <summary>
            Delta Y
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISegment.Angle">
            <summary>
            Angle
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ISegment.FindIntersection(System.Windows.Point,System.Double,System.Windows.Point@)">
            <summary>
                Returns the intersection of a semi-line and this segment.
            </summary>
            <param name="point">the origin of the semi-line</param>
            <param name="angle">the angle of the semi-line</param>
            <param name="result">the intersection point (if any)</param>
            <returns><c>true</c> if there is an intersection; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ISegment.FindIntersection(Morph.Contracts.Interfaces.Services.Engine.ISegment,System.Windows.Point@)">
            <summary>
                Returns the intersection of this segment with the given segment.
            </summary>
            <param name="segment">the other segment</param>
            <param name="result">the intersection point (if any)</param>
            <returns><c>true</c> if there is an intersection; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ISegment.Distance(System.Windows.Point)">
            <summary>
                Returns the distance between the given point and this segment.
            </summary>
            <param name="point">the point</param>
            <returns>The distance</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ISegment.OrthogonalDistance(System.Windows.Point)">
            <summary>
                Returns the signed distance between the given query point and this segment.
            </summary>
            <param name="point">The query point.</param>
            <returns>The signed distance: positive to the right of the segment and negative to the left of the segment.</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ISegment.FindClosestPoint(System.Windows.Point)">
            <summary>
                Returns the point in the segment that is closest to the given point.
            </summary>
            <param name="point">the input point</param>
            <returns>the result point</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Engine.ISegment.ToString">
            <summary>
            Convert to string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints">
            <summary>
                Interface for surface constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.ExportVolume">
            <summary>
            Export volume constraint
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.MaxCutDepth">
            <summary>
            Maximum cut depth
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.MaxFillHeight">
            <summary>
            Maximum fill height
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.Boundary">
            <summary>
                The boundary that defines the limits of the design surface.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.Resolution">
            <summary>
            Resolution/sampling grid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.MinimumSlope">
            <summary>
                The minimum slope of any triangle in the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.MaximumSlope">
            <summary>
                The maximum slope of any triangle in the design surface. Use <c>NaN</c> for undefined.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.Shrinkage">
            <summary>
                The percentage volume reduction between bank cut and bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.ShrinkageRatio">
            <summary>
                The factor to convert from bank cut volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.Bulkage">
            <summary>
                The percentage volume expansion between bank cut and loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.BulkageRatio">
            <summary>
                The factor to convert from bank cut volumes to loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.HaulCompactionRatio">
            <summary>
                The factor use to compute from loose haul volumes to bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.TargetDitches">
            <summary>
                The points that defines the target ditches.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.ExclusionZones">
            <summary>
            Exclusion areas
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.AreaConstraints">
            <summary>
            Area constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.BasinAreaConstraints">
            <summary>
            Area constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints.DitchConstraints">
            <summary>
            Ditch constraints
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Licensing.ILicenseWebClient">
            <summary>
            C# WebClient support interface
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicenseWebClient.UploadString(System.String,System.String,System.String)">
            <summary>
            This method supports the C# WebClient UploadString via a post.
            </summary>
            <param name="url"></param>
            <param name="jsonInput"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicenseWebClient.DownloadString(System.String,System.String)">
            <summary>
            This method supports the C# WebClient DownloadString
            </summary>
            <param name="url"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicenseWebClient.UploadFile(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Uploads a file to the server using UploadFile 'POST'
            </summary>
            <param name="url"></param>
            <param name="file"></param>
            <param name="bearerToken"></param>
            <param name="queryValues"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Licensing.IComplexPolygon">
            <summary>
                Area for licensing
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Licensing.FeaturesEnum">
            <summary>
                Licensed product features
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Licensing.FeaturesEnum.LandLeveling">
            <summary>
                Land leveling feature
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Licensing.FeaturesEnum.LandForming">
            <summary>
                Land forming feature
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Licensing.FeaturesEnum.LandFormingIrrigation">
            <summary>
                Land forming irrigation feature
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Licensing.FeaturesEnum.LandFormingDrainage">
            <summary>
                Land forming drainage feature
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Licensing.FeaturesEnum.LandFormingSubZones">
            <summary>
            SubZones design feature
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Licensing.ILicensing">
            <summary>
                Interface for the product licensing
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.DeleteRegistrationFile">
            <summary>
            Force delete of the registrtation file
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.ShouldDeleteRegistrationFile">
            <summary>
            Should the registration file be deleted
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.TestMachineLicenseValidity(System.Boolean@)">
            <summary>
            Test to ensure license if for the machine
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.RemoveCache">
            <summary>
            Remove and clear out the cache
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.IsEvalMode">
            <summary>
                Is the product in evaluation mode
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.IsEvalExpired">
            <summary>
                Has eval expired?
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.IsUserLoggedIn">
            <summary>
                Is the current user logged into the cloud
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.IsUserLoggedInToOrganization">
            <summary>
                Are we currently online to an organization.
            </summary>
            <returns>true is online otherwise false</returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.CurrentUser">
            <summary>
                Returns current user
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.CurrentPassword">
            <summary>
                Returns current logged in user's password
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.FindSsoUser(System.String)">
            <summary>
            Tries to find a user in the cache based off of their SSO Username.
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.CurrentOrganizations">
            <summary>
                Return the dictionary of organizations for the current user.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.CurrentOrganization">
            <summary>
                Get Current organization
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.CurrentOrganizationId">
            <summary>
            Get Current organization Id
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.PreviousOrganizationId">
            <summary>
            Get previous organization Id
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.LicenseFeatureNames">
            <summary>
                Returns the license features names
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.GetActivationDate">
            <summary>
                Returns the activation date for the current user/org.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.IsActivated">
            <summary>
                Is the license activated.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.GetTotalAcreasPurchased">
            <summary>
                Get the total amount of acres purchased for the currently logged in user.
                Exceptions are thrown if not successful.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.GetRemainingAcreas">
            <summary>
                Get the remaining amount of acres for the currently logged in user.
                Exceptions are thrown if not successful.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.IsLicenseValid">
            <summary>
            If we detect a license file issue we set this bool to false
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.IsLicensed">
            <summary>
            If we detect a that a user is not licensed (via the login or org selection)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.UseLastGrantUtc">
            <summary>
            Use the last granted UTC
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.TestUrl">
            <summary>
                Test Url
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.UseTestUrl">
            <summary>
                Use the test url
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.QueryEvalExpirationDate(System.DateTime@)">
            <summary>
                Date the evaluation expires
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.NumberOfDaysInEval">
            <summary>
            Returns the number of days left in the eval.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.Login(System.String,System.Byte[])">
            <summary>
                Login to licensing server
                Exceptions are thrown if not successful.
            </summary>
            <param name="user">client user name</param>
            <param name="password">client password</param>
            <returns>true if valid client, else false</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.Register">
            <summary>
                Handles registering a user system to the ACDC server.
                This will allow the ACDC server to determine how many systems a user has that are running Morph.
                Exceptions are thrown if not successful.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.SelectOrganization(System.Int32,System.String)">
            <summary>
                This allow the user to work in a particular Connected Farms organization
                Exceptions are thrown if not successful.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.IsFeatureEnabled(Morph.Contracts.Interfaces.Services.Licensing.FeaturesEnum)">
            <summary>
                Is the licensed feature enabled
            </summary>
            <param name="feature">licensed feature for check</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.GetApplicationLicenseFeature">
            <summary>
                Top level push for license features.
                Exceptions are thrown if not successful.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.QueryLicenseFeatures">
            <summary>
                Get our user/organization license features
                Exceptions are thrown if not successful.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.PurchaseArea(System.Int64,System.Collections.Generic.List{Morph.Services.Core.DataModel.PurchaseArea},Morph.Contracts.DataContracts.Repository.FieldDesignType)">
            <summary>
                Spend credits to purchase an area
                Exceptions are thrown if not successful.
            </summary>
            <param name="numberOfAcres"></param>
            <param name="areas"></param>
            <param name="designtype"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.QueryPurchasedAreas(System.Boolean)">
            <summary>
                Forces a call to the server to get purchased areas for user/organization
                Exceptions are thrown if not successful.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.GetPurchaseAreas(System.Boolean)">
            <summary>
                Get unexpired purchase areas.
                Exceptions are thrown if not successful.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.QueryGenerateReports(Morph.Contracts.DataContracts.Repository.FieldDesignType)">
            <summary>
                Based off of design type figure out if the Generate Reports feature is enabled.
                Exceptions are thrown if not successful.
            </summary>
            <param name="designtype"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.AddFeatureUsageRecord(Morph.Contracts.DataContracts.Repository.FieldDesignType,System.DateTime,System.DateTime)">
            <summary>
                Adds a record to the feature usage cache.
                Exceptions are thrown if not successful.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.FlushFeatureUsageRecords">
            <summary>
                Handles sending an array of the FeatureUsage records
                Exceptions are thrown if not successful.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.OnlineHeartBeat">
            <summary>
                Handles keeping an online client onlune with ACDC
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.GetPurchaseAreaRetryMaximum">
            <summary>
                Maximum number of times to try purchasing area when the cache is not up to date.
                Exceptions are thrown if not successful.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.GetGpsFileNames(System.String)">
            <summary>
                Returns a list GPS filenames
                Default extension is *.gps
                Exceptions are thrown if not successful.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.GetFieldLevelFileNames(System.String)">
            <summary>
                Returns a list Field level filenames
                Default extension is *.xml
                Exceptions are thrown if not successful.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.ImportFieldLevelFile(System.String)">
            <summary>
                Import field level file contents based off the file passed in.
                Exceptions are thrown if not successful.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.ExportGpsFile(System.String,System.String)">
            <summary>
                Exports a FmX (GPS) file to the Connected Farm
                Exceptions are thrown if not successful.
            </summary>
            <param name="filename"></param>
            <param name="file"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.GetEncryptionId">
            <summary>
            This will parse through the cache to see if we have an organization id.
            This will use the current organization ID.  
            If no ID then return null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.QueryRemainingEntitlements">
            <summary>
            Ask the server for the remaining acreage available for an organization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.ForceOfflineMode">
            <summary>
            Put the system into offline mode if the user has cancelled a login
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.GetRestrictedAreaType">
            <summary>
            Return the restricted continent
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.GetApplicationEntitlementSummary(System.Int32)">
            <summary>
                Get Application Entitlement Summary [DESIGN]
                This web API method will be provided by ACDC LicenseManagement to get a summary of the application entitlements for a given application 
                which are associated with the specified organization. The summary includes information about active entitlements only, i.e. entitlements 
                that are not expired and that are not fully consumed.
            </summary>
            <param name="organizationId"></param>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.GetApplicationEntitlementDetails">
            <summary>
            This will return the entitlement details, this will allow the caller to create the entitlement report
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensing.GetLicenseVersion">
            <summary>
            Get license version
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Licensing.LicenseMode">
            <summary>
            Current license mode
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Licensing.LicenseMode.OnlineLicensed">
            <summary>
            Connected to ACDC and is licensed
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Licensing.LicenseMode.OfflineLicensed">
            <summary>
            Not connected to ACDC but have downloaded a license
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Licensing.LicenseMode.OfflineEvaluation">
            <summary>
            Not connected and never had a valid license (default mode
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc">
            <summary>
            Low level API to access the ACDC server.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.TestUrl">
            <summary>
            Test Url
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.UseTestUrl">
            <summary>
            Use the test url
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.UpdateRegistrationFileExists">
            <summary>
            Update that file exists
            (usually after login)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.RegistrationFileExists">
            <summary>
            Does the registration file exist
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.RemoveCache">
            <summary>
            Remove and clear out the cache
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.IsLoggedIn">
            <summary>
            Are we currently online.
            </summary>
            <returns>true is online otherwise false</returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.IsLoggedInToOrganization">
            <summary>
            Are we currently online to an organization.
            </summary>
            <returns>true is online otherwise false</returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.IsRegistered">
            <summary>
            Have we registered the application with ACDC
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.Login(System.String,System.Byte[])">
            <summary>
            Synchronous login to ACDC
            Exceptions are thrown if not successful.
            </summary>
            <param name="username">ID</param>
            <param name="password">User's oassword</param>
            <returns>Result bool</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.Register">
            <summary>
            Handles registering a user system to the ACDC server.
            This will allow the ACDC server to determine how many systems a user has that are running Morph.
            Exceptions are thrown if not successful.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.SelectOrganization(System.Int32,System.String)">
            <summary>
            Use to tell ACDC what organization the user wants to access.
            Exceptions are thrown if not successful.
            </summary>
            <param name="organizationId"></param>
            <param name="organizationName"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.GetApplicationLicenseFeatures">
            <summary>
            Get application license features from from the ACDC server.
            Exceptions are thrown if not successful.
            </summary>
            <returns>LicenseFeaturesEntity</returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.QueryLicenseFeatureKey">
            <summary>
            Allows for querying a feature of the license
            Supports the following
                License type (Perpetual or Evaluation)
                Is eval expired.
                Is land leveling enabled - Default = true no cost
                Is land forming enabled - Default = false - this has to be purchased
                Is land forming drainage enabled -  Default = false - this has to be purchased
                Is land forming irrigation -  Default = false - this has to be purchased
                Does land leveling require credits. Default = false
                Does land forming require credits. Default = true must purchase
                Does land forming drainage require credits. Default = true must purchase
                Does land forming irrigation require credits. Default = true must purchase
            </summary>
            <returns>License feature set</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.QueryPurchasedAreas(System.Boolean)">
            <summary>
            Get acquired areas from the ACDC server.
            Exceptions are thrown if not successful.
            </summary>
            <returns>List of acquired areas</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.GetPurchaseAreas(System.Boolean)">
            <summary>
            Get purchased areas.
            Exceptions are thrown if not successful.
            </summary>
            <param name="includeExpired"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.PurchaseArea(System.Int64,System.Collections.Generic.List{Morph.Services.Core.DataModel.PurchaseArea},Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.LicenseFeatureTypeEnum)">
            <summary>
            This is the API that calls the ACDC WEB API to attempt to purchase an area via acres.
            Exceptions are thrown if not successful.
            </summary>
            <param name="numberOfAcres"></param>
            <param name="areas"></param>
            <param name="code"></param>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.GetCachedUser">
            <summary>
            This is the current user of the system
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.UpdateCachedUser">
            <summary>
            Forces a write of the current cached user.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.FindSsoUser(System.String)">
            <summary>
            Tries to find the SSO user in the cache.
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.AddFeatureUsageRecord(Morph.Contracts.DataContracts.Repository.License.LicenseFeaturesEntity.LicenseFeatureTypeEnum,System.DateTime,System.DateTime)">
            <summary>
            Adds a record to the feature usage cache.
            Exceptions are thrown if not successful.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.FlushFeatureUsageRecords">
            <summary>
            Handles sending an array of the FeatureUsage records
            Exceptions are thrown if not successful.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.GetPurchaseAreaRetryMaximum">
            <summary>
            Maximum number of times to try purchasing area when the cache is not up to date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.GetFileList(System.String)">
            <summary>
            Returns a list of files filtered by extension.
            Exceptions are thrown if not successful.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.ImportFieldLevelFile(System.String)">
            <summary>
            Imports a field level xml file from the Connected Farm
            Exceptions are thrown if not successful.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.ExportGpsFile(System.String,System.String)">
            <summary>
            Exports a FmX (GPS) file to the Connected Farm
            Exceptions are thrown if not successful.
            </summary>
            <param name="filename"></param>
            <param name="file"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.GetEncryptionId">
            <summary>
            This will parse through the cache to see if we have an organization id.
            This will use the current organization ID.  
            If no ID then return null.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.IsLicenseValid">
            <summary>
            If we detect a license file issue we set this bool to false
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.QueryRemainingEntitlements">
            <summary>
            Ask the server for the remaining acreage available for an organization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.ForceOfflineMode">
            <summary>
            Put the system into offline mode if the user has cancelled a login
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.GetApplicationEntitlementSummary(System.Int32)">
            <summary>
                Get Application Entitlement Summary [DESIGN]
                This web API method will be provided by ACDC LicenseManagement to get a summary of the application entitlements for a given application 
                which are associated with the specified organization. The summary includes information about active entitlements only, i.e. entitlements 
                that are not expired and that are not fully consumed.
            </summary>
            <param name="organizationId"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.GetMorphIdentification">
            <summary>
            Get morph identification record
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.GetIdentificationValid(System.Boolean@)">
            <summary>
            Is valid identity
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.DeleteRegistrationFile">
            <summary>
            Delete the registration file
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Licensing.ILicensingAcdc.GetLicenseVersion">
            <summary>
            Get license version
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineSubDesign">
            <summary>
            Interface for sub desgin dump
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineSubDesign.AA_Name__">
            <summary>
            Text representation of the dump type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineSubDesign.ComputeInput">
            <summary>
            This is the inputs into land level
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineSubDesign.ComputeOutput">
            <summary>
            Output of the compute
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineDrainage">
            <summary>
            Drainage dump interface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineDrainage.AA_Name__">
            <summary>
            Text representation of the dump type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineDrainage.ComputeInput">
            <summary>
            This is the inputs into land level
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineDrainage.ComputeOutput">
            <summary>
            Output of the compute
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineIrrigation">
            <summary>
            Drainage dump
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineIrrigation.AA_Name__">
            <summary>
            Text representation of the dump type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineIrrigation.ComputeInput">
            <summary>
            This is the inputs into land level
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineIrrigation.ComputeOutput">
            <summary>
            Output of the compute
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineDump">
            <summary>
            Base clint engine dump interface
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineDump.DumpResults(System.String)">
            <summary>
            Serialize the results to XML
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineDump.AddType(System.Type)">
            <summary>
            Add the Type to be serialized
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineLandLevelDump">
            <summary>
            Land leveling dump interface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineLandLevelDump.AA_Name__">
            <summary>
            Text representation of the dump type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineLandLevelDump.ComputeInput">
            <summary>
            This is the inputs into land level
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.QAInputOutput.IClientEngineLandLevelDump.ComputeOutput">
            <summary>
            Output of the compute
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Utility.ICultureManager">
            <summary>
            This interface define s the culture language manager
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ICultureManager.SetCulture">
            <summary>
            Sets the language culture
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ICultureManager.GetCulture">
            <summary>
            Get the language culture.  Returns the culture value from the user settings.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ICultureManager.GetSupportedLanguages">
            <summary>
            Returns list of pretty language names.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Utility.PatchTypes">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Utility.PatchTypes.UserCache">
            <summary>
                User cache patch
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Utility.PatchTypes.WorkspaceFile">
            <summary>
                WM-FORM workspace file patch
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Utility.IPatchManager">
            <summary>
                Patch manager
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IPatchManager.SetCurrentVersion(System.Version)">
            <summary>
                Set the current application version
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IPatchManager.AddWorkspacePatch(Morph.Contracts.DataContracts.PatchInfo{System.Object})">
            <summary>
                Add a patch for workspace
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IPatchManager.GetWorkspacePatches(System.Version)">
            <summary>
                Get all workspace patches in order
            </summary>
            <param name="sourceVersion">source version for check.</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IPatchManager.AddLicensingPatch(Morph.Contracts.DataContracts.PatchInfo{System.Object})">
            <summary>
                Add a patch for licensing
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IPatchManager.GetLicensingPatches(System.Version)">
            <summary>
                Get all licensing patches in order
            </summary>
            <param name="sourceVersion">source version for check.</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IPatchManager.ExecuteWorkspacePatches(System.Version,System.Object)">
            <summary>
                Execute all workspace patches for source version
            </summary>
            <param name="sourceVersion">version of the source</param>
            <param name="source">source object (WorkspaceEntity)</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IPatchManager.ExecuteLicensingPatches(System.Version,System.Object)">
            <summary>
                Execute all licensing patches for source version
            </summary>
            <param name="sourceVersion">version of the source</param>
            <param name="source">source object</param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Utility.ISerialize">
            <summary>
                interface for serialization
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISerialize.SerializeObject``1(``0,System.Runtime.Serialization.XmlObjectSerializer)">
            <summary>
                Serialize object
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="obj">object to serialize</param>
            <param name="serializer">instance of serializer to use</param>
            <returns>the obj parameter serialized into compressed bytes</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISerialize.DeserializeObject``1(System.Byte[],System.Runtime.Serialization.XmlObjectSerializer)">
            <summary>
                Deserialize object from bytes
            </summary>
            <typeparam name="T">target type</typeparam>
            <param name="content">serialized bytes from Commpress</param>
            <param name="serializer">serializer for content</param>
            <returns>object T deserialized from compressed bytes</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISerialize.Compress``1(``0,System.Runtime.Serialization.XmlObjectSerializer)">
            <summary>
                Compress a serialized object
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="obj">object to serialize</param>
            <param name="serializer">instance of serializer to use</param>
            <returns>the obj parameter serialized into compressed bytes</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISerialize.Decompress``1(System.Byte[],System.Runtime.Serialization.XmlObjectSerializer)">
            <summary>
                Decompress object from bytes
            </summary>
            <typeparam name="T">target type</typeparam>
            <param name="content">serialized bytes from Commpress</param>
            <param name="serializer">serializer for content</param>
            <returns>object T deserialized from compressed bytes</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISerialize.SaveWorkspaceToDisk``1(System.Version,System.String,``0)">
            <summary>
                Save object to disk
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="version">current product version</param>
            <param name="filePath">file path for storage</param>
            <param name="obj">object to store</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISerialize.LoadWorkspaceFromDisk``1(System.Version,System.String)">
            <summary>
                Load workspace from disk
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="version">current product version</param>
            <param name="filePath">file path for storage</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISerialize.SaveToDisk``1(System.String,``0,System.Byte[])">
            <summary>
                Save object to disk
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="filePath">file path for storage</param>
            <param name="obj">object to store</param>
            <param name="maskBytes">optional mask bytes</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISerialize.LoadFromDisk``1(System.String,System.Byte[])">
            <summary>
                Load object from disk
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="filePath">file path containing object</param>
            <param name="maskBytes">optional mask bytes</param>
            <returns>instance of type T object from disk</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISerialize.SaveSupportPackageToDisk``1(System.Version,System.String,``0,Morph.Contracts.DataContracts.Repository.CustomerHeader)">
            <summary>
                Save support package to disk
            </summary>
            <typeparam name="T">WM-Form workspace entity</typeparam>
            <param name="version">current product version</param>
            <param name="filePath">file path for storage</param>
            <param name="obj">workspace entity to store in the package</param>
            <param name="customerHeader">Customer information header</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISerialize.LoadSupportPackageCustomerHeaderFromDisk(System.Version,System.String)">
            <summary>
                Load customer header from the support package from disk
            </summary>
            <param name="version">current product version</param>
            <param name="filePath">file path for storage</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISerialize.ExtractSupportWorkspaceFromBuffer``1(System.Byte[],System.Version,System.String)">
            <summary>
            Extract the workspace from customer header buffer
            </summary>
            <param name="buffer">buffer containing encrypted workspace</param>
            <param name="version">current software version</param>
            <param name="filePath">file path to save</param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Utility.IDesignCalculatorFactory">
            <summary>
                Interface for design calculator
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IDesignCalculatorFactory.ComputeBestFitPlanes(Morph.Contracts.Interfaces.ISurface3D,System.Collections.Generic.IList{Morph.Services.Core.Interfaces.PlanesConstraints},System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Double)">
            <summary>
            Compute the best fit planes
            </summary>
            <param name="originalSurface"></param>
            <param name="sections"></param>
            <param name="exclusionZones"></param>
            <param name="exportVolume"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IDesignCalculatorFactory.CalculateDrainageDesign(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints,System.Object,System.Func{System.Object,System.Boolean},System.Func{System.Object,System.Single,System.Boolean},System.Action{System.Object,Morph.Services.Core.DataModel.Design},System.Action{System.Object,System.Exception})">
            <summary>
                Calculate a drainage design for a field
            </summary>
            <param name="originalSurface"></param>
            <param name="constraints">surface constraints</param>
            <param name="state">user defined state object sent to all callbacks</param>
            <param name="onStart">callback for on start</param>
            <param name="onProgress">callback for on progress</param>
            <param name="onComplete">callback for on complete</param>
            <param name="onError">callback for on error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IDesignCalculatorFactory.CalculateIrrigationDesign(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.Services.Engine.IRowsConstraints,System.Object,System.Func{System.Object,System.Boolean},System.Func{System.Object,System.Single,System.Boolean},System.Action{System.Object,Morph.Services.Core.DataModel.Design},System.Action{System.Object,System.Exception})">
            <summary>
                Calculate an irrigation design
            </summary>
            <param name="originalSurface"></param>
            <param name="constraints"></param>
            <param name="state"></param>
            <param name="onStart"></param>
            <param name="onProgress"></param>
            <param name="onComplete"></param>
            <param name="onError"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IDesignCalculatorFactory.CalculateLandLevelingDesignAsync(Morph.Contracts.Interfaces.ISurface3D,System.Collections.Generic.List{Morph.Services.Core.Interfaces.PlanesConstraints},System.Collections.Generic.List{Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints},System.Double,System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Calc landleveling async
            
            </summary>
            <param name="originalSurface"></param>
            <param name="constraints"></param>
            <param name="ditchConstraints"></param>
            <param name="exportVolume"></param>
            <param name="exclusionZones"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IDesignCalculatorFactory.CalculateLandLevelingDesign(Morph.Contracts.Interfaces.ISurface3D,System.Collections.Generic.List{Morph.Services.Core.Interfaces.PlanesConstraints},System.Collections.Generic.List{Morph.Contracts.Interfaces.Services.Engine.IDitchConstraints},System.Double,System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Object,System.Func{System.Object,System.Boolean},System.Func{System.Object,System.Single,System.Boolean},System.Action{System.Object,Morph.Services.Core.DataModel.Design},System.Action{System.Object,System.Exception})">
            <summary>
                Calculate a land leveling design for a field
            </summary>
            <param name="originalSurface"></param>
            <param name="constraints"></param>
            <param name="ditchConstraints"></param>
            <param name="exportVolume"></param>
            <param name="exclusionZones"></param>
            <param name="state"></param>
            <param name="onStart"></param>
            <param name="onProgress"></param>
            <param name="onComplete"></param>
            <param name="onError"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IDesignCalculatorFactory.CalculateSubZoneDesign(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.Services.Engine.IZoneConstraints,System.Object,System.Func{System.Object,System.Boolean},System.Func{System.Object,System.Single,System.Boolean},System.Action{System.Object,Morph.Services.Core.DataModel.Design},System.Action{System.Object,System.Exception})">
            <summary>
                Calculate a sub zone design for a field
            </summary>
            <param name="originalSurface">original surface</param>
            <param name="constraints"> zone constraints</param>
            <param name="state">state object</param>
            <param name="onStart">on start action</param>
            <param name="onProgress">on progress action</param>
            <param name="onComplete">on complete action</param>
            <param name="onError">on error action</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IDesignCalculatorFactory.MergeSurfaces(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.ISurface3D,System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Linestring},System.Object,System.Func{System.Object,System.Single,System.Boolean},System.Collections.Generic.IEnumerable{Morph.Services.Core.DataModel.Linestring},System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Merges two surfaces based on the specified areas (expressed in linestrings)
            </summary>
            <param name="sourceSurface">The source surface.</param>
            <param name="targetSurface">The target surface.</param>
            <param name="areas">Areas to be merged from the target surfaces.</param>
            <param name="state">user defined state object sent to all callbacks</param>        
            <param name="onProgress">callback for on progress</param>
            <param name="exclusionZones">An enumeration of exclusion zones. May be <c>null</c>.</param>
            <param name="boundary">Expected boundary of resultant surface.</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IDesignCalculatorFactory.CompareSurfaces(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.Services.Engine.ISurfaceConstraints,System.Object,System.Func{System.Object,System.Boolean},System.Func{System.Object,System.Single,System.Boolean},System.Action{System.Object,Morph.Services.Core.DataModel.Design},System.Action{System.Object,System.Exception})">
            <summary>
            Compare two surfaces to generate a design
            </summary>
            <param name="originalSurface"></param>
            <param name="designSurface"></param>
            <param name="constraints"></param>
            <param name="state"></param>
            <param name="onStart"></param>
            <param name="onProgress"></param>
            <param name="onComplete"></param>
            <param name="onError"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Utility.IFileNameEnumerator">
            <summary>
            Handles enumerating a file name so that you can have a number incremented.
            ie.     if textfile (1).txt exist it will return textfile (2).txt.
                    if textfile (1).txt and textfile (2).txt then it will return textfile (3).txt
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IFileNameEnumerator.NextAvailableFilename(System.String,System.Int32@)">
            <summary>
            Return the next available name
            </summary>
            <param name="path"></param>
            <param name="assignedNumber"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Utility.INtpNetworkTime">
            <summary>
                Handles getting internet time via NTP
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.INtpNetworkTime.GetLocalNetworkTime">
            <summary>
                Get the local network time from time.windows.com
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.INtpNetworkTime.GetUtcNetworkTime">
            <summary>
                Get the local network time from time.windows.com
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Utility.IInterfaceTypes">
            <summary>
                Interface types
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Utility.IInterfaceTypes.ExtraTypesArray">
            <summary>
                Get array of extra types
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.IInterfaceTypes.Add(System.Type)">
            <summary>
                Add a type to the set
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Utility.SurfaceFileImportEnum">
            <summary>
                Surface import types
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Utility.SurfaceFileImportEnum.None">
            <summary>
                Invalid surface
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Utility.SurfaceFileImportEnum.Dxf">
            <summary>
                DXF file format
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Utility.SurfaceFileImportEnum.Fmx">
            <summary>
                FMX file format
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.Services.Utility.SurfaceFileImportEnum.Multiplane">
            <summary>
                Multiplane file format
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Utility.ISurfaceImportFactory">
            <summary>
                Factory to create surfaces from an import file
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISurfaceImportFactory.CreateFromFile(System.String,Morph.Contracts.DataContracts.Repository.FieldImportEnum,Morph.Contracts.Interfaces.IDesignEditImports@,Core.Contracts.SurfaceImportExport.MultiPlaneSettings,System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D}@,System.Boolean@)">
            <summary>
                Create a surface from an import file
            </summary>
            <param name="filePath">path to the surface</param>
            <param name="surfaceImport">import file type</param>
            <param name="designEdit">any design edits found in the import file</param>
            <param name="multiPlaneSettings">multiplane settings if a multiplane file, else null</param>
            <param name="surveyPoints">get a list of survey points?</param>
            <param name="containsBoundary">Does it contain boundary?</param>
            <returns>ISurface3D containing the surface information</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISurfaceImportFactory.LoadSurveyPointsFromFile(System.String,Morph.Contracts.DataContracts.Repository.FieldImportEnum,Morph.Contracts.Interfaces.IDesignEditImports@,Core.Contracts.SurfaceImportExport.MultiPlaneSettings)">
            <summary>
            Load survey points from the file
            </summary>
            <param name="filePath"></param>
            <param name="surfaceImport"></param>
            <param name="designEdit"></param>
            <param name="multiPlaneSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Utility.ISurfaceImportFactory.CreateSurface(System.String,System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Double)">
            <summary>
            Create surface from points
            </summary>
            <param name="name"></param>
            <param name="points"></param>
            <param name="triangles"></param>
            <param name="boundary"></param>
            <param name="exclusions"></param>
            <param name="maxEdgeLength"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Cloud.ICloudApi">
            <summary>
            Interface for the cloud API (ACDC)
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Cloud.ICloudApi.Login(System.String,System.String,System.String)">
            <summary>
            Login to cloud to establish a session
            </summary>
            <param name="userName">Trimble SSO user name</param>
            <param name="password">Trimble SSO password</param>
            <param name="applicationName">"WM-Form"</param>
            <returns>Instance of cloud session used to access other features</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Cloud.ICloudApi.Login(System.String,System.String,System.String,System.Int32)">
            <summary>
            Login to cloud to establish a session
            </summary>
            <param name="userName">Trimble SSO user name</param>
            <param name="password">Trimble SSO password</param>
            <param name="applicationName">"WM-Form"</param>
            <param name="orgId">organization id</param>
            <returns>Instance of cloud session used to access other features</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Services.Cloud.ICloudApi.RequestNewToken(Morph.Contracts.Interfaces.Services.Cloud.ICloudSession)">
            <summary>
            Used to refresh the token before it expires
            todo: how to get expiration time
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Cloud.ICloudSession">
            <summary>
            Logged in cloud session
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Cloud.ICloudSession.AccessToken">
            <summary>
            Session access token
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Cloud.ICloudSession.Organizations">
            <summary>
            List of user associated organizations
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Cloud.ICloudSession.BrandName">
            <summary>
            Brand name based on the user's organization.
            0 = undetermined
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Cloud.ICloudSession.SelectedOrgId">
            <summary>
            Selected organization id
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Cloud.ICloudSession.TokenExpiration">
            <summary>
            Token expiration time
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Services.Cloud.IOrganization">
            <summary>
            Organization information from cloud (ACDC)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Cloud.IOrganization.OrgId">
            <summary>
            Organization Id
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Services.Cloud.IOrganization.Name">
            <summary>
            Organization name
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IDitchProfileViewModel">
            <summary>
            Interface for DitchProfile VM
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel">
            <summary>
                Basin Area constraints view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel.Id">
            <summary>
                ID for the area
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel.Name">
            <summary>
                Gets or sets the name of the section.
            </summary>
            <value>
                The name of the section.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel.MinSlope">
            <summary>
                Min slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel.MaxSlope">
            <summary>
                Max slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel.HasError">
            <summary>
                True if the view model has an error else false
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel.GetBasinAreaConstraints">
            <summary>
                Get the basin area constraints
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel.IsValidDouble(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Helper to validate double values.
                Errors will be loaded into the error dictionary by property name.
            </summary>
            <param name="value">double value</param>
            <param name="propertyExpression">property for IDataErrorInfo notification</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="dimension"></param>
            <returns>true if valid, else false</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel.SetError(System.String,System.String)">
            <summary>
                Set an error condition
            </summary>
            <param name="fieldName"></param>
            <param name="error"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel.ClearError(System.String)">
            <summary>
                Clear an error
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel.ClearErrors">
            <summary>
                Clear view model errors
                (Used when deleting sub design areas)
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IBasinAreaConstraintsViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IBasinAreaViewModel">
            <summary>
                Interface for the activity area view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBasinAreaViewModel.BasinArea">
            <summary>
            Read only access to basin area model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBasinAreaViewModel.VortexPoint">
            <summary>
             vortex point for the basin
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ICompareSurfaceCutFillViewModel">
            <summary>
                Interface for the fee view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICompareSurfaceCutFillViewModel.Confirmed">
            <summary>
                Confirmed flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICompareSurfaceCutFillViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICompareSurfaceCutFillViewModel.CutFillSheetViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ICompareSurfaceCutFillViewModel.Initialize(Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel,System.Boolean)">
            <summary>
                Initialize the view model from values in the design view model
            </summary>
            <param name="designIterationViewModel"></param>
            <param name="canExport"></param>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.ICompareSurfaceCutFillViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ICompareSurfaceCutFillViewModel.NotifyPropertyChanged(System.String)">
            <summary>
                Helper to notify when a property changes
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ICompareSurfaceCutFillViewModel.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IImportDesignAsFieldViewModel">
            <summary>
            Interface for importing design as a new field view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportDesignAsFieldViewModel.Name">
            <summary>
            Name of the field
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportDesignAsFieldViewModel.MergeDesignWithOriginalSurface">
            <summary>
            Merge design with original surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportDesignAsFieldViewModel.IsSaveEnabled">
            <summary>
                To enable submitting the data
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportDesignAsFieldViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportDesignAsFieldViewModel.Confirmed">
            <summary>
            Dialog confirmed flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportDesignAsFieldViewModel.Content">
            <summary>
            Dialog content
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportDesignAsFieldViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IImportDesignAsFieldViewModel.PropertyChanged">
            <summary>
            Property changed event handler
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IImportSurfaceAsFieldViewModel">
            <summary>
            Interface for importing surface as a new field view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportSurfaceAsFieldViewModel.TitleName">
            <summary>
            Title for the dialog
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportSurfaceAsFieldViewModel.GridSize">
            <summary>
            Gets or sets the size of the grid.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportSurfaceAsFieldViewModel.MaxGridSize">
            <summary>
            Max GridSize
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportSurfaceAsFieldViewModel.IsSaveEnabled">
            <summary>
                To enable submitting the data
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportSurfaceAsFieldViewModel.Name">
            <summary>
                Name of the entity
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportSurfaceAsFieldViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportSurfaceAsFieldViewModel.Confirmed">
            <summary>
            Dialog confirmed flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportSurfaceAsFieldViewModel.Title">
            <summary>
            Dialog Title
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportSurfaceAsFieldViewModel.Content">
            <summary>
            Dialog content
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IImportSurfaceAsFieldViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IImportSurfaceAsFieldViewModel.PropertyChanged">
            <summary>
            Property changed event handler
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IProjectViewModel">
            <summary>
             Interface for the project view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IProjectViewModel.ProjectGuid">
            <summary>
            Field iteration guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IProjectViewModel.Fields">
            <summary>
            Fields
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IProjectViewModel.DeleteCommand">
            <summary>
                Command for deleting a field
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IProjectViewModel.RenameCommand">
            <summary>
                Command for renaming a field
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IProjectViewModel.SelectFieldCommand">
            <summary>
            Command for selecting the field
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel">
            <summary>
                Activity Area constraints view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.Id">
            <summary>
                ID for the sub zone
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.Name">
            <summary>
                Gets or sets the name of the section.
            </summary>
            <value>
                The name of the section.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.MaxCutDepth">
            <summary>
                Max cut depth sub zone.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.MaxFillHeight">
            <summary>
                Max fill depth sub zone.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.MinSlope">
            <summary>
                Min slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.MaxSlope">
            <summary>
                Max slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.HasError">
            <summary>
                True if the view model has an error else false
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.GetActivityAreaConstraints">
            <summary>
                Get the activity area constraints
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.IsValidDouble(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Helper to validate double values.
                Errors will be loaded into the error dictionary by property name.
            </summary>
            <param name="value">double value</param>
            <param name="propertyExpression">property for IDataErrorInfo notification</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="dimension"></param>
            <returns>true if valid, else false</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.SetError(System.String,System.String)">
            <summary>
                Set an error condition
            </summary>
            <param name="fieldName"></param>
            <param name="error"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.ClearError(System.String)">
            <summary>
                Clear an error
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.ClearErrors">
            <summary>
                Clear view model errors
                (Used when deleting sub design areas)
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IActivityAreaConstraintsViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IActivityAreaViewModel">
            <summary>
                Interface for the activity area view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IActivityAreaViewModel.ActivityArea">
            <summary>
            Read only access to subzone model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IActivityAreaViewModel.IsFieldActivity">
            <summary>
            Is Field activity Area
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.INoteViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INoteViewModel.Id">
            <summary>
             Unique Id
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INoteViewModel.NoteData">
            <summary>
            Get the line data model for the view model
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ISamplingGridViewModel">
            <summary>
                Interface for sampling grid view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISamplingGridViewModel.GridSpacing">
            <summary>
                Spacing for the sub zone grid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISamplingGridViewModel.HasError">
            <summary>
                True if the view model has an error else false
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISamplingGridViewModel.UnitDistance">
            <summary>
                Unit distance string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISamplingGridViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISamplingGridViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISamplingGridViewModel.IsValidDouble(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Helper to validate double values.
                Errors will be loaded into the error dictionary by property name.
            </summary>
            <param name="value">double value</param>
            <param name="propertyExpression">property for IDataErrorInfo notification</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="dimension"></param>
            <returns>true if valid, else false</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISamplingGridViewModel.SetError(System.String,System.String)">
            <summary>
                Set an error condition
            </summary>
            <param name="fieldName"></param>
            <param name="error"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISamplingGridViewModel.ClearError(System.String)">
            <summary>
                Clear an error
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.ISamplingGridViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IDesignConstraintViewModel">
            <summary>
            Design constraint View model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignConstraintViewModel.DesignConstraint">
            <summary>
            Design constraints of the section area
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IExportAsHTMLConfirmation">
            <summary>
            Interface for Export as HTML Confirmation view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportAsHTMLConfirmation.CommonDialogInteractionRequest">
            <summary>
            Common dialog interaction request
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportAsHTMLConfirmation.OpenSaveFileDialogCommand">
            <summary>
            Command to open file dialog
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportAsHTMLConfirmation.GridSize">
            <summary>
            Stores the grid size
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportAsHTMLConfirmation.OutputFile">
            <summary>
            Holds the path of output file
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportAsHTMLConfirmation.isLaunchBrowserEnabled">
            <summary>
            Holds the state of Launch browser optio
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportAsHTMLConfirmation.Error">
            <summary>
            Error list in string form
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportAsHTMLConfirmation.Confirmed">
            <summary>
            Indicates if confirmed or canceled
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IExportAsHTMLConfirmation.PropertyChanged">
            <summary>
            Notification event handler
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportAsHTMLConfirmation.ShowExistingElevation">
            <summary>
            Show existing elevation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportAsHTMLConfirmation.ShowDesignElevation">
            <summary>
            Show design elevation 
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportAsHTMLConfirmation.ShowCutFillElevation">
            <summary>
            Show cut fill elevation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportAsHTMLConfirmation.Item(System.String)">
            <summary>
            Column name for IDataErrorInfo
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IManageEditorSettingsViewModel">
            <summary>
                Interface for managing each editor settings
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ILicenseDemoViewModel">
            <summary>
            Interface for the license view model
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ILicenseDemoViewModel.Close">
            <summary>
            Close our the demo view
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel">
            <summary>
                Interface for sub zone bearing view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.Bearing">
            <summary>
                Grid bearing (direction 0 to 360)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.IsLeftVisible">
            <summary>
                IsLeftVisible
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.GridSpacing">
            <summary>
                Spacing for the sub zone grid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.HasError">
            <summary>
                True if the view model has an error else false
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.UnitArea">
            <summary>
                Unit area string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.UnitPercentage">
            <summary>
                Unit percentage string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.UnitDepth">
            <summary>
                Unit depth string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.UnitDistance">
            <summary>
                Unit distance string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.UnitSmallDistance">
            <summary>
                Unit distance string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.UnitVolume">
            <summary>
                Unit volume string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.UnitDegree">
            <summary>
                Unit degree string (Only deg for now)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.IsValidDouble(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Helper to validate double values.
                Errors will be loaded into the error dictionary by property name.
            </summary>
            <param name="value">double value</param>
            <param name="propertyExpression">property for IDataErrorInfo notification</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="dimension"></param>
            <returns>true if valid, else false</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.SetError(System.String,System.String)">
            <summary>
                Set an error condition
            </summary>
            <param name="fieldName"></param>
            <param name="error"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.ClearError(System.String)">
            <summary>
                Clear an error
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.ISubZoneBearingViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ISubZonesCalculationViewModel">
            <summary>
                Interface for SubZonesCalcutionViewModel
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesCalculationViewModel.MaterialViewModel">
            <summary>
                Gets or sets the material view model.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesCalculationViewModel.SubZoneBearingViewModel">
            <summary>
                Sub zone bearing view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesCalculationViewModel.SubZonesConstraintsViewModels">
            <summary>
                Gets or sets the leveling constraints view model.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISubZonesCalculationViewModel.Initialize(Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel)">
            <summary>
                Initializes the specified design editor view model.
            </summary>
            <param name="designEditorViewModel">The design editor view model.</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISubZonesCalculationViewModel.Update(Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel)">
            <summary>
                Update with the design editor view model
            </summary>
            <param name="designEditorViewModel"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISubZonesCalculationViewModel.ClearErrors">
            <summary>
                Clear view model errors
                (Used when deleting sections)
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel">
            <summary>
                Sub zone constraints view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MainBearing">
            <summary>
                Main bearing for helper calculation
                (Pass in before calling engine)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.Id">
            <summary>
                ID for the sub zone
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.Name">
            <summary>
                Gets or sets the name of the section.
            </summary>
            <value>
                The name of the section.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.SubZoneType">
            <summary>
                Sub zone type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMaxCutDepthEnabled">
            <summary>
                Is Max Cut enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MaxCutDepth">
            <summary>
                Max cut depth sub zone.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMaxFillDepthEnabled">
            <summary>
                Is Max Fill enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MaxFillDepth">
            <summary>
                Max fill depth sub zone.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMinElevationEnabled">
            <summary>
                Is min elevation enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MinElevation">
            <summary>
                Minimum elevation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMaxElevationEnabled">
            <summary>
                Is min elevation enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MaxElevation">
            <summary>
                Maximum elevation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMinMainSlopeEnabled">
            <summary>
                Is the min main slope enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MinMainSlope">
            <summary>
                Min slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMaxMainSlopeEnabled">
            <summary>
                Is max main slope enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MaxMainSlope">
            <summary>
                Max slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMaxMainRateChangeEnabled">
            <summary>
                Is max main rate change enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MaxMainRateChange">
            <summary>
                Max rate of change
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMaxMainRateDistanceChangeEnabled">
            <summary>
                Is max main rate change distance enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MaxMainRateDistanceChange">
            <summary>
                Max rate distance change
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMaxMainRateVisible">
            <summary>
                This property will turn make Max rate change visible or not.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMinCrossSlopeEnabled">
            <summary>
                Is min cross slope enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MinCrossSlope">
            <summary>
                Min slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMaxCrossSlopeEnabled">
            <summary>
                Is max cross slope enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MaxCrossSlope">
            <summary>
                Max slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMaxCrossRateChangeEnabled">
            <summary>
                Is max cross rate change enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MaxCrossRateChange">
            <summary>
                Max rate of change
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMaxCrossRateDistanceChangeEnabled">
            <summary>
                Is max cross rate change distance enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MaxCrossRateDistanceChange">
            <summary>
                Max cross rate distance change
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.Orientation">
            <summary>
                Orientation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMinElevationLevelPadEnabled">
            <summary>
                Is min elevation level pad enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MinElevationLevelPad">
            <summary>
                Minimum elevation for Level Pad
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsMaxElevationLevelPadEnabled">
            <summary>
                Is max elevation level pad enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.MaxElevationLevelPad">
            <summary>
                Maximum elevation for Level Pad
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.HasError">
            <summary>
                True if the view model has an error else false
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.UnitArea">
            <summary>
                Unit area string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.UnitPercentage">
            <summary>
                Unit percentage string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.UnitDepth">
            <summary>
                Unit depth string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.UnitDistance">
            <summary>
                Unit distance string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.UnitSmallDistance">
            <summary>
                Unit distance string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.UnitVolume">
            <summary>
                Unit volume string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.UnitDegree">
            <summary>
                Unit degree string (Only deg for now)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.GetSubZoneConstraints(System.Int64,System.Double,System.Collections.Generic.List{System.Windows.Point})">
            <summary>
                Get the sub zone constraints
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.IsValidDouble(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Helper to validate double values.
                Errors will be loaded into the error dictionary by property name.
            </summary>
            <param name="value">double value</param>
            <param name="propertyExpression">property for IDataErrorInfo notification</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="dimension"></param>
            <returns>true if valid, else false</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.SetError(System.String,System.String)">
            <summary>
                Set an error condition
            </summary>
            <param name="fieldName"></param>
            <param name="error"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.ClearError(System.String)">
            <summary>
                Clear an error
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.ClearErrors">
            <summary>
                Clear view model errors
                (Used when deleting sub design areas)
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.ISubZonesConstraintsViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel">
            <summary>
                Interface for design iteration view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.IsCalculationActive">
            <summary>
                Is this iteration running a calculation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.DesignViewSettings">
            <summary>
                Design view settings to be serialized with workspace
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.LastToggleSelected">
            <summary>
                Last nav toggle selected
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.IsExportEnabled">
            <summary>
                Is exporting enabled for this iteration
                can be disabled by licensing
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.DesignParameters">
            <summary>
                Design parameters for this iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.Name">
            <summary>
                Name for this iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.DesignResultsViewModel">
            <summary>
                Design results view model for this iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.IterationGuid">
            <summary>
                Guid for this iteration instance
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.DesignEditorViewModel">
            <summary>
                Design editor view model for this iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.ConstraintsViewModel">
            <summary>
                Constraints view model for this iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.FieldDesignType">
            <summary>
                Field design type for this iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.HasConstraintsChanged">
            <summary>
            Have the constraints for this iteration changed
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.CurrentSelectedSectionName">
            <summary>
            Currently selected section name.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.CalculationErrorMessage">
            <summary>
            Calculation error message
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.HasError">
            <summary>
                True if the view model has an error else false
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.UnitArea">
            <summary>
                Unit area string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.UnitPercentage">
            <summary>
                Unit percentage string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.UnitDepth">
            <summary>
                Unit depth string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.UnitDistance">
            <summary>
                Unit distance string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.UnitSmallDistance">
            <summary>
                Unit distance string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.UnitVolume">
            <summary>
                Unit volume string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.UnitDegree">
            <summary>
                Unit degree string (Only deg for now)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.IsValidDouble(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Helper to validate double values.
                Errors will be loaded into the error dictionary by property name.
            </summary>
            <param name="value">double value</param>
            <param name="propertyExpression">property for IDataErrorInfo notification</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="dimension"></param>
            <returns>true if valid, else false</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.GetDesignSettings(System.String)">
            <summary>
                Get design settings by name
            </summary>
            <param name="designViewName"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.SetDesignSettings(System.String,Morph.Contracts.Interfaces.IDesignViewSettings)">
            <summary>
                Set the design settings
            </summary>
            <param name="designViewName"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.GetAllDesignViewSettings">
            <summary>
                Get list of all design view settings
            </summary>
            <returns></returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.PropertyChanged">
            <summary>
                Property changed event
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel.Dispose(System.Boolean)">
            <summary>
                Dispose
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel">
            <summary>
                Interface for DesignResultsViewModel
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.GetSectionResultInfo(System.String)">
            <summary>
            Return aggregated section information
            </summary>
            <param name="sectionName">name of section</param>
            <returns>PlaneInfo containing aggregate data</returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.SubZoneResults">
            <summary>
                Sub zone results
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.PlaneInfos">
            <summary>
                Information about plane(s) returned from engine
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.HingeResults">
            <summary>
                Information about plane(s) returned from engine
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.ActivityAreaResults">
            <summary>
            List of activity area reuslts for drainage
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.IsPurchaseRequired">
            <summary>
                Is a purchase required for this design result
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.DesignEditorViewModel">
            <summary>
                Design editor view model used to create the design results
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.DesignParameters">
            <summary>
                Constraints used to create the design results
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.Rows">
            <summary>
                Rows returned from design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.Columns">
            <summary>
                Columns returned from design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.ProposedDesign">
            <summary>
                Proposed design view model for the design result
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.CutFillModel">
            <summary>
                The cut fill model for the design result
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.DateCreated">
            <summary>
                Date created
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.DesignResultsEntity">
            <summary>
                Design result entity for this class
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.PrevCalculatedFee">
            <summary>
                Previously calculated fee
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.TotalExport">
            <summary>
                Total export
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.TotalImport">
            <summary>
                Total import
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.TotalArea">
            <summary>
                Total area
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.TotalFill">
            <summary>
                Total fill
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.TotalCut">
            <summary>
                Total cut
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.TotalShrinkage">
            <summary>
            The percentage volume reduction between total bank cut and total bank fill volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.TotalBulkage">
            <summary>
            The percentage volume expansion between total bank cut and total loose haul volumes.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.FeeViewModel">
            <summary>
                Fee dialog view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.HasError">
            <summary>
                True if the view model has an error else false
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.UnitArea">
            <summary>
                Unit area string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.UnitPercentage">
            <summary>
                Unit percentage string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.UnitDepth">
            <summary>
                Unit depth string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.UnitDistance">
            <summary>
                Unit distance string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.UnitSmallDistance">
            <summary>
                Unit distance string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.UnitVolume">
            <summary>
                Unit volume string
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.UnitDegree">
            <summary>
                Unit degree string (Only deg for now)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.ToDesignResultsEntity">
            <summary>
                Convert to design results entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.SubAreaBoundaries">
            <summary>
                Sub area boundaries (land leveling or sub-design areas)
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.IsValidDouble(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Helper to validate double values.
                Errors will be loaded into the error dictionary by property name.
            </summary>
            <param name="value">double value</param>
            <param name="propertyExpression">property for IDataErrorInfo notification</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="dimension"></param>
            <returns>true if valid, else false</returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.PropertyChanged">
            <summary>
                Property changed event
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel.Dispose(System.Boolean)">
            <summary>
                Dispose
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel">
            <summary>
                Interface for the fee view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.PrevCalculatedFee">
            <summary>
            Previous calculated fee
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.IsFeeVisible">
            <summary>
                Is fee visible
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.CalculatedUnitsKey">
            <summary>
            Units used at the time of the calculated fee creation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.CalculatedFee">
            <summary>
                Calculated fee
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.Fee">
            <summary>
                Non-calculated fee for the design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.CostPerVolume">
            <summary>
                Cost per volume
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.IsFeeCalculated">
            <summary>
                Flag to indicate usage of the Fee or a calculated Fee
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.Confirmed">
            <summary>
                Confirmed flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.Initialize(Morph.Contracts.Interfaces.ViewModels.IDesignResultsViewModel)">
            <summary>
                Initialize the view model from values in the design view model
            </summary>
            <param name="designResultsViewModel">current design view model</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.HasUnits">
            <summary>
                Override to return has units
            </summary>
            <returns></returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.NotifyPropertyChanged(System.String)">
            <summary>
                Helper to notify when a property changes
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFeeViewModel.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="dispoase"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel">
            <summary>
            Interface for field editor view model
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.Initialize(Morph.Contracts.DataContracts.Repository.DesignIteration,Morph.Contracts.DataContracts.Repository.FieldDesignType)">
            <summary>
            Initialize from saved design iteration model
            </summary>
            <param name="designIteration">design iteration model</param>
            <param name="designType">field design type</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.GetDesignIteration">
            <summary>
            Get the design iteration for this view model
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.DesignParameters">
            <summary>
            Design parameters for the iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.QuoteDesignViewModel">
            <summary>
            Current quote design view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.ExplorerViewModel">
            <summary>
                Explorer view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.StatusMessages">
            <summary>
                Status messages api
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.CalculateCommand">
            <summary>
                Command for cloning a field
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.FinalizeCommand">
            <summary>
                Command for finalizing a design and generating reports
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.DesignEditor">
            <summary>
                Design editor
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.SelectedItem">
            <summary>
                Currently selected tab item
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.TabItems">
            <summary>
                Tab items for the view
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.Constraints">
            <summary>
                Design constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.IsIdle">
            <summary>
                Test if currently idle
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.IsCalcEnabled">
            <summary>
                Is calculation enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.DesignEditorViewModel">
            <summary>
                Design editor view model for this iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.IterationName">
            <summary>
                Name for this iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.EarliestExpirationDateTime">
            <summary>
                The earlier expiration data for the iteration
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.HasError">
            <summary>
            True if the view model has an error else false
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.IsNavigationTarget(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
                Called to determine if this is the navigation target
            </summary>
            <param name="navigationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.OnNavigatedFrom(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
                Called when navigated from
            </summary>
            <param name="navigationContext"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.OnNavigatedTo(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
                Navigated to from explorer
            </summary>
            <param name="navigationContext"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.Initialize(Morph.Contracts.Interfaces.ViewModels.IDesignViewModel,Morph.Contracts.Interfaces.ISurface3D)">
            <summary>
                Initialize this instance of the view model
            </summary>
            <param name="designViewModel">design view model</param>
            <param name="originalSurface">original surface</param>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.IsValidDouble(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Helper to validate double values.
                Errors will be loaded into the error dictionary by property name.
            </summary>
            <param name="value">double value</param>
            <param name="propertyExpression">property for IDataErrorInfo notification</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="dimension">unit dimension</param>
            <returns>true if valid, else false</returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IIterationViewModel.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.FieldViewModel">
            <summary>
            Field view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.WindowTitle">
            <summary>
            Gets the window title.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.CommonDialogInteractionRequest">
            <summary>
                Common dialog interaction request
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.MessageDialogInteractionRequest">
            <summary>
            Gets the message dialog interaction request.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.Confirmed">
            <summary>
                Indicates if confirmed or canceled
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.PropertyChanged">
            <summary>
                Notification event handler
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.NodesOutline">
            <summary>
            Gets or sets the nodes outline.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.SurfaceBounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.IsPanning">
            <summary>
            Gets or sets a value indicating whether [is panning].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.IsZooming">
            <summary>
            Gets or sets a value indicating whether [is zooming].
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.NotifyZoomExtents">
            <summary>
                Event handler for zoom to extents
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.FireZoomExtentsEvent">
            <summary>
                Fires the zoom to extent event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.LineStrings">
            <summary>
            Gets or sets the line strings.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.TopPoint">
            <summary>
            Gets or sets the origin point.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.BottomPoint">
            <summary>
            Gets or sets the bottom point.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.ShapeFile">
            <summary>
            Gets or sets the shape file.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.ShowProperties(System.Int32,System.Int32)">
            <summary>
            Shows the properties.
            </summary>
            <param name="recNumber">The part number.</param>
            <param name="pointCount">The record number.</param>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.DesignMode">
            <summary>
            Gets or sets the design mode.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.CanClose">
            <summary>
            Determines whether this instance can close.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.ZoomToExtentsCommand">
            <summary>
            Gets or sets the zoom to extents command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.BoundaryPoints">
            <summary>
            Gets or sets the boundary points.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.SectionLines">
            <summary>
            Section lines
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.SurfaceBoundary">
            <summary>
            Gets the surface boundary.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.SurfaceFile">
            <summary>
            Gets or sets the surface file.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.OpenSurfacesCommand">
            <summary>
            Gets the open surfaces command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.NavigateNextCommand">
            <summary>
            Gets the navigate next command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.NavigateBackCommand">
            <summary>
            Gets the navigate back command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.FinishCommand">
            <summary>
            Gets the finish command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.IsBackEnabled">
            <summary>
            Gets a value indicating whether [is back enabled].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.IsNextEnabled">
            <summary>
            Gets a value indicating whether [is next enabled].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.NextButtonText">
            <summary>
            Gets or sets the finish button text.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.CurrentControl">
            <summary>
            Gets or sets the current control.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.FieldExists">
            <summary>
                Supplied function to test if a field exists
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel.ShouldClose">
            <summary>
            To indicate whether to close the pop up
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel">
            <summary>
            View model for NewProject and NewField
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel.SurfaceFile">
            <summary>
            Gets or sets the surface file.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel.CommonDialogInteractionRequest">
            <summary>
            Gets the common dialog interaction request.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel.OpenSurfacesCommand">
            <summary>
            Gets the open surfaces command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel.NavigateNextCommand">
            <summary>
            Gets the navigate next command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel.NavigateBackCommand">
            <summary>
            Gets the navigate back command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel.FinishCommand">
            <summary>
            Gets the finish command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel.IsBackEnabled">
            <summary>
            Gets a value indicating whether [is back enabled].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel.IsNextEnabled">
            <summary>
            Gets a value indicating whether [is next enabled].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel.NextButtonText">
            <summary>
            Gets or sets the finish button text.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel.CurrentControl">
            <summary>
            Gets or sets the current control.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel.FieldExists">
            <summary>
                Supplied function to test if a field exists
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel.Confirmed">
            <summary>
                Indicates if confirmed or canceled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMergeDataWizardViewModel.ShouldClose">
            <summary>
            To indicate whether to close the pop up
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ILandFormingConstraintsViewModel">
            <summary>
                Leveling constraints view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILandFormingConstraintsViewModel.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILandFormingConstraintsViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILandFormingConstraintsViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.ILandFormingConstraintsViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ISelectOrganizationViewModel">
            <summary>
                Connected farm select organization view model interface.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISelectOrganizationViewModel.IsOkEnabled">
            <summary>
                Gets a value indicating whether [is ok enabled].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISelectOrganizationViewModel.IsCancelEnabled">
            <summary>
                Gets a value indicating whether [is cancel enabled].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISelectOrganizationViewModel.IsExecutingSelect">
            <summary>
                Flag to determine if the Select API is executing
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISelectOrganizationViewModel.IsDemoStartup">
            <summary>
              TFS 2572
            Are we in demo startup
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISelectOrganizationViewModel.CloseAction">
            <summary>
                This allows the view model to close the view.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISelectOrganizationViewModel.AvailableOrganizations">
            <summary>
                Available organizations
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISelectOrganizationViewModel.CurrentOrganization">
            <summary>
                Current organization
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISelectOrganizationViewModel.GoOnlineToSelectedOrganization">
            <summary>
                Go online to a selected organization.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISelectOrganizationViewModel.CancelSelectOrganization">
            <summary>
            Forces a cancellation of the select organization.
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.SubZoneType">
            <summary>
            2D editor line types
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.SubZoneType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.SubZoneType.TopSoil">
            <summary>
            Top soil
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.SubZoneType.LevelPad">
            <summary>
            Level pad
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.SubZoneType.TailDitch">
            <summary>
            Tail ditch
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.SubZoneType.PipeBed">
            <summary>
            Pipe Bed
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.SubZoneType.Custom">
            <summary>
            Custom options
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ISubZoneViewModel">
            <summary>
                Interface for the subzone view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneViewModel.SubZoneType">
            <summary>
            SubZone type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneViewModel.SubZoneTypeName">
            <summary>
            SubZone type name
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneViewModel.SubZone">
            <summary>
            Read only access to subzone model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISubZoneViewModel.IsFieldSubZone">
            <summary>
            Is Field subzone
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISubZoneViewModel.GetSubZoneBrush(Morph.Contracts.Interfaces.ViewModels.SubZoneType)">
            <summary>
            
            </summary>
            <param name="zoneType"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.LineType">
            <summary>
            2D editor line types
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LineType.SectionLine">
            <summary>
            Section line type
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LineType.Hinge">
            <summary>
            Hinge line type
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LineType.Ditch">
            <summary>
            Ditch line type
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LineType.PipeLine">
            <summary>
            Pipeline line type
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LineType.ExclusionArea">
            <summary>
            Exclusion area line type
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LineType.ActivityArea">
            <summary>
            Activity area type
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LineType.BasinArea">
            <summary>
            Basin area type
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LineType.SectionArea">
            <summary>
            Section area 
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LineType.DesignConstraint">
            <summary>
            Design Constraint
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LineType.FixedPoint">
            <summary>
            Fixed point
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LineType.FieldPoint">
            <summary>
            Field point
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LineType.Boundary">
            <summary>
            Boundary
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LineType.SubZone">
            <summary>
            SubZone
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.StampDitchEnum">
            <summary>
            Stamp Ditch
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.StampDitchEnum.Original">
            <summary>
            Original surface
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.StampDitchEnum.Design">
            <summary>
            Design suface
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.StampDitchEnum.Both">
            <summary>
            Both, original and design surface
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.DitchSideSlopeEnum">
            <summary>
            Ditch side sLope enum
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.DitchSideSlopeEnum.Percentage">
            <summary>
            percentage
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.DitchSideSlopeEnum.RiseOverRun">
            <summary>
            Rise over run over 
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel">
            <summary>
            Base view model for line edits
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.Id">
            <summary>
             Unique Id
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.LineData">
            <summary>
            Get the line data model for the view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.LineType">
            <summary>
            Line type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.Name">
            <summary>
                The name of the haul road.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.Priority">
            <summary>
            Priority of the element (Z-Order)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.Notes">
            <summary>
            Notes/comments
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.Points">
            <summary>
                The elevation at which the road begins.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.StrokeBrush">
            <summary>
            Stroke brush
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.StrokeThickness">
            <summary>
            Stroke thickness
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.IsSelected">
            <summary>
            IsSelected
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.IsNew">
            <summary>
            IsNew
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.ContextMenu">
            <summary>
            Gets or sets the context menu.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.Tag">
            <summary>
            Tag utility property
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.ShowPropertiesCommand">
            <summary>
            Show properties command
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IBaseLineViewModel.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IAdornedElement">
            <summary>
                Interface for element labels in the canvas
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IFieldEdits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldEdits.Surface">
            <summary>
            surface points
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldEdits.BoundaryPoints">
            <summary>
            Boundary points
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldEdits.FixedPoints">
            <summary>
            Field points (benchmarks)
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel">
            <summary>
                Base report view model interface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.DateCreated">
            <summary>
                Date time the design was created
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.PrintCommand">
            <summary>
                Print command delegate
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.OriginalSurface">
            <summary>
                The original surface associated with the design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.ExplorerViewModel">
            <summary>
                The explorer view model instance
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.DesignParamViews">
            <summary>
                Collection of user controls contain design parameter views
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.DesignName">
            <summary>
                Current design name
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.FieldName">
            <summary>
                Current field name
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.ProjectName">
            <summary>
                Current project name
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.TitleLine1">
            <summary>
                The title name for reports
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.TitleLine2">
            <summary>
                The title address for reports
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.TitleLine3">
            <summary>
                The title City for reports
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.TitleLine4">
            <summary>
                The title state for reports
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.TitleLine5">
            <summary>
                The title zip code for reports
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.TitleLogo">
            <summary>
                The title logo for reports
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.ReportTitle">
            <summary>
                Title for the report
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.FieldOfView">
            <summary>
                Field of view for camera
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.Centroid">
            <summary>
                Centroid for the viewed object
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.ZoomToExtentsCommand">
            <summary>
                Zoom to extents command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.TopViewCommand">
            <summary>
                Top view command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.ZoomGesture">
            <summary>
                Current zoom gesture
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.RotateGesture">
            <summary>
                Current rotate gesture
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.PanGesture">
            <summary>
                Current pan gesture
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.IsRotating">
            <summary>
                Get / Set rotating state and gesture
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.IsPanning">
            <summary>
                Get / Set panning state and gesture
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.IsZooming">
            <summary>
                Get / Set zooming state and gesture
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.CameraPosition">
            <summary>
                Camera position
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.LookDirection">
            <summary>
                Camera look direction
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.UpDirection">
            <summary>
                Camera up direction
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.NearPlaneDistance">
            <summary>
                Camera NearPlaneDistance
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.FarPlaneDistance">
            <summary>
                Camera FarPlaneDistance
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.Width">
            <summary>
                Camera viewing box width, in world units
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.ShouldZoomToExtent">
            <summary>
                Set flag to zoom to extent when loaded
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.MaxExaggeration">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.HasError">
            <summary>
                True if the view model has an error else false
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.IsNotEvalMode">
            <summary>
                If we are in eval mode than hide the print key.
                Fix for TFS 2567.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.IsWaterMarkVisible">
            <summary>
                Show a water mark in eval mode.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.OnPrint">
            <summary>
                On print event handler
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.Initialize">
            <summary>
                Initialize this instance
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.IsNavigationTarget(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
                Called to determine if correct navigation target
            </summary>
            <param name="navigationContext">contains navigation context parameters</param>
            <returns>true if this instance is the target</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.OnNavigatedFrom(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
                Called when navigated away from
            </summary>
            <param name="navigationContext">contains navigation context parameters</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.OnNavigatedTo(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
                Called when navigated to
            </summary>
            <param name="navigationContext">contains navigation context parameters</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.IsValidDouble(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Helper to validate double values.
                Errors will be loaded into the error dictionary by property name.
            </summary>
            <param name="value">double value</param>
            <param name="propertyExpression">property for IDataErrorInfo notification</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="dimension">unit dimension</param>
            <returns>true if valid, else false</returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IBaseReportViewModel.PropertyChanged">
            <summary>
                Event handler for property changed
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IBaseViewModel">
            <summary>
            Interface for the base view model
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IBaseViewModel.GetErrorKeys">
            <summary>
            Return a list of error keys
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseViewModel.HasError">
            <summary>
            Does the view model have an error
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBaseViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IBaseViewModel.PropertyChanged">
            <summary>
            Property changed notifications
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IBoundaryViewModel">
            <summary>
                Interface for the boundary view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IBoundaryViewModel.PointZList">
            <summary>
            Z value for each point if any in the Points collection
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IConstraintsViewModel">
            <summary>
            Interface for constraints view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IConstraintsViewModel.IsSubmitButtonEnabled">
            <summary>
                Flag to enable / disable OK button
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IConstraintsViewModel.ConstraintErrors">
            <summary>
            Get an array of constraint errors
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IConstraintsViewModel.InitChangeHandlers">
            <summary>
            Initialize property change handlers
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IConstraintsViewModel.StopChangeHandlers">
            <summary>
            Stop change handlers
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IConstraintsViewModel.PropertyChanged">
            <summary>
                Event handler for property changed
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel">
            <summary>
                Interface for CrossSlopeViewModel
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel.EngineMinSlope">
            <summary>
                Return optional engine version of min slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel.EngineMaxSlope">
            <summary>
                Return optional engine version of min slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel.EngineMaxChangeRate">
            <summary>
                Return optional engine version of max change rate
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel.SlopeOrientation">
            <summary>
                Gets or sets the slope orientation.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel.MinSlope">
            <summary>
                Gets or sets the minimum slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel.MaxSlope">
            <summary>
                Gets or sets the maximum slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel.MaxChangeRate">
            <summary>
                Gets or sets the maximum change rate of the slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel.MaxDistanceRate">
            <summary>
            Get Set rate distance
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel.MaxChangeRateReport">
            <summary>
                Gets or sets the maximum change rate for the report.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel.PropertyChanged">
            <summary>
                Property changed event
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ICrossSlopeViewModel.GetErrorKeys">
            <summary>
            Return a list of error keys
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel">
            <summary>
                Interface for the design editor view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.IsInitialized">
            <summary>
            Returns true if design editor initialized
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.CompleteAnyDesignElement">
            <summary>
            Complete any outstanding design element
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.GetExclusionAreas">
            <summary>
                Get list of exclusion areas
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.DesignEdits">
            <summary>
            Get the current design edits
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.Initialize(Morph.Contracts.DataContracts.Repository.DesignEditsEntity)">
            <summary>
            Initialize with design edits
            </summary>
            <param name="designEdits"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.UpdateEventsAndSubscriptions(System.Boolean)">
            <summary>
            Update events and subscriptions
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.Ditches">
            <summary>
                Design ditches
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.PipeLines">
            <summary>
                Design ditches
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.Hinges">
            <summary>
                Design hinges
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.ReturnedHinges">
            <summary>
                Design hinges returned from section area manager
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.ExclusionAreas">
            <summary>
                Design exclusion areas
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.ActivityAreas">
            <summary>
                Design activity areas
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.BasinAreas">
            <summary>
                Design basin areas
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.SectionLines">
            <summary>
                Design section areas
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.SectionAreas">
            <summary>
                Section Areas
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.SubZones">
            <summary>
                Sub zones
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.FixedPoints">
            <summary>
                This is how we load the field points from serialization
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.FieldPoints">
            <summary>
                Gets or sets the field points.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.StickyNotes">
            <summary>
            Sticky notes
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.GetDitches">
            <summary>
            Get all the ditches
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.GetValidDitches">
            <summary>
            Get pre processed ditched from ditchmanager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.GetPipeLine">
            <summary>
                Get the pipeline
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.Furrows">
            <summary>
            Furrows
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.DeSelectDesignElement">
            <summary>
            
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.GetSelectedSectionAreas">
            <summary>
            Gets the selected section areas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.GetSubZones">
            <summary>
            Gets the selected section areas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.GetActivityAreas">
            <summary>
            Gets all activity areas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.GetBasinAreas">
            <summary>
            Gets all basin areas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel.IterationGuid">
            <summary>
            Iteration guid for the design
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IDesignEditViewModel">
            <summary>
                Design edit view model
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IDesignIterationsViewModel">
            <summary>
                Interface for design iterations view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationsViewModel.HasError">
            <summary>
                True if the view model has an error else false
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationsViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignIterationsViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignIterationsViewModel.IsNavigationTarget(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
                Called to determine if this is the navigation target
            </summary>
            <param name="navigationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignIterationsViewModel.OnNavigatedFrom(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
                Called when navigated from
            </summary>
            <param name="navigationContext"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignIterationsViewModel.OnNavigatedTo(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
                Navigated to from explorer
            </summary>
            <param name="navigationContext"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignIterationsViewModel.IsValidDouble(System.Double,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Double,System.Double,Morph.Contracts.UnitDimension)">
            <summary>
                Helper to validate double values.
                Errors will be loaded into the error dictionary by property name.
            </summary>
            <param name="value">double value</param>
            <param name="propertyExpression">property for IDataErrorInfo notification</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="dimension">unit dimension</param>
            <returns>true if valid, else false</returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IDesignIterationsViewModel.PropertyChanged">
            <summary>
                Property changed event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IDesignParameters">
            <summary>
                Interface for design parameters
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignParameters.GetReportViews">
            <summary>
                Get the report views for the design parameters
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignParameters.Constraints">
            <summary>
            List of constraints for the design parameters
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignParameters.ValidateConstraints">
            <summary>
            Validate the constraints
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel">
            <summary>
                Interface for the design view model
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.SyncViewSettings(System.Collections.Generic.Dictionary{System.String,Morph.Contracts.Interfaces.IDesignViewSettings})">
            <summary>
            Sync view Settings
            </summary>
            <param name="designViewSettings">design view settings to sync</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.UnsyncViewSettings(System.Collections.Generic.Dictionary{System.String,Morph.Contracts.Interfaces.IDesignViewSettings})">
            <summary>
            Unsync iteration view settings
            </summary>
            <param name="designViewSettings">design view setting to use for unsync</param>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.AreViewsInSync">
            <summary>
            Are the iteration views in sync
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.DesignIterations">
            <summary>
                List of design iterations
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.DesignIterationViewModels">
            <summary>
                List of design iteration view models
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.DesignGuid">
            <summary>
                Design guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.SelectedIterationGuid">
            <summary>
                Currently selected iteration guid for this design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.FullDisplayName">
            <summary>
                Full display name when finalized
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.DesignIterationsViewModel">
            <summary>
                Design iterations view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.ImportedDesignEdit">
            <summary>
                Imported design edits from surface file
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.DesignType">
            <summary>
                Field design type for this view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.RenameDesignCommand">
            <summary>
                Command to rename a design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.DeleteDesignCommand">
            <summary>
                Command to delete a design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.Name">
            <summary>
                Name for the navigation element
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.Parent">
            <summary>
                Parent for the navigation element
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.IsSelected">
            <summary>
                Indicates if currently selected
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.IsExpanded">
            <summary>
                Indicates if is currently expanded
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.ArchiveIteration(Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel)">
            <summary>
                Archive an iteration, rename to Archive of ....
            </summary>
            <param name="designIterationViewModel"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.GetIterations">
            <summary>
                Get all design iteration view models
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.RenameIteration(System.Guid,System.String)">
            <summary>
                Rename an iteration
            </summary>
            <param name="iterationGuid"></param>
            <param name="name"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.CloneIteration(Morph.Contracts.Interfaces.ViewModels.IDesignIterationViewModel)">
            <summary>
                Clone an iteration
            </summary>
            <param name="designIterationViewModel"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.DeleteIteration(System.Guid)">
            <summary>
                Delete an iteration
            </summary>
            <param name="iterationGuid"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.Initialize(Morph.Contracts.DataContracts.Repository.DesignEntity,Morph.Contracts.Interfaces.INavigationElement,Morph.Contracts.DataContracts.Repository.FieldDesignType)">
            <summary>
                Initialize the design view model instance
            </summary>
            <param name="design">design model</param>
            <param name="parent">navigation parent</param>
            <param name="designType">field design type</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.ShowStatusError(System.String)">
            <summary>
                Show error message on status bar
            </summary>
            <param name="message">message to display</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.ShowStatusWarning(System.String)">
            <summary>
                Show warning message on status bar
            </summary>
            <param name="message">message to display</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.ShowStatusInformation(System.String)">
            <summary>
                Show informational message on status bar
            </summary>
            <param name="message">message to display</param>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IDesignViewModel.PropertyChanged">
            <summary>
                Property changed event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel">
            <summary>
                Ditch view model interface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.DitchEntity">
            <summary>
            Read only access to ditch model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.PointZList">
            <summary>
            Z value for each point if any in the Points collection
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.IsDefaultProfile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.SelectedDitchProfile">
            <summary>
            Selected ditch profile
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.SpinePoint">
            <summary>
            Selected ditch  origin/spine
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.SpinePointIndex">
            <summary>
            Origin tagged to the given node index
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.Depth">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.BottomWidth">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.Rise">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.Run">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.TransitionGap">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.MinSlope">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.MaxSlope">
            <summary>
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.CutVolume">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.FillVolume">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.StampType">
            <summary>
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDitchViewModel.GetDitchCrossSectionProfile">
            <summary>
            Get Cross section profile for the ditch
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IDrainageCalculationConfirmation">
            <summary>
                Interface for DrinageCalculationConfirmation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDrainageCalculationConfirmation.MaterialViewModel">
            <summary>
                Gets or sets the material view model.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDrainageCalculationConfirmation.SamplingGridViewModel">
            <summary>
            Control grid for spacing
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDrainageCalculationConfirmation.SlopeViewModel">
            <summary>
                Gets or sets the slope view model.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDrainageCalculationConfirmation.ActivityAreaConstraintsViewModels">
            <summary>
                Gets or sets the leveling constraints view model.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDrainageCalculationConfirmation.BasinAreaConstraintsViewModels">
            <summary>
                Gets or sets the basin area constraints view model.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IDrainageCalculationConfirmation.IsSubmitButtonEnabled">
            <summary>
                Is submit button enabled
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDrainageCalculationConfirmation.ToSurfaceConstraints(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
                Convert view model settings to surface constraints
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDrainageCalculationConfirmation.Initialize(Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel)">
            <summary>
                Initializes the specified design editor view model.
            </summary>
            <param name="designEditorViewModel"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IDrainageCalculationConfirmation.Update(Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel)">
            <summary>
                Update with the design editor view model
            </summary>
            <param name="designEditorViewModel"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel">
            <summary>
            IEditorViewModel interface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.CurrentCursor">
            <summary>
            current cursor
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.IsPanning">
            <summary>
                Zooming
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.IsZooming">
            <summary>
                Panning
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.SnapToPoints">
            <summary>
                Snapped enabled/disabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.IsSnapped">
            <summary>
            Is point snapped
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.SnappingPoints">
            <summary>
            list of points available for snapping
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.CommonDialogInteractionRequest">
            <summary>
                Interaction request for common dialog
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.NotifyZoomExtents">
            <summary>
                Event handler for zoom to extents
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.FireZoomExtentsEvent">
            <summary>
                Fires the zoom to extent event
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.NotifyBoundsChanged">
            <summary>
                Event handler for bounds changed
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.FireBoundsChangedEvent">
            <summary>
            Fires the bounds changed event
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.NotifyTransformChanged">
            <summary>
                Notify transform changed event
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.FireTransformChangedEvent">
            <summary>
                Fire transform changed event
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IEditorViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IExclusionAreaViewModel">
            <summary>
                Interface for the exclusion area view model
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel">
            <summary>
                Interface for the explorer view model
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.GetCurrentDesignConstraints">
            <summary>
            Get current iteration's design constraints (land leveling, subDesign areas)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.SetCurrentDesignConstraints(System.Collections.Generic.List{Morph.Contracts.Interfaces.IDesignConstraint})">
            <summary>
            Set current iteration's design constraints (land leveling, subDesign areas)
            </summary>
            <param name="constraints"></param>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.CurrentDesignIterationViewModel">
            <summary>
            Current design view model
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.GetCurrentFieldInfo">
            <summary>
            Get the current field info
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.GetOriginalSurface">
            <summary>
            Get the original surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.SelectedIterationGuid">
            <summary>
            Currently selected iteration guid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.CurrentDesignViewModelGuid">
            <summary>
                Guid for current design view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.SelectedItem">
            <summary>
                Currently selected item in the tree
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.PropertyChanged">
            <summary>
                Property changed event
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.GetDesign(System.Guid,System.Guid,System.Guid,Morph.Contracts.Interfaces.ISurface3D@)">
            <summary>
                Get the design information
            </summary>
            <param name="projectGuid">project guid</param>
            <param name="fieldGuid">field guid</param>
            <param name="designGuid">guid for the design</param>
            <param name="originalSurface">output for the original surface</param>
            <returns>the design view model associated with the project/field/design</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.DoesProjectNameExist(System.String)">
            <summary>
                Checks if project name exists
            </summary>
            <param name="name">project name</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.AddProject(System.String)">
            <summary>
                Add a project
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.ResetWorkspace">
            <summary>
                Resets the workspace back to it's initial state
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.GetOriginalSurface(System.Guid,System.Guid)">
            <summary>
                Get the original surface for the field
            </summary>
            <param name="projectGuid">project guid</param>
            <param name="fieldGuid">field guid</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.GetField(System.Guid,System.Guid)">
            <summary>
                Get the field view model
            </summary>
            <param name="projectGuid">project guid</param>
            <param name="fieldGuid">field name</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.GetProject(System.Guid)">
            <summary>
            Get the project viewModel
            </summary>
            <param name="projectGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.GetCurrentField">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.AddProjectAndField(System.String,System.String,Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.IDesignEditImports,Morph.Contracts.DataContracts.Repository.FieldImportEnum,Morph.Contracts.DataContracts.Repository.FieldDesignType,System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D},System.Boolean)">
            <summary>
                Adds the project and field.
            </summary>
            <param name="projectName">Name of the project.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="fieldType"></param>
            <param name="designType">Type of the design.</param>
            <param name="originalSurface"></param>
            <param name="designEditImports"></param>
            <param name="surveyPoints"></param>
            <param name="autoGenerateBoundary"> Flag to allow auto boundary generation</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.AddNewField">
            <summary>
                Adds the new field.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.GetCurrentSurfaces">
            <summary>
            Get list of current surfaces
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.GetProjects">
            <summary>
            Get all projects in the explorer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExplorerViewModel.GetActiveViewInfo(System.Guid@,System.Guid@,Morph.Contracts.DataContracts.LastToggleSelectedEnum@)">
            <summary>
            Get the active view info
            </summary>
            <param name="designGuid"></param>
            <param name="iterationGuid">out for iteration guid</param>
            <param name="selectedViewEnum">out for selected view enum</param>
            <returns>if and iteration is the active view, iteration guid and iteration active view enum else default(Guid) for iteration guid and none for selectedViewEnum</returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation">
            <summary>
            Interface for Export to GPS Confirmation view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.CommonDialogInteractionRequest">
            <summary>
            Common dialog interaction request
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.OpenSaveFileDialogCommand">
            <summary>
            Command to open file dialog
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.MinGridSize">
            <summary>
            Gets or sets the minimum size of the grid.
            </summary>
            <value>
            The minimum size of the grid.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.MaxGridSize">
            <summary>
            Gets or sets the maximum size of the grid.
            </summary>
            <value>
            The maximum size of the grid.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.HeaderBytes">
            <summary>
            Stores number of bytes in file dedicated to headers.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.NumberOfPoints">
            <summary>
            Stores surface dimensions
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.GpsData">
            <summary>
            GPS data to export.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.DesignSurface">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.ComputeLimits(System.Nullable{System.Double})">
            <summary>
            
            </summary>
            <param name="angle"></param>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.GridSize">
            <summary>
            Stores the grid size
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.OutputFile">
            <summary>
            Holds the path of output file
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.IsHighRes">
            <summary>
            Is maximum file size 1MB (low res) or 128MB (high res)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.IsSaveEnabled">
            <summary>
            To enable submitting the data
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.Error">
            <summary>
            Error list in string form
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.Confirmed">
            <summary>
            Indicates if confirmed or canceled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.MinGridSizeLoRes">
            <summary>
            The minimum size of the grid in low res mode.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.MaxGridSizeLoRes">
            <summary>
            The maximum size of the grid in low res mode.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.MinGridSizeHiRes">
            <summary>
            The minimum size of the grid in high res mode.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.MaxGridSizeHiRes">
            <summary>
            The maximum size of the grid in high res mode.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.Rotation">
            <summary>
            rotate control nodes
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.IsBoundaryExtensionAvailable">
            <summary>
            Is boundary extension allowed
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.BoundaryExtension">
            <summary>
            Boundary extension by
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.MinBoundaryExtension">
            <summary>
            Minimum boundary extension
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.PropertyChanged">
            <summary>
            Notification event handler
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IExportToGPSConfirmation.Item(System.String)">
            <summary>
            Column name for IDataErrorInfo
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IFieldEditorViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFieldEditorViewModel.UpdateEvents">
            <summary>
            Update events
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldEditorViewModel.FixedPoints">
            <summary>
                This is how we load the field points from serialization
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldEditorViewModel.FieldPoints">
            <summary>
                Gets or sets the field points.
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IFieldEditorViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFieldEditorViewModel.RemoveFixedPoint(Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel)">
            <summary>
            
            </summary>
            <param name="fieldPoint"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel">
            <summary>
                Interface for the field view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.FieldGuid">
            <summary>
            Field iteration guid
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.Initialize(Morph.Contracts.DataContracts.Repository.FieldEntity)">
            <summary>
            Initialize the field with the field model
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.CreateDesign(System.String,Morph.Contracts.DataContracts.Repository.FieldDesignType)">
            <summary>
            Create a new design
            </summary>
            <param name="designName"></param>
            <param name="fieldDesignType"></param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.ImportedDesignEdit">
            <summary>
                Design elements imported from external files
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.FieldEditorViewModel">
            <summary>
                Field editor view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.OriginalSurface">
            <summary>
                The original field surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.CloneCommand">
            <summary>
                Command for cloning a field
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.ImportSurfaceAsNewFieldCommand">
            <summary>
            clone surface as new field in the
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.DeleteCommand">
            <summary>
                Command for deleting a field
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.ImportCommand">
            <summary>
                Command for importing / merging field surfaces
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.RenameCommand">
            <summary>
                Command for renaming a field
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.NewLandLevelingCommand">
            <summary>
                Command to create a new land leveling design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.NewDrainageCommand">
            <summary>
                Command to create a new drainage design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.NewIrrigationCommand">
            <summary>
                Command to create a new irrigation design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.NewSubZoneCommand">
            <summary>
            Command to create a new subzone design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.MergeDataCommand">
            <summary>
            Merge Data command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.Designs">
            <summary>
                List of generated designs for the field
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.Name">
            <summary>
                Name for the navigation element
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.Parent">
            <summary>
                Parent for the navigation element
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.IsSelected">
            <summary>
                Indicates if currently selected
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.IsExpanded">
            <summary>
                Indicates if is currently expanded
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.FieldType">
            <summary>
                Field Type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.FieldDesignType">
            <summary>
                Field design type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.OnImportsSatisfied">
            <summary>
                Handler for impors satisfied
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.AddDesigns(System.Collections.Generic.List{Morph.Contracts.DataContracts.Repository.DesignEntity})">
            <summary>
                Add designs previously saved to disk
            </summary>
            <param name="designs"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.DeleteDesign(System.Guid,System.String)">
            <summary>
                Delete a design by name
            </summary>
            <param name="id"></param>
            <param name="designName"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.DoesDesignExist(System.String)">
            <summary>
                Check if design name already exists
            </summary>
            <param name="designName"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.ShowStatusError(System.String)">
            <summary>
                Show error message on status bar
            </summary>
            <param name="message">message to display</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.ShowStatusWarning(System.String)">
            <summary>
                Show warning message on status bar
            </summary>
            <param name="message">message to display</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.ShowStatusInformation(System.String)">
            <summary>
                Show informational message on status bar
            </summary>
            <param name="message">message to display</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.MergeFieldData(System.Collections.Generic.IList{Morph.Contracts.Interfaces.IBenchmark},System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{Morph.Contracts.Interfaces.ISectionLine})">
            <summary>
                Merge field data
            </summary>
            <param name="benchmarks"></param>
            <param name="sectionLines"></param>
            <param name="pointsList"></param>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.MapData">
            <summary>
            backgroung map image data
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.MapQueryBounds">
            <summary>
            Background Map Query bounds
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.MapScaleFactor">
            <summary>
            Map Scale Factor
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.MapWorldLocation">
            <summary>
            Map world location
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.AutoGenerateBoundary">
            <summary>
            Flag to allow auto boundary generation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.EdgeLength">
            <summary>
            Max edge length used for inserting a boundary if it's missing
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldViewModel.SurveyPoints">
            <summary>
            survey points
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.BenchMarkConstraintType">
            <summary>
                BenchMarkConstraintType
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.BenchMarkConstraintType.Fixed">
            <summary>
                Fixed
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.BenchMarkConstraintType.NotFixed">
            <summary>
                Not fixed
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel">
            <summary>
                Interface for Field Point ViewModel
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel.Name">
            <summary>
                Gets or sets the name.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel.Position2D">
            <summary>
                Gets or sets the position.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel.ToolTip">
            <summary>
                Gets the tool tip.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel.IsMasterBenchMark">
            <summary>
                Gets a value indicating whether [is master bench mark].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel.IsBenchMark">
            <summary>
                Gets or sets a value indicating whether [is bench mark].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel.ContextMenu">
            <summary>
            Benchmark context menu
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel.ConstraintType">
            <summary>
                Gets or sets the type of the constraint.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel.Id">
            <summary>
            Id used for field processing
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel.IsIgnored">
            <summary>
            It is fixed but not included in the design constraints
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel.IsSelected">
            <summary>
            This point is selected
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel.FixedPoint">
            <summary>
                Get the fixed point for this field point
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel.PropertyChanged">
            <summary>
                Property changed notifications
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IFieldPointViewModel.Dispose(System.Boolean)">
            <summary>
            Dispoase
            </summary>
            <param name="dispoase"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IHingeViewModel">
            <summary>
                Interface for hinge view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IHingeViewModel.HingeEntity">
            <summary>
            Read only access to hinge model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IHingeViewModel.IsFloatingZ">
            <summary>
            Is Z floating
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IHingeViewModel.ShowFloatingText">
            <summary>
            used for updating hinge point z elevation field in the properties dialog
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IHingeViewModel.PointZList">
            <summary>
            Z value for each point if any in the Points collection
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IHingeViewModel.CrossSlopeRight">
            <summary>
            Cross slope right
            Valid values -100.00 thru 100.00
                Optional
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IHingeViewModel.CrossSlopeLeft">
            <summary>
            Cross slope left
            Valid values -100.00 thru 100.00
                Optional
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IHingeViewModel.MainSlope">
            <summary>
            Main Slope
            Valid values -100.00 thru 100.00
                Optional
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.TransportationType">
            <summary>
                Enum for TransportationType
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.TransportationType.Balanced">
            <summary>
                Balance cut fill
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.TransportationType.Import">
            <summary>
                Balance by import
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.TransportationType.Export">
            <summary>
                Balance by export
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.TransportationType.Free">
            <summary>
                No balancing
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.CrossSlopeOrientation">
            <summary>
                Enum for CrossSlopeOrientation
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.CrossSlopeOrientation.Left">
            <summary>
                Slope orientation to the left
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.CrossSlopeOrientation.Right">
            <summary>
                Slope orientation to the right
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IIrrigationCalculationViewModel">
            <summary>
                Interface for IrrigationCalculationViewModel
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIrrigationCalculationViewModel.MaterialViewModel">
            <summary>
                Gets or sets the material view model.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIrrigationCalculationViewModel.RowsViewModel">
            <summary>
                Gets or sets the rows view model.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IIrrigationCalculationViewModel.CrossSlopeViewModel">
            <summary>
                Gets or sets the cross slope view model.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IIrrigationCalculationViewModel.ToRowsConstraints(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Windows.Point}},System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
                Get row constraints from the view model
            </summary>
            <param name="boundary">boundary</param>
            <param name="pipeline">pipeline</param>
            <param name="ditchList"></param>
            <param name="exclusionZones">exclusion zones</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IIrrigationCalculationViewModel.Initialize(Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel)">
            <summary>
                Initializes the specified design editor view model.
            </summary>
            <param name="designEditorViewModel"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IIrrigationCalculationViewModel.Update(Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel)">
            <summary>
                Update with the design editor view model
            </summary>
            <param name="designEditorViewModel"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ILevelingCalculationViewModel">
            <summary>
                Interface for LevelingCalcutionViewModel
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingCalculationViewModel.SelectedSectionArea">
            <summary>
                Currently selected section area
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingCalculationViewModel.MaterialViewModel">
            <summary>
                Gets or sets the material view model.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingCalculationViewModel.LevelingConstraintsViewModels">
            <summary>
                Gets or sets the leveling constraints view model.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ILevelingCalculationViewModel.Initialize(Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel)">
            <summary>
                Initializes the specified design editor view model.
            </summary>
            <param name="designEditorViewModel">The design editor view model.</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ILevelingCalculationViewModel.Update(Morph.Contracts.Interfaces.ViewModels.IDesignEditorViewModel,System.Boolean,Morph.Contracts.ConstraintsInfo,System.Boolean)">
            <summary>
                Update with the design editor view model
            </summary>
            <param name="designEditorViewModel"></param>
            <param name="useAccordion"></param>
            <param name="selectedSection"></param>
            <param name="useIndependentSections"></param>
            <returns>new section names, comma delimited</returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingCalculationViewModel.IsAutoCalculateEnabled">
            <summary>
            IsAutoCalculateEnabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingCalculationViewModel.UseIndependentAreaCalculation">
            <summary>
            Use independent area calculation
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.ILevelingCalculationViewModel.PropertyChanged">
            <summary>
                Property changed notifications
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel">
            <summary>
                Leveling constraints view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.ArePointsConstraintsEnabled">
            <summary>
                Are the point constraints enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.IsOrientationSelected">
            <summary>
                Gets or sets a value indicating whether [is orientation selected].
            </summary>
            <value>
                <c>true</c> if [is orientation selected]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.IsSlopeSelected">
            <summary>
                Gets or sets a value indicating whether [is slope selected].
            </summary>
            <value>
                <c>true</c> if [is slope selected]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.IsCrossSlopeSelected">
            <summary>
                Gets or sets a value indicating whether [is cross slope selected].
            </summary>
            <value>
                <c>true</c> if [is cross slope selected]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.Orientation">
            <summary>
                Gets or sets the orientation.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.Slope">
            <summary>
                Gets or sets the slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.CrossSlope">
            <summary>
                Gets or sets the cross slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.SectionName">
            <summary>
                Gets or sets the name of the section.
            </summary>
            <value>
                The name of the section.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.NumberOfFixedPoints">
            <summary>
                Number of fixed points
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.NumberOfHinges">
            <summary>
                Number of hinges
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.DownhillDirectionIsRight">
            <summary>
                Gets or sets the cross slope downhill direction.
            </summary>
            <value>
                <c>true</c> if [downhill direction is right]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.IsExpanded">
            <summary>
                Is the section area expanded
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.UseIndependentAreaCalculation">
            <summary>
            Use independent area calculation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.MaterialViewModel">
            <summary>
            Material view model
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.PropertyChanged">
            <summary>
                Property changed event handler
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.ClearErrors">
            <summary>
                Clear view model errors
                (Used when deleting sections)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.IsIncluded">
            <summary>
            Include / exclude flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.CopyCanExecute">
            <summary>
            Can clipboard copy execute
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.PasteCanExecute">
            <summary>
            Can clipboard paste execute
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.CopyCommand">
            <summary>
            Clipboard copy command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILevelingConstraintsViewModel.PasteCommand">
            <summary>
            Clipboard paste has executed
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.LicenseType">
            <summary>
                Enum for type of License
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LicenseType.Evaluation">
            <summary>
                Evaluation mode
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LicenseType.Perpetual">
            <summary>
                Perpetual mode
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.LicenseType.None">
            <summary>
            No license
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ILicenseManagerViewModel">
            <summary>
                Interface for LicenseManager ViewModel
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILicenseManagerViewModel.IsEvalMode">
            <summary>
                Gets a value indicating whether [is eval mode].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILicenseManagerViewModel.LicenseType">
            <summary>
                Gets or sets the type of the license.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILicenseManagerViewModel.EvalExpiration">
            <summary>
                Gets the evaluation expiration.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILicenseManagerViewModel.ActivationDate">
            <summary>
                Date / Time when evaluation expires
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILicenseManagerViewModel.ConnectedFarmUser">
            <summary>
                Connected farm user
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILicenseManagerViewModel.ConnectedFarmOrganization">
            <summary>
                Connected farm Organization
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILicenseManagerViewModel.LicenseFeatures">
            <summary>
            Show license features.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILicenseManagerViewModel.HtmlToDisplay">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel">
            <summary>
                Connected farm login interface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.Username">
            <summary>
                Trimble SSO username
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.Password">
            <summary>
                Trimble SSO password
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.RememberPassword">
            <summary>
            Allows the user to save their password
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.Status">
            <summary>
                Current status of the login
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.IsOkEnabled">
            <summary>
                Gets a value indicating whether [is ok enabled].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.IsCancelEnabled">
            <summary>
                Gets a value indicating whether [is cancel enabled].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.IsDemoStartup">
            <summary>
              TFS 2572
            Are we in demo startup
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.IsLicenseExpired">
            <summary>
            Is license expired
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.IsOrganizationSelectionNeeded">
            <summary>
              TFS 2572
            Are we starting theh select organization dialog.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.Confirmed">
            <summary>
                Indicates if dialog confirmed
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.CloseAction">
            <summary>
                This allows the view model to close the view.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.IsExecutingLogin">
            <summary>
                Detects if we are doing a log in and prevents closing the window.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.LoginToConnectedFarm">
            <summary>
                Login method to connected farm
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.CancelLogin">
            <summary>
            Forces a cancel of the login
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.OkButton">
            <summary>
            Allow text for button to change
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ILoginViewModel.OkCancel">
            <summary>
            Allow text for button to change
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.UpdatedUserSettings">
            <summary>
                Delegate for user settings changes
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel">
            <summary>
                Interface for each managing user settings
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.SaveCommand">
            <summary>
                To handle the saving the setting values
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.CloseWindowCommand">
            <summary>
                To handle the reseting the values
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.CommonDialogInteractionRequest">
            <summary>
                For showing pop-up windows
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.IsSaveEnabled">
            <summary>
                To set whether save button can be enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.IsCutFillRatioDisabled">
            <summary>
            Check to see if cut fill ration is not checked
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.OpenImageFileCommand">
            <summary>
                Gets the open image file command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.SelectProjectFolderCommand">
            <summary>
                Gets the select project folder command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.SelectExportFolderCommand">
            <summary>
                Gets the select export folder command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.SelectMaterialVolumeCommand">
            <summary>
            Select Material Volume command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.SettingDialogTabIndex">
            <summary>
            Set the tab index so that it can be used on startup
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.TitleLine1">
            <summary>
                Gets or sets the title line1.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.TitleLine2">
            <summary>
                Gets or sets the title line2.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.TitleLine3">
            <summary>
                Gets or sets the title line3.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.TitleLine4">
            <summary>
                Gets or sets the title line4.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.TitleLine5">
            <summary>
                Gets or sets the title line5.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.TitleLogoFile">
            <summary>
                Gets or sets the title logo file.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.ProjectFolder">
            <summary>
                Gets or sets the project folder.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.ExportFolder">
            <summary>
                Gets or sets the export folder.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IManageUserSettingsViewModel.MaterialVolume">
            <summary>
            Material Volume
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel">
            <summary>
                Interface for MaterialViewModel
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.IsCutLimitVisible">
            <summary>
            Is the cut limit visible
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.IsVolumeEditVisible">
            <summary>
            Controls visibility of the volume text box
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.SelectedTransportationTypeName">
            <summary>
            Selected transportation type name
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.MaterialOptionsAsDouble">
            <summary>
            Return material option as double for engine
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.IsMaxCutDepthEnabled">
            <summary>
            Is the max cut depth constraint enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.IsCutFillRatio">
            <summary>
            Is cut fill enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.HasError">
            <summary>
                Does the view model have an error
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.ImportExportVolume">
            <summary>
                Gets or sets the export volume.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.Shrinkage">
            <summary>
                Gets or sets the shrinkage.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.HaulBulkage">
            <summary>
                Gets or sets the haul bulkage.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.HaulCompaction">
            <summary>
                Gets or sets the haul compaction.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.CutFillRatio">
            <summary>
            Get or set the cut fill ratio
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.MaxCutDepth">
            <summary>
                Gets or sets the maximum cut depth.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.IsMaxFillHeightEnabled">
            <summary>
            Is the max fill depth enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.MaxFillHeight">
            <summary>
                Gets or sets the maximum fill height.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.PropertyChanged">
            <summary>
                Event handler for property changed
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.MaterialVolume">
            <summary>
            Selected material volume
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.MaterialOptions">
            <summary>
            Material option
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IMaterialViewModel.GetErrorKeys">
            <summary>
            Return a list of error keys
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.DelegateWithStringParams">
            <summary>
            Delegate which accepts method with string argument
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IMRUWorkspaceViewModel">
            <summary>
            Interface for MRUWorkspace view model
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IMRUWorkspaceViewModel.OnClick">
            <summary>
            Occurs when [on click].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMRUWorkspaceViewModel.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IMRUWorkspaceViewModel.OpenFromHistory">
            <summary>
            Gets or sets the open from history.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IMRUWorkspaceViewModel.ExecuteFileOpen">
            <summary>
            Executes the file open.
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.INewFieldCreationConfirmation">
            <summary>
                Interface for new field creation confirmation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewFieldCreationConfirmation.SelectedDesignType">
            <summary>
                Currently selected design type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewFieldCreationConfirmation.CommonDialogInteractionRequest">
            <summary>
                Common dialog interaction request
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewFieldCreationConfirmation.OpenSurfacesCommand">
            <summary>
                Command to open surfaces dialog
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewFieldCreationConfirmation.FieldName">
            <summary>
                Stores the name of the new field to be created
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewFieldCreationConfirmation.SurfaceFile">
            <summary>
                Holds the path of surface file
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewFieldCreationConfirmation.IsSaveEnabled">
            <summary>
                To enable submitting the data
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewFieldCreationConfirmation.Error">
            <summary>
                Error list in string form
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewFieldCreationConfirmation.Confirmed">
            <summary>
                Indicates if confirmed or canceled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewFieldCreationConfirmation.FieldExists">
            <summary>
                Supplied function to test is a field exists
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewFieldCreationConfirmation.Item(System.String)">
            <summary>
                Column name for IDataErrorInfo
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.INewFieldCreationConfirmation.PropertyChanged">
            <summary>
                Notification event handler
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.INewProjectViewModel">
            <summary>
            Interface for the project view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewProjectViewModel.Confirmed">
            <summary>
            Indicates if dialog confirmed
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewProjectViewModel.ProjectName">
            <summary>
            Project name
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewProjectViewModel.Error">
            <summary>
            Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewProjectViewModel.Item(System.String)">
            <summary>
            Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.INewProjectViewModel.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel">
            <summary>
            View model for NewProject and NewField
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.OriginalSurface">
            <summary>
            Original Surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.DesignEditImports">
            <summary>
            Design edit imports
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.FieldImportType">
            <summary>
            Imported field type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.IsNewFieldWizard">
            <summary>
            Gets or sets a value indicating whether [is new field wizard].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.OpenedFromGetStartedWizard">
            <summary>
            Gets or sets a value indicating whether [is new project wizard].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.SelectedDesignType">
            <summary>
            Gets or sets the type of the selected design.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.ProjectName">
            <summary>
            Gets or sets the name of the project.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.FieldName">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.SurfaceFile">
            <summary>
            Gets or sets the surface file.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.CommonDialogInteractionRequest">
            <summary>
            Gets the common dialog interaction request.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.OpenSurfacesCommand">
            <summary>
            Gets the open surfaces command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.NavigateNextCommand">
            <summary>
            Gets the navigate next command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.NavigateBackCommand">
            <summary>
            Gets the navigate back command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.FinishCommand">
            <summary>
            Gets the finish command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.IsBackEnabled">
            <summary>
            Gets or sets a value indicating whether [is back enabled].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.IsNextEnabled">
            <summary>
            Gets or sets a value indicating whether [is next enabled].
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.NextButtonText">
            <summary>
            Gets or sets the finish button text.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.CurrentControl">
            <summary>
            Gets or sets the current control.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.CurrentDesignTypeTitle">
            <summary>
            Gets the type of the current design.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.ImportFileName">
            <summary>
            Gets the name of the import file.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.FieldExists">
            <summary>
                Supplied function to test is a field exists
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.Confirmed">
            <summary>
                Indicates if confirmed or canceled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.ShouldClose">
            <summary>
            To indicate whether to close the pop up
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.ShowGetStarted">
            <summary>
            To indicate weather pressing the back button should take to get started window.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.ContainsBoundary">
            <summary>
            flag to show if the field has a boundary to begin with
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.INewWizardViewModel.SurveyPoints">
            <summary>
            Survey points of imported surface
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IPipeLineViewModel">
            <summary>
            Pipeline view model
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IProductRegistrationViewModel">
            <summary>
            Interface for Product Registration view model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IProductRegistrationViewModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IProductRegistrationViewModel.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IProductRegistrationViewModel.Confirmed">
            <summary>
            Indicates if dialog confirmed
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IProductRegistrationViewModel.IsOkEnabled">
            <summary>
            Gets a value indicating whether [is ok enabled].
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IRenameViewModel">
            <summary>
            View model for renaming items
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRenameViewModel.TitleName">
            <summary>
            Title for the dialog
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRenameViewModel.NameExists">
            <summary>
                Callback function to determine if a name exists
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRenameViewModel.RenameType">
            <summary>
                Type being renamed, project/field/design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRenameViewModel.IsSaveEnabled">
            <summary>
                To enable submitting the data
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRenameViewModel.Name">
            <summary>
                Name of the entity
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRenameViewModel.OriginalName">
            <summary>
            The original name sent to the dialog
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRenameViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRenameViewModel.Confirmed">
            <summary>
            Dialog confirmed flag
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRenameViewModel.Title">
            <summary>
            Dialog Title
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRenameViewModel.Content">
            <summary>
            Dialog content
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRenameViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IRenameViewModel.PropertyChanged">
            <summary>
            Property changed event handler
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel">
            <summary>
                Interface for RowsViewModel
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.EngineMinSlope">
            <summary>
                Return optional engine version of min slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.EngineMaxSlope">
            <summary>
                Return optional engine version of min slope
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.EngineMaxChangeRate">
            <summary>
                Return optional engine version of max change rate
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.Orientation">
            <summary>
                Gets or sets the orientation.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.Width">
            <summary>
                Gets or sets the width.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.MinSlope">
            <summary>
                Gets or sets the minimum slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.MaxSlope">
            <summary>
                Gets or sets the maximum slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.MaxChangeRate">
            <summary>
                Gets or sets the maximum change rate.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.MaxChangeRateReport">
            <summary>
                Gets or sets the maximum change rate for the report.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.MaxDistanceRate">
            <summary>
            Get Set rate distance
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.PropertyChanged">
            <summary>
                Event handler for property changed
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IRowsViewModel.GetErrorKeys">
            <summary>
            Return a list of error keys
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ISectionAreaViewModel">
            <summary>
            Section Area View model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISectionAreaViewModel.SectionArea">
            <summary>
            Read only access to section area model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISectionAreaViewModel.CenterPoint">
            <summary>
             position to lay the label on the section
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISectionAreaViewModel.Area">
            <summary>
            Area
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISectionAreaViewModel.FixedPoints">
            <summary>
            Fixed points in this section area
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISectionAreaViewModel.Hinges">
            <summary>
            Hinges in this section area
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISectionAreaViewModel.IsCurrent">
            <summary>
            Is Current
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISectionAreaViewModel.CanBeMarkAsFixed(System.Windows.Media.Media3D.Point3D,System.Int32)">
            <summary>
            Can point be marked as fixed
            </summary>
            <param name="point"></param>
            <param name="maxFixedPoints"></param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISectionAreaViewModel.PlaneInfo">
            <summary>
            PlaneInfo to get name and position of the hinge areas
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IPlanarInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IPlanarInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IPlanarInfo.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.PlanarInfo">
            <summary>
            Class to serialize all planar information against each section area
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.PlanarInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.PlanarInfo.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ISectionLineViewModel">
            <summary>
                Interface for section line view model
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType">
            <summary>
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType.SectionLine">
            <summary>
            The section line
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType.Hinge">
            <summary>
            The hinge
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType.PipeLine">
            <summary>
            The pipe line
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType.Ditch">
            <summary>
            The ditch
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType.ExclusionZone">
            <summary>
            The exclusion zone
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType.ActivityArea">
            <summary>
            The activity area zone
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType.BasinArea">
            <summary>
            The basin area
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType.ThinTopsoil">
            <summary>
            The thin topsoil
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType.EquipmentPad">
            <summary>
            The equipment pad
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType.TailDitch">
            <summary>
            The tail ditch
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType.PipeBed">
            <summary>
            The pipe bed
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType.Custom">
            <summary>
            The custom
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IShapePartViewModel">
            <summary>
            Interface for ShapePartViewModel 
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapePartViewModel.PartNumber">
            <summary>
            Gets or sets the part number.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapePartViewModel.ShapeFileImportViewModel">
            <summary>
            Gets or sets the shape file import view model.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShapePartViewModel.MarkedAs">
            <summary>
            Gets or sets the marked as.
            </summary>
            <value>
            The marked as.
            </value>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShapePartViewModel.NotifyMarkedShape(Morph.Contracts.Interfaces.ViewModels.ShapeMarkedType,Morph.Contracts.Interfaces.ViewModels.IShapeImportViewModel)">
            <summary>
            Notifies the marked shape.
            </summary>
            <param name="markedType">Type of the marked.</param>
            <param name="shapeVM">The shape vm.</param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.MoveElementEnum">
            <summary>
            Move
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.MoveElementEnum.Up">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.MoveElementEnum.Down">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.MoveElementEnum.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ViewModels.MoveElementEnum.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.MoveEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.MoveEventArgs.Direction">
            <summary>
            Direction
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.IShellViewModel">
            <summary>
                Interface for the morph Shell view model
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.ShowMultiplaneSettingsDialog(System.Action{Core.Contracts.SurfaceImportExport.MultiPlaneSettings})">
            <summary>
            Show the multiplane settings dialog
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.DoConnectedFarmLoginCommand">
            <summary>
            Launch the login dialog
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.ShowNavigation">
            <summary>
            Show navigation
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.ShowToolbar">
            <summary>
            Show tool bar
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.IsIdle">
            <summary>
            Is the app idle
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.IsLoggedIn">
            <summary>
            Have we logged into the connected farm yet?
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.IsDemoStartup">
            <summary>
              TFS 2572
            Are we in demo startup
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.OrganizationSelected">
            <summary>
            Have we selected an organization yet?
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.IsValidRunMode">
            <summary>
            Used to determine if we allow the user to run.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.IsConnectedFarmEnabled">
            <summary>
            Determines if the connected farm menu it enabled.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.LoadGettingStarted">
            <summary>
            If we are laoding this file from a double click in explorer then we need to set
            this to false;
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.ExportEnabled">
            <summary>
            Is export enabled
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.GettingStartedCommand">
            <summary>
            Getting started command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.HelpAboutCommand">
            <summary>
                Help about command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.NewWorkspaceCommand">
            <summary>
                New workspace command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.OpenWorkspaceCommand">
            <summary>
                Open workspace command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.NewUserLoginClearWorkspaceCommand">
            <summary>
                Handles clearing the workspace when  new user logins
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.SaveWorkspaceCommand">
            <summary>
                Save workspace command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.SaveWorkspaceAsCommand">
            <summary>
                Save workspace as command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.ViewHelpCommand">
            <summary>
            View help command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.LicenseManagerCommand">
            <summary>
                License manager command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.ConnectedFarmLoginCommand">
            <summary>
            Connected Farm login command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.EvaluationViewCommand">
            <summary>
            Shows an evaluation dialog.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.ConnectedFarmSelectOrganizationCommand">
            <summary>
            Connected Farm select organization command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.NewProjectCommand">
            <summary>
                New Project Command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.MRUsCommand">
            <summary>
                Gets the MRUs command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.ExitCommand">
            <summary>
                Exit command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.UserSettingsCommand">
            <summary>
            User Settings command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.MergeDataCommand">
            <summary>
                MergeData Command
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.UILayersInteractionRequest">
            <summary>
                Show settings dialog for editor
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.SettingsInteractionRequest">
            <summary>
                Show settings dialog for proposed design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.HelpAboutInteractionRequest">
            <summary>
                Show help about dialog
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.CommonDialogInteractionRequest">
            <summary>
                Show common dialogs
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.PopupDialogInteractionRequest">
            <summary>
                Show popup dialog
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.ExpiredLicenseInteractionRequest">
            <summary>
            Expired license dialog
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.IsDirty">
            <summary>
                Flag to indicate the workspace has changed
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.PopupContentWindow">
            <summary>
                Used to set the current pop-up window
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.LayoutViews">
            <summary>
                Collection of layout views
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.RecentWorkspaces">
            <summary>
                Gets or sets the recent workspaces.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.LoadWorkspace(System.String)">
            <summary>
            Loads the workspace.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.OnExit">
            <summary>
                Checks if ok to exit
            </summary>
            <returns></returns>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.PropertyChanged">
            <summary>
                Property changed event
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.NotifyCompleteEditsKey">
            <summary>
                Escape key event handler
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.NotifyCancelEditsKey">
            <summary>
                Escape key event handler
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.NotifyDeleteKey">
            <summary>
                Delete key event handler
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.FireCompleteEditsEvent">
            <summary>
                Fire the enter key pressed event
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.FireCancelEditsEvent">
            <summary>
                Fire the escape key pressed event
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.FireDeleteEvent">
            <summary>
                Fire the delete key pressed event
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.NotifyUndoKey">
            <summary>
                Undo key event handler
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.FireUndoKeyEvent">
            <summary>
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.NotifyRedoKey">
            <summary>
                Redo key event handler
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.FireRedoKeyEvent">
            <summary>
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.NotifySurfaceMeshKey">
            <summary>
                Toggle surface mesh key event handler
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.FireSurfaceMeshKeyEvent">
            <summary>
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.NotifySnapKey">
            <summary>
                Toggles the snap to point event handler
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.FireSnapKeyEvent">
            <summary>
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.NotifyElementMove">
            <summary>
                start elment move move key event handler
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.FireElementMoveEvent(Morph.Contracts.Interfaces.ViewModels.MoveEventArgs)">
            <summary>
                Fire end element move event
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.NotifyWorkSpaceSelection(System.Boolean)">
            <summary>
            Notifies when there is a change in the workspace selection(selected or unselected)
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.AddNewFieldCommand">
            <summary>
            Gets the add new field command.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.IsNewFieldEnabled">
            <summary>
            Gets a value indicating whether [is new field enabled].
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.CloseProjectLoadSaveWindow">
            <summary>
            Close project load save window
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.ShowProjectLoadSaveWindow(System.String)">
            <summary>
            Show project load save window
            </summary>
            <param name="message">display message</param>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.CurrentWorkspaceVersion">
            <summary>
            The build version for the current workspace.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.IShellViewModel.ValidateWorkspaceVersion(System.String)">
            <summary>
            Will check workspace version to build so that we can ask the user if they want to back it up.
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ViewModels.ISlopeViewModel">
            <summary>
                Interface for SlopeViewModel
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISlopeViewModel.HasError">
            <summary>
            Does the view model have an error
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISlopeViewModel.MinimumSlope">
            <summary>
                Gets or sets the minimum slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISlopeViewModel.MaximumSlope">
            <summary>
                Gets or sets the maximum slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISlopeViewModel.EngineMinSlope">
            <summary>
                Gets the engine minimum slope.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISlopeViewModel.EngineMaxSlope">
            <summary>
                Gets the engine maximum slope.
            
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISlopeViewModel.Item(System.String)">
            <summary>
                Returns a single error
            </summary>
            <param name="columnName">name of requested error</param>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ViewModels.ISlopeViewModel.Error">
            <summary>
                Returns all errors
            </summary>
        </member>
        <member name="E:Morph.Contracts.Interfaces.ViewModels.ISlopeViewModel.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ViewModels.ISlopeViewModel.GetErrorKeys">
            <summary>
            Return a list of error keys
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.AnalysisToolType">
            <summary>
            Analaysis tool type
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.AnalysisToolType.Elevations">
            <summary>
            Elevation map
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.AnalysisToolType.GrayScale">
            <summary>
            Gray Scale map
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.AnalysisToolType.BlackSurface">
            <summary>
            Black surface map
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.AnalysisToolType.SurfaceSlopes">
            <summary>
            Surface slopes
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.AnalysisToolType.MainSlope">
            <summary>
            Main slope
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.AnalysisToolType.CrossSlope">
            <summary>
            Cross slope
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.AnalysisToolType.DrainageSlopes">
            <summary>
            drainage slopes
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.AnalysisToolType.DrainageViolations">
            <summary>
            Drainage violations
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.AnalysisToolType.Ponding">
            <summary>
            ponding
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.AnalysisToolType.FlowPaths">
            <summary>
            flow paths
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.AnalysisToolType.Watersheds">
            <summary>
            water sheds
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.AnalysisToolType.CutFillViolations">
            <summary>
            Cut fill analysis
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.AnalysisToolType.CutFillMap">
            <summary>
            Cut fill map
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.UiLayerType">
            <summary>
            UiLayerType
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.OriginalSurface">
            <summary>
            Hide/ Show Original surface
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.CutFillSurface">
            <summary>
            Hide/ Show CutFill surface
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.DesignSurface">
            <summary>
            Hide/ Show Proposed/Design surface
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.ClassicView">
            <summary>
            used by Proposed Design classic view
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.OnGrade">
            <summary>
            Hide/ Show On Grade
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.SurveyPoints">
            <summary>
            Hide/ Show survey points
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.BlackSurface">
            <summary>
            Toggle between black and color gradient for surface
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.ShowNotes">
            <summary>
            Hide/Show notes
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.ShowFurrows">
            <summary>
            Hide/Show furrows
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.ShowGrid">
            <summary>
            Hide/Show visual grid
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.SpotElevations">
            <summary>
            Hide/show spot elevations on the editor
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.Grid">
            <summary>
            Hide/ Show grid
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.OriginalContours">
            <summary>
            Hide/ Show original surface contours
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.CutFillContours">
            <summary>
            Hide/ Show cut fill contours
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.DesignContours">
            <summary>
            Hide/ Show design contours
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.Slopes">
            <summary>
            Hide/ Show slopes bitmap
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.FlowArrows">
            <summary>
            Hide/ Show flow arrows
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.Ponding">
            <summary>
            Hide/ Show ponding bitmap
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.UiLayerType.ShowControlNodes">
            <summary>
            Hide/show control nodes
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IEditorViewSettings">
            <summary>
                Interface for design editor settings
                All settings from the concrete class will be serialized to
                the workspace file
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.DesignType">
            <summary>
            Design type
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.IterationGuid">
            <summary>
            FieldGuid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.DesignGuid">
            <summary>
            DesignGuid
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.HasDesign">
            <summary>
            Design exists for this editor view
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowSettingsDialog">
            <summary>
            Show Settings dialog
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.SelectedSurface">
            <summary>
            Selected surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.IsBlackSurface">
            <summary>
            Selected surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.SpotElevations">
            <summary>
            Hide/show spot elevations on the editor
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowGrid">
            <summary>
            Hide/show grid on the editor
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowOriginalContours">
            <summary>
            ShowContours
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.OriginalContourOffset">
            <summary>
            Contour offset
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowOriginalContourLabels">
            <summary>
            ShowOriginalContourLabels
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowCutFillContours">
            <summary>
            ShowCutFillContours
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.CutFillContourOffset">
            <summary>
            CutFillContour Offset
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowCutFillContourLabels">
            <summary>
            Show/hide cut fill contours
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowDesignContours">
            <summary>
            Show design contours
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.DesignContourOffset">
            <summary>
            Design contour offset
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowDesignContourLabels">
            <summary>
            Show/hide design contour label
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowSurveyPoints">
            <summary>
            Hide/show survey points
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ReDrawContourLines">
            <summary>
            Force a redraw of the contour lines.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowOnGradeBand">
            <summary>
            Show OnGrade band
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.OnGradeOffset">
            <summary>
            On Grade offset e.g if -0.5 to 0.5
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IEditorViewSettings.GetDefaultOnGradeList">
            <summary>
            default on-grade values
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.VisualGridCellSize">
            <summary>
            Visual grid cellsize
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.VisualGridBearing">
            <summary>
            Visual grid bearing
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowNotes">
            <summary>
            Show surface flow paths
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowFurrows">
            <summary>
            Show irrigation furrows
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowControlNodes">
            <summary>
            Hide/show control nodes
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.ShowBackgroundMap">
            <summary>
            Show background map
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.MeasureToolWidth">
            <summary>
            Tool width
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IEditorViewSettings.MeasureToolDepth">
            <summary>
            Tool depth
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ISubzoneComputationUtility">
            <summary>
            Provides methods to convert between component and composite slopes.
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISubzoneComputationUtility.CompositeToComponentSlopes(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Produce components along the global primary and cross slope components given a composite magnitude and bearing.
            </summary>
            <param name="globalBearing">Orientation, in degrees, of the global primary slope bearing. The cross slope direction is 90 degrees counter clockwise from the primary slope bearing.</param>
            <param name="compositeSlopeBearing">Orientation, in degrees, of the composite slope.</param>
            <param name="compositeSlopeMagnitude">Magnitude of the composite slope.</param>
            <param name="componentAlongPrimary">Magnitude of the component slope along the global primary slope bearing.</param>
            <param name="componentAlongCross">Magnitude of the component slope along the global cross slope bearing.</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISubzoneComputationUtility.ComponentToCompositeSlopes(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Produce a composite slope magnitude and bearing given primary and cross slope components.
            </summary>
            <param name="globalBearing">Orientation, in degrees, of the global primary slope bearing. The cross slope direction is 90 degrees counter clockwise from the global primary slope direction.</param>
            <param name="primarySlopeMagnitude">Magnitude of the primary slope along the global primary direction.</param>
            <param name="crossSlopeMagnitude">Magnitude of the cross slope along the global cross slope direction.</param>
            <param name="compositeOrientation">Orientation, in degrees, of the composite slope.</param>
            <param name="compositeSlope">Magnitude of the composite slope.</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISubzoneComputationUtility.CompositesToComponentSlopes(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Produce components along the global primary and cross slope components given a composite magnitude and bearing.
            </summary>
            <param name="globalBearing">Orientation, in degrees, of the global primary slope bearing. The cross slope direction is 90 degrees counter clockwise from the primary slope bearing.</param>
            <param name="compositeSlopeBearing">Orientation, in degrees, of the composite slope.</param>
            <param name="compositeMinSlopeMagnitude">Magnitude of the composite minimum slope.</param>
            <param name="compositeMaxSlopeMagnitude">Magnitude of the composite maximum slope.</param>
            <returns>
                componentAlongPrimaryMin - Magnitude of the component minimum slope along the global primary slope bearing.
                componentAlongPrimaryMax - Magnitude of the component maximum slope along the global primary slope bearing.
                componentAlongCrossMin - Magnitude of the component minimum slope along the global cross slope bearing.
                componentAlongCrossMax - Magnitude of the component maximum slope along the global cross slope bearing.
            </returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IAesEncryption">
            <summary>
                Interface for AES encryption
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IAesEncryption.Encrypt(System.String,System.Byte[])">
            <summary>
                AES Encrypt string
            </summary>
            <param name="text">text to encrypt</param>
            <param name="maskBytes">optional 16 byte mask used to generate a new key</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IAesEncryption.Decrypt(System.String,System.Byte[])">
            <summary>
                AES Decrypt string
            </summary>
            <param name="text">text to decrypt</param>
            <param name="maskBytes">optional 16 byte mask used to generate a new key</param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IDesignConstraint">
            <summary>
            Interface for design constraint
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IDesignEditImports">
            <summary>
                Interface for design edits imported from
                external files
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IDesignEditImports.MasterBenchmark">
            <summary>
                Design master benchmark
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IDesignEditImports.Benchmarks">
            <summary>
                Benchmarks
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IDesignEditImports.SectionLines">
            <summary>
             Section lines.
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IDesignViewSettings">
            <summary>
                Interface for design view settings
                All settings from the concrete class will be serialized to
                the workspace file
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IDesignViewSettings.Name">
            <summary>
                Name associated with the design view setting
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IMeasureInformation">
            <summary>
            measurement information interface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IMeasureInformation.HorizontalDistance">
            <summary>
            horizontal distance 
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IMeasureInformation.VerticalDistance">
            <summary>
            vertical distance
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IMeasureInformation.BearingDegrees">
            <summary>
            bearing degrees
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IMeasureInformation.Slope">
            <summary>
            slope information
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IMeasureInformation.TotalLength">
            <summary>
            Total length
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IMeasureInformation.IsComplete">
            <summary>
            IsComplete
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IMeasureInformation.Points">
            <summary>
            Points
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IMasterBenchmark">
            <summary>
            Interface for the master benchmark
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IMasterBenchmark.Benchmark">
            <summary>
            Benchmark data for the master benchmark
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IMasterBenchmark.Latitude">
            <summary>
                Master benchmark latitude
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IMasterBenchmark.Longitude">
            <summary>
                Master benchmark longitude
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IBenchmark">
            <summary>
            Interface for benchmark
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IBenchmark.Name">
            <summary>
            Name for the benchmark
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IBenchmark.Point">
            <summary>
            Point for the benchmark
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IPopupDialogRequest">
            <summary>
            Wraps a pop up dialog request
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IPopupDialogRequest.Raise(System.String,Microsoft.Practices.Prism.Interactivity.InteractionRequest.InteractionRequest{Microsoft.Practices.Prism.Interactivity.InteractionRequest.Confirmation},Microsoft.Practices.Prism.Interactivity.InteractionRequest.Confirmation,System.Action{Microsoft.Practices.Prism.Interactivity.InteractionRequest.Confirmation})">
            <summary>
            Invoke the pop up window
            </summary>
            <param name="popupContentWindow">the full name space of the window</param>
            <param name="request">Interaction request</param>
            <param name="confirmation">Context / view model for the call</param>
            <param name="callback">callback action</param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IReportTabView">
            <summary>
            Interface for report tab view in field editor
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IReportTabView.Initialize(System.Object,Morph.Contracts.Interfaces.ISurface3D)">
            <summary>
            Initializes the report tab view
            </summary>
            <param name="state"></param>
            <param name="originalSurface"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ISectionLine">
            <summary>
            Interface for SectionLine
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ISectionLine.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ISectionLine.Name">
            <summary>
            Gets or sets the name for the section line.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ISectionLine.points">
            <summary>
            Gets or sets the points for the line segment.
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IUndoRedo">
            <summary>
                Interface for undo / redo
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IUndoRedo.UndoCommand">
            <summary>
                Command to undo
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IUndoRedo.RedoCommand">
            <summary>
                Command to redo
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IWorkspace">
            <summary>
                Implements workspace operations
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IWorkspace.Load(System.String,System.Action,System.Action)">
            <summary>
                Load a workspace
            </summary>
            <param name="filePath">file path for load</param>
            <param name="onSuccessAction">success action to execute</param>
            <param name="onFailAction">failure action to execute</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IWorkspace.SaveWorkspace(System.String,System.Action,System.Action)">
            <summary>
                Save the morph workspace to disk
            </summary>
            <param name="filePath">file path for save</param>
            <param name="onSuccessAction">success action to execute</param>
            <param name="onFailAction">failure action to execute</param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Repository.IMorphDataAccessLayer`1">
            <summary>
                Data access layer
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Repository.IMorphDataAccessLayer`1.GetAll">
            <summary>
                Get all entries
            </summary>
            <returns>all entries of type TEntity</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Repository.IMorphDataAccessLayer`1.Get(System.String)">
            <summary>
                Get entry by id
            </summary>
            <param name="id"></param>
            <returns>instance of TEntity by id</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Repository.IMorphDataAccessLayer`1.Add(`0)">
            <summary>
                Add new entity
            </summary>
            <param name="entity">entity to add</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Repository.IMorphDataAccessLayer`1.Update(`0)">
            <summary>
                Update entity
            </summary>
            <param name="entity">entity to update</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Repository.IMorphDataAccessLayer`1.Delete(`0)">
            <summary>
                Delete an entity
            </summary>
            <param name="entity">entity to delete</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Repository.IMorphDataAccessLayer`1.SaveChanges">
            <summary>
                Save changes
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Repository.IMorphEntity">
            <summary>
                Marks a class as a morph entity
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Repository.IMorphEntity.Id">
            <summary>
                Unique identifier for an entity
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.Repository.IMorphEntity.Version">
            <summary>
                Morph build version
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.Repository.IMorphRepository`1">
            <summary>
                Morph repository interface
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Repository.IMorphRepository`1.GetAll">
            <summary>
                Get all entries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Repository.IMorphRepository`1.Get(System.String)">
            <summary>
                Get entry by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Repository.IMorphRepository`1.Add(`0)">
            <summary>
                Add new entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Repository.IMorphRepository`1.Update(`0)">
            <summary>
                Update entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Repository.IMorphRepository`1.Delete(`0)">
            <summary>
                Delete an entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Repository.IMorphRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Find single instance of an entity
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.Repository.IMorphRepository`1.SaveChanges">
            <summary>
                Save changes
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IDesignItem">
            <summary>
                Interface for a design item
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ILayoutView">
            <summary>
            Interface for the layout view
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ILayoutView.Name">
            <summary>
            Display name for the layout view
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ILayoutViewMetadata">
            <summary>
            Metadata for the layout view
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ILayoutViewMetadata.Name">
            <summary>
            View display name
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.INavigationElement">
            <summary>
            Navigation element
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.INavigationElement.DesignGuid">
            <summary>
            Guid for this design
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.INavigationElement.Name">
            <summary>
            Display name for the element
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.INavigationElement.Parent">
            <summary>
            Parent of the element
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.INavigationElement.IsSelected">
            <summary>
            Is navigation item selected
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.INavigationElement.IsExpanded">
            <summary>
            Is navigation item expanded
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IFixedPoint">
            <summary>
                Interface for the fixed point model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IFixedPoint.Name">
            <summary>
                Name associated with the fixed point
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IFixedPoint.Position">
            <summary>
                Position of the point
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IFixedPoint.IsMasterBenchMark">
            <summary>
                Is this a master benchmark
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IFixedPoint.IsBenchMark">
            <summary>
                Is this a benchmark
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IFixedPoint.ConstraintType">
            <summary>
                Constraint type
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IPreferences">
            <summary>
            Interface for preferences (User settings)
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IPreferences.UpgradeSettings">
            <summary>
            Upgrade settings if necessary
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IPreferences.GetPreferenceValue``1(System.String)">
            <summary>
            Get user setting value by key
            </summary>
            <param name="key"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IPreferences.SavePreferenceValue``1(System.String,``0)">
            <summary>
            Save user setting value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ISerialization">
            <summary>
                Interface for serialization helpers
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISerialization.SerializeToDisk``1(System.String,``0,System.Type[])">
            <summary>
                Serialize object to disk
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="filename">filename used to store the object</param>
            <param name="obj">the object to be stored</param>
            <param name="extraTypes">Concrete types used to serialize interfaces</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISerialization.DeserializeFromDisk``1(System.String)">
            <summary>
                De-serialize object from disk
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="filename">filename used to store the object</param>
            <returns>de-serialized object from disk referenced by filename</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISerialization.SerializeToJSON``1(``0,System.Type[])">
            <summary>
            Serialize object to JSON
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="typeObject">the object to be converted to JSON</param>
            <returns>JSON string serialized from obj</returns>
            <param name="extraTypes">Concrete types used to serialize interfaces</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISerialization.DeserializeFromJSON``1(System.Byte[])">
            <summary>
            De-serialize object from JSON data
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="jsonData">JSON string</param>
            <returns>Deserialized object from JSON string</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISerialization.SerializeFromNetToJson(System.Object)">
            <summary>
            Serialize a .NET class to a JSON string
            Uses Newtonsoft.Json
            </summary>
            <param name="netClass"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISerialization.DeserializeFromJsonToNet``1(System.String)">
            <summary>
            Create a .NET class from json data
            Uses Newtonsoft.Json
            </summary>
            <param name="jsonData"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.IStatusMessages">
            <summary>
                Interface to post status messages
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.IStatusMessages.AreCoordsVisible">
            <summary>
                Flag to indicate if coordinates (x,y,z) are visible
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IStatusMessages.ShowStatusError(System.String)">
            <summary>
                Send an error message to status area
            </summary>
            <param name="message">message to display</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IStatusMessages.ShowStatusWarning(System.String)">
            <summary>
                Send a warning message to status area
            </summary>
            <param name="message">message to display</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IStatusMessages.ShowStatusInformation(System.String)">
            <summary>
                Send an informational message to status area
            </summary>
            <param name="message">message to display</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IStatusMessages.StartProgress(System.String,Morph.Contracts.DataContracts.NavigationParams,System.Threading.CancellationTokenSource)">
            <summary>
                Start progress bar with navigation parameters
            </summary>
            <param name="text">display text</param>
            <param name="navigationParams">navigation parameters</param>
            <param name="cancellationTokenSource">cancellation token source</param>
            <returns>Guid of the progress session</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IStatusMessages.StartProgress(System.String,System.Threading.CancellationTokenSource,System.Boolean)">
            <summary>
                Start progress
            </summary>
            <param name="text">text for progress</param>
            <param name="cancellationTokenSource">cancellation token</param>
            <param name="isIndeterminate"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IStatusMessages.UpdateProgress(System.Guid,System.Single)">
            <summary>
                Update progress
            </summary>
            <param name="guid"></param>
            <param name="val"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IStatusMessages.StopProgress(System.Guid)">
            <summary>
                Stop progress
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.IStatusMessages.UpdateCursorPosition(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Update the cursor position
            </summary>
            <param name="x">x coordinate to update</param>
            <param name="y">y coordinate to update</param>
            <param name="zExisting"></param>
            <param name="zDesign"></param>
            <param name="zCutFill"></param>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ISurface3D">
            <summary>
                Describes a 3d surface
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ISurface3D.Name">
            <summary>
                Name of the surface.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ISurface3D.MinElevation">
            <summary>
                Minimum elevation.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ISurface3D.MaxElevation">
            <summary>
                Maximum elevation.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ISurface3D.Points">
            <summary>
                List of points (vertices's) in the surface.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ISurface3D.Triangles">
            <summary>
                List of triangles in the surface.
                Each triangle consists of three consecutive indices that correspond to its vertices.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ISurface3D.Boundary">
            <summary>
                Returns the <see cref="T:Morph.Services.Core.DataModel.Linestring" /> instance that defines the boundary of the surface.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ISurface3D.SurfaceColor">
            <summary>
                Color of the surface material
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ISurface3D.FmXGpsOrigin">
            <summary>
                GPS origin for FmX
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ColorMap">
            <summary>
            Type of Color map used for surface
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ColorMap.HeightMap">
            <summary>
            Gradient based on Height of Map
            </summary>
        </member>
        <member name="F:Morph.Contracts.Interfaces.ColorMap.CutFillMap">
            <summary>
            Gradient based on the cut fill map
            </summary>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ISurfaceUtility">
            <summary>
                Interface for surface utility functions
            </summary>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.GetSurfaceMaterial(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.ColorMap)">
            <summary>
            Get surface material for original and proposed surfaces
            </summary>
            <param name="surface">original surface</param>
            <param name="proposed">proposed surface</param>
            <param name="colorMap">color map</param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.GetSurfaceMaterial(Morph.Contracts.Interfaces.ISurface3D,Morph.Contracts.Interfaces.ColorMap,System.Boolean,System.Boolean)">
            <summary>
            Get surface diffuse material
            </summary>
            <param name="surface"></param>
            <param name="colorMap"></param>
            <param name="grayScale"></param>
            <param name="recomputeMinMax"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.GetOnGradeSurfaceMaterial(Morph.Contracts.Interfaces.ISurface3D,System.Double,System.Boolean)">
            <summary>
            Return Cut Fill Map color
            </summary>
            <param name="surface"></param>
            <param name="onGradeHeight"></param>
            <param name="transparentCutFill"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.GetSurfaceGeometry(Morph.Contracts.Interfaces.ISurface3D,System.Windows.Media.Media3D.Point3D[]@,System.Int32[]@)">
            <summary>
            </summary>
            <param name="surface">input surface</param>
            <param name="points">output points of the surface</param>
            <param name="indices">output triangle indicies of the surface</param>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.Generate3DModel(Morph.Contracts.Interfaces.ISurface3D,System.Windows.Media.Media3D.DiffuseMaterial)">
            <summary>
                Generate a 3D model from a surface using shifted centroid
            </summary>
            <param name="surface">input surface</param>
            <param name="material">material to use for the surface</param>
            <returns>3D model of the surface</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.Generate3DModel(Morph.Contracts.Interfaces.ISurface3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.DiffuseMaterial)">
            <summary>
            Generating model of the surface based on the given centroid
            </summary>
            <param name="surface"></param>
            <param name="centroid"></param>
            <param name="material"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.Generate3DModel(Morph.Contracts.Interfaces.ISurface3D,System.Windows.Media.Color,System.Double)">
            <summary>
            </summary>
            <param name="surface">input surface</param>
            <param name="color">surface color</param>
            <param name="opacity">opacity for the surface</param>
            <returns>3D model of the surface</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.GetTextureCoordinatesCollection(Morph.Contracts.Interfaces.ISurface3D,System.Double,System.Double)">
            <summary>
            Get texture coordinates from the given surface
            </summary>
            <param name="surface"></param>
            <param name="minZ"></param>
            <param name="maxZ"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.GetDrapedTextureCoordinatesCollection(Morph.Contracts.Interfaces.ISurface3D)">
            <summary>
            Compute the uv points of a surface based on its bounds.
            </summary>
            <remarks>The minimum point has the (0,0) uv coordinate and the maximum point has the (1,1) uv coordinate.</remarks>
            <param name="surface">The <see cref="T:Morph.Contracts.Interfaces.ISurface3D"/> instance..</param>
            <returns>The uv point collection.</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.GetDrapedTextureCoordinatesCollection(System.Windows.Media.Media3D.Point3DCollection,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double,System.Int32,System.Int32)">
            <summary>
            Compute the uv points of a surface based on the specified boundary and the specified cell size.
            </summary>
            <remarks>The (0,0) and (1,1) uv coordinates correspond to the texture coordinates of the surface points.</remarks>
            <param name="points">The collection of surface points to compute uv coordinate.</param>
            <param name="boundary">The enumeration of points that defines the boundary.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="pixelWidth">The number of pixels along the horizontal direction.</param>
            <param name="pixelHeight">The number of pixels along the vertical direction.</param>
            <returns>The uv point collection.</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.GetDrapedTextureCoordinatesCollection(System.Windows.Media.Media3D.Point3DCollection,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Compute the uv points of a surface based on its bounds and the specified cell size.
            </summary>
            <remarks>The (0,0) and (1,1) uv coordinates correspond to a grid centered on the surface bounds.</remarks>
            <param name="points">The collection of surface points to compute uv coordinate.</param>
            <param name="boundary">The enumeration of points that defines the boundary.</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="headingDeg">The direction of the main axis in heading angle (degrees).</param>
            <param name="pixelWidth">The number of pixels along the horizontal direction.</param>
            <param name="pixelHeight">The number of pixels along the vertical direction.</param>
            <returns>The uv point collection.</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.GetDrapedTextureCoordinatesCollection(System.Windows.Media.Media3D.Point3DCollection,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Get texture coordinate collection from surface to drape material onto a surface given a pipeline and direction.
            </summary>
            <param name="points">The collection of surface points to compute uv coordinate.</param>
            <param name="boundary">The enumeration of points that defines the boundary.</param>
            <param name="pipeline">The enumeration of points that defines the pipeline</param>
            <param name="cellSize">The cell size (pixel size in world coordinates).</param>
            <param name="headingDeg">The direction of the main axis in heading angle (degrees).</param>
            <param name="pixelWidth">The number of pixels along the horizontal direction.</param>
            <param name="pixelHeight">The number of pixels along the vertical direction.</param>
            <returns>The uv point collection.</returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.IsValidElevation(System.Double)">
            <summary>
            Is valid surface elevation
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.Interfaces.ISurfaceUtility.GetContourColor(System.Double,System.Double,System.Double)">
            <summary>
            Get contour color at given elevation
            </summary>
            <param name="elevation"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.Interfaces.ITutorialsViewModel">
            <summary>
            Interface for Tutorials View model
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ITutorialsViewModel.OpenHyperLinkCommand">
            <summary>
            Command to open hyper link
            </summary>
        </member>
        <member name="P:Morph.Contracts.Interfaces.ITutorialsViewModel.Link">
            <summary>
            Gets or sets hyper link
            </summary>
        </member>
        <member name="T:Morph.Contracts.InterfaceTypes">
            <summary>
                Interface types
            </summary>
        </member>
        <member name="F:Morph.Contracts.InterfaceTypes._types">
            <summary>
                Extra types used for data contract serialization
            </summary>
        </member>
        <member name="M:Morph.Contracts.InterfaceTypes.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Morph.Contracts.InterfaceTypes.Add(System.Type)">
            <summary>
                Add a type to the set
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Morph.Contracts.InterfaceTypes.ExtraTypesArray">
            <summary>
                Get array of extra types
            </summary>
        </member>
        <member name="T:Morph.Contracts.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Morph.Contracts.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Morph.Contracts.UnitDimension">
            <summary>
                Unit dimension enumeration for UnitsManager
                limited subset of the one in UnitConverter
            </summary>
        </member>
        <member name="F:Morph.Contracts.UnitDimension.None">
            <summary>
                Dimension not specified
            </summary>
        </member>
        <member name="F:Morph.Contracts.UnitDimension.Area">
            <summary>
                Area dimension
            </summary>
        </member>
        <member name="F:Morph.Contracts.UnitDimension.Distance">
            <summary>
                Distance dimension
            </summary>
        </member>
        <member name="F:Morph.Contracts.UnitDimension.Depth">
            <summary>
                Depth dimension
            </summary>
        </member>
        <member name="F:Morph.Contracts.UnitDimension.Volume">
            <summary>
                Volume dimension
            </summary>
        </member>
        <member name="F:Morph.Contracts.UnitDimension.SmallDistance">
            <summary>
                Small Distance
            </summary>
        </member>
        <member name="F:Morph.Contracts.UnitDimension.Precipitation">
            <summary>
                Height / time
            </summary>
        </member>
        <member name="F:Morph.Contracts.UnitDimension.Capacity">
            <summary>
                Height / time
            </summary>
        </member>
        <member name="F:Morph.Contracts.UnitDimension.Flow">
            <summary>
                Volume / time
            </summary>
        </member>
        <member name="T:Morph.Contracts.WCF.IPurchaseAreaDuplexCallback">
            <summary>
                Interface for purchase area duplex service callback
            </summary>
        </member>
        <member name="M:Morph.Contracts.WCF.IPurchaseAreaDuplexCallback.TestResult(System.String)">
            <summary>
                Test result from service
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Morph.Contracts.WCF.IPurchaseAreaDuplexCallback.FieldResult(Morph.Contracts.DataContracts.FieldInfo)">
            <summary>
                Return the selected field info
            </summary>
            <param name="fieldInfo"></param>
        </member>
        <member name="T:Morph.Contracts.WCF.IPurchaseAreaDuplexService">
            <summary>
                Duplex service for purchase areas
            </summary>
        </member>
        <member name="M:Morph.Contracts.WCF.IPurchaseAreaDuplexService.Test">
            <summary>
                Test operation
            </summary>
        </member>
        <member name="M:Morph.Contracts.WCF.IPurchaseAreaDuplexService.Subscribe">
            <summary>
                Subscribe to notifications
            </summary>
        </member>
        <member name="M:Morph.Contracts.WCF.IPurchaseAreaDuplexService.Unsubscribe">
            <summary>
                Unsubscribe from notifications
            </summary>
        </member>
        <member name="M:Morph.Contracts.WCF.IPurchaseAreaDuplexService.PublishItemEventChanged(System.String)">
            <summary>
                Publish the item event changed
            </summary>
        </member>
        <member name="T:Morph.Contracts.WCF.IPurchaseAreaService">
            <summary>
                Interface for purchase area service
            </summary>
        </member>
        <member name="M:Morph.Contracts.WCF.IPurchaseAreaService.DoWork">
            <summary>
                Test operation
            </summary>
        </member>
        <member name="M:Morph.Contracts.WCF.IPurchaseAreaService.EchoString(System.String)">
            <summary>
                Test echo
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.WCF.IPurchaseAreaService.LargeString(System.Int64)">
            <summary>
                Test echo
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Morph.Contracts.WCF.IPurchaseAreaService.GetCurrentFieldInfo">
            <summary>
                Returns the current field information.
                1. The field boundary, name and project
                2. All the purchased areas current and expired/
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morph.Contracts.WCF.ISurfaceInfoDuplexCallback">
            <summary>
            Callback interface for surface info duplex service
            </summary>
        </member>
        <member name="M:Morph.Contracts.WCF.ISurfaceInfoDuplexCallback.UpdateSurfaces(System.Collections.Generic.List{Morph.Contracts.DataContracts.SurfaceInfo})">
            <summary>
                Return the current surfaces information
            </summary>
            <param name="surfaces">list of current surfaces</param>
        </member>
        <member name="T:Morph.Contracts.WCF.ISurfaceInfoDuplexService">
            <summary>
            Interface for the surface info duplex service
            </summary>
        </member>
        <member name="M:Morph.Contracts.WCF.ISurfaceInfoDuplexService.Subscribe">
            <summary>
                Subscribe to notifications
            </summary>
        </member>
        <member name="M:Morph.Contracts.WCF.ISurfaceInfoDuplexService.Unsubscribe">
            <summary>
                Unsubscribe from notifications
            </summary>
        </member>
        <member name="M:Morph.Contracts.WCF.ISurfaceInfoDuplexService.PublishSurfaceChanged">
            <summary>
                Publish the surface changed event
            </summary>
        </member>
    </members>
</doc>
