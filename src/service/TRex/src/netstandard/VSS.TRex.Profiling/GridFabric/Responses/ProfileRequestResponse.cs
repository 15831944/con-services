using System.Collections.Generic;
using Apache.Ignite.Core.Binary;
using VSS.TRex.Common;
using VSS.TRex.GridFabric.Interfaces;
using VSS.TRex.Profiling.Interfaces;

namespace VSS.TRex.Profiling.GridFabric.Responses
{
  /// <summary>
  /// Contains the set of profile cells generated by a profile analysis executor
  /// </summary>
  public class ProfileRequestResponse<T> : SubGridsPipelinedResponseBase, IAggregateWith<ProfileRequestResponse<T>> where T : class, IProfileCellBase, new()
  {
    private static byte VERSION_NUMBER = 1;

    public double GridDistanceBetweenProfilePoints { get; set; }

    public List<T> ProfileCells { get; set; } = new List<T>();

    /// <summary>
    /// Aggregates an other response with this response
    /// </summary>
    /// <param name="other"></param>
    /// <returns></returns>
    public ProfileRequestResponse<T> AggregateWith(ProfileRequestResponse<T> other)
    {
      GridDistanceBetweenProfilePoints += other.GridDistanceBetweenProfilePoints;

      ProfileCells.AddRange(other.ProfileCells);

      return this;
    }

    /// <summary>
    /// Serializes content to the writer
    /// </summary>
    /// <param name="writer"></param>
    public override void ToBinary(IBinaryRawWriter writer)
    {
      base.ToBinary(writer);

      VersionSerializationHelper.EmitVersionByte(writer, VERSION_NUMBER);

      writer.WriteDouble(GridDistanceBetweenProfilePoints);

      writer.WriteBoolean(ProfileCells != null);
      if (ProfileCells != null)
      {
        writer.WriteInt(ProfileCells.Count);

        foreach (var profileCell in ProfileCells)
          profileCell?.ToBinary(writer);
      }
    }

    /// <summary>
    /// Serializes content from the writer
    /// </summary>
    /// <param name="reader"></param>
    public override void FromBinary(IBinaryRawReader reader)
    {
      base.FromBinary(reader);

      VersionSerializationHelper.CheckVersionByte(reader, VERSION_NUMBER);

      GridDistanceBetweenProfilePoints = reader.ReadDouble();

      if (reader.ReadBoolean())
      {
        var numberOfProfileCells = reader.ReadInt();

        if (numberOfProfileCells > 0)
        {
          for (var i = 1; i <= numberOfProfileCells; i++)
          {
            var profileCell = new T();

            profileCell.FromBinary(reader);
            ProfileCells.Add(profileCell);
          }
        }
      }
    }
  }
}

