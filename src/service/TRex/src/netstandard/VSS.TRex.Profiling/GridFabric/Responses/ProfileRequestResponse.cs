using System;
using System.Collections.Generic;
using Apache.Ignite.Core.Binary;
using VSS.TRex.Common;
using VSS.TRex.GridFabric.Interfaces;
using VSS.TRex.Profiling.Interfaces;

namespace VSS.TRex.Profiling.GridFabric.Responses
{
  /// <summary>
  /// Contains the set of profile cells generated by a profile analysis executor
  /// </summary>
  public class ProfileRequestResponse : SubGridsPipelinedReponseBase, IAggregateWith<ProfileRequestResponse>, IEquatable<SubGridsPipelinedReponseBase>
  {
    public List<IProfileCell> ProfileCells;

    /// <summary>
    /// Aggregates an other response with this response
    /// </summary>
    /// <param name="other"></param>
    /// <returns></returns>
    public ProfileRequestResponse AggregateWith(ProfileRequestResponse other)
    {
      ProfileCells.AddRange(other.ProfileCells);

      return this;
    }

    /// <summary>
    /// Serialises content to the writer
    /// </summary>
    /// <param name="writer"></param>
    public override void ToBinary(IBinaryRawWriter writer)
    {
      base.ToBinary(writer);

      writer.WriteBoolean(ProfileCells != null);
      if (ProfileCells != null)
      {
        writer.WriteInt(ProfileCells.Count);

        foreach (var profileCell in ProfileCells)
          profileCell?.ToBinary(writer);
      }
    }

    /// <summary>
    /// Serialises content from the writer
    /// </summary>
    /// <param name="reader"></param>
    public override void FromBinary(IBinaryRawReader reader)
    {
      base.FromBinary(reader);

      if (reader.ReadBoolean())
      {
        var numberOfProfileCells = reader.ReadInt();

        ProfileCells = new List<IProfileCell>();

        if (numberOfProfileCells > 0)
        {
          for (var i = 1; i <= numberOfProfileCells; i++)
          {
            var profileCell = new ProfileCell();

            profileCell.FromBinary(reader);

            ProfileCells.Add(profileCell);
          }
        }
      }
    }

    protected bool Equals(ProfileRequestResponse other)
    {
      //===========================================================
      bool AreProfileCellsEqual()
      {
        if (ProfileCells == null || other.ProfileCells == null)
          return false;

        for (var i = 0; i < ProfileCells.Count; i++)
        {
          if (!Equals(ProfileCells[i], other.ProfileCells[i]))
            return false;
        }

        return true;
      }
      //===========================================================

      return base.Equals(other) &&
          (Equals(ProfileCells, other.ProfileCells) || AreProfileCellsEqual());
    }

    public new bool Equals(SubGridsPipelinedReponseBase other)
    {
      return Equals(other as ProfileRequestResponse);
    }

    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != this.GetType()) return false;
      return Equals((ProfileRequestResponse) obj);
    }

    public override int GetHashCode()
    {
      unchecked
      {
        return (base.GetHashCode() * 397) ^ (ProfileCells != null ? ProfileCells.GetHashCode() : 0);
      }
    }
  }
}
