#BUILD_CONTAINER is the container where T-Rex was just built and unit tested in usually this should be local i.e. not pushed to ecr or elsewhere.
ARG BUILD_CONTAINER
FROM ${BUILD_CONTAINER} as build_container

#We are using the above as a base container as it is the one one just build and tested, therefore we want its T-Rex binaries

# Now create runtime container
# Why bash? it seems to be needed for ignite to run (maybe a dependency?)
FROM microsoft/dotnet:2.1-aspnetcore-runtime-alpine3.7
RUN apk --no-cache add openjdk8
RUN apk --no-cache add bash nodejs nodejs-npm


# We need libgdiplus for system.drawing.common for tiles
RUN \
  apk add libgdiplus --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted


# #Need these for ignite to work
ENV JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk
ENV LD_LIBRARY_PATH=$JAVA_HOME/jre/lib/amd64/server
ENV IGNITE_HOME=/trex/
ENV IS_KUBERNETES=true

#Bring libs accross TODO: make the common part of this a new image to speed build times
COPY --from=build_container /trex/libs/ /trex/libs/

# Copy built artifacts from last stage into runtime container
#ARGS have weird scoping
ARG COMPONENT
COPY --from=build_container /trex/${COMPONENT}/ /trex/
#Get the ignite libs as these are ignored by dotnet publish
#COPY --from=build_container /root/.nuget/packages/apache.ignite/2.6.0/libs/ /trex/libs/
WORKDIR /trex



