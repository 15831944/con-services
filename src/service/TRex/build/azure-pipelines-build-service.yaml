trigger:
  branches:
    include:
      - master
      # Building of release and feature branches via Pull Requests using Azure Git is handled in Branch Policies.
  paths:
    include:
      - "src/service/TRex/*"

pool: fsm-merino-services

variables:
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"
  serviceName: TRex
  rootServiceFolder: "$(System.DefaultWorkingDirectory)/src/service/TRex"
  ecrRepositoryName: 'rpd-ccss-trex'

jobs:
  - job: BuildTestAndDeploy
    displayName: "Build, test and Deploy"
    timeoutInMinutes: 60

    steps:
      - checkout: self
        fetchDepth: 1

      - template: ${{variables['System.DefaultWorkingDirectory']}}/build/templates/update-buildnumber.yaml
        parameters:
          buildId: $(Build.BuildId)

      - task: PowerShell@2
        displayName: "Build"
        inputs:
          filePath: build/azure-build-pipeline.ps1
          arguments: "-service $(serviceName) -action build"

      # - task: PowerShell@2
      #   displayName: "Run unit tests"
      #   inputs:
      #     filePath: build/azure-build-pipeline.ps1
      #     arguments: "-service $(serviceName) -action unittest -collectCoverage false" #disable coverage collection for the moment.

      # - task: PublishTestResults@2
      #   displayName: "Publish Unit Test Results"
      #   continueOnError: true
      #   inputs:
      #     testResultsFormat: 'VSTest'
      #     testResultsFiles: "**/*.trx"
      #     searchFolder: "$(rootServiceFolder)/UnitTestResults"

      # - task: PublishCodeCoverageResults@1
      #   displayName: "Publish Code Coverage"
      #   inputs:
      #     codeCoverageTool: Cobertura
      #     summaryFileLocation: "$(rootServiceFolder)/UnitTestResults/coverage.cobertura.xml"
      #     pathToSources: "$(rootServiceFolder)"
      #     failIfCoverageEmpty: true

      # We need to push individual images for each TRex service, that's done using this template.
      - template: templates/push-service-image.yaml
        displayName: "ublishing Service: ApplicationServer"
        parameters:
          serviceName: $(serviceName)
          sourceBranchName: $(Build.SourceBranchName)
          buildId: $(Build.BuildId)
          ecrRepositoryName: $(ecrRepositoryName)
          trexServices: ['ApplicationServer']
          publishProjectFile: src/netstandard/services/VSS.TRex.Server.Application/VSS.TRex.Server.Application.csproj

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: Charts'
        inputs:
          PathtoPublish: $(rootServiceFolder)/deploy
          ArtifactName: Charts
        condition: succeededOrFailed()
