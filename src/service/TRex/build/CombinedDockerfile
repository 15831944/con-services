FROM mcr.microsoft.com/dotnet/core/sdk:3.1
ARG SERVICE_PATH

#debconf shouldn't expect an interactive terminal
ENV DEBIAN_FRONTEND=noninteractive

#Slim based images don't have man dirs which will cause autoconf to fail during java install. Create the dirs here
RUN seq 1 8 | xargs -I{} mkdir -p /usr/share/man/man{}

RUN apt-get update && apt-get install -y \
    gnupg2

RUN curl -sL https://deb.nodesource.com/setup_8.x | bash -
RUN apt-get install -y \
    nodejs \ 
    npm

RUN wget -q https://packages.microsoft.com/config/ubuntu/19.10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && \
    dpkg -i packages-microsoft-prod.deb

###RUN apt-get update && apt-get install -y \ 
###    dotnet-sdk-3.1

RUN apt-get update && apt-get install -y \
    software-properties-common

RUN wget -O- https://apt.corretto.aws/corretto.key | apt-key add - && \
    add-apt-repository 'deb https://apt.corretto.aws stable main'

RUN apt-get update && apt-get install -y \
    java-11-amazon-corretto-jdk

RUN apt-get update && apt-get install -y \
    libc6-dev

RUN apt-get update && apt-get install -y \
    wget

RUN wget https://download.mono-project.com/repo/ubuntu/pool/main/libg/libgdiplus/libgdiplus_5.6-0xamarin3+debian9b1_amd64.deb && \
    apt-get install -y ./libgdiplus_5.6-0xamarin3+debian9b1_amd64.deb
#Copy files from scm into build container and build
COPY . /build/
WORKDIR /build

# #Need these for ignite to work
ENV JAVA_HOME=/usr/lib/jvm/java-11-amazon-corretto
ENV LD_LIBRARY_PATH=$JAVA_HOME/lib/server

#publish TRex servers
RUN dotnet publish ./$SERVICE_PATH/src/netstandard/services/VSS.TRex.Server.Application/VSS.TRex.Server.Application.csproj --output /trex/ApplicationServer
RUN dotnet publish ./$SERVICE_PATH/src/netstandard/services/VSS.TRex.Server.DesignElevation/VSS.TRex.Server.DesignElevation.csproj --output /trex/DesignElevation
RUN dotnet publish ./$SERVICE_PATH/src/netstandard/services/VSS.TRex.Server.MutableData/VSS.TRex.Server.MutableData.csproj --output /trex/MutableData
RUN dotnet publish ./$SERVICE_PATH/src/netstandard/services/VSS.TRex.Server.PSNode/VSS.TRex.Server.PSNode.csproj --output /trex/PSNode
RUN dotnet publish ./$SERVICE_PATH/src/netstandard/services/VSS.TRex.Server.QuantizedMesh/VSS.TRex.Server.QuantizedMesh.csproj --output /trex/QMesh
RUN dotnet publish ./$SERVICE_PATH/src/netstandard/services/VSS.TRex.Server.TileRendering/VSS.TRex.Server.TileRendering.csproj --output /trex/TileRendering
RUN dotnet publish ./$SERVICE_PATH/src/netstandard/services/VSS.TRex.Server.TINSurfaceExport/VSS.TRex.Server.TINSurfaceExport.csproj --output /trex/TINSurfaceExport
RUN dotnet publish ./$SERVICE_PATH/src/netstandard/services/VSS.TRex.Server.Reports --output /trex/Reports
RUN dotnet publish ./$SERVICE_PATH/src/gateway/VSS.TRex.ConnectedSite.Gateway.WebApi/VSS.TRex.ConnectedSite.Gateway.WebApi.csproj --output /trex/ConnectedSiteGateway
RUN dotnet publish ./$SERVICE_PATH/src/gateway/VSS.TRex.Gateway.WebApi/VSS.TRex.Gateway.WebApi.csproj --output /trex/Gateway
RUN dotnet publish ./$SERVICE_PATH/src/gateway/VSS.TRex.Mutable.Gateway.WebApi/VSS.TRex.Mutable.Gateway.WebApi.csproj --output /trex/MutableGateway
RUN dotnet publish ./$SERVICE_PATH/src/tools/VSS.TRex.Webtools/VSS.TRex.Webtools.csproj --output /trex/Webtools
RUN dotnet publish ./$SERVICE_PATH/src/tools/VSS.TRex.GridActivator/VSS.TRex.GridActivator.csproj --output /trex/Utils/Activator
RUN dotnet publish ./$SERVICE_PATH/src/tools/VSS.TRex.Service.Deployer/VSS.TRex.Service.Deployer.csproj --output /trex/Utils/Deployer



#Gather dependencies - kubernetes support (and its dependencies) have to be injected here as its not part of the nuget package
RUN cp -r /root/.nuget/packages/apache.ignite/2.8.0/build/output/libs/ /trex/libs/
COPY ./$SERVICE_PATH/build/ignite-kubernetes-2.8.0.jar /trex/libs/

WORKDIR /trex/libs/
RUN wget https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-core/2.9.8/jackson-core-2.9.8.jar
RUN wget https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.9.8/jackson-annotations-2.9.8.jar
RUN wget https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.9.8/jackson-databind-2.9.8.jar
# RUN wget http://repo1.maven.org/maven2/log4j/log4j/1.2.17/log4j-1.2.17.jar
# RUN wget http://repo1.maven.org/maven2/org/apache/ignite/ignite-log4j/2.7.0/ignite-log4j-2.7.0.jar
# RUN wget http://repo1.maven.org/maven2/org/springframework/spring-aop/5.0.8.RELEASE/spring-aop-5.0.8.RELEASE.jar
# RUN wget http://repo1.maven.org/maven2/org/springframework/spring-expression/5.0.8.RELEASE/spring-expression-5.0.8.RELEASE.jar
# RUN wget https://repo1.maven.org/maven2/org/springframework/spring-jdbc/5.0.8.RELEASE/spring-jdbc-5.0.8.RELEASE.jar
RUN wget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.12.0/jmx_prometheus_javaagent-0.12.0.jar
# RUN rm spring*4.3.18*
#TRex unit tests will be tested by the jenkins file as host directory mounts cannot be specified in the dockerfile









#BUILD_CONTAINER is the container where T-Rex was just built and unit tested in usually this should be local i.e. not pushed to ecr or elsewhere.
###ARG BUILD_CONTAINER
###FROM ${BUILD_CONTAINER} as build_container

#We are using the above as a base container as it is the one one just build and tested, therefore we want its T-Rex binaries

# Now create runtime container
# Why bash? it seems to be needed for ignite to run (maybe a dependency?)
###FROM mcr.microsoft.com/dotnet/core/aspnet:3.1

#debconf shouldn't expect an interactive terminal
###ENV DEBIAN_FRONTEND=noninteractive

#Slim based images don't have man dirs which will cause autoconf to fail during java install. Create the dirs here
###RUN seq 1 8 | xargs -I{} mkdir -p /usr/share/man/man{}

###RUN apt-get update && apt-get install -y\
###    apt-utils \
###    software-properties-common

###RUN apt-get update && apt-get install -y \
###    wget

###RUN apt-get update && apt-get install -y \
###    gnupg2

###RUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \
###  && apt-get install -y nodejs

###RUN wget -O- https://apt.corretto.aws/corretto.key | apt-key add - && \
###    add-apt-repository 'deb https://apt.corretto.aws stable main'

###RUN apt-get update && apt-get install -y \
###    java-11-amazon-corretto-jdk

# RUN apt-get update && apt-get install -y \
#     openjdk-8-jdk

###RUN apt-get update && apt-get install -y \
###    libc6-dev



###RUN wget https://download.mono-project.com/repo/ubuntu/pool/main/libg/libgdiplus/libgdiplus_5.6-0xamarin3+debian9b1_amd64.deb && \
###    apt-get install -y ./libgdiplus_5.6-0xamarin3+debian9b1_amd64.deb

# #Need these for ignite to work
# #Need these for ignite to work
ENV JAVA_HOME=/usr/lib/jvm/java-11-amazon-corretto
ENV LD_LIBRARY_PATH=$JAVA_HOME/lib/server
ENV IGNITE_HOME=/trex/
ENV IS_KUBERNETES=true
ENV TPAAS_AUTH_URL=https://identity-stg.trimble.com/i/oauth2
ENV TPAAS_APP_TOKEN=MGh1X25tYXlEQWFkMFdpY1hDekVHVTE3U2ZVYTppVWN3eEZ1cFRDRWFsaFVFOTRwWGhkVVNEa0Vh
ENV COORDINATE_SERVICE_URL=https://api-stg.trimble.com/t/trimble.com/coordinates/1.0

#Bring libs accross TODO: make the common part of this a new image to speed build times
###COPY --from=build_container /trex/libs/ /trex/libs/

# Copy built artifacts from last stage into runtime container
#ARGS have weird scoping
###ARG COMPONENT
###COPY --from=build_container /trex/${COMPONENT}/ /trex/
WORKDIR /trex
RUN touch prometheusConfig.yaml

