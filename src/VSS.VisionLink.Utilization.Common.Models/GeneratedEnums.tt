<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Xml" #> 
<#@ assembly name="System.Xml.Linq" #> 
<#@ assembly name="System.Core" #> 
<#@ assembly name="System.Configuration" #>
<#@ assembly name="$(SolutionDir)\packages\MySql.Data.6.9.7\lib\net45\MySql.Data.dll" #> 
<#@ assembly name="$(SolutionDir)\packages\Dapper.1.42\lib\net45\Dapper.dll" #> 
<#@ assembly name="System.Data" #>
<#@ import namespace="EnvDTE" #> 
<#@ import namespace="System.Linq" #> 
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #> 
<#@ import namespace="System.Configuration" #> 
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.IO" #>
<#@ import namespace="MySql.Data.MySqlClient" #> 
<#@ import namespace="Dapper" #>
<#@ output extension=".cs"#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#
  // Get containing project to work out namespace  
  IServiceProvider serviceProvider = (IServiceProvider)Host;  
  DTE dte = (DTE)serviceProvider.GetService(typeof(DTE));  
  Project project = dte.Solution.FindProjectItem(Host.TemplateFile).ContainingProject; 
  var namespaceName = Path.GetDirectoryName(Host.TemplateFile).Remove(0, Path.GetDirectoryName(project.FileName).Length).Replace("\\", ".");
#>
namespace <#= project.Properties.Item("DefaultNamespace").Value #><#= namespaceName #>  
{
<#
  string connectionString = ConnectionString;
  IEnumerable<string> enumTypes = EnumTableNames(connectionString);
  foreach (var enumType in enumTypes)
  {
#>
    public enum <#= enumType #>
    {
<#
    PushIndent("      ");
    string enumTokenLine=WriteEnum(enumType, connectionString);
    PopIndent();
#>
<#=enumTokenLine #>
    }

<#
  }
#>
}
<#+
  string WriteEnum(string tableName, string connectionString)
  {
  	string enumLine = "";
	  string tokenTemplate="{2}{0}={1},"+ Environment.NewLine;
    var numeric = new char[]{'0','1','2','3','4','5','6','7','8','9'};
    using (var connection = new MySqlConnection(connectionString))
	  {
      connection.Open();
      var rows = connection.Query<DatabaseEnum>
        (@"SELECT
          ID, Description
          FROM " + tableName          
        ).ToList();

        foreach (var row in rows)
        {
          try
				  {
					  string tokenName = row.Description.Replace("-","").Replace(" ","");
            if (numeric.Contains(tokenName[0]) )
              enumLine += "e";
                
					  enumLine += string.Format(tokenTemplate,tokenName,row.ID,CurrentIndent);
				  }
				  catch(IndexOutOfRangeException) { }
        }
	  }
	  enumLine = enumLine.Substring(0, enumLine.Length- (Environment.NewLine+",").Length);

	  return enumLine;
  }

  private class DatabaseEnum
  {
    public int ID;
    public string Description;
  }

  private string ConnectionString
  {
    get 
    {
        var map = new ExeConfigurationFileMap();
        map.ExeConfigFilename = this.Host.ResolvePath(@"app.config");
        var config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(map, ConfigurationUserLevel.None);
        var connectionString = config.ConnectionStrings.ConnectionStrings["VSPDB"].ConnectionString;
        var dbUser = config.AppSettings.Settings["DatabaseUser"].Value;
        var dbPwd = config.AppSettings.Settings["DatabasePassword"].Value;
        connectionString = connectionString.Replace("XXXUSERXXX", dbUser);
        connectionString = connectionString.Replace("XXXPASSWORDXXX", dbPwd);
        return connectionString;
    }
  }

  private IEnumerable<string> EnumTableNames(string connectionString)
  {
    List<string> names = null;
    using (var connection = new MySqlConnection(connectionString))
	  {
      connection.Open();
      names = connection.Query<string>
        (@"SELECT table_name FROM information_schema.tables 
           WHERE table_type = 'base table' 
           AND table_schema='Landfill'
           AND table_name LIKE '%Enum'"        
        ).ToList();
    }
    return names;
  }
#>