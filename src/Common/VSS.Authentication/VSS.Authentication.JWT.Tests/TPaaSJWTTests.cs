using System;
using System.Net.Http;
using Xunit;

namespace VSS.Authentication.JWT.Tests
{
	public class TPaaSJWTTests
	{
		private const string ValidTPaaSUserJWT =
			"eyJhbGciOiJSUzI1NiIsIng1dCI6IlltRTNNelE0TVRZNE5EVTJaRFptT0RkbU5UUm1OMlpsWVRrd01XRXpZbU5qTVRrek1ERXpaZyJ9.eyJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9hcHBsaWNhdGlvbm5hbWUiOiJBbHBoYS1WTFVuaWZpZWRGbGVldCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL3Bhc3N3b3JkUG9saWN5RGV0YWlscyI6ImV5SjFjR1JoZEdWa1ZHbHRaU0k2TVRRM056VXlOalExT1RjM09Td2lhR2x6ZEc5eWVTSTZXeUppTURSa05tWmxZVFZtWW1GbVpURXdabVU1WkRCa016RTFNalU0TVRsbU1HUTNNMkZoWXpsbVptWTBZbVE1T0RFMk5HTmlNRGd4WVRZMU56SXhOamxpSWl3aU1tRmhaVFl3WldSak1XSmhOREUxWXpCaFlqQTVNMll3TmpWbFlqWXhORGc0TTJJd05HSmtNV0poWm1ZNU9HWXdZbU5sWVRVNU5HTmlZbVl6T1RSa09DSmRmUT09IiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wva2V5dHlwZSI6IlBST0RVQ1RJT04iLCJzY29wZXMiOiJvcGVuaWQiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9lbWFpbFZlcmlmaWVkIjoidHJ1ZSIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL3N1YnNjcmliZXIiOiJkZXYtdnNzYWRtaW5AdHJpbWJsZS5jb20iLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC91c2VydHlwZSI6IkFQUExJQ0FUSU9OX1VTRVIiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9yb2xlIjoiIiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvYWNjb3VudHVzZXJuYW1lIjoiY2xheWFuZGVyc29uYXR0cmltYmxlK2NhdGRlbW8iLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9hY2NvdW50bmFtZSI6ImdtYWlsLmNvbSIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2ZpcnN0bmFtZSI6IkNsYXkiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9wYXNzd29yZFBvbGljeSI6IkhJR0giLCJpc3MiOiJ3c28yLm9yZ1wvcHJvZHVjdHNcL2FtIiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvbGFzdG5hbWUiOiJBbmRlcnNvbiIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2FwcGxpY2F0aW9uaWQiOiIzNDAyIiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvdmVyc2lvbiI6IjEuMCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2VuZHVzZXIiOiJnbWFpbC5jb20hY2xheWFuZGVyc29uYXR0cmltYmxlK2NhdGRlbW9AaW5kaXZpZHVhbC5jb20iLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC91dWlkIjoiY2IwZWJlOGEtYjk2MC00ZjVkLTg1NTItMDQzOWY1ZjBkZmU2IiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvZW5kdXNlclRlbmFudElkIjoiMiIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2dpdmVubmFtZSI6IkNsYXkiLCJleHAiOjE0OTE0OTcwMDUsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2lkZW50aXR5XC9mYWlsZWRMb2dpbkF0dGVtcHRzIjoiMCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2lkZW50aXR5XC9hY2NvdW50TG9ja2VkIjoiZmFsc2UiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9hcGljb250ZXh0IjoiXC90XC90cmltYmxlLmNvbVwvVlNTLUFscGhhLVVuaWZpZWRGbGVldCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2xhc3RMb2dpblRpbWVTdGFtcCI6IjE0OTE0OTM4NjY3OTUiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC90aWVyIjoiVW5saW1pdGVkIiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvc3RhdHVzIjoiZXlKQ1RFOURTMFZFSWpvaVptRnNjMlVpTENKWFFVbFVTVTVIWDBaUFVsOUZUVUZKVEY5V1JWSkpSa2xEUVZSSlQwNGlPaUptWVd4elpTSXNJa0pTVlZSRlgwWlBVa05GWDB4UFEwdEZSQ0k2SW1aaGJITmxJaXdpUVVOVVNWWkZJam9pZEhKMVpTSjkiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9hcHBsaWNhdGlvbnRpZXIiOiJVbmxpbWl0ZWQiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9lbWFpbGFkZHJlc3MiOiJjbGF5YW5kZXJzb25hdHRyaW1ibGUrY2F0ZGVtb0BnbWFpbC5jb20ifQ.JRwGoInSn4Ohs-9XX-p_y76zzUFVN9xfNt9W3fH7Up9XxMJVs_wqu7bPZVYEAssTnOjrGY7pE-7EsX-DS_pEAwunmTAQzHlciFtX8XLpQfTEBcd6UuuJdbH7zXCVyqeJH1OzyZ6xddzKzBwjKZR0JBA-O5fQzORXkmc5_IuYPVw";

		private readonly Guid _validTPaaSUserJWTUserUid = Guid.Parse("cb0ebe8a-b960-4f5d-8552-0439f5f0dfe6");

		private const string ValidTPaaSUserJWT2 =
			"eyJhbGciOiJSUzI1NiIsIng1dCI6IlltRTNNelE0TVRZNE5EVTJaRFptT0RkbU5UUm1OMlpsWVRrd01XRXpZbU5qTVRrek1ERXpaZyJ9.eyJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9hcHBsaWNhdGlvbm5hbWUiOiJBbHBoYS1WTFVuaWZpZWRGbGVldCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL3Bhc3N3b3JkUG9saWN5RGV0YWlscyI6ImV5SjFjR1JoZEdWa1ZHbHRaU0k2TVRRM056VXlOalExT1RjM09Td2lhR2x6ZEc5eWVTSTZXeUppTURSa05tWmxZVFZtWW1GbVpURXdabVU1WkRCa016RTFNalU0TVRsbU1HUTNNMkZoWXpsbVptWTBZbVE1T0RFMk5HTmlNRGd4WVRZMU56SXhOamxpSWl3aU1tRmhaVFl3WldSak1XSmhOREUxWXpCaFlqQTVNMll3TmpWbFlqWXhORGc0TTJJd05HSmtNV0poWm1ZNU9HWXdZbU5sWVRVNU5HTmlZbVl6T1RSa09DSmRmUT09IiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wva2V5dHlwZSI6IlBST0RVQ1RJT04iLCJzY29wZXMiOiJvcGVuaWQiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9lbWFpbFZlcmlmaWVkIjoidHJ1ZSIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL3N1YnNjcmliZXIiOiJkZXYtdnNzYWRtaW5AdHJpbWJsZS5jb20iLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC91c2VydHlwZSI6IkFQUExJQ0FUSU9OX1VTRVIiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9yb2xlIjoiIiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvYWNjb3VudHVzZXJuYW1lIjoiY2xheWFuZGVyc29uYXR0cmltYmxlK2NhdGRlbW8iLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9hY2NvdW50bmFtZSI6ImdtYWlsLmNvbSIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2ZpcnN0bmFtZSI6IkNsYXkiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9wYXNzd29yZFBvbGljeSI6IkhJR0giLCJpc3MiOiJ3c28yLm9yZ1wvcHJvZHVjdHNcL2FtIiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvbGFzdG5hbWUiOiJBbmRlcnNvbiIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2FwcGxpY2F0aW9uaWQiOiIzNDAyIiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvdmVyc2lvbiI6IjEuMCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2VuZHVzZXIiOiJnbWFpbC5jb20hY2xheWFuZGVyc29uYXR0cmltYmxlK2NhdGRlbW9AaW5kaXZpZHVhbC5jb20iLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC91dWlkIjoiY2IwZWJlOGEtYjk2MC00ZjVkLTg1NTItMDQzOWY1ZjBkZmU2IiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvZW5kdXNlclRlbmFudElkIjoiMiIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2dpdmVubmFtZSI6IkNsYXkiLCJleHAiOjE0OTE0OTcwMDUsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2lkZW50aXR5XC9mYWlsZWRMb2dpbkF0dGVtcHRzIjoiMCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2lkZW50aXR5XC9hY2NvdW50TG9ja2VkIjoiZmFsc2UiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9hcGljb250ZXh0IjoiXC90XC90cmltYmxlLmNvbVwvVlNTLUFscGhhLVVuaWZpZWRGbGVldCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2xhc3RMb2dpblRpbWVTdGFtcCI6IjE0OTE0OTM4NjY3OTUiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC90aWVyIjoiVW5saW1pdGVkIiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvc3RhdHVzIjoiZXlKQ1RFOURTMFZFSWpvaVptRnNjMlVpTENKWFFVbFVTVTVIWDBaUFVsOUZUVUZKVEY5V1JWSkpSa2xEUVZSSlQwNGlPaUptWVd4elpTSXNJa0pTVlZSRlgwWlBVa05GWDB4UFEwdEZSQ0k2SW1aaGJITmxJaXdpUVVOVVNWWkZJam9pZEhKMVpTSjkiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9hcHBsaWNhdGlvbnRpZXIiOiJVbmxpbWl0ZWQiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC9lbWFpbGFkZHJlc3MiOiJjbGF5YW5kZXJzb25hdHRyaW1ibGUrY2F0ZGVtb0BnbWFpbC5jb20ifQ.JRwGoInSn4Ohs-9XX-p_y76zzUFVN9xfNt9W3fH7Up9XxMJVs_wqu7bPZVYEAssTnOjrGY7pE-7EsX-DS_pEAwunmTAQzHlciFtX8XLpQfTEBcd6UuuJdbH7zXCVyqeJH1OzyZ6xddzKzBwjKZR0JBA-O5fQzORXkmc5_IuYPVw";

		private readonly Guid _validTPaaSUserJWT2UserUid = Guid.Parse("cb0ebe8a-b960-4f5d-8552-0439f5f0dfe6");

		private const string ValidTPaaSApplicationJWT =
			"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IlltRTNNelE0TVRZNE5EVTJaRFptT0RkbU5UUm1OMlpsWVRrd01XRXpZbU5qTVRrek1ERXpaZz09In0=.eyJpc3MiOiJ3c28yLm9yZy9wcm9kdWN0cy9hbSIsImV4cCI6MTQ4Njc3MjA3NDE5MSwiaHR0cDovL3dzbzIub3JnL2NsYWltcy9zdWJzY3JpYmVyIjoicHViLXZzc2FkbWluQHRyaW1ibGUuY29tIiwiaHR0cDovL3dzbzIub3JnL2NsYWltcy9hcHBsaWNhdGlvbmlkIjoiNjYyIiwiaHR0cDovL3dzbzIub3JnL2NsYWltcy9hcHBsaWNhdGlvbm5hbWUiOiJNYXN0ZXJEYXRhTWFuYWdlbWVudCIsImh0dHA6Ly93c28yLm9yZy9jbGFpbXMvYXBwbGljYXRpb250aWVyIjoiVW5saW1pdGVkIiwiaHR0cDovL3dzbzIub3JnL2NsYWltcy9hcGljb250ZXh0IjoiL3QvdHJpbWJsZS5jb20vdnNzLWlxYS1hc3NldHNlcnZpY2UiLCJodHRwOi8vd3NvMi5vcmcvY2xhaW1zL3ZlcnNpb24iOiIxLjAiLCJodHRwOi8vd3NvMi5vcmcvY2xhaW1zL3RpZXIiOiJVbmxpbWl0ZWQiLCJodHRwOi8vd3NvMi5vcmcvY2xhaW1zL2tleXR5cGUiOiJQUk9EVUNUSU9OIiwiaHR0cDovL3dzbzIub3JnL2NsYWltcy91c2VydHlwZSI6IkFQUExJQ0FUSU9OIiwiaHR0cDovL3dzbzIub3JnL2NsYWltcy9lbmR1c2VyIjoicHViLXZzc2FkbWluQHRyaW1ibGUuY29tIiwiaHR0cDovL3dzbzIub3JnL2NsYWltcy9lbmR1c2VyVGVuYW50SWQiOiIxIiwiaHR0cDovL3dzbzIub3JnL2NsYWltcy9hY2NvdW50bmFtZSI6InRyaW1ibGUuY29tIiwiaHR0cDovL3dzbzIub3JnL2NsYWltcy9hY2NvdW50dXNlcm5hbWUiOiJwdWItdnNzYWRtaW4iLCJodHRwOi8vd3NvMi5vcmcvY2xhaW1zL2VtYWlsYWRkcmVzcyI6IkJob29iYWxhbl9QYWxhbml2ZWxAVHJpbWJsZS5jb20iLCJodHRwOi8vd3NvMi5vcmcvY2xhaW1zL2ZpcnN0bmFtZSI6IkJob29iYWxhbiIsImh0dHA6Ly93c28yLm9yZy9jbGFpbXMvZ2l2ZW5uYW1lIjoiQmhvb2JhbGFuIiwiaHR0cDovL3dzbzIub3JnL2NsYWltcy9pZGVudGl0eS9hY2NvdW50TG9ja2VkIjoiZmFsc2UiLCJodHRwOi8vd3NvMi5vcmcvY2xhaW1zL2lkZW50aXR5L2ZhaWxlZExvZ2luQXR0ZW1wdHMiOiIwIiwiaHR0cDovL3dzbzIub3JnL2NsYWltcy9pZGVudGl0eS91bmxvY2tUaW1lIjoiMCIsImh0dHA6Ly93c28yLm9yZy9jbGFpbXMvbGFzdExvZ2luVGltZVN0YW1wIjoiMTQ4NjczMzU2NjgxNCIsImh0dHA6Ly93c28yLm9yZy9jbGFpbXMvbGFzdG5hbWUiOiJQYWxhbml2ZWwiLCJodHRwOi8vd3NvMi5vcmcvY2xhaW1zL3JvbGUiOiJwdWJsaXNoZXIiLCJodHRwOi8vd3NvMi5vcmcvY2xhaW1zL3N0YXR1cyI6ImV5SkNURTlEUzBWRUlqb2labUZzYzJVaUxDSlhRVWxVU1U1SFgwWlBVbDlGVFVGSlRGOVdSVkpKUmtsRFFWUkpUMDRpT2lKbVlXeHpaU0lzSWtKU1ZWUkZYMFpQVWtORlgweFBRMHRGUkNJNkltWmhiSE5sSWl3aVFVTlVTVlpGSWpvaWRISjFaU0o5IiwiaHR0cDovL3dzbzIub3JnL2NsYWltcy91dWlkIjoiMzUzOGNlZTItNTdiZS00YzA5LTgwODYtNTkyZjBlMzRmYzEzIn0=.De+fBh9VlvBFTy+NCcd3qUCLEqQH4vO3iJy1SWTFOT7JhR+z8eVC+wM70nVZttsPpmKh8IbI2FICnAc6i25DxeLEsREtUOzkUffdAEaQXEEv6Up0JA1YlPkOMIl3g74e3XcRMuKizZ7m4cllpj2ooJqrrdc3OvIDV/fUWlHJ6MI=";

		private readonly Guid _validTPaaSApplicationJWTUserUid = Guid.Parse("3538cee2-57be-4c09-8086-592f0e34fc13");
		private readonly string _validTPaaSApplicationJWTApplicationName = "MasterDataManagement";
		private readonly string _validTPaaSApplicationJWTApplicationId = "662";
		private readonly string _validTPaaSApplicationJWTApplicationContext = "/t/trimble.com/vss-iqa-assetservice";
		private readonly string _validTPaaSApplicationJWTVersion = "1.0";

		private const string JWTWithArrayValue =
			"xxxx.ew0KICAgICAgICAgICAgICAgICAgICAgICJpc3MiOiAiaHR0cHM6Ly9pZGVudGl0eS1zdGcudHJpbWJsZS5jb20iLA0KCQkJCQkgICJleHAiOiAxNDcyMTI5MzQ2NjIwLA0KCQkJCQkgICJzdWIiOiAiZGluZXNoa3VtYXJfamF5YXJhbWFuQHRyaW1ibGUuY29tIiwNCgkJCQkJICAiaHR0cDovL3dzbzIub3JnL2NsYWltcy9hY2NvdW50bmFtZSI6ICJ0cmltYmxlLmNvbSIsDQoJCQkJCSAgImF6cCI6ICJxeENDeWZSTFpSV3VJdWs5aGJVc0ExdXR5MGNhIiwNCgkJCQkJICAiaHR0cDovL3dzbzIub3JnL2NsYWltcy9maXJzdG5hbWUiOiAiRGluZXNoIEt1bWFyIiwNCgkJCQkJICAiaHR0cDovL3dzbzIub3JnL2NsYWltcy9wYXNzd29yZFBvbGljeSI6ICJISUdIIiwNCgkJCQkJICAiaHR0cDovL3dzbzIub3JnL2NsYWltcy9sb2NhbGl0eSI6ICJUYXJhbWFuaSIsDQoJCQkJCSAgImF0X2hhc2giOiAiejUzdGlVTHlrZGR6TENCMThuMkFXQSIsDQoJCQkJCSAgImh0dHA6Ly93c28yLm9yZy9jbGFpbXMvcmVnaW9uIjogIkNoZW5uYWkiLA0KCQkJCQkgICJodHRwOi8vd3NvMi5vcmcvY2xhaW1zL2xhc3RuYW1lIjogIkpheWFyYW1hbiIsDQoJCQkJCSAgImh0dHA6Ly93c28yLm9yZy9jbGFpbXMvdGVsZXBob25lIjogIjEyMzQ1Njc4OTAiLA0KCQkJCQkgICJodHRwOi8vd3NvMi5vcmcvY2xhaW1zL3V1aWQiOiAiYTFlY2UyMWMtMjlhMC00YjI1LTk3ZWQtMmYwZDQ4MzVlZDI1IiwNCgkJCQkJICAiaHR0cDovL3dzbzIub3JnL2NsYWltcy9hcHBsaWNhdGlvbm5hbWUiOiAiQWxwaGEtVmlzaW9uTGlua0FkbWluaXN0cmF0b3IiLA0KCQkJCQkgICJodHRwOi8vd3NvMi5vcmcvY2xhaW1zL3VzZXJ0eXBlIjogIkFQUExJQ0FUSU9OIiwNCiAgICAgICAgICAgICAgICAgICAgICAiaWF0IjogMTQ3ODY4NTQ3NiwNCgkJCQkJICAiaHR0cDovL3dzbzIub3JnL2NsYWltcy9zdGF0ZW9ycHJvdmluY2UiOiAiVEFNSUxOQURVIiwNCgkJCQkJICAiaHR0cDovL3dzbzIub3JnL2NsYWltcy9naXZlbm5hbWUiOiAiRGluZXNoIEt1bWFyIiwNCgkJCQkJICAiYXV0aF90aW1lIjogMTQ3ODY4NDY1NSwNCgkJCQkJICAiaHR0cDovL3dzbzIub3JnL2NsYWltcy96aXBjb2RlIjogIjYwMDExMyIsDQoJCQkJCSAgImh0dHA6Ly93c28yLm9yZy9jbGFpbXMvc3RyZWV0YWRkcmVzcyI6ICIyM3JkIHN0IiwNCgkJCQkJICAiaHR0cDovL3dzbzIub3JnL2NsYWltcy9pZGVudGl0eS9hY2NvdW50TG9ja2VkIjogImZhbHNlIiwNCgkJCQkJICAiaHR0cDovL3dzbzIub3JnL2NsYWltcy9jb3VudHJ5IjogIjEyIiwNCgkJCQkJICAiYXVkIjogWw0KCQkJCQkJInF4Q0N5ZlJMWlJXdUl1azloYlVzQTF1dHkwY2EiDQoJCQkJCSAgXSwNCgkJCQkJICAiaHR0cDovL3dzbzIub3JnL2NsYWltcy9lbWFpbGFkZHJlc3MiOiAiZGluZXNoa3VtYXJfamF5YXJhbWFuQHRyaW1ibGUuY29tIiwNCgkJCQkJICAiaHR0cDovL3dzbzIub3JnL2NsYWltcy9hY2NvdW50dXNlcm5hbWUiOiAiZGluZXNoa3VtYXJfamF5YXJhbWFuIg0KfQ==.xxxx";

		[Fact]
		public void ThrowsExceptionOnInvalidToken()
		{
			var invalidToken = "abc";
			Assert.ThrowsAny<Exception>(() => new TPaaSJWT(invalidToken));
		}

		[Fact]
		public void CanDecodeLegitimateTPaaSUserJWTWithoutValidating()
		{
			var jwt = new TPaaSJWT(ValidTPaaSUserJWT);

			Assert.Equal(ValidTPaaSUserJWT, jwt.EncodedJWT);
			Assert.Equal(_validTPaaSUserJWTUserUid, jwt.UserUid);
			Assert.Equal("Alpha-VLUnifiedFleet", jwt.ApplicationName);
			Assert.True(jwt.IsApplicationUserToken);
			Assert.False(jwt.IsApplicationToken);
			Assert.Equal("clayandersonattrimble+catdemo@gmail.com", jwt.EmailAddress);
			Assert.Equal("Clay", jwt.Claims["http://wso2.org/claims/firstname"]);
		}

		[Fact]
		public void CanDecodeLegitimateTPaaSApplicationJWTWithoutValidating()
		{
			var jwt = new TPaaSJWT(ValidTPaaSApplicationJWT);

			Assert.Equal(ValidTPaaSApplicationJWT, jwt.EncodedJWT);
			Assert.Equal(_validTPaaSApplicationJWTUserUid, jwt.UserUid);
			Assert.Equal(_validTPaaSApplicationJWTApplicationName, jwt.ApplicationName);
			Assert.Equal(_validTPaaSApplicationJWTApplicationId, jwt.ApplicationId);
			Assert.Equal(_validTPaaSApplicationJWTApplicationContext, jwt.ApiContext);
			Assert.Equal(_validTPaaSApplicationJWTVersion, jwt.Version);
			Assert.False(jwt.IsApplicationUserToken);
			Assert.True(jwt.IsApplicationToken);
		}

		[Fact]
		public void CanGenerateFakeUserJWTFromAcceptanceTests()
		{
			var userUid = Guid.NewGuid();

			var jwt = TPaaSJWT.GenerateFakeApplicationUserJWT(userUid);

			Assert.Equal(userUid, jwt.UserUid);
			Assert.Equal("VL2.0", jwt.ApplicationName);
			Assert.True(jwt.IsApplicationUserToken);
			Assert.False(jwt.IsApplicationToken);
		}

		[Fact]
		public void CanGenerateFakeApplicationJWTFromAcceptanceTests()
		{
			var jwt = TPaaSJWT.GenerateFakeApplicationJWT("MyApplication");

			Assert.Equal("MyApplication", jwt.ApplicationName);
			Assert.False(jwt.IsApplicationUserToken);
			Assert.True(jwt.IsApplicationToken);
		}

		[Fact]
		public void CanDecodeJWTFromHTTPHeaders()
		{
			var headers = new HttpClient().DefaultRequestHeaders;
			headers.Add("X-JWT-Assertion", ValidTPaaSUserJWT);

			var jwt = new TPaaSJWT(headers);

			Assert.Equal(_validTPaaSUserJWTUserUid, jwt.UserUid);
			Assert.True(jwt.IsApplicationUserToken);
			Assert.False(jwt.IsApplicationToken);
		}

		[Fact]
		public void CanDecodeJWTWithArrayValue()
		{
			var jwt = new TPaaSJWT(JWTWithArrayValue);

			Assert.Equal("qxCCyfRLZRWuIuk9hbUsA1uty0ca", ((Newtonsoft.Json.Linq.JArray)jwt.Claims["aud"])[0]);
		}

		[Fact]
		public void ThrowsArgumentExceptionIfNoJWTInHTTPHeaders()
		{
			var headers = new HttpClient().DefaultRequestHeaders;

			Assert.Throws<ArgumentException>(() => new TPaaSJWT(headers));
		}

		[Fact]
		public void ToString_WithClaims_ReturnsString()
		{
			var jwt = new TPaaSJWT(ValidTPaaSApplicationJWT);

			var jwtToString = jwt.ToString();

			Assert.NotNull(jwtToString);
			Assert.Contains("[http://wso2.org/claims/applicationname, MasterDataManagement]", jwtToString);
		}

		[Fact(Skip =
			"Gokul Somasundaram <gokul_somasundaram@trimble.com> from TPaaS is working on finalizing this implementation.")]
		public void CanValidateAndDecodeLegitimateTPaaSUserJWT()
		{
			var jwt = new TPaaSJWT(ValidTPaaSUserJWT2);

			Assert.Equal(_validTPaaSUserJWT2UserUid, jwt.UserUid);
			Assert.True(jwt.IsApplicationUserToken);
			Assert.False(jwt.IsApplicationToken);
		}

		[Fact(Skip =
			"Gokul Somasundaram <gokul_somasundaram@trimble.com> from TPaaS is working on finalizing this implementation.")]
		public void ShouldThrowExceptionIfJWTIsInvalid()
		{
			var invalidJWT = ValidTPaaSUserJWT.ToCharArray();
			invalidJWT[0] = 'b';

			Assert.Throws<ArgumentException>(() => new TPaaSJWT(new string(invalidJWT)));
		}
	}
}