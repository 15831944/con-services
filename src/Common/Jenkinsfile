node ('jenkinsslave-pod') {

	// adds job parameters
	properties([
		parameters([
			string(
				defaultValue: null,
				description: 'The build number supplied by VSTS perhaps fail build if this is nothing to prevent unrequested builds during multibranch scan',
				name: 'VSTS_BUILD_NUMBER'
			),
			string(
				defaultValue: null,
				description: 'The branch name to build',
				name: 'BRANCH_NAME'
			),
			booleanParam(
				defaultValue: true,
				description: 'Run Unit Tests',
				name: 'RUN_UNITTESTS'
			),
		])
	])

    def buildkey = UUID.randomUUID()
                 .toString()
                 .split('-')[-1..-2]
                 .join('')
                 .toUpperCase()
			 
	// We may need to rename the branch to conform to DNS name spec
	def fullBranchName = env.BRANCH_NAME
    def branchName = env.BRANCH_NAME.substring(env.BRANCH_NAME.lastIndexOf("/") + 1)
	def jobnameparts = JOB_NAME.tokenize('/') as String[]
	def project_name = jobnameparts[0].toLowerCase() 	
    def versionNumber = branchName + "-" + params.VSTS_BUILD_NUMBER
    def container = "276986344560.dkr.ecr.us-west-2.amazonaws.com/jenkins-sandbox:${buildkey}-${params.VSTS_BUILD_NUMBER}"
	def runUnitTests = params.RUN_UNITTESTS
	
    def vars = []

	//Set the build name so it is consistant with VSTS
	currentBuild.displayName = versionNumber
	currentBuild.result='SUCCESS'

	stage("Prebuild Checks") {
		if (params.VSTS_BUILD_NUMBER == null) {
			currentBuild.result = 'ABORTED'
			error("Build stopping, no valid build number supplied")
		}
		if (params.BRANCH_NAME == null) {
			currentBuild.result = 'ABORTED'
			error("Build stopping, no valid branch supplied")
		}
	}
	
    stage('Build Solution') {
        
		checkout scm
		sh "eval \$(aws ecr get-login --no-include-email --region us-west-2)"
		dir ("src/Common")
		{
			def build_container = docker.build(container, "-f ./Dockerfile.build .")

			if (runUnitTests)
			{
				// Currently we need to execute the tests like this, because the pipeline docker plugin being aware of DIND, and attempting to map
				// the volume to the bare metal host        
				
				//Create results directory in workspace
				dir("TestResults") {}
				
				try {
				// Currently we need to execute the tests like this, because the pipeline docker plugin being aware of DIND, and attempting to map
				// the volume to the bare metal host
				
				//Do not modify this unless you know the difference between ' and " in bash
				// (https://www.gnu.org/software/bash/manual/html_node/Quoting.html#Quoting) see (https://gist.github.com/fuhbar/d00d11297a48b892684da34360e4135a) for Jenkinsfile 
				// specific escaping examples. One day we might be able to test solutions (and have the results go to a specific directory) rather than specific projects, negating the need for such a complex command.
				def testCommand = $/docker run -v ${env.WORKSPACE}/TestResults:/TestResults ${build_container.id} bash -c 'cd /build && find . -iname *.csproj -type f | xargs -I@ -t dotnet test @ /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutputDirectory=/TestResults/TestCoverage/ --test-adapter-path:. --logger:"xunit;LogFilePath=/TestResults/Unit/@.xml"'/$
				
				// **/ //Here to help syntax hilighting in VSCode

				//Run the test command generated above
				sh(script: testCommand)
				}
				catch (error) { 

				}

				sh "ls -R ${env.WORKSPACE}/TestResults"
			}
		}
		
			if (runUnitTests)
			{
				//Publish test results to Jenkins, set build stability according to configured thresholds
				//See https://jenkins.io/doc/pipeline/steps/xunit/#xunit-publish-xunit-test-result-report for DSL Guide
				step([$class: 'XUnitBuilder',
						thresholds: [
							[$class: 'FailedThreshold', failureThreshold: '0', unstableThreshold: '1'],
							[$class: 'SkippedThreshold', unstableThreshold: '1']
						],
						tools: [[$class: 'XUnitDotNetTestType', pattern: "TestResults/Unit/**/*.xml"]]])

				cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: "TestResults/**/TestCoverage/**/*.xml", conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false

				step([$class: 'TeamCollectResultsPostBuildAction', 
								requestedResults: [
									[includes: "TestResults/Unit/**/*.xml", teamResultType: 'XUNIT'],
									[includes: "TestResults/**/TestCoverage/**/*.xml", teamResultType: 'COBERTURA'],
								]
					])
			}
	}
}
