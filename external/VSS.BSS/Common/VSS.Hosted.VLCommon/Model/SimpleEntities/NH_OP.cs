//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Transactions;

namespace VSS.Hosted.VLCommon
{
    /// <summary>
    /// The functional concrete object context. This is just like the normal
    /// context that would be generated using the POCO artefact generator, 
    /// apart from the fact that this one implements an interface containing 
    /// the entity set properties and exposes <code>IObjectSet</code>
    /// instances for entity set properties.
    ///
    /// The context can be constructed as "read-only", in which case SNAPSHOT IsolationLevel is used for queries
    /// and calls to SaveChanges are not supported.
    /// </summary>
    public partial class NH_OP : ObjectContext, INH_OP 
    {
        public const string ConnectionString = "name=NH_OP";
        public const string ContainerName = "NH_OP";
    
        private bool _readOnly = false;
    
        #region Constructors
    
        public NH_OP(bool readOnly = false):
            base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        	  _readOnly = readOnly;
    
        }
    
        public NH_OP(string connectionString, bool readOnly = false):
            base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        	  _readOnly = readOnly;
    
        }
    
        public NH_OP(EntityConnection connection,bool readOnly = false):
            base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        	  _readOnly = readOnly;
    
        }
    
    	~NH_OP()
        {
          Dispose();
        }
    
        #endregion
    
    	#region IDisposable
    	new public void Dispose()
        {
          base.Dispose();
        }
    
        protected override void Dispose(bool disposing)
        {
          base.Dispose(disposing);
        }
    
        #endregion
    
        #region SaveChanges
    
    	public override int SaveChanges(SaveOptions options)
    	{
    	  if ( _readOnly )
    	    throw new System.NotSupportedException("This ObjectContext cannot be used to change data on the database");
    
        return base.SaveChanges(options);
    	}
    
        #endregion
    
        #region ObjectSet Properties
    
        public IObjectSet<AppAlarm> AppAlarm
        {
            get { return _appAlarm ?? (_appAlarm = CreateObjectSet<AppAlarm>("AppAlarm")); }
        }
        private ObjectSet<AppAlarm> _appAlarm;
        public IObjectSet<AppAlarm> AppAlarmReadOnly
        {
            get 
            { 
              if (null == _appAlarmRO)
              {
                _appAlarmRO = CreateObjectSet<AppAlarm>("AppAlarm"); 
                _appAlarmRO.MergeOption=MergeOption.NoTracking;
              }
              return _appAlarmRO;
            }
        }
        private ObjectSet<AppAlarm> _appAlarmRO;
    
        public IObjectSet<Asset> Asset
        {
            get { return _asset ?? (_asset = CreateObjectSet<Asset>("Asset")); }
        }
        private ObjectSet<Asset> _asset;
        public IObjectSet<Asset> AssetReadOnly
        {
            get 
            { 
              if (null == _assetRO)
              {
                _assetRO = CreateObjectSet<Asset>("Asset"); 
                _assetRO.MergeOption=MergeOption.NoTracking;
              }
              return _assetRO;
            }
        }
        private ObjectSet<Asset> _assetRO;
    
        public IObjectSet<BookmarkManager> BookmarkManager
        {
            get { return _bookmarkManager ?? (_bookmarkManager = CreateObjectSet<BookmarkManager>("BookmarkManager")); }
        }
        private ObjectSet<BookmarkManager> _bookmarkManager;
        public IObjectSet<BookmarkManager> BookmarkManagerReadOnly
        {
            get 
            { 
              if (null == _bookmarkManagerRO)
              {
                _bookmarkManagerRO = CreateObjectSet<BookmarkManager>("BookmarkManager"); 
                _bookmarkManagerRO.MergeOption=MergeOption.NoTracking;
              }
              return _bookmarkManagerRO;
            }
        }
        private ObjectSet<BookmarkManager> _bookmarkManagerRO;
    
        public IObjectSet<BSSMessages> BSSMessages
        {
            get { return _bSSMessages ?? (_bSSMessages = CreateObjectSet<BSSMessages>("BSSMessages")); }
        }
        private ObjectSet<BSSMessages> _bSSMessages;
        public IObjectSet<BSSMessages> BSSMessagesReadOnly
        {
            get 
            { 
              if (null == _bSSMessagesRO)
              {
                _bSSMessagesRO = CreateObjectSet<BSSMessages>("BSSMessages"); 
                _bSSMessagesRO.MergeOption=MergeOption.NoTracking;
              }
              return _bSSMessagesRO;
            }
        }
        private ObjectSet<BSSMessages> _bSSMessagesRO;
    
        public IObjectSet<ConfigType> ConfigType
        {
            get { return _configType ?? (_configType = CreateObjectSet<ConfigType>("ConfigType")); }
        }
        private ObjectSet<ConfigType> _configType;
        public IObjectSet<ConfigType> ConfigTypeReadOnly
        {
            get 
            { 
              if (null == _configTypeRO)
              {
                _configTypeRO = CreateObjectSet<ConfigType>("ConfigType"); 
                _configTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _configTypeRO;
            }
        }
        private ObjectSet<ConfigType> _configTypeRO;
    
        public IObjectSet<Contact> Contact
        {
            get { return _contact ?? (_contact = CreateObjectSet<Contact>("Contact")); }
        }
        private ObjectSet<Contact> _contact;
        public IObjectSet<Contact> ContactReadOnly
        {
            get 
            { 
              if (null == _contactRO)
              {
                _contactRO = CreateObjectSet<Contact>("Contact"); 
                _contactRO.MergeOption=MergeOption.NoTracking;
              }
              return _contactRO;
            }
        }
        private ObjectSet<Contact> _contactRO;
    
        public IObjectSet<CoordinateSystem> CoordinateSystem
        {
            get { return _coordinateSystem ?? (_coordinateSystem = CreateObjectSet<CoordinateSystem>("CoordinateSystem")); }
        }
        private ObjectSet<CoordinateSystem> _coordinateSystem;
        public IObjectSet<CoordinateSystem> CoordinateSystemReadOnly
        {
            get 
            { 
              if (null == _coordinateSystemRO)
              {
                _coordinateSystemRO = CreateObjectSet<CoordinateSystem>("CoordinateSystem"); 
                _coordinateSystemRO.MergeOption=MergeOption.NoTracking;
              }
              return _coordinateSystemRO;
            }
        }
        private ObjectSet<CoordinateSystem> _coordinateSystemRO;
    
        public IObjectSet<CrosscheckConfig> CrosscheckConfig
        {
            get { return _crosscheckConfig ?? (_crosscheckConfig = CreateObjectSet<CrosscheckConfig>("CrosscheckConfig")); }
        }
        private ObjectSet<CrosscheckConfig> _crosscheckConfig;
        public IObjectSet<CrosscheckConfig> CrosscheckConfigReadOnly
        {
            get 
            { 
              if (null == _crosscheckConfigRO)
              {
                _crosscheckConfigRO = CreateObjectSet<CrosscheckConfig>("CrosscheckConfig"); 
                _crosscheckConfigRO.MergeOption=MergeOption.NoTracking;
              }
              return _crosscheckConfigRO;
            }
        }
        private ObjectSet<CrosscheckConfig> _crosscheckConfigRO;
    
        public IObjectSet<CustomerRelationship> CustomerRelationship
        {
            get { return _customerRelationship ?? (_customerRelationship = CreateObjectSet<CustomerRelationship>("CustomerRelationship")); }
        }
        private ObjectSet<CustomerRelationship> _customerRelationship;
        public IObjectSet<CustomerRelationship> CustomerRelationshipReadOnly
        {
            get 
            { 
              if (null == _customerRelationshipRO)
              {
                _customerRelationshipRO = CreateObjectSet<CustomerRelationship>("CustomerRelationship"); 
                _customerRelationshipRO.MergeOption=MergeOption.NoTracking;
              }
              return _customerRelationshipRO;
            }
        }
        private ObjectSet<CustomerRelationship> _customerRelationshipRO;
    
        public IObjectSet<CustomerType> CustomerType
        {
            get { return _customerType ?? (_customerType = CreateObjectSet<CustomerType>("CustomerType")); }
        }
        private ObjectSet<CustomerType> _customerType;
        public IObjectSet<CustomerType> CustomerTypeReadOnly
        {
            get 
            { 
              if (null == _customerTypeRO)
              {
                _customerTypeRO = CreateObjectSet<CustomerType>("CustomerType"); 
                _customerTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _customerTypeRO;
            }
        }
        private ObjectSet<CustomerType> _customerTypeRO;
    
        public IObjectSet<Datalink> Datalink
        {
            get { return _datalink ?? (_datalink = CreateObjectSet<Datalink>("Datalink")); }
        }
        private ObjectSet<Datalink> _datalink;
        public IObjectSet<Datalink> DatalinkReadOnly
        {
            get 
            { 
              if (null == _datalinkRO)
              {
                _datalinkRO = CreateObjectSet<Datalink>("Datalink"); 
                _datalinkRO.MergeOption=MergeOption.NoTracking;
              }
              return _datalinkRO;
            }
        }
        private ObjectSet<Datalink> _datalinkRO;
    
        public IObjectSet<DealerNetwork> DealerNetwork
        {
            get { return _dealerNetwork ?? (_dealerNetwork = CreateObjectSet<DealerNetwork>("DealerNetwork")); }
        }
        private ObjectSet<DealerNetwork> _dealerNetwork;
        public IObjectSet<DealerNetwork> DealerNetworkReadOnly
        {
            get 
            { 
              if (null == _dealerNetworkRO)
              {
                _dealerNetworkRO = CreateObjectSet<DealerNetwork>("DealerNetwork"); 
                _dealerNetworkRO.MergeOption=MergeOption.NoTracking;
              }
              return _dealerNetworkRO;
            }
        }
        private ObjectSet<DealerNetwork> _dealerNetworkRO;
    
        public IObjectSet<Device> Device
        {
            get { return _device ?? (_device = CreateObjectSet<Device>("Device")); }
        }
        private ObjectSet<Device> _device;
        public IObjectSet<Device> DeviceReadOnly
        {
            get 
            { 
              if (null == _deviceRO)
              {
                _deviceRO = CreateObjectSet<Device>("Device"); 
                _deviceRO.MergeOption=MergeOption.NoTracking;
              }
              return _deviceRO;
            }
        }
        private ObjectSet<Device> _deviceRO;
    
        public IObjectSet<DeviceFirmwareVersion> DeviceFirmwareVersion
        {
            get { return _deviceFirmwareVersion ?? (_deviceFirmwareVersion = CreateObjectSet<DeviceFirmwareVersion>("DeviceFirmwareVersion")); }
        }
        private ObjectSet<DeviceFirmwareVersion> _deviceFirmwareVersion;
        public IObjectSet<DeviceFirmwareVersion> DeviceFirmwareVersionReadOnly
        {
            get 
            { 
              if (null == _deviceFirmwareVersionRO)
              {
                _deviceFirmwareVersionRO = CreateObjectSet<DeviceFirmwareVersion>("DeviceFirmwareVersion"); 
                _deviceFirmwareVersionRO.MergeOption=MergeOption.NoTracking;
              }
              return _deviceFirmwareVersionRO;
            }
        }
        private ObjectSet<DeviceFirmwareVersion> _deviceFirmwareVersionRO;
    
        public IObjectSet<DeviceState> DeviceState
        {
            get { return _deviceState ?? (_deviceState = CreateObjectSet<DeviceState>("DeviceState")); }
        }
        private ObjectSet<DeviceState> _deviceState;
        public IObjectSet<DeviceState> DeviceStateReadOnly
        {
            get 
            { 
              if (null == _deviceStateRO)
              {
                _deviceStateRO = CreateObjectSet<DeviceState>("DeviceState"); 
                _deviceStateRO.MergeOption=MergeOption.NoTracking;
              }
              return _deviceStateRO;
            }
        }
        private ObjectSet<DeviceState> _deviceStateRO;
    
        public IObjectSet<DeviceType> DeviceType
        {
            get { return _deviceType ?? (_deviceType = CreateObjectSet<DeviceType>("DeviceType")); }
        }
        private ObjectSet<DeviceType> _deviceType;
        public IObjectSet<DeviceType> DeviceTypeReadOnly
        {
            get 
            { 
              if (null == _deviceTypeRO)
              {
                _deviceTypeRO = CreateObjectSet<DeviceType>("DeviceType"); 
                _deviceTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _deviceTypeRO;
            }
        }
        private ObjectSet<DeviceType> _deviceTypeRO;
    
        public IObjectSet<ECMDatalinkInfo> ECMDatalinkInfo
        {
            get { return _eCMDatalinkInfo ?? (_eCMDatalinkInfo = CreateObjectSet<ECMDatalinkInfo>("ECMDatalinkInfo")); }
        }
        private ObjectSet<ECMDatalinkInfo> _eCMDatalinkInfo;
        public IObjectSet<ECMDatalinkInfo> ECMDatalinkInfoReadOnly
        {
            get 
            { 
              if (null == _eCMDatalinkInfoRO)
              {
                _eCMDatalinkInfoRO = CreateObjectSet<ECMDatalinkInfo>("ECMDatalinkInfo"); 
                _eCMDatalinkInfoRO.MergeOption=MergeOption.NoTracking;
              }
              return _eCMDatalinkInfoRO;
            }
        }
        private ObjectSet<ECMDatalinkInfo> _eCMDatalinkInfoRO;
    
        public IObjectSet<ECMInfo> ECMInfo
        {
            get { return _eCMInfo ?? (_eCMInfo = CreateObjectSet<ECMInfo>("ECMInfo")); }
        }
        private ObjectSet<ECMInfo> _eCMInfo;
        public IObjectSet<ECMInfo> ECMInfoReadOnly
        {
            get 
            { 
              if (null == _eCMInfoRO)
              {
                _eCMInfoRO = CreateObjectSet<ECMInfo>("ECMInfo"); 
                _eCMInfoRO.MergeOption=MergeOption.NoTracking;
              }
              return _eCMInfoRO;
            }
        }
        private ObjectSet<ECMInfo> _eCMInfoRO;
    
        public IObjectSet<ExternalUser> ExternalUser
        {
            get { return _externalUser ?? (_externalUser = CreateObjectSet<ExternalUser>("ExternalUser")); }
        }
        private ObjectSet<ExternalUser> _externalUser;
        public IObjectSet<ExternalUser> ExternalUserReadOnly
        {
            get 
            { 
              if (null == _externalUserRO)
              {
                _externalUserRO = CreateObjectSet<ExternalUser>("ExternalUser"); 
                _externalUserRO.MergeOption=MergeOption.NoTracking;
              }
              return _externalUserRO;
            }
        }
        private ObjectSet<ExternalUser> _externalUserRO;
    
        public IObjectSet<FaultType> FaultType
        {
            get { return _faultType ?? (_faultType = CreateObjectSet<FaultType>("FaultType")); }
        }
        private ObjectSet<FaultType> _faultType;
        public IObjectSet<FaultType> FaultTypeReadOnly
        {
            get 
            { 
              if (null == _faultTypeRO)
              {
                _faultTypeRO = CreateObjectSet<FaultType>("FaultType"); 
                _faultTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _faultTypeRO;
            }
        }
        private ObjectSet<FaultType> _faultTypeRO;
    
        public IObjectSet<FeatureAccess> FeatureAccess
        {
            get { return _featureAccess ?? (_featureAccess = CreateObjectSet<FeatureAccess>("FeatureAccess")); }
        }
        private ObjectSet<FeatureAccess> _featureAccess;
        public IObjectSet<FeatureAccess> FeatureAccessReadOnly
        {
            get 
            { 
              if (null == _featureAccessRO)
              {
                _featureAccessRO = CreateObjectSet<FeatureAccess>("FeatureAccess"); 
                _featureAccessRO.MergeOption=MergeOption.NoTracking;
              }
              return _featureAccessRO;
            }
        }
        private ObjectSet<FeatureAccess> _featureAccessRO;
    
        public IObjectSet<FirmwareUpdateStatus> FirmwareUpdateStatus
        {
            get { return _firmwareUpdateStatus ?? (_firmwareUpdateStatus = CreateObjectSet<FirmwareUpdateStatus>("FirmwareUpdateStatus")); }
        }
        private ObjectSet<FirmwareUpdateStatus> _firmwareUpdateStatus;
        public IObjectSet<FirmwareUpdateStatus> FirmwareUpdateStatusReadOnly
        {
            get 
            { 
              if (null == _firmwareUpdateStatusRO)
              {
                _firmwareUpdateStatusRO = CreateObjectSet<FirmwareUpdateStatus>("FirmwareUpdateStatus"); 
                _firmwareUpdateStatusRO.MergeOption=MergeOption.NoTracking;
              }
              return _firmwareUpdateStatusRO;
            }
        }
        private ObjectSet<FirmwareUpdateStatus> _firmwareUpdateStatusRO;
    
        public IObjectSet<Icon> Icon
        {
            get { return _icon ?? (_icon = CreateObjectSet<Icon>("Icon")); }
        }
        private ObjectSet<Icon> _icon;
        public IObjectSet<Icon> IconReadOnly
        {
            get 
            { 
              if (null == _iconRO)
              {
                _iconRO = CreateObjectSet<Icon>("Icon"); 
                _iconRO.MergeOption=MergeOption.NoTracking;
              }
              return _iconRO;
            }
        }
        private ObjectSet<Icon> _iconRO;
    
        public IObjectSet<Language> Language
        {
            get { return _language ?? (_language = CreateObjectSet<Language>("Language")); }
        }
        private ObjectSet<Language> _language;
        public IObjectSet<Language> LanguageReadOnly
        {
            get 
            { 
              if (null == _languageRO)
              {
                _languageRO = CreateObjectSet<Language>("Language"); 
                _languageRO.MergeOption=MergeOption.NoTracking;
              }
              return _languageRO;
            }
        }
        private ObjectSet<Language> _languageRO;
    
        public IObjectSet<Make> Make
        {
            get { return _make ?? (_make = CreateObjectSet<Make>("Make")); }
        }
        private ObjectSet<Make> _make;
        public IObjectSet<Make> MakeReadOnly
        {
            get 
            { 
              if (null == _makeRO)
              {
                _makeRO = CreateObjectSet<Make>("Make"); 
                _makeRO.MergeOption=MergeOption.NoTracking;
              }
              return _makeRO;
            }
        }
        private ObjectSet<Make> _makeRO;
    
        public IObjectSet<MID> MID
        {
            get { return _mID ?? (_mID = CreateObjectSet<MID>("MID")); }
        }
        private ObjectSet<MID> _mID;
        public IObjectSet<MID> MIDReadOnly
        {
            get 
            { 
              if (null == _mIDRO)
              {
                _mIDRO = CreateObjectSet<MID>("MID"); 
                _mIDRO.MergeOption=MergeOption.NoTracking;
              }
              return _mIDRO;
            }
        }
        private ObjectSet<MID> _mIDRO;
    
        public IObjectSet<MTS500FirmwareVersion> MTS500FirmwareVersion
        {
            get { return _mTS500FirmwareVersion ?? (_mTS500FirmwareVersion = CreateObjectSet<MTS500FirmwareVersion>("MTS500FirmwareVersion")); }
        }
        private ObjectSet<MTS500FirmwareVersion> _mTS500FirmwareVersion;
        public IObjectSet<MTS500FirmwareVersion> MTS500FirmwareVersionReadOnly
        {
            get 
            { 
              if (null == _mTS500FirmwareVersionRO)
              {
                _mTS500FirmwareVersionRO = CreateObjectSet<MTS500FirmwareVersion>("MTS500FirmwareVersion"); 
                _mTS500FirmwareVersionRO.MergeOption=MergeOption.NoTracking;
              }
              return _mTS500FirmwareVersionRO;
            }
        }
        private ObjectSet<MTS500FirmwareVersion> _mTS500FirmwareVersionRO;
    
        public IObjectSet<NighthawkSync> NighthawkSync
        {
            get { return _nighthawkSync ?? (_nighthawkSync = CreateObjectSet<NighthawkSync>("NighthawkSync")); }
        }
        private ObjectSet<NighthawkSync> _nighthawkSync;
        public IObjectSet<NighthawkSync> NighthawkSyncReadOnly
        {
            get 
            { 
              if (null == _nighthawkSyncRO)
              {
                _nighthawkSyncRO = CreateObjectSet<NighthawkSync>("NighthawkSync"); 
                _nighthawkSyncRO.MergeOption=MergeOption.NoTracking;
              }
              return _nighthawkSyncRO;
            }
        }
        private ObjectSet<NighthawkSync> _nighthawkSyncRO;
    
        public IObjectSet<Notice> Notice
        {
            get { return _notice ?? (_notice = CreateObjectSet<Notice>("Notice")); }
        }
        private ObjectSet<Notice> _notice;
        public IObjectSet<Notice> NoticeReadOnly
        {
            get 
            { 
              if (null == _noticeRO)
              {
                _noticeRO = CreateObjectSet<Notice>("Notice"); 
                _noticeRO.MergeOption=MergeOption.NoTracking;
              }
              return _noticeRO;
            }
        }
        private ObjectSet<Notice> _noticeRO;
    
        public IObjectSet<NoticeLanguage> NoticeLanguage
        {
            get { return _noticeLanguage ?? (_noticeLanguage = CreateObjectSet<NoticeLanguage>("NoticeLanguage")); }
        }
        private ObjectSet<NoticeLanguage> _noticeLanguage;
        public IObjectSet<NoticeLanguage> NoticeLanguageReadOnly
        {
            get 
            { 
              if (null == _noticeLanguageRO)
              {
                _noticeLanguageRO = CreateObjectSet<NoticeLanguage>("NoticeLanguage"); 
                _noticeLanguageRO.MergeOption=MergeOption.NoTracking;
              }
              return _noticeLanguageRO;
            }
        }
        private ObjectSet<NoticeLanguage> _noticeLanguageRO;
    
        public IObjectSet<PersonalityType> PersonalityType
        {
            get { return _personalityType ?? (_personalityType = CreateObjectSet<PersonalityType>("PersonalityType")); }
        }
        private ObjectSet<PersonalityType> _personalityType;
        public IObjectSet<PersonalityType> PersonalityTypeReadOnly
        {
            get 
            { 
              if (null == _personalityTypeRO)
              {
                _personalityTypeRO = CreateObjectSet<PersonalityType>("PersonalityType"); 
                _personalityTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _personalityTypeRO;
            }
        }
        private ObjectSet<PersonalityType> _personalityTypeRO;
    
        public IObjectSet<PMCompletedService> PMCompletedService
        {
            get { return _pMCompletedService ?? (_pMCompletedService = CreateObjectSet<PMCompletedService>("PMCompletedService")); }
        }
        private ObjectSet<PMCompletedService> _pMCompletedService;
        public IObjectSet<PMCompletedService> PMCompletedServiceReadOnly
        {
            get 
            { 
              if (null == _pMCompletedServiceRO)
              {
                _pMCompletedServiceRO = CreateObjectSet<PMCompletedService>("PMCompletedService"); 
                _pMCompletedServiceRO.MergeOption=MergeOption.NoTracking;
              }
              return _pMCompletedServiceRO;
            }
        }
        private ObjectSet<PMCompletedService> _pMCompletedServiceRO;
    
        public IObjectSet<PMIntervalAsset> PMIntervalAsset
        {
            get { return _pMIntervalAsset ?? (_pMIntervalAsset = CreateObjectSet<PMIntervalAsset>("PMIntervalAsset")); }
        }
        private ObjectSet<PMIntervalAsset> _pMIntervalAsset;
        public IObjectSet<PMIntervalAsset> PMIntervalAssetReadOnly
        {
            get 
            { 
              if (null == _pMIntervalAssetRO)
              {
                _pMIntervalAssetRO = CreateObjectSet<PMIntervalAsset>("PMIntervalAsset"); 
                _pMIntervalAssetRO.MergeOption=MergeOption.NoTracking;
              }
              return _pMIntervalAssetRO;
            }
        }
        private ObjectSet<PMIntervalAsset> _pMIntervalAssetRO;
    
        public IObjectSet<PMServiceCompletionType> PMServiceCompletionType
        {
            get { return _pMServiceCompletionType ?? (_pMServiceCompletionType = CreateObjectSet<PMServiceCompletionType>("PMServiceCompletionType")); }
        }
        private ObjectSet<PMServiceCompletionType> _pMServiceCompletionType;
        public IObjectSet<PMServiceCompletionType> PMServiceCompletionTypeReadOnly
        {
            get 
            { 
              if (null == _pMServiceCompletionTypeRO)
              {
                _pMServiceCompletionTypeRO = CreateObjectSet<PMServiceCompletionType>("PMServiceCompletionType"); 
                _pMServiceCompletionTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _pMServiceCompletionTypeRO;
            }
        }
        private ObjectSet<PMServiceCompletionType> _pMServiceCompletionTypeRO;
    
        public IObjectSet<ProductFamily> ProductFamily
        {
            get { return _productFamily ?? (_productFamily = CreateObjectSet<ProductFamily>("ProductFamily")); }
        }
        private ObjectSet<ProductFamily> _productFamily;
        public IObjectSet<ProductFamily> ProductFamilyReadOnly
        {
            get 
            { 
              if (null == _productFamilyRO)
              {
                _productFamilyRO = CreateObjectSet<ProductFamily>("ProductFamily"); 
                _productFamilyRO.MergeOption=MergeOption.NoTracking;
              }
              return _productFamilyRO;
            }
        }
        private ObjectSet<ProductFamily> _productFamilyRO;
    
        public IObjectSet<Project> Project
        {
            get { return _project ?? (_project = CreateObjectSet<Project>("Project")); }
        }
        private ObjectSet<Project> _project;
        public IObjectSet<Project> ProjectReadOnly
        {
            get 
            { 
              if (null == _projectRO)
              {
                _projectRO = CreateObjectSet<Project>("Project"); 
                _projectRO.MergeOption=MergeOption.NoTracking;
              }
              return _projectRO;
            }
        }
        private ObjectSet<Project> _projectRO;
    
        public IObjectSet<Service> Service
        {
            get { return _service ?? (_service = CreateObjectSet<Service>("Service")); }
        }
        private ObjectSet<Service> _service;
        public IObjectSet<Service> ServiceReadOnly
        {
            get 
            { 
              if (null == _serviceRO)
              {
                _serviceRO = CreateObjectSet<Service>("Service"); 
                _serviceRO.MergeOption=MergeOption.NoTracking;
              }
              return _serviceRO;
            }
        }
        private ObjectSet<Service> _serviceRO;
    
        public IObjectSet<ServiceProvider> ServiceProvider
        {
            get { return _serviceProvider ?? (_serviceProvider = CreateObjectSet<ServiceProvider>("ServiceProvider")); }
        }
        private ObjectSet<ServiceProvider> _serviceProvider;
        public IObjectSet<ServiceProvider> ServiceProviderReadOnly
        {
            get 
            { 
              if (null == _serviceProviderRO)
              {
                _serviceProviderRO = CreateObjectSet<ServiceProvider>("ServiceProvider"); 
                _serviceProviderRO.MergeOption=MergeOption.NoTracking;
              }
              return _serviceProviderRO;
            }
        }
        private ObjectSet<ServiceProvider> _serviceProviderRO;
    
        public IObjectSet<ServiceType> ServiceType
        {
            get { return _serviceType ?? (_serviceType = CreateObjectSet<ServiceType>("ServiceType")); }
        }
        private ObjectSet<ServiceType> _serviceType;
        public IObjectSet<ServiceType> ServiceTypeReadOnly
        {
            get 
            { 
              if (null == _serviceTypeRO)
              {
                _serviceTypeRO = CreateObjectSet<ServiceType>("ServiceType"); 
                _serviceTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _serviceTypeRO;
            }
        }
        private ObjectSet<ServiceType> _serviceTypeRO;
    
        public IObjectSet<ServiceView> ServiceView
        {
            get { return _serviceView ?? (_serviceView = CreateObjectSet<ServiceView>("ServiceView")); }
        }
        private ObjectSet<ServiceView> _serviceView;
        public IObjectSet<ServiceView> ServiceViewReadOnly
        {
            get 
            { 
              if (null == _serviceViewRO)
              {
                _serviceViewRO = CreateObjectSet<ServiceView>("ServiceView"); 
                _serviceViewRO.MergeOption=MergeOption.NoTracking;
              }
              return _serviceViewRO;
            }
        }
        private ObjectSet<ServiceView> _serviceViewRO;
    
        public IObjectSet<Site> Site
        {
            get { return _site ?? (_site = CreateObjectSet<Site>("Site")); }
        }
        private ObjectSet<Site> _site;
        public IObjectSet<Site> SiteReadOnly
        {
            get 
            { 
              if (null == _siteRO)
              {
                _siteRO = CreateObjectSet<Site>("Site"); 
                _siteRO.MergeOption=MergeOption.NoTracking;
              }
              return _siteRO;
            }
        }
        private ObjectSet<Site> _siteRO;
    
        public IObjectSet<SiteDispatched> SiteDispatched
        {
            get { return _siteDispatched ?? (_siteDispatched = CreateObjectSet<SiteDispatched>("SiteDispatched")); }
        }
        private ObjectSet<SiteDispatched> _siteDispatched;
        public IObjectSet<SiteDispatched> SiteDispatchedReadOnly
        {
            get 
            { 
              if (null == _siteDispatchedRO)
              {
                _siteDispatchedRO = CreateObjectSet<SiteDispatched>("SiteDispatched"); 
                _siteDispatchedRO.MergeOption=MergeOption.NoTracking;
              }
              return _siteDispatchedRO;
            }
        }
        private ObjectSet<SiteDispatched> _siteDispatchedRO;
    
        public IObjectSet<SiteType> SiteType
        {
            get { return _siteType ?? (_siteType = CreateObjectSet<SiteType>("SiteType")); }
        }
        private ObjectSet<SiteType> _siteType;
        public IObjectSet<SiteType> SiteTypeReadOnly
        {
            get 
            { 
              if (null == _siteTypeRO)
              {
                _siteTypeRO = CreateObjectSet<SiteType>("SiteType"); 
                _siteTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _siteTypeRO;
            }
        }
        private ObjectSet<SiteType> _siteTypeRO;
    
        public IObjectSet<TelematicsSync> TelematicsSync
        {
            get { return _telematicsSync ?? (_telematicsSync = CreateObjectSet<TelematicsSync>("TelematicsSync")); }
        }
        private ObjectSet<TelematicsSync> _telematicsSync;
        public IObjectSet<TelematicsSync> TelematicsSyncReadOnly
        {
            get 
            { 
              if (null == _telematicsSyncRO)
              {
                _telematicsSyncRO = CreateObjectSet<TelematicsSync>("TelematicsSync"); 
                _telematicsSyncRO.MergeOption=MergeOption.NoTracking;
              }
              return _telematicsSyncRO;
            }
        }
        private ObjectSet<TelematicsSync> _telematicsSyncRO;
    
        public IObjectSet<TermsOfUse> TermsOfUse
        {
            get { return _termsOfUse ?? (_termsOfUse = CreateObjectSet<TermsOfUse>("TermsOfUse")); }
        }
        private ObjectSet<TermsOfUse> _termsOfUse;
        public IObjectSet<TermsOfUse> TermsOfUseReadOnly
        {
            get 
            { 
              if (null == _termsOfUseRO)
              {
                _termsOfUseRO = CreateObjectSet<TermsOfUse>("TermsOfUse"); 
                _termsOfUseRO.MergeOption=MergeOption.NoTracking;
              }
              return _termsOfUseRO;
            }
        }
        private ObjectSet<TermsOfUse> _termsOfUseRO;
    
        public IObjectSet<TopicPriority> TopicPriority
        {
            get { return _topicPriority ?? (_topicPriority = CreateObjectSet<TopicPriority>("TopicPriority")); }
        }
        private ObjectSet<TopicPriority> _topicPriority;
        public IObjectSet<TopicPriority> TopicPriorityReadOnly
        {
            get 
            { 
              if (null == _topicPriorityRO)
              {
                _topicPriorityRO = CreateObjectSet<TopicPriority>("TopicPriority"); 
                _topicPriorityRO.MergeOption=MergeOption.NoTracking;
              }
              return _topicPriorityRO;
            }
        }
        private ObjectSet<TopicPriority> _topicPriorityRO;
    
        public IObjectSet<TopicScalePolicy> TopicScalePolicy
        {
            get { return _topicScalePolicy ?? (_topicScalePolicy = CreateObjectSet<TopicScalePolicy>("TopicScalePolicy")); }
        }
        private ObjectSet<TopicScalePolicy> _topicScalePolicy;
        public IObjectSet<TopicScalePolicy> TopicScalePolicyReadOnly
        {
            get 
            { 
              if (null == _topicScalePolicyRO)
              {
                _topicScalePolicyRO = CreateObjectSet<TopicScalePolicy>("TopicScalePolicy"); 
                _topicScalePolicyRO.MergeOption=MergeOption.NoTracking;
              }
              return _topicScalePolicyRO;
            }
        }
        private ObjectSet<TopicScalePolicy> _topicScalePolicyRO;
    
        public IObjectSet<User> User
        {
            get { return _user ?? (_user = CreateObjectSet<User>("User")); }
        }
        private ObjectSet<User> _user;
        public IObjectSet<User> UserReadOnly
        {
            get 
            { 
              if (null == _userRO)
              {
                _userRO = CreateObjectSet<User>("User"); 
                _userRO.MergeOption=MergeOption.NoTracking;
              }
              return _userRO;
            }
        }
        private ObjectSet<User> _userRO;
    
        public IObjectSet<UserActivation> UserActivation
        {
            get { return _userActivation ?? (_userActivation = CreateObjectSet<UserActivation>("UserActivation")); }
        }
        private ObjectSet<UserActivation> _userActivation;
        public IObjectSet<UserActivation> UserActivationReadOnly
        {
            get 
            { 
              if (null == _userActivationRO)
              {
                _userActivationRO = CreateObjectSet<UserActivation>("UserActivation"); 
                _userActivationRO.MergeOption=MergeOption.NoTracking;
              }
              return _userActivationRO;
            }
        }
        private ObjectSet<UserActivation> _userActivationRO;
    
        public IObjectSet<UserActivationStatus> UserActivationStatus
        {
            get { return _userActivationStatus ?? (_userActivationStatus = CreateObjectSet<UserActivationStatus>("UserActivationStatus")); }
        }
        private ObjectSet<UserActivationStatus> _userActivationStatus;
        public IObjectSet<UserActivationStatus> UserActivationStatusReadOnly
        {
            get 
            { 
              if (null == _userActivationStatusRO)
              {
                _userActivationStatusRO = CreateObjectSet<UserActivationStatus>("UserActivationStatus"); 
                _userActivationStatusRO.MergeOption=MergeOption.NoTracking;
              }
              return _userActivationStatusRO;
            }
        }
        private ObjectSet<UserActivationStatus> _userActivationStatusRO;
    
        public IObjectSet<UserNoticeDismissed> UserNoticeDismissed
        {
            get { return _userNoticeDismissed ?? (_userNoticeDismissed = CreateObjectSet<UserNoticeDismissed>("UserNoticeDismissed")); }
        }
        private ObjectSet<UserNoticeDismissed> _userNoticeDismissed;
        public IObjectSet<UserNoticeDismissed> UserNoticeDismissedReadOnly
        {
            get 
            { 
              if (null == _userNoticeDismissedRO)
              {
                _userNoticeDismissedRO = CreateObjectSet<UserNoticeDismissed>("UserNoticeDismissed"); 
                _userNoticeDismissedRO.MergeOption=MergeOption.NoTracking;
              }
              return _userNoticeDismissedRO;
            }
        }
        private ObjectSet<UserNoticeDismissed> _userNoticeDismissedRO;
    
        public IObjectSet<UserPasswordHistory> UserPasswordHistory
        {
            get { return _userPasswordHistory ?? (_userPasswordHistory = CreateObjectSet<UserPasswordHistory>("UserPasswordHistory")); }
        }
        private ObjectSet<UserPasswordHistory> _userPasswordHistory;
        public IObjectSet<UserPasswordHistory> UserPasswordHistoryReadOnly
        {
            get 
            { 
              if (null == _userPasswordHistoryRO)
              {
                _userPasswordHistoryRO = CreateObjectSet<UserPasswordHistory>("UserPasswordHistory"); 
                _userPasswordHistoryRO.MergeOption=MergeOption.NoTracking;
              }
              return _userPasswordHistoryRO;
            }
        }
        private ObjectSet<UserPasswordHistory> _userPasswordHistoryRO;
    
        public IObjectSet<UserPreferences> UserPreferences
        {
            get { return _userPreferences ?? (_userPreferences = CreateObjectSet<UserPreferences>("UserPreferences")); }
        }
        private ObjectSet<UserPreferences> _userPreferences;
        public IObjectSet<UserPreferences> UserPreferencesReadOnly
        {
            get 
            { 
              if (null == _userPreferencesRO)
              {
                _userPreferencesRO = CreateObjectSet<UserPreferences>("UserPreferences"); 
                _userPreferencesRO.MergeOption=MergeOption.NoTracking;
              }
              return _userPreferencesRO;
            }
        }
        private ObjectSet<UserPreferences> _userPreferencesRO;
    
        public IObjectSet<WorkDefinition> WorkDefinition
        {
            get { return _workDefinition ?? (_workDefinition = CreateObjectSet<WorkDefinition>("WorkDefinition")); }
        }
        private ObjectSet<WorkDefinition> _workDefinition;
        public IObjectSet<WorkDefinition> WorkDefinitionReadOnly
        {
            get 
            { 
              if (null == _workDefinitionRO)
              {
                _workDefinitionRO = CreateObjectSet<WorkDefinition>("WorkDefinition"); 
                _workDefinitionRO.MergeOption=MergeOption.NoTracking;
              }
              return _workDefinitionRO;
            }
        }
        private ObjectSet<WorkDefinition> _workDefinitionRO;
    
        public IObjectSet<DeviceTypeServiceType> DeviceTypeServiceType
        {
            get { return _deviceTypeServiceType ?? (_deviceTypeServiceType = CreateObjectSet<DeviceTypeServiceType>("DeviceTypeServiceType")); }
        }
        private ObjectSet<DeviceTypeServiceType> _deviceTypeServiceType;
        public IObjectSet<DeviceTypeServiceType> DeviceTypeServiceTypeReadOnly
        {
            get 
            { 
              if (null == _deviceTypeServiceTypeRO)
              {
                _deviceTypeServiceTypeRO = CreateObjectSet<DeviceTypeServiceType>("DeviceTypeServiceType"); 
                _deviceTypeServiceTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _deviceTypeServiceTypeRO;
            }
        }
        private ObjectSet<DeviceTypeServiceType> _deviceTypeServiceTypeRO;
    
        public IObjectSet<AssetDeviceHistory> AssetDeviceHistory
        {
            get { return _assetDeviceHistory ?? (_assetDeviceHistory = CreateObjectSet<AssetDeviceHistory>("AssetDeviceHistory")); }
        }
        private ObjectSet<AssetDeviceHistory> _assetDeviceHistory;
        public IObjectSet<AssetDeviceHistory> AssetDeviceHistoryReadOnly
        {
            get 
            { 
              if (null == _assetDeviceHistoryRO)
              {
                _assetDeviceHistoryRO = CreateObjectSet<AssetDeviceHistory>("AssetDeviceHistory"); 
                _assetDeviceHistoryRO.MergeOption=MergeOption.NoTracking;
              }
              return _assetDeviceHistoryRO;
            }
        }
        private ObjectSet<AssetDeviceHistory> _assetDeviceHistoryRO;
    
        public IObjectSet<CustomerRelationshipType> CustomerRelationshipType
        {
            get { return _customerRelationshipType ?? (_customerRelationshipType = CreateObjectSet<CustomerRelationshipType>("CustomerRelationshipType")); }
        }
        private ObjectSet<CustomerRelationshipType> _customerRelationshipType;
        public IObjectSet<CustomerRelationshipType> CustomerRelationshipTypeReadOnly
        {
            get 
            { 
              if (null == _customerRelationshipTypeRO)
              {
                _customerRelationshipTypeRO = CreateObjectSet<CustomerRelationshipType>("CustomerRelationshipType"); 
                _customerRelationshipTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _customerRelationshipTypeRO;
            }
        }
        private ObjectSet<CustomerRelationshipType> _customerRelationshipTypeRO;
    
        public IObjectSet<BSSProvisioningMsg> BSSProvisioningMsg
        {
            get { return _bSSProvisioningMsg ?? (_bSSProvisioningMsg = CreateObjectSet<BSSProvisioningMsg>("BSSProvisioningMsg")); }
        }
        private ObjectSet<BSSProvisioningMsg> _bSSProvisioningMsg;
        public IObjectSet<BSSProvisioningMsg> BSSProvisioningMsgReadOnly
        {
            get 
            { 
              if (null == _bSSProvisioningMsgRO)
              {
                _bSSProvisioningMsgRO = CreateObjectSet<BSSProvisioningMsg>("BSSProvisioningMsg"); 
                _bSSProvisioningMsgRO.MergeOption=MergeOption.NoTracking;
              }
              return _bSSProvisioningMsgRO;
            }
        }
        private ObjectSet<BSSProvisioningMsg> _bSSProvisioningMsgRO;
    
        public IObjectSet<BSSResponseEndPoint> BSSResponseEndPoint
        {
            get { return _bSSResponseEndPoint ?? (_bSSResponseEndPoint = CreateObjectSet<BSSResponseEndPoint>("BSSResponseEndPoint")); }
        }
        private ObjectSet<BSSResponseEndPoint> _bSSResponseEndPoint;
        public IObjectSet<BSSResponseEndPoint> BSSResponseEndPointReadOnly
        {
            get 
            { 
              if (null == _bSSResponseEndPointRO)
              {
                _bSSResponseEndPointRO = CreateObjectSet<BSSResponseEndPoint>("BSSResponseEndPoint"); 
                _bSSResponseEndPointRO.MergeOption=MergeOption.NoTracking;
              }
              return _bSSResponseEndPointRO;
            }
        }
        private ObjectSet<BSSResponseEndPoint> _bSSResponseEndPointRO;
    
        public IObjectSet<BSSResponseMsg> BSSResponseMsg
        {
            get { return _bSSResponseMsg ?? (_bSSResponseMsg = CreateObjectSet<BSSResponseMsg>("BSSResponseMsg")); }
        }
        private ObjectSet<BSSResponseMsg> _bSSResponseMsg;
        public IObjectSet<BSSResponseMsg> BSSResponseMsgReadOnly
        {
            get 
            { 
              if (null == _bSSResponseMsgRO)
              {
                _bSSResponseMsgRO = CreateObjectSet<BSSResponseMsg>("BSSResponseMsg"); 
                _bSSResponseMsgRO.MergeOption=MergeOption.NoTracking;
              }
              return _bSSResponseMsgRO;
            }
        }
        private ObjectSet<BSSResponseMsg> _bSSResponseMsgRO;
    
        public IObjectSet<BSSStatus> BSSStatus
        {
            get { return _bSSStatus ?? (_bSSStatus = CreateObjectSet<BSSStatus>("BSSStatus")); }
        }
        private ObjectSet<BSSStatus> _bSSStatus;
        public IObjectSet<BSSStatus> BSSStatusReadOnly
        {
            get 
            { 
              if (null == _bSSStatusRO)
              {
                _bSSStatusRO = CreateObjectSet<BSSStatus>("BSSStatus"); 
                _bSSStatusRO.MergeOption=MergeOption.NoTracking;
              }
              return _bSSStatusRO;
            }
        }
        private ObjectSet<BSSStatus> _bSSStatusRO;
    
        public IObjectSet<VLAdminErrorMsg> VLAdminErrorMsg
        {
            get { return _vLAdminErrorMsg ?? (_vLAdminErrorMsg = CreateObjectSet<VLAdminErrorMsg>("VLAdminErrorMsg")); }
        }
        private ObjectSet<VLAdminErrorMsg> _vLAdminErrorMsg;
        public IObjectSet<VLAdminErrorMsg> VLAdminErrorMsgReadOnly
        {
            get 
            { 
              if (null == _vLAdminErrorMsgRO)
              {
                _vLAdminErrorMsgRO = CreateObjectSet<VLAdminErrorMsg>("VLAdminErrorMsg"); 
                _vLAdminErrorMsgRO.MergeOption=MergeOption.NoTracking;
              }
              return _vLAdminErrorMsgRO;
            }
        }
        private ObjectSet<VLAdminErrorMsg> _vLAdminErrorMsgRO;
    
        public IObjectSet<DeviceICDSeries> DeviceICDSeries
        {
            get { return _deviceICDSeries ?? (_deviceICDSeries = CreateObjectSet<DeviceICDSeries>("DeviceICDSeries")); }
        }
        private ObjectSet<DeviceICDSeries> _deviceICDSeries;
        public IObjectSet<DeviceICDSeries> DeviceICDSeriesReadOnly
        {
            get 
            { 
              if (null == _deviceICDSeriesRO)
              {
                _deviceICDSeriesRO = CreateObjectSet<DeviceICDSeries>("DeviceICDSeries"); 
                _deviceICDSeriesRO.MergeOption=MergeOption.NoTracking;
              }
              return _deviceICDSeriesRO;
            }
        }
        private ObjectSet<DeviceICDSeries> _deviceICDSeriesRO;
    
        public IObjectSet<DevicePartNumber> DevicePartNumber
        {
            get { return _devicePartNumber ?? (_devicePartNumber = CreateObjectSet<DevicePartNumber>("DevicePartNumber")); }
        }
        private ObjectSet<DevicePartNumber> _devicePartNumber;
        public IObjectSet<DevicePartNumber> DevicePartNumberReadOnly
        {
            get 
            { 
              if (null == _devicePartNumberRO)
              {
                _devicePartNumberRO = CreateObjectSet<DevicePartNumber>("DevicePartNumber"); 
                _devicePartNumberRO.MergeOption=MergeOption.NoTracking;
              }
              return _devicePartNumberRO;
            }
        }
        private ObjectSet<DevicePartNumber> _devicePartNumberRO;
    
        public IObjectSet<AssetSecurityIncident> AssetSecurityIncident
        {
            get { return _assetSecurityIncident ?? (_assetSecurityIncident = CreateObjectSet<AssetSecurityIncident>("AssetSecurityIncident")); }
        }
        private ObjectSet<AssetSecurityIncident> _assetSecurityIncident;
        public IObjectSet<AssetSecurityIncident> AssetSecurityIncidentReadOnly
        {
            get 
            { 
              if (null == _assetSecurityIncidentRO)
              {
                _assetSecurityIncidentRO = CreateObjectSet<AssetSecurityIncident>("AssetSecurityIncident"); 
                _assetSecurityIncidentRO.MergeOption=MergeOption.NoTracking;
              }
              return _assetSecurityIncidentRO;
            }
        }
        private ObjectSet<AssetSecurityIncident> _assetSecurityIncidentRO;
    
        public IObjectSet<ActiveUserAssetSelection> ActiveUserAssetSelection
        {
            get { return _activeUserAssetSelection ?? (_activeUserAssetSelection = CreateObjectSet<ActiveUserAssetSelection>("ActiveUserAssetSelection")); }
        }
        private ObjectSet<ActiveUserAssetSelection> _activeUserAssetSelection;
        public IObjectSet<ActiveUserAssetSelection> ActiveUserAssetSelectionReadOnly
        {
            get 
            { 
              if (null == _activeUserAssetSelectionRO)
              {
                _activeUserAssetSelectionRO = CreateObjectSet<ActiveUserAssetSelection>("ActiveUserAssetSelection"); 
                _activeUserAssetSelectionRO.MergeOption=MergeOption.NoTracking;
              }
              return _activeUserAssetSelectionRO;
            }
        }
        private ObjectSet<ActiveUserAssetSelection> _activeUserAssetSelectionRO;
    
        public IObjectSet<ActiveUser> ActiveUser
        {
            get { return _activeUser ?? (_activeUser = CreateObjectSet<ActiveUser>("ActiveUser")); }
        }
        private ObjectSet<ActiveUser> _activeUser;
        public IObjectSet<ActiveUser> ActiveUserReadOnly
        {
            get 
            { 
              if (null == _activeUserRO)
              {
                _activeUserRO = CreateObjectSet<ActiveUser>("ActiveUser"); 
                _activeUserRO.MergeOption=MergeOption.NoTracking;
              }
              return _activeUserRO;
            }
        }
        private ObjectSet<ActiveUser> _activeUserRO;
    
        public IObjectSet<vw_DealerOwnedAssets> vw_DealerOwnedAssets
        {
            get { return _vw_DealerOwnedAssets ?? (_vw_DealerOwnedAssets = CreateObjectSet<vw_DealerOwnedAssets>("vw_DealerOwnedAssets")); }
        }
        private ObjectSet<vw_DealerOwnedAssets> _vw_DealerOwnedAssets;
        public IObjectSet<vw_DealerOwnedAssets> vw_DealerOwnedAssetsReadOnly
        {
            get 
            { 
              if (null == _vw_DealerOwnedAssetsRO)
              {
                _vw_DealerOwnedAssetsRO = CreateObjectSet<vw_DealerOwnedAssets>("vw_DealerOwnedAssets"); 
                _vw_DealerOwnedAssetsRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_DealerOwnedAssetsRO;
            }
        }
        private ObjectSet<vw_DealerOwnedAssets> _vw_DealerOwnedAssetsRO;
    
        public IObjectSet<vw_ParentCustomerOwnedAssets> vw_ParentCustomerOwnedAssets
        {
            get { return _vw_ParentCustomerOwnedAssets ?? (_vw_ParentCustomerOwnedAssets = CreateObjectSet<vw_ParentCustomerOwnedAssets>("vw_ParentCustomerOwnedAssets")); }
        }
        private ObjectSet<vw_ParentCustomerOwnedAssets> _vw_ParentCustomerOwnedAssets;
        public IObjectSet<vw_ParentCustomerOwnedAssets> vw_ParentCustomerOwnedAssetsReadOnly
        {
            get 
            { 
              if (null == _vw_ParentCustomerOwnedAssetsRO)
              {
                _vw_ParentCustomerOwnedAssetsRO = CreateObjectSet<vw_ParentCustomerOwnedAssets>("vw_ParentCustomerOwnedAssets"); 
                _vw_ParentCustomerOwnedAssetsRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_ParentCustomerOwnedAssetsRO;
            }
        }
        private ObjectSet<vw_ParentCustomerOwnedAssets> _vw_ParentCustomerOwnedAssetsRO;
    
        public IObjectSet<CustomerAsset> CustomerAsset
        {
            get { return _customerAsset ?? (_customerAsset = CreateObjectSet<CustomerAsset>("CustomerAsset")); }
        }
        private ObjectSet<CustomerAsset> _customerAsset;
        public IObjectSet<CustomerAsset> CustomerAssetReadOnly
        {
            get 
            { 
              if (null == _customerAssetRO)
              {
                _customerAssetRO = CreateObjectSet<CustomerAsset>("CustomerAsset"); 
                _customerAssetRO.MergeOption=MergeOption.NoTracking;
              }
              return _customerAssetRO;
            }
        }
        private ObjectSet<CustomerAsset> _customerAssetRO;
    
        public IObjectSet<vw_AssetWorkingSet> vw_AssetWorkingSet
        {
            get { return _vw_AssetWorkingSet ?? (_vw_AssetWorkingSet = CreateObjectSet<vw_AssetWorkingSet>("vw_AssetWorkingSet")); }
        }
        private ObjectSet<vw_AssetWorkingSet> _vw_AssetWorkingSet;
        public IObjectSet<vw_AssetWorkingSet> vw_AssetWorkingSetReadOnly
        {
            get 
            { 
              if (null == _vw_AssetWorkingSetRO)
              {
                _vw_AssetWorkingSetRO = CreateObjectSet<vw_AssetWorkingSet>("vw_AssetWorkingSet"); 
                _vw_AssetWorkingSetRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_AssetWorkingSetRO;
            }
        }
        private ObjectSet<vw_AssetWorkingSet> _vw_AssetWorkingSetRO;
    
        public IObjectSet<PMInterval> PMInterval
        {
            get { return _pMInterval ?? (_pMInterval = CreateObjectSet<PMInterval>("PMInterval")); }
        }
        private ObjectSet<PMInterval> _pMInterval;
        public IObjectSet<PMInterval> PMIntervalReadOnly
        {
            get 
            { 
              if (null == _pMIntervalRO)
              {
                _pMIntervalRO = CreateObjectSet<PMInterval>("PMInterval"); 
                _pMIntervalRO.MergeOption=MergeOption.NoTracking;
              }
              return _pMIntervalRO;
            }
        }
        private ObjectSet<PMInterval> _pMIntervalRO;
    
        public IObjectSet<vw_Address> vw_Address
        {
            get { return _vw_Address ?? (_vw_Address = CreateObjectSet<vw_Address>("vw_Address")); }
        }
        private ObjectSet<vw_Address> _vw_Address;
        public IObjectSet<vw_Address> vw_AddressReadOnly
        {
            get 
            { 
              if (null == _vw_AddressRO)
              {
                _vw_AddressRO = CreateObjectSet<vw_Address>("vw_Address"); 
                _vw_AddressRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_AddressRO;
            }
        }
        private ObjectSet<vw_Address> _vw_AddressRO;
    
        public IObjectSet<AssetBurnRates> AssetBurnRates
        {
            get { return _assetBurnRates ?? (_assetBurnRates = CreateObjectSet<AssetBurnRates>("AssetBurnRates")); }
        }
        private ObjectSet<AssetBurnRates> _assetBurnRates;
        public IObjectSet<AssetBurnRates> AssetBurnRatesReadOnly
        {
            get 
            { 
              if (null == _assetBurnRatesRO)
              {
                _assetBurnRatesRO = CreateObjectSet<AssetBurnRates>("AssetBurnRates"); 
                _assetBurnRatesRO.MergeOption=MergeOption.NoTracking;
              }
              return _assetBurnRatesRO;
            }
        }
        private ObjectSet<AssetBurnRates> _assetBurnRatesRO;
    
        public IObjectSet<AssetExpectedRuntimeHoursProjected> AssetExpectedRuntimeHoursProjected
        {
            get { return _assetExpectedRuntimeHoursProjected ?? (_assetExpectedRuntimeHoursProjected = CreateObjectSet<AssetExpectedRuntimeHoursProjected>("AssetExpectedRuntimeHoursProjected")); }
        }
        private ObjectSet<AssetExpectedRuntimeHoursProjected> _assetExpectedRuntimeHoursProjected;
        public IObjectSet<AssetExpectedRuntimeHoursProjected> AssetExpectedRuntimeHoursProjectedReadOnly
        {
            get 
            { 
              if (null == _assetExpectedRuntimeHoursProjectedRO)
              {
                _assetExpectedRuntimeHoursProjectedRO = CreateObjectSet<AssetExpectedRuntimeHoursProjected>("AssetExpectedRuntimeHoursProjected"); 
                _assetExpectedRuntimeHoursProjectedRO.MergeOption=MergeOption.NoTracking;
              }
              return _assetExpectedRuntimeHoursProjectedRO;
            }
        }
        private ObjectSet<AssetExpectedRuntimeHoursProjected> _assetExpectedRuntimeHoursProjectedRO;
    
        public IObjectSet<AssetWorkingDefinition> AssetWorkingDefinition
        {
            get { return _assetWorkingDefinition ?? (_assetWorkingDefinition = CreateObjectSet<AssetWorkingDefinition>("AssetWorkingDefinition")); }
        }
        private ObjectSet<AssetWorkingDefinition> _assetWorkingDefinition;
        public IObjectSet<AssetWorkingDefinition> AssetWorkingDefinitionReadOnly
        {
            get 
            { 
              if (null == _assetWorkingDefinitionRO)
              {
                _assetWorkingDefinitionRO = CreateObjectSet<AssetWorkingDefinition>("AssetWorkingDefinition"); 
                _assetWorkingDefinitionRO.MergeOption=MergeOption.NoTracking;
              }
              return _assetWorkingDefinitionRO;
            }
        }
        private ObjectSet<AssetWorkingDefinition> _assetWorkingDefinitionRO;
    
        public IObjectSet<vw_FactAssetCustomerSite> vw_FactAssetCustomerSite
        {
            get { return _vw_FactAssetCustomerSite ?? (_vw_FactAssetCustomerSite = CreateObjectSet<vw_FactAssetCustomerSite>("vw_FactAssetCustomerSite")); }
        }
        private ObjectSet<vw_FactAssetCustomerSite> _vw_FactAssetCustomerSite;
        public IObjectSet<vw_FactAssetCustomerSite> vw_FactAssetCustomerSiteReadOnly
        {
            get 
            { 
              if (null == _vw_FactAssetCustomerSiteRO)
              {
                _vw_FactAssetCustomerSiteRO = CreateObjectSet<vw_FactAssetCustomerSite>("vw_FactAssetCustomerSite"); 
                _vw_FactAssetCustomerSiteRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_FactAssetCustomerSiteRO;
            }
        }
        private ObjectSet<vw_FactAssetCustomerSite> _vw_FactAssetCustomerSiteRO;
    
        public IObjectSet<TemperatureUnit> TemperatureUnit
        {
            get { return _temperatureUnit ?? (_temperatureUnit = CreateObjectSet<TemperatureUnit>("TemperatureUnit")); }
        }
        private ObjectSet<TemperatureUnit> _temperatureUnit;
        public IObjectSet<TemperatureUnit> TemperatureUnitReadOnly
        {
            get 
            { 
              if (null == _temperatureUnitRO)
              {
                _temperatureUnitRO = CreateObjectSet<TemperatureUnit>("TemperatureUnit"); 
                _temperatureUnitRO.MergeOption=MergeOption.NoTracking;
              }
              return _temperatureUnitRO;
            }
        }
        private ObjectSet<TemperatureUnit> _temperatureUnitRO;
    
        public IObjectSet<DailyReport> DailyReport
        {
            get { return _dailyReport ?? (_dailyReport = CreateObjectSet<DailyReport>("DailyReport")); }
        }
        private ObjectSet<DailyReport> _dailyReport;
        public IObjectSet<DailyReport> DailyReportReadOnly
        {
            get 
            { 
              if (null == _dailyReportRO)
              {
                _dailyReportRO = CreateObjectSet<DailyReport>("DailyReport"); 
                _dailyReportRO.MergeOption=MergeOption.NoTracking;
              }
              return _dailyReportRO;
            }
        }
        private ObjectSet<DailyReport> _dailyReportRO;
    
        public IObjectSet<ModelVariant> ModelVariant
        {
            get { return _modelVariant ?? (_modelVariant = CreateObjectSet<ModelVariant>("ModelVariant")); }
        }
        private ObjectSet<ModelVariant> _modelVariant;
        public IObjectSet<ModelVariant> ModelVariantReadOnly
        {
            get 
            { 
              if (null == _modelVariantRO)
              {
                _modelVariantRO = CreateObjectSet<ModelVariant>("ModelVariant"); 
                _modelVariantRO.MergeOption=MergeOption.NoTracking;
              }
              return _modelVariantRO;
            }
        }
        private ObjectSet<ModelVariant> _modelVariantRO;
    
        public IObjectSet<PMIntervalInstance> PMIntervalInstance
        {
            get { return _pMIntervalInstance ?? (_pMIntervalInstance = CreateObjectSet<PMIntervalInstance>("PMIntervalInstance")); }
        }
        private ObjectSet<PMIntervalInstance> _pMIntervalInstance;
        public IObjectSet<PMIntervalInstance> PMIntervalInstanceReadOnly
        {
            get 
            { 
              if (null == _pMIntervalInstanceRO)
              {
                _pMIntervalInstanceRO = CreateObjectSet<PMIntervalInstance>("PMIntervalInstance"); 
                _pMIntervalInstanceRO.MergeOption=MergeOption.NoTracking;
              }
              return _pMIntervalInstanceRO;
            }
        }
        private ObjectSet<PMIntervalInstance> _pMIntervalInstanceRO;
    
        public IObjectSet<FederatedLogonInfo> FederatedLogonInfo
        {
            get { return _federatedLogonInfo ?? (_federatedLogonInfo = CreateObjectSet<FederatedLogonInfo>("FederatedLogonInfo")); }
        }
        private ObjectSet<FederatedLogonInfo> _federatedLogonInfo;
        public IObjectSet<FederatedLogonInfo> FederatedLogonInfoReadOnly
        {
            get 
            { 
              if (null == _federatedLogonInfoRO)
              {
                _federatedLogonInfoRO = CreateObjectSet<FederatedLogonInfo>("FederatedLogonInfo"); 
                _federatedLogonInfoRO.MergeOption=MergeOption.NoTracking;
              }
              return _federatedLogonInfoRO;
            }
        }
        private ObjectSet<FederatedLogonInfo> _federatedLogonInfoRO;
    
        public IObjectSet<AssetReposessionHistory> AssetReposessionHistory
        {
            get { return _assetReposessionHistory ?? (_assetReposessionHistory = CreateObjectSet<AssetReposessionHistory>("AssetReposessionHistory")); }
        }
        private ObjectSet<AssetReposessionHistory> _assetReposessionHistory;
        public IObjectSet<AssetReposessionHistory> AssetReposessionHistoryReadOnly
        {
            get 
            { 
              if (null == _assetReposessionHistoryRO)
              {
                _assetReposessionHistoryRO = CreateObjectSet<AssetReposessionHistory>("AssetReposessionHistory"); 
                _assetReposessionHistoryRO.MergeOption=MergeOption.NoTracking;
              }
              return _assetReposessionHistoryRO;
            }
        }
        private ObjectSet<AssetReposessionHistory> _assetReposessionHistoryRO;
    
        public IObjectSet<DevicePersonality> DevicePersonality
        {
            get { return _devicePersonality ?? (_devicePersonality = CreateObjectSet<DevicePersonality>("DevicePersonality")); }
        }
        private ObjectSet<DevicePersonality> _devicePersonality;
        public IObjectSet<DevicePersonality> DevicePersonalityReadOnly
        {
            get 
            { 
              if (null == _devicePersonalityRO)
              {
                _devicePersonalityRO = CreateObjectSet<DevicePersonality>("DevicePersonality"); 
                _devicePersonalityRO.MergeOption=MergeOption.NoTracking;
              }
              return _devicePersonalityRO;
            }
        }
        private ObjectSet<DevicePersonality> _devicePersonalityRO;
    
        public IObjectSet<MonitoringMachineType> MonitoringMachineType
        {
            get { return _monitoringMachineType ?? (_monitoringMachineType = CreateObjectSet<MonitoringMachineType>("MonitoringMachineType")); }
        }
        private ObjectSet<MonitoringMachineType> _monitoringMachineType;
        public IObjectSet<MonitoringMachineType> MonitoringMachineTypeReadOnly
        {
            get 
            { 
              if (null == _monitoringMachineTypeRO)
              {
                _monitoringMachineTypeRO = CreateObjectSet<MonitoringMachineType>("MonitoringMachineType"); 
                _monitoringMachineTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _monitoringMachineTypeRO;
            }
        }
        private ObjectSet<MonitoringMachineType> _monitoringMachineTypeRO;
    
        public IObjectSet<AssetAlias> AssetAlias
        {
            get { return _assetAlias ?? (_assetAlias = CreateObjectSet<AssetAlias>("AssetAlias")); }
        }
        private ObjectSet<AssetAlias> _assetAlias;
        public IObjectSet<AssetAlias> AssetAliasReadOnly
        {
            get 
            { 
              if (null == _assetAliasRO)
              {
                _assetAliasRO = CreateObjectSet<AssetAlias>("AssetAlias"); 
                _assetAliasRO.MergeOption=MergeOption.NoTracking;
              }
              return _assetAliasRO;
            }
        }
        private ObjectSet<AssetAlias> _assetAliasRO;
    
        public IObjectSet<EmailPriority> EmailPriority
        {
            get { return _emailPriority ?? (_emailPriority = CreateObjectSet<EmailPriority>("EmailPriority")); }
        }
        private ObjectSet<EmailPriority> _emailPriority;
        public IObjectSet<EmailPriority> EmailPriorityReadOnly
        {
            get 
            { 
              if (null == _emailPriorityRO)
              {
                _emailPriorityRO = CreateObjectSet<EmailPriority>("EmailPriority"); 
                _emailPriorityRO.MergeOption=MergeOption.NoTracking;
              }
              return _emailPriorityRO;
            }
        }
        private ObjectSet<EmailPriority> _emailPriorityRO;
    
        public IObjectSet<EmailQueue> EmailQueue
        {
            get { return _emailQueue ?? (_emailQueue = CreateObjectSet<EmailQueue>("EmailQueue")); }
        }
        private ObjectSet<EmailQueue> _emailQueue;
        public IObjectSet<EmailQueue> EmailQueueReadOnly
        {
            get 
            { 
              if (null == _emailQueueRO)
              {
                _emailQueueRO = CreateObjectSet<EmailQueue>("EmailQueue"); 
                _emailQueueRO.MergeOption=MergeOption.NoTracking;
              }
              return _emailQueueRO;
            }
        }
        private ObjectSet<EmailQueue> _emailQueueRO;
    
        public IObjectSet<vw_FaultDescriptions> vw_FaultDescriptions
        {
            get { return _vw_FaultDescriptions ?? (_vw_FaultDescriptions = CreateObjectSet<vw_FaultDescriptions>("vw_FaultDescriptions")); }
        }
        private ObjectSet<vw_FaultDescriptions> _vw_FaultDescriptions;
        public IObjectSet<vw_FaultDescriptions> vw_FaultDescriptionsReadOnly
        {
            get 
            { 
              if (null == _vw_FaultDescriptionsRO)
              {
                _vw_FaultDescriptionsRO = CreateObjectSet<vw_FaultDescriptions>("vw_FaultDescriptions"); 
                _vw_FaultDescriptionsRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_FaultDescriptionsRO;
            }
        }
        private ObjectSet<vw_FaultDescriptions> _vw_FaultDescriptionsRO;
    
        public IObjectSet<SalesModel> SalesModel
        {
            get { return _salesModel ?? (_salesModel = CreateObjectSet<SalesModel>("SalesModel")); }
        }
        private ObjectSet<SalesModel> _salesModel;
        public IObjectSet<SalesModel> SalesModelReadOnly
        {
            get 
            { 
              if (null == _salesModelRO)
              {
                _salesModelRO = CreateObjectSet<SalesModel>("SalesModel"); 
                _salesModelRO.MergeOption=MergeOption.NoTracking;
              }
              return _salesModelRO;
            }
        }
        private ObjectSet<SalesModel> _salesModelRO;
    
        public IObjectSet<PressureUnit> PressureUnit
        {
            get { return _pressureUnit ?? (_pressureUnit = CreateObjectSet<PressureUnit>("PressureUnit")); }
        }
        private ObjectSet<PressureUnit> _pressureUnit;
        public IObjectSet<PressureUnit> PressureUnitReadOnly
        {
            get 
            { 
              if (null == _pressureUnitRO)
              {
                _pressureUnitRO = CreateObjectSet<PressureUnit>("PressureUnit"); 
                _pressureUnitRO.MergeOption=MergeOption.NoTracking;
              }
              return _pressureUnitRO;
            }
        }
        private ObjectSet<PressureUnit> _pressureUnitRO;
    
        public IObjectSet<VLSupportAudit> VLSupportAudit
        {
            get { return _vLSupportAudit ?? (_vLSupportAudit = CreateObjectSet<VLSupportAudit>("VLSupportAudit")); }
        }
        private ObjectSet<VLSupportAudit> _vLSupportAudit;
        public IObjectSet<VLSupportAudit> VLSupportAuditReadOnly
        {
            get 
            { 
              if (null == _vLSupportAuditRO)
              {
                _vLSupportAuditRO = CreateObjectSet<VLSupportAudit>("VLSupportAudit"); 
                _vLSupportAuditRO.MergeOption=MergeOption.NoTracking;
              }
              return _vLSupportAuditRO;
            }
        }
        private ObjectSet<VLSupportAudit> _vLSupportAuditRO;
    
        public IObjectSet<PMSalesModel> PMSalesModel
        {
            get { return _pMSalesModel ?? (_pMSalesModel = CreateObjectSet<PMSalesModel>("PMSalesModel")); }
        }
        private ObjectSet<PMSalesModel> _pMSalesModel;
        public IObjectSet<PMSalesModel> PMSalesModelReadOnly
        {
            get 
            { 
              if (null == _pMSalesModelRO)
              {
                _pMSalesModelRO = CreateObjectSet<PMSalesModel>("PMSalesModel"); 
                _pMSalesModelRO.MergeOption=MergeOption.NoTracking;
              }
              return _pMSalesModelRO;
            }
        }
        private ObjectSet<PMSalesModel> _pMSalesModelRO;
    
        public IObjectSet<CustomerStore> CustomerStore
        {
            get { return _customerStore ?? (_customerStore = CreateObjectSet<CustomerStore>("CustomerStore")); }
        }
        private ObjectSet<CustomerStore> _customerStore;
        public IObjectSet<CustomerStore> CustomerStoreReadOnly
        {
            get 
            { 
              if (null == _customerStoreRO)
              {
                _customerStoreRO = CreateObjectSet<CustomerStore>("CustomerStore"); 
                _customerStoreRO.MergeOption=MergeOption.NoTracking;
              }
              return _customerStoreRO;
            }
        }
        private ObjectSet<CustomerStore> _customerStoreRO;
    
        public IObjectSet<Store> Store
        {
            get { return _store ?? (_store = CreateObjectSet<Store>("Store")); }
        }
        private ObjectSet<Store> _store;
        public IObjectSet<Store> StoreReadOnly
        {
            get 
            { 
              if (null == _storeRO)
              {
                _storeRO = CreateObjectSet<Store>("Store"); 
                _storeRO.MergeOption=MergeOption.NoTracking;
              }
              return _storeRO;
            }
        }
        private ObjectSet<Store> _storeRO;
    
        public IObjectSet<AssetReference> AssetReference
        {
            get { return _assetReference ?? (_assetReference = CreateObjectSet<AssetReference>("AssetReference")); }
        }
        private ObjectSet<AssetReference> _assetReference;
        public IObjectSet<AssetReference> AssetReferenceReadOnly
        {
            get 
            { 
              if (null == _assetReferenceRO)
              {
                _assetReferenceRO = CreateObjectSet<AssetReference>("AssetReference"); 
                _assetReferenceRO.MergeOption=MergeOption.NoTracking;
              }
              return _assetReferenceRO;
            }
        }
        private ObjectSet<AssetReference> _assetReferenceRO;
    
        public IObjectSet<CustomerReference> CustomerReference
        {
            get { return _customerReference ?? (_customerReference = CreateObjectSet<CustomerReference>("CustomerReference")); }
        }
        private ObjectSet<CustomerReference> _customerReference;
        public IObjectSet<CustomerReference> CustomerReferenceReadOnly
        {
            get 
            { 
              if (null == _customerReferenceRO)
              {
                _customerReferenceRO = CreateObjectSet<CustomerReference>("CustomerReference"); 
                _customerReferenceRO.MergeOption=MergeOption.NoTracking;
              }
              return _customerReferenceRO;
            }
        }
        private ObjectSet<CustomerReference> _customerReferenceRO;
    
        public IObjectSet<DeviceReference> DeviceReference
        {
            get { return _deviceReference ?? (_deviceReference = CreateObjectSet<DeviceReference>("DeviceReference")); }
        }
        private ObjectSet<DeviceReference> _deviceReference;
        public IObjectSet<DeviceReference> DeviceReferenceReadOnly
        {
            get 
            { 
              if (null == _deviceReferenceRO)
              {
                _deviceReferenceRO = CreateObjectSet<DeviceReference>("DeviceReference"); 
                _deviceReferenceRO.MergeOption=MergeOption.NoTracking;
              }
              return _deviceReferenceRO;
            }
        }
        private ObjectSet<DeviceReference> _deviceReferenceRO;
    
        public IObjectSet<ServiceReference> ServiceReference
        {
            get { return _serviceReference ?? (_serviceReference = CreateObjectSet<ServiceReference>("ServiceReference")); }
        }
        private ObjectSet<ServiceReference> _serviceReference;
        public IObjectSet<ServiceReference> ServiceReferenceReadOnly
        {
            get 
            { 
              if (null == _serviceReferenceRO)
              {
                _serviceReferenceRO = CreateObjectSet<ServiceReference>("ServiceReference"); 
                _serviceReferenceRO.MergeOption=MergeOption.NoTracking;
              }
              return _serviceReferenceRO;
            }
        }
        private ObjectSet<ServiceReference> _serviceReferenceRO;
    
        public IObjectSet<AppFeatureSet> AppFeatureSet
        {
            get { return _appFeatureSet ?? (_appFeatureSet = CreateObjectSet<AppFeatureSet>("AppFeatureSet")); }
        }
        private ObjectSet<AppFeatureSet> _appFeatureSet;
        public IObjectSet<AppFeatureSet> AppFeatureSetReadOnly
        {
            get 
            { 
              if (null == _appFeatureSetRO)
              {
                _appFeatureSetRO = CreateObjectSet<AppFeatureSet>("AppFeatureSet"); 
                _appFeatureSetRO.MergeOption=MergeOption.NoTracking;
              }
              return _appFeatureSetRO;
            }
        }
        private ObjectSet<AppFeatureSet> _appFeatureSetRO;
    
        public IObjectSet<AppFeature> AppFeature
        {
            get { return _appFeature ?? (_appFeature = CreateObjectSet<AppFeature>("AppFeature")); }
        }
        private ObjectSet<AppFeature> _appFeature;
        public IObjectSet<AppFeature> AppFeatureReadOnly
        {
            get 
            { 
              if (null == _appFeatureRO)
              {
                _appFeatureRO = CreateObjectSet<AppFeature>("AppFeature"); 
                _appFeatureRO.MergeOption=MergeOption.NoTracking;
              }
              return _appFeatureRO;
            }
        }
        private ObjectSet<AppFeature> _appFeatureRO;
    
        public IObjectSet<ServiceTypeAppFeature> ServiceTypeAppFeature
        {
            get { return _serviceTypeAppFeature ?? (_serviceTypeAppFeature = CreateObjectSet<ServiceTypeAppFeature>("ServiceTypeAppFeature")); }
        }
        private ObjectSet<ServiceTypeAppFeature> _serviceTypeAppFeature;
        public IObjectSet<ServiceTypeAppFeature> ServiceTypeAppFeatureReadOnly
        {
            get 
            { 
              if (null == _serviceTypeAppFeatureRO)
              {
                _serviceTypeAppFeatureRO = CreateObjectSet<ServiceTypeAppFeature>("ServiceTypeAppFeature"); 
                _serviceTypeAppFeatureRO.MergeOption=MergeOption.NoTracking;
              }
              return _serviceTypeAppFeatureRO;
            }
        }
        private ObjectSet<ServiceTypeAppFeature> _serviceTypeAppFeatureRO;
    
        public IObjectSet<vw_Asset_AppFeature> vw_Asset_AppFeature
        {
            get { return _vw_Asset_AppFeature ?? (_vw_Asset_AppFeature = CreateObjectSet<vw_Asset_AppFeature>("vw_Asset_AppFeature")); }
        }
        private ObjectSet<vw_Asset_AppFeature> _vw_Asset_AppFeature;
        public IObjectSet<vw_Asset_AppFeature> vw_Asset_AppFeatureReadOnly
        {
            get 
            { 
              if (null == _vw_Asset_AppFeatureRO)
              {
                _vw_Asset_AppFeatureRO = CreateObjectSet<vw_Asset_AppFeature>("vw_Asset_AppFeature"); 
                _vw_Asset_AppFeatureRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_Asset_AppFeatureRO;
            }
        }
        private ObjectSet<vw_Asset_AppFeature> _vw_Asset_AppFeatureRO;
    
        public IObjectSet<TimeZoneStandardAbbreviation> TimeZoneStandardAbbreviation
        {
            get { return _timeZoneStandardAbbreviation ?? (_timeZoneStandardAbbreviation = CreateObjectSet<TimeZoneStandardAbbreviation>("TimeZoneStandardAbbreviation")); }
        }
        private ObjectSet<TimeZoneStandardAbbreviation> _timeZoneStandardAbbreviation;
        public IObjectSet<TimeZoneStandardAbbreviation> TimeZoneStandardAbbreviationReadOnly
        {
            get 
            { 
              if (null == _timeZoneStandardAbbreviationRO)
              {
                _timeZoneStandardAbbreviationRO = CreateObjectSet<TimeZoneStandardAbbreviation>("TimeZoneStandardAbbreviation"); 
                _timeZoneStandardAbbreviationRO.MergeOption=MergeOption.NoTracking;
              }
              return _timeZoneStandardAbbreviationRO;
            }
        }
        private ObjectSet<TimeZoneStandardAbbreviation> _timeZoneStandardAbbreviationRO;
    
        public IObjectSet<ProjectType> ProjectType
        {
            get { return _projectType ?? (_projectType = CreateObjectSet<ProjectType>("ProjectType")); }
        }
        private ObjectSet<ProjectType> _projectType;
        public IObjectSet<ProjectType> ProjectTypeReadOnly
        {
            get 
            { 
              if (null == _projectTypeRO)
              {
                _projectTypeRO = CreateObjectSet<ProjectType>("ProjectType"); 
                _projectTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _projectTypeRO;
            }
        }
        private ObjectSet<ProjectType> _projectTypeRO;
    
        public IObjectSet<Feature> Feature
        {
            get { return _feature ?? (_feature = CreateObjectSet<Feature>("Feature")); }
        }
        private ObjectSet<Feature> _feature;
        public IObjectSet<Feature> FeatureReadOnly
        {
            get 
            { 
              if (null == _featureRO)
              {
                _featureRO = CreateObjectSet<Feature>("Feature"); 
                _featureRO.MergeOption=MergeOption.NoTracking;
              }
              return _featureRO;
            }
        }
        private ObjectSet<Feature> _featureRO;
    
        public IObjectSet<FeatureType> FeatureType
        {
            get { return _featureType ?? (_featureType = CreateObjectSet<FeatureType>("FeatureType")); }
        }
        private ObjectSet<FeatureType> _featureType;
        public IObjectSet<FeatureType> FeatureTypeReadOnly
        {
            get 
            { 
              if (null == _featureTypeRO)
              {
                _featureTypeRO = CreateObjectSet<FeatureType>("FeatureType"); 
                _featureTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _featureTypeRO;
            }
        }
        private ObjectSet<FeatureType> _featureTypeRO;
    
        public IObjectSet<FeatureURLTemplate> FeatureURLTemplate
        {
            get { return _featureURLTemplate ?? (_featureURLTemplate = CreateObjectSet<FeatureURLTemplate>("FeatureURLTemplate")); }
        }
        private ObjectSet<FeatureURLTemplate> _featureURLTemplate;
        public IObjectSet<FeatureURLTemplate> FeatureURLTemplateReadOnly
        {
            get 
            { 
              if (null == _featureURLTemplateRO)
              {
                _featureURLTemplateRO = CreateObjectSet<FeatureURLTemplate>("FeatureURLTemplate"); 
                _featureURLTemplateRO.MergeOption=MergeOption.NoTracking;
              }
              return _featureURLTemplateRO;
            }
        }
        private ObjectSet<FeatureURLTemplate> _featureURLTemplateRO;
    
        public IObjectSet<TDMGClaimedDevices> TDMGClaimedDevices
        {
            get { return _tDMGClaimedDevices ?? (_tDMGClaimedDevices = CreateObjectSet<TDMGClaimedDevices>("TDMGClaimedDevices")); }
        }
        private ObjectSet<TDMGClaimedDevices> _tDMGClaimedDevices;
        public IObjectSet<TDMGClaimedDevices> TDMGClaimedDevicesReadOnly
        {
            get 
            { 
              if (null == _tDMGClaimedDevicesRO)
              {
                _tDMGClaimedDevicesRO = CreateObjectSet<TDMGClaimedDevices>("TDMGClaimedDevices"); 
                _tDMGClaimedDevicesRO.MergeOption=MergeOption.NoTracking;
              }
              return _tDMGClaimedDevicesRO;
            }
        }
        private ObjectSet<TDMGClaimedDevices> _tDMGClaimedDevicesRO;
    
        public IObjectSet<vw_CustomerIDsWithMaxAssetsForAirLift> vw_CustomerIDsWithMaxAssetsForAirLift
        {
            get { return _vw_CustomerIDsWithMaxAssetsForAirLift ?? (_vw_CustomerIDsWithMaxAssetsForAirLift = CreateObjectSet<vw_CustomerIDsWithMaxAssetsForAirLift>("vw_CustomerIDsWithMaxAssetsForAirLift")); }
        }
        private ObjectSet<vw_CustomerIDsWithMaxAssetsForAirLift> _vw_CustomerIDsWithMaxAssetsForAirLift;
        public IObjectSet<vw_CustomerIDsWithMaxAssetsForAirLift> vw_CustomerIDsWithMaxAssetsForAirLiftReadOnly
        {
            get 
            { 
              if (null == _vw_CustomerIDsWithMaxAssetsForAirLiftRO)
              {
                _vw_CustomerIDsWithMaxAssetsForAirLiftRO = CreateObjectSet<vw_CustomerIDsWithMaxAssetsForAirLift>("vw_CustomerIDsWithMaxAssetsForAirLift"); 
                _vw_CustomerIDsWithMaxAssetsForAirLiftRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_CustomerIDsWithMaxAssetsForAirLiftRO;
            }
        }
        private ObjectSet<vw_CustomerIDsWithMaxAssetsForAirLift> _vw_CustomerIDsWithMaxAssetsForAirLiftRO;
    
        public IObjectSet<CGSyncBookMark> CGSyncBookMark
        {
            get { return _cGSyncBookMark ?? (_cGSyncBookMark = CreateObjectSet<CGSyncBookMark>("CGSyncBookMark")); }
        }
        private ObjectSet<CGSyncBookMark> _cGSyncBookMark;
        public IObjectSet<CGSyncBookMark> CGSyncBookMarkReadOnly
        {
            get 
            { 
              if (null == _cGSyncBookMarkRO)
              {
                _cGSyncBookMarkRO = CreateObjectSet<CGSyncBookMark>("CGSyncBookMark"); 
                _cGSyncBookMarkRO.MergeOption=MergeOption.NoTracking;
              }
              return _cGSyncBookMarkRO;
            }
        }
        private ObjectSet<CGSyncBookMark> _cGSyncBookMarkRO;
    
        public IObjectSet<MTSBIT> MTSBIT
        {
            get { return _mTSBIT ?? (_mTSBIT = CreateObjectSet<MTSBIT>("MTSBIT")); }
        }
        private ObjectSet<MTSBIT> _mTSBIT;
        public IObjectSet<MTSBIT> MTSBITReadOnly
        {
            get 
            { 
              if (null == _mTSBITRO)
              {
                _mTSBITRO = CreateObjectSet<MTSBIT>("MTSBIT"); 
                _mTSBITRO.MergeOption=MergeOption.NoTracking;
              }
              return _mTSBITRO;
            }
        }
        private ObjectSet<MTSBIT> _mTSBITRO;
    
        public IObjectSet<MTSDevice> MTSDevice
        {
            get { return _mTSDevice ?? (_mTSDevice = CreateObjectSet<MTSDevice>("MTSDevice")); }
        }
        private ObjectSet<MTSDevice> _mTSDevice;
        public IObjectSet<MTSDevice> MTSDeviceReadOnly
        {
            get 
            { 
              if (null == _mTSDeviceRO)
              {
                _mTSDeviceRO = CreateObjectSet<MTSDevice>("MTSDevice"); 
                _mTSDeviceRO.MergeOption=MergeOption.NoTracking;
              }
              return _mTSDeviceRO;
            }
        }
        private ObjectSet<MTSDevice> _mTSDeviceRO;
    
        public IObjectSet<MTSMessage> MTSMessage
        {
            get { return _mTSMessage ?? (_mTSMessage = CreateObjectSet<MTSMessage>("MTSMessage")); }
        }
        private ObjectSet<MTSMessage> _mTSMessage;
        public IObjectSet<MTSMessage> MTSMessageReadOnly
        {
            get 
            { 
              if (null == _mTSMessageRO)
              {
                _mTSMessageRO = CreateObjectSet<MTSMessage>("MTSMessage"); 
                _mTSMessageRO.MergeOption=MergeOption.NoTracking;
              }
              return _mTSMessageRO;
            }
        }
        private ObjectSet<MTSMessage> _mTSMessageRO;
    
        public IObjectSet<MTSOut> MTSOut
        {
            get { return _mTSOut ?? (_mTSOut = CreateObjectSet<MTSOut>("MTSOut")); }
        }
        private ObjectSet<MTSOut> _mTSOut;
        public IObjectSet<MTSOut> MTSOutReadOnly
        {
            get 
            { 
              if (null == _mTSOutRO)
              {
                _mTSOutRO = CreateObjectSet<MTSOut>("MTSOut"); 
                _mTSOutRO.MergeOption=MergeOption.NoTracking;
              }
              return _mTSOutRO;
            }
        }
        private ObjectSet<MTSOut> _mTSOutRO;
    
        public IObjectSet<PLDevice> PLDevice
        {
            get { return _pLDevice ?? (_pLDevice = CreateObjectSet<PLDevice>("PLDevice")); }
        }
        private ObjectSet<PLDevice> _pLDevice;
        public IObjectSet<PLDevice> PLDeviceReadOnly
        {
            get 
            { 
              if (null == _pLDeviceRO)
              {
                _pLDeviceRO = CreateObjectSet<PLDevice>("PLDevice"); 
                _pLDeviceRO.MergeOption=MergeOption.NoTracking;
              }
              return _pLDeviceRO;
            }
        }
        private ObjectSet<PLDevice> _pLDeviceRO;
    
        public IObjectSet<PLOut> PLOut
        {
            get { return _pLOut ?? (_pLOut = CreateObjectSet<PLOut>("PLOut")); }
        }
        private ObjectSet<PLOut> _pLOut;
        public IObjectSet<PLOut> PLOutReadOnly
        {
            get 
            { 
              if (null == _pLOutRO)
              {
                _pLOutRO = CreateObjectSet<PLOut>("PLOut"); 
                _pLOutRO.MergeOption=MergeOption.NoTracking;
              }
              return _pLOutRO;
            }
        }
        private ObjectSet<PLOut> _pLOutRO;
    
        public IObjectSet<RuntimeCalibration> RuntimeCalibration
        {
            get { return _runtimeCalibration ?? (_runtimeCalibration = CreateObjectSet<RuntimeCalibration>("RuntimeCalibration")); }
        }
        private ObjectSet<RuntimeCalibration> _runtimeCalibration;
        public IObjectSet<RuntimeCalibration> RuntimeCalibrationReadOnly
        {
            get 
            { 
              if (null == _runtimeCalibrationRO)
              {
                _runtimeCalibrationRO = CreateObjectSet<RuntimeCalibration>("RuntimeCalibration"); 
                _runtimeCalibrationRO.MergeOption=MergeOption.NoTracking;
              }
              return _runtimeCalibrationRO;
            }
        }
        private ObjectSet<RuntimeCalibration> _runtimeCalibrationRO;
    
        public IObjectSet<Sequence> Sequence
        {
            get { return _sequence ?? (_sequence = CreateObjectSet<Sequence>("Sequence")); }
        }
        private ObjectSet<Sequence> _sequence;
        public IObjectSet<Sequence> SequenceReadOnly
        {
            get 
            { 
              if (null == _sequenceRO)
              {
                _sequenceRO = CreateObjectSet<Sequence>("Sequence"); 
                _sequenceRO.MergeOption=MergeOption.NoTracking;
              }
              return _sequenceRO;
            }
        }
        private ObjectSet<Sequence> _sequenceRO;
    
        public IObjectSet<TTDevice> TTDevice
        {
            get { return _tTDevice ?? (_tTDevice = CreateObjectSet<TTDevice>("TTDevice")); }
        }
        private ObjectSet<TTDevice> _tTDevice;
        public IObjectSet<TTDevice> TTDeviceReadOnly
        {
            get 
            { 
              if (null == _tTDeviceRO)
              {
                _tTDeviceRO = CreateObjectSet<TTDevice>("TTDevice"); 
                _tTDeviceRO.MergeOption=MergeOption.NoTracking;
              }
              return _tTDeviceRO;
            }
        }
        private ObjectSet<TTDevice> _tTDeviceRO;
    
        public IObjectSet<TTOut> TTOut
        {
            get { return _tTOut ?? (_tTOut = CreateObjectSet<TTOut>("TTOut")); }
        }
        private ObjectSet<TTOut> _tTOut;
        public IObjectSet<TTOut> TTOutReadOnly
        {
            get 
            { 
              if (null == _tTOutRO)
              {
                _tTOutRO = CreateObjectSet<TTOut>("TTOut"); 
                _tTOutRO.MergeOption=MergeOption.NoTracking;
              }
              return _tTOutRO;
            }
        }
        private ObjectSet<TTOut> _tTOutRO;
    
        public IObjectSet<UserFeatureAudit> UserFeatureAudit
        {
            get { return _userFeatureAudit ?? (_userFeatureAudit = CreateObjectSet<UserFeatureAudit>("UserFeatureAudit")); }
        }
        private ObjectSet<UserFeatureAudit> _userFeatureAudit;
        public IObjectSet<UserFeatureAudit> UserFeatureAuditReadOnly
        {
            get 
            { 
              if (null == _userFeatureAuditRO)
              {
                _userFeatureAuditRO = CreateObjectSet<UserFeatureAudit>("UserFeatureAudit"); 
                _userFeatureAuditRO.MergeOption=MergeOption.NoTracking;
              }
              return _userFeatureAuditRO;
            }
        }
        private ObjectSet<UserFeatureAudit> _userFeatureAuditRO;
    
        public IObjectSet<vw_Asset_AssetFeature_bckup_20140112> vw_Asset_AssetFeature_bckup_20140112
        {
            get { return _vw_Asset_AssetFeature_bckup_20140112 ?? (_vw_Asset_AssetFeature_bckup_20140112 = CreateObjectSet<vw_Asset_AssetFeature_bckup_20140112>("vw_Asset_AssetFeature_bckup_20140112")); }
        }
        private ObjectSet<vw_Asset_AssetFeature_bckup_20140112> _vw_Asset_AssetFeature_bckup_20140112;
        public IObjectSet<vw_Asset_AssetFeature_bckup_20140112> vw_Asset_AssetFeature_bckup_20140112ReadOnly
        {
            get 
            { 
              if (null == _vw_Asset_AssetFeature_bckup_20140112RO)
              {
                _vw_Asset_AssetFeature_bckup_20140112RO = CreateObjectSet<vw_Asset_AssetFeature_bckup_20140112>("vw_Asset_AssetFeature_bckup_20140112"); 
                _vw_Asset_AssetFeature_bckup_20140112RO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_Asset_AssetFeature_bckup_20140112RO;
            }
        }
        private ObjectSet<vw_Asset_AssetFeature_bckup_20140112> _vw_Asset_AssetFeature_bckup_20140112RO;
    
        public IObjectSet<Customer> Customer
        {
            get { return _customer ?? (_customer = CreateObjectSet<Customer>("Customer")); }
        }
        private ObjectSet<Customer> _customer;
        public IObjectSet<Customer> CustomerReadOnly
        {
            get 
            { 
              if (null == _customerRO)
              {
                _customerRO = CreateObjectSet<Customer>("Customer"); 
                _customerRO.MergeOption=MergeOption.NoTracking;
              }
              return _customerRO;
            }
        }
        private ObjectSet<Customer> _customerRO;
    
        public IObjectSet<CustomerRelationshipAudit> CustomerRelationshipAudit
        {
            get { return _customerRelationshipAudit ?? (_customerRelationshipAudit = CreateObjectSet<CustomerRelationshipAudit>("CustomerRelationshipAudit")); }
        }
        private ObjectSet<CustomerRelationshipAudit> _customerRelationshipAudit;
        public IObjectSet<CustomerRelationshipAudit> CustomerRelationshipAuditReadOnly
        {
            get 
            { 
              if (null == _customerRelationshipAuditRO)
              {
                _customerRelationshipAuditRO = CreateObjectSet<CustomerRelationshipAudit>("CustomerRelationshipAudit"); 
                _customerRelationshipAuditRO.MergeOption=MergeOption.NoTracking;
              }
              return _customerRelationshipAuditRO;
            }
        }
        private ObjectSet<CustomerRelationshipAudit> _customerRelationshipAuditRO;
    
        public IObjectSet<CustomerRelationshipExport> CustomerRelationshipExport
        {
            get { return _customerRelationshipExport ?? (_customerRelationshipExport = CreateObjectSet<CustomerRelationshipExport>("CustomerRelationshipExport")); }
        }
        private ObjectSet<CustomerRelationshipExport> _customerRelationshipExport;
        public IObjectSet<CustomerRelationshipExport> CustomerRelationshipExportReadOnly
        {
            get 
            { 
              if (null == _customerRelationshipExportRO)
              {
                _customerRelationshipExportRO = CreateObjectSet<CustomerRelationshipExport>("CustomerRelationshipExport"); 
                _customerRelationshipExportRO.MergeOption=MergeOption.NoTracking;
              }
              return _customerRelationshipExportRO;
            }
        }
        private ObjectSet<CustomerRelationshipExport> _customerRelationshipExportRO;
    
        public IObjectSet<AppFeatureSetAppFeature> AppFeatureSetAppFeature
        {
            get { return _appFeatureSetAppFeature ?? (_appFeatureSetAppFeature = CreateObjectSet<AppFeatureSetAppFeature>("AppFeatureSetAppFeature")); }
        }
        private ObjectSet<AppFeatureSetAppFeature> _appFeatureSetAppFeature;
        public IObjectSet<AppFeatureSetAppFeature> AppFeatureSetAppFeatureReadOnly
        {
            get 
            { 
              if (null == _appFeatureSetAppFeatureRO)
              {
                _appFeatureSetAppFeatureRO = CreateObjectSet<AppFeatureSetAppFeature>("AppFeatureSetAppFeature"); 
                _appFeatureSetAppFeatureRO.MergeOption=MergeOption.NoTracking;
              }
              return _appFeatureSetAppFeatureRO;
            }
        }
        private ObjectSet<AppFeatureSetAppFeature> _appFeatureSetAppFeatureRO;
    
        public IObjectSet<AssetMonitoring> AssetMonitoring
        {
            get { return _assetMonitoring ?? (_assetMonitoring = CreateObjectSet<AssetMonitoring>("AssetMonitoring")); }
        }
        private ObjectSet<AssetMonitoring> _assetMonitoring;
        public IObjectSet<AssetMonitoring> AssetMonitoringReadOnly
        {
            get 
            { 
              if (null == _assetMonitoringRO)
              {
                _assetMonitoringRO = CreateObjectSet<AssetMonitoring>("AssetMonitoring"); 
                _assetMonitoringRO.MergeOption=MergeOption.NoTracking;
              }
              return _assetMonitoringRO;
            }
        }
        private ObjectSet<AssetMonitoring> _assetMonitoringRO;
    
        public IObjectSet<PMTrackingType> PMTrackingType
        {
            get { return _pMTrackingType ?? (_pMTrackingType = CreateObjectSet<PMTrackingType>("PMTrackingType")); }
        }
        private ObjectSet<PMTrackingType> _pMTrackingType;
        public IObjectSet<PMTrackingType> PMTrackingTypeReadOnly
        {
            get 
            { 
              if (null == _pMTrackingTypeRO)
              {
                _pMTrackingTypeRO = CreateObjectSet<PMTrackingType>("PMTrackingType"); 
                _pMTrackingTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _pMTrackingTypeRO;
            }
        }
        private ObjectSet<PMTrackingType> _pMTrackingTypeRO;
    
        public IObjectSet<ServiceTypeMap> ServiceTypeMap
        {
            get { return _serviceTypeMap ?? (_serviceTypeMap = CreateObjectSet<ServiceTypeMap>("ServiceTypeMap")); }
        }
        private ObjectSet<ServiceTypeMap> _serviceTypeMap;
        public IObjectSet<ServiceTypeMap> ServiceTypeMapReadOnly
        {
            get 
            { 
              if (null == _serviceTypeMapRO)
              {
                _serviceTypeMapRO = CreateObjectSet<ServiceTypeMap>("ServiceTypeMap"); 
                _serviceTypeMapRO.MergeOption=MergeOption.NoTracking;
              }
              return _serviceTypeMapRO;
            }
        }
        private ObjectSet<ServiceTypeMap> _serviceTypeMapRO;
    
        public IObjectSet<SharedView> SharedView
        {
            get { return _sharedView ?? (_sharedView = CreateObjectSet<SharedView>("SharedView")); }
        }
        private ObjectSet<SharedView> _sharedView;
        public IObjectSet<SharedView> SharedViewReadOnly
        {
            get 
            { 
              if (null == _sharedViewRO)
              {
                _sharedViewRO = CreateObjectSet<SharedView>("SharedView"); 
                _sharedViewRO.MergeOption=MergeOption.NoTracking;
              }
              return _sharedViewRO;
            }
        }
        private ObjectSet<SharedView> _sharedViewRO;
    
        public IObjectSet<UserFeature> UserFeature
        {
            get { return _userFeature ?? (_userFeature = CreateObjectSet<UserFeature>("UserFeature")); }
        }
        private ObjectSet<UserFeature> _userFeature;
        public IObjectSet<UserFeature> UserFeatureReadOnly
        {
            get 
            { 
              if (null == _userFeatureRO)
              {
                _userFeatureRO = CreateObjectSet<UserFeature>("UserFeature"); 
                _userFeatureRO.MergeOption=MergeOption.NoTracking;
              }
              return _userFeatureRO;
            }
        }
        private ObjectSet<UserFeature> _userFeatureRO;
    
        public IObjectSet<UnitType> UnitType
        {
            get { return _unitType ?? (_unitType = CreateObjectSet<UnitType>("UnitType")); }
        }
        private ObjectSet<UnitType> _unitType;
        public IObjectSet<UnitType> UnitTypeReadOnly
        {
            get 
            { 
              if (null == _unitTypeRO)
              {
                _unitTypeRO = CreateObjectSet<UnitType>("UnitType"); 
                _unitTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _unitTypeRO;
            }
        }
        private ObjectSet<UnitType> _unitTypeRO;

        #endregion

    }
}
