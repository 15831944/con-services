//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace VSS.Hosted.VLCommon
{
    public partial class User
    {
        #region Primitive Properties
    
        public virtual long ID
        {
            get;
            set;
        }
    
        public virtual Nullable<long> fk_CustomerID
        {
            get { return _fk_CustomerID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_fk_CustomerID != value)
                    {
                        if (Customer != null && Customer.ID != value)
                        {
                            Customer = null;
                        }
                        _fk_CustomerID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _fk_CustomerID;
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string PasswordHash
        {
            get;
            set;
        }
    
        public virtual string Salt
        {
            get;
            set;
        }
    
        public virtual string TimezoneName
        {
            get;
            set;
        }
    
        public virtual string EmailContact
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> PwdExpiryUTC
        {
            get;
            set;
        }
    
        public virtual System.DateTime UpdateUTC
        {
            get;
            set;
        }
    
        public virtual int fk_LanguageID
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Units
        {
            get;
            set;
        }
    
        public virtual Nullable<byte> LocationDisplayType
        {
            get;
            set;
        }
    
        public virtual string GlobalID
        {
            get;
            set;
        }
    
        public virtual Nullable<byte> AssetLabelPreferenceType
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual string Address
        {
            get;
            set;
        }
    
        public virtual string PhoneNumber
        {
            get;
            set;
        }
    
        public virtual string JobTitle
        {
            get;
            set;
        }
    
        public virtual bool Active
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> TermsofUseAcceptedUTC
        {
            get;
            set;
        }
    
        public virtual int LogOnFailedCount
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LogOnFirstFailedUTC
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LogOnLastFailedUTC
        {
            get;
            set;
        }
    
        public virtual Nullable<int> MeterLabelPreferenceType
        {
            get;
            set;
        }
    
        public virtual int fk_TemperatureUnitID
        {
            get;
            set;
        }
    
        public virtual string PasswordResetGUID
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> PasswordResetUTC
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> InsertUTC
        {
            get;
            set;
        }
    
        public virtual int fk_PressureUnitID
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastLoginUTC
        {
            get;
            set;
        }
    
        public virtual bool IsEmailValidated
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> EmailVerificationUTC
        {
            get;
            set;
        }
    
        public virtual string EmailVerificationGUID
        {
            get;
            set;
        }
    
        public virtual string Createdby
        {
            get;
            set;
        }
    
        public virtual Nullable<int> EmailModifiedCount
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> EmailVerificationTrackingUTC
        {
            get;
            set;
        }
    
        public virtual string UserUID
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> IdentityMigrationUTC
        {
            get;
            set;
        }
    
        public virtual string Domain
        {
            get;
            set;
        }
    
        public virtual bool IsVLLoginID
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;
    
        public virtual ICollection<SharedView> SharedView
        {
            get
            {
                if (_sharedView == null)
                {
                    var newCollection = new FixupCollection<SharedView>();
                    newCollection.CollectionChanged += FixupSharedView;
                    _sharedView = newCollection;
                }
                return _sharedView;
            }
            set
            {
                if (!ReferenceEquals(_sharedView, value))
                {
                    var previousValue = _sharedView as FixupCollection<SharedView>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSharedView;
                    }
                    _sharedView = value;
                    var newValue = value as FixupCollection<SharedView>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSharedView;
                    }
                }
            }
        }
        private ICollection<SharedView> _sharedView;
    
        public virtual ICollection<UserFeature> UserFeature
        {
            get
            {
                if (_userFeature == null)
                {
                    var newCollection = new FixupCollection<UserFeature>();
                    newCollection.CollectionChanged += FixupUserFeature;
                    _userFeature = newCollection;
                }
                return _userFeature;
            }
            set
            {
                if (!ReferenceEquals(_userFeature, value))
                {
                    var previousValue = _userFeature as FixupCollection<UserFeature>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserFeature;
                    }
                    _userFeature = value;
                    var newValue = value as FixupCollection<UserFeature>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserFeature;
                    }
                }
            }
        }
        private ICollection<UserFeature> _userFeature;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.User.Contains(this))
            {
                previousValue.User.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.User.Contains(this))
                {
                    Customer.User.Add(this);
                }
                if (fk_CustomerID != Customer.ID)
                {
                    fk_CustomerID = Customer.ID;
                }
            }
            else if (!_settingFK)
            {
                fk_CustomerID = null;
            }
        }
    
        private void FixupSharedView(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SharedView item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SharedView item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserFeature(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserFeature item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserFeature item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }

        #endregion

    }
}
