//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace VSS.Hosted.VLCommon
{
  public partial class CustomerRelationship
  {
    #region Primitive Properties

    public virtual long fk_ParentCustomerID
    {
      get { return _fk_ParentCustomerID; }
      set
      {
        if (_fk_ParentCustomerID != value)
        {
          if (Customer1 != null && Customer1.ID != value)
          {
            Customer1 = null;
          }
          _fk_ParentCustomerID = value;
        }
      }
    }
    private long _fk_ParentCustomerID;

    public virtual long fk_ClientCustomerID
    {
      get { return _fk_ClientCustomerID; }
      set
      {
        if (_fk_ClientCustomerID != value)
        {
          if (Customer != null && Customer.ID != value)
          {
            Customer = null;
          }
          _fk_ClientCustomerID = value;
        }
      }
    }
    private long _fk_ClientCustomerID;

    public virtual string BSSRelationshipID
    {
      get;
      set;
    }

    public virtual int fk_CustomerRelationshipTypeID
    {
      get;
      set;
    }

    public virtual System.DateTime UpdateUTC
    {
      get { return _updateUTC; }
      set { _updateUTC = value; }
    }
    private System.DateTime _updateUTC = DateTime.UtcNow;

    #endregion

    #region Navigation Properties

    public virtual Customer Customer
    {
      get { return _customer; }
      set
      {
        if (!ReferenceEquals(_customer, value))
        {
          var previousValue = _customer;
          _customer = value;
          FixupCustomer(previousValue);
        }
      }
    }
    private Customer _customer;

    public virtual Customer Customer1
    {
      get { return _customer1; }
      set
      {
        if (!ReferenceEquals(_customer1, value))
        {
          var previousValue = _customer1;
          _customer1 = value;
          FixupCustomer1(previousValue);
        }
      }
    }
    private Customer _customer1;

    #endregion

    #region Association Fixup

    private void FixupCustomer(Customer previousValue)
    {
      if (previousValue != null && previousValue.CustomerRelationship.Contains(this))
      {
        previousValue.CustomerRelationship.Remove(this);
      }

      if (Customer != null)
      {
        if (!Customer.CustomerRelationship.Contains(this))
        {
          Customer.CustomerRelationship.Add(this);
        }
        if (fk_ClientCustomerID != Customer.ID)
        {
          fk_ClientCustomerID = Customer.ID;
        }
      }
    }

    private void FixupCustomer1(Customer previousValue)
    {
      if (previousValue != null && previousValue.CustomerRelationship1.Contains(this))
      {
        previousValue.CustomerRelationship1.Remove(this);
      }

      if (Customer1 != null)
      {
        if (!Customer1.CustomerRelationship1.Contains(this))
        {
          Customer1.CustomerRelationship1.Add(this);
        }
        if (fk_ParentCustomerID != Customer1.ID)
        {
          fk_ParentCustomerID = Customer1.ID;
        }
      }
    }

    #endregion

  }
}
