//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using VSS.Hosted.VLCommon.NH_OPMockObjectSet;

namespace VSS.Hosted.VLCommon
{
    /// <summary>
    /// The concrete mock context object that implements the context's interface.
    /// Provide an instance of this mock context class to client logic when testing, 
    /// instead of providing a functional context object.
    /// </summary>
    public partial class NH_OPMock : INH_OP
    {
        private bool _readOnlyCurrent = false;
        private Stack<bool> _readOnlyStack = new Stack<bool>();
        public System.Data.Common.DbConnection Connection { get {return null;} }
        public int SaveChanges() 
        { 
          if (_readOnlyCurrent == true)
            throw new System.NotSupportedException("This ObjectContext cannot be used to change data on the database");
          return 1; 
        }
    
        public void SetReadOnlyness(bool readOnly)
        {
          _readOnlyStack.Push(_readOnlyCurrent);
          _readOnlyCurrent = readOnly;
        }
    
        public NH_OPMock()
        {
        }
    
    	  ~NH_OPMock()
        {
          Dispose();
        }
    
    
        #region IDisposable
    	  public void Dispose()
        {
            if (_readOnlyStack.Count > 0)
            {
              _readOnlyCurrent = _readOnlyStack.Pop();
            }
        }
        #endregion
    
        public IObjectSet<AppAlarm> AppAlarm
        {
            get { return _appAlarm  ?? (_appAlarm = new MockObjectSet<AppAlarm>()); }
        }
        private IObjectSet<AppAlarm> _appAlarm;
    
        public IObjectSet<AppAlarm> AppAlarmReadOnly{get { return AppAlarm; }}
    
        public IObjectSet<Asset> Asset
        {
            get { return _asset  ?? (_asset = new MockObjectSet<Asset>()); }
        }
        private IObjectSet<Asset> _asset;
    
        public IObjectSet<Asset> AssetReadOnly{get { return Asset; }}
    
        public IObjectSet<BookmarkManager> BookmarkManager
        {
            get { return _bookmarkManager  ?? (_bookmarkManager = new MockObjectSet<BookmarkManager>()); }
        }
        private IObjectSet<BookmarkManager> _bookmarkManager;
    
        public IObjectSet<BookmarkManager> BookmarkManagerReadOnly{get { return BookmarkManager; }}
    
        public IObjectSet<BSSMessages> BSSMessages
        {
            get { return _bSSMessages  ?? (_bSSMessages = new MockObjectSet<BSSMessages>()); }
        }
        private IObjectSet<BSSMessages> _bSSMessages;
    
        public IObjectSet<BSSMessages> BSSMessagesReadOnly{get { return BSSMessages; }}
    
        public IObjectSet<ConfigType> ConfigType
        {
            get { return _configType  ?? (_configType = new MockObjectSet<ConfigType>()); }
        }
        private IObjectSet<ConfigType> _configType;
    
        public IObjectSet<ConfigType> ConfigTypeReadOnly{get { return ConfigType; }}
    
        public IObjectSet<Contact> Contact
        {
            get { return _contact  ?? (_contact = new MockObjectSet<Contact>()); }
        }
        private IObjectSet<Contact> _contact;
    
        public IObjectSet<Contact> ContactReadOnly{get { return Contact; }}
    
        public IObjectSet<CoordinateSystem> CoordinateSystem
        {
            get { return _coordinateSystem  ?? (_coordinateSystem = new MockObjectSet<CoordinateSystem>()); }
        }
        private IObjectSet<CoordinateSystem> _coordinateSystem;
    
        public IObjectSet<CoordinateSystem> CoordinateSystemReadOnly{get { return CoordinateSystem; }}
    
        public IObjectSet<CrosscheckConfig> CrosscheckConfig
        {
            get { return _crosscheckConfig  ?? (_crosscheckConfig = new MockObjectSet<CrosscheckConfig>()); }
        }
        private IObjectSet<CrosscheckConfig> _crosscheckConfig;
    
        public IObjectSet<CrosscheckConfig> CrosscheckConfigReadOnly{get { return CrosscheckConfig; }}
    
        public IObjectSet<CustomerRelationship> CustomerRelationship
        {
            get { return _customerRelationship  ?? (_customerRelationship = new MockObjectSet<CustomerRelationship>()); }
        }
        private IObjectSet<CustomerRelationship> _customerRelationship;
    
        public IObjectSet<CustomerRelationship> CustomerRelationshipReadOnly{get { return CustomerRelationship; }}
    
        public IObjectSet<CustomerType> CustomerType
        {
            get { return _customerType  ?? (_customerType = new MockObjectSet<CustomerType>()); }
        }
        private IObjectSet<CustomerType> _customerType;
    
        public IObjectSet<CustomerType> CustomerTypeReadOnly{get { return CustomerType; }}
    
        public IObjectSet<Datalink> Datalink
        {
            get { return _datalink  ?? (_datalink = new MockObjectSet<Datalink>()); }
        }
        private IObjectSet<Datalink> _datalink;
    
        public IObjectSet<Datalink> DatalinkReadOnly{get { return Datalink; }}
    
        public IObjectSet<DealerNetwork> DealerNetwork
        {
            get { return _dealerNetwork  ?? (_dealerNetwork = new MockObjectSet<DealerNetwork>()); }
        }
        private IObjectSet<DealerNetwork> _dealerNetwork;
    
        public IObjectSet<DealerNetwork> DealerNetworkReadOnly{get { return DealerNetwork; }}
    
        public IObjectSet<Device> Device
        {
            get { return _device  ?? (_device = new MockObjectSet<Device>()); }
        }
        private IObjectSet<Device> _device;
    
        public IObjectSet<Device> DeviceReadOnly{get { return Device; }}
    
        public IObjectSet<DeviceFirmwareVersion> DeviceFirmwareVersion
        {
            get { return _deviceFirmwareVersion  ?? (_deviceFirmwareVersion = new MockObjectSet<DeviceFirmwareVersion>()); }
        }
        private IObjectSet<DeviceFirmwareVersion> _deviceFirmwareVersion;
    
        public IObjectSet<DeviceFirmwareVersion> DeviceFirmwareVersionReadOnly{get { return DeviceFirmwareVersion; }}
    
        public IObjectSet<DeviceState> DeviceState
        {
            get { return _deviceState  ?? (_deviceState = new MockObjectSet<DeviceState>()); }
        }
        private IObjectSet<DeviceState> _deviceState;
    
        public IObjectSet<DeviceState> DeviceStateReadOnly{get { return DeviceState; }}
    
        public IObjectSet<DeviceType> DeviceType
        {
            get { return _deviceType  ?? (_deviceType = new MockObjectSet<DeviceType>()); }
        }
        private IObjectSet<DeviceType> _deviceType;
    
        public IObjectSet<DeviceType> DeviceTypeReadOnly{get { return DeviceType; }}
    
        public IObjectSet<ECMDatalinkInfo> ECMDatalinkInfo
        {
            get { return _eCMDatalinkInfo  ?? (_eCMDatalinkInfo = new MockObjectSet<ECMDatalinkInfo>()); }
        }
        private IObjectSet<ECMDatalinkInfo> _eCMDatalinkInfo;
    
        public IObjectSet<ECMDatalinkInfo> ECMDatalinkInfoReadOnly{get { return ECMDatalinkInfo; }}
    
        public IObjectSet<ECMInfo> ECMInfo
        {
            get { return _eCMInfo  ?? (_eCMInfo = new MockObjectSet<ECMInfo>()); }
        }
        private IObjectSet<ECMInfo> _eCMInfo;
    
        public IObjectSet<ECMInfo> ECMInfoReadOnly{get { return ECMInfo; }}
    
        public IObjectSet<ExternalUser> ExternalUser
        {
            get { return _externalUser  ?? (_externalUser = new MockObjectSet<ExternalUser>()); }
        }
        private IObjectSet<ExternalUser> _externalUser;
    
        public IObjectSet<ExternalUser> ExternalUserReadOnly{get { return ExternalUser; }}
    
        public IObjectSet<FaultType> FaultType
        {
            get { return _faultType  ?? (_faultType = new MockObjectSet<FaultType>()); }
        }
        private IObjectSet<FaultType> _faultType;
    
        public IObjectSet<FaultType> FaultTypeReadOnly{get { return FaultType; }}
    
        public IObjectSet<FeatureAccess> FeatureAccess
        {
            get { return _featureAccess  ?? (_featureAccess = new MockObjectSet<FeatureAccess>()); }
        }
        private IObjectSet<FeatureAccess> _featureAccess;
    
        public IObjectSet<FeatureAccess> FeatureAccessReadOnly{get { return FeatureAccess; }}
    
        public IObjectSet<FirmwareUpdateStatus> FirmwareUpdateStatus
        {
            get { return _firmwareUpdateStatus  ?? (_firmwareUpdateStatus = new MockObjectSet<FirmwareUpdateStatus>()); }
        }
        private IObjectSet<FirmwareUpdateStatus> _firmwareUpdateStatus;
    
        public IObjectSet<FirmwareUpdateStatus> FirmwareUpdateStatusReadOnly{get { return FirmwareUpdateStatus; }}
    
        public IObjectSet<Icon> Icon
        {
            get { return _icon  ?? (_icon = new MockObjectSet<Icon>()); }
        }
        private IObjectSet<Icon> _icon;
    
        public IObjectSet<Icon> IconReadOnly{get { return Icon; }}
    
        public IObjectSet<Language> Language
        {
            get { return _language  ?? (_language = new MockObjectSet<Language>()); }
        }
        private IObjectSet<Language> _language;
    
        public IObjectSet<Language> LanguageReadOnly{get { return Language; }}
    
        public IObjectSet<Make> Make
        {
            get { return _make  ?? (_make = new MockObjectSet<Make>()); }
        }
        private IObjectSet<Make> _make;
    
        public IObjectSet<Make> MakeReadOnly{get { return Make; }}
    
        public IObjectSet<MID> MID
        {
            get { return _mID  ?? (_mID = new MockObjectSet<MID>()); }
        }
        private IObjectSet<MID> _mID;
    
        public IObjectSet<MID> MIDReadOnly{get { return MID; }}
    
        public IObjectSet<MTS500FirmwareVersion> MTS500FirmwareVersion
        {
            get { return _mTS500FirmwareVersion  ?? (_mTS500FirmwareVersion = new MockObjectSet<MTS500FirmwareVersion>()); }
        }
        private IObjectSet<MTS500FirmwareVersion> _mTS500FirmwareVersion;
    
        public IObjectSet<MTS500FirmwareVersion> MTS500FirmwareVersionReadOnly{get { return MTS500FirmwareVersion; }}
    
        public IObjectSet<NighthawkSync> NighthawkSync
        {
            get { return _nighthawkSync  ?? (_nighthawkSync = new MockObjectSet<NighthawkSync>()); }
        }
        private IObjectSet<NighthawkSync> _nighthawkSync;
    
        public IObjectSet<NighthawkSync> NighthawkSyncReadOnly{get { return NighthawkSync; }}
    
        public IObjectSet<Notice> Notice
        {
            get { return _notice  ?? (_notice = new MockObjectSet<Notice>()); }
        }
        private IObjectSet<Notice> _notice;
    
        public IObjectSet<Notice> NoticeReadOnly{get { return Notice; }}
    
        public IObjectSet<NoticeLanguage> NoticeLanguage
        {
            get { return _noticeLanguage  ?? (_noticeLanguage = new MockObjectSet<NoticeLanguage>()); }
        }
        private IObjectSet<NoticeLanguage> _noticeLanguage;
    
        public IObjectSet<NoticeLanguage> NoticeLanguageReadOnly{get { return NoticeLanguage; }}
    
        public IObjectSet<PersonalityType> PersonalityType
        {
            get { return _personalityType  ?? (_personalityType = new MockObjectSet<PersonalityType>()); }
        }
        private IObjectSet<PersonalityType> _personalityType;
    
        public IObjectSet<PersonalityType> PersonalityTypeReadOnly{get { return PersonalityType; }}
    
        public IObjectSet<PMCompletedService> PMCompletedService
        {
            get { return _pMCompletedService  ?? (_pMCompletedService = new MockObjectSet<PMCompletedService>()); }
        }
        private IObjectSet<PMCompletedService> _pMCompletedService;
    
        public IObjectSet<PMCompletedService> PMCompletedServiceReadOnly{get { return PMCompletedService; }}
    
        public IObjectSet<PMIntervalAsset> PMIntervalAsset
        {
            get { return _pMIntervalAsset  ?? (_pMIntervalAsset = new MockObjectSet<PMIntervalAsset>()); }
        }
        private IObjectSet<PMIntervalAsset> _pMIntervalAsset;
    
        public IObjectSet<PMIntervalAsset> PMIntervalAssetReadOnly{get { return PMIntervalAsset; }}
    
        public IObjectSet<PMServiceCompletionType> PMServiceCompletionType
        {
            get { return _pMServiceCompletionType  ?? (_pMServiceCompletionType = new MockObjectSet<PMServiceCompletionType>()); }
        }
        private IObjectSet<PMServiceCompletionType> _pMServiceCompletionType;
    
        public IObjectSet<PMServiceCompletionType> PMServiceCompletionTypeReadOnly{get { return PMServiceCompletionType; }}
    
        public IObjectSet<ProductFamily> ProductFamily
        {
            get { return _productFamily  ?? (_productFamily = new MockObjectSet<ProductFamily>()); }
        }
        private IObjectSet<ProductFamily> _productFamily;
    
        public IObjectSet<ProductFamily> ProductFamilyReadOnly{get { return ProductFamily; }}
    
        public IObjectSet<Project> Project
        {
            get { return _project  ?? (_project = new MockObjectSet<Project>()); }
        }
        private IObjectSet<Project> _project;
    
        public IObjectSet<Project> ProjectReadOnly{get { return Project; }}
    
        public IObjectSet<Service> Service
        {
            get { return _service  ?? (_service = new MockObjectSet<Service>()); }
        }
        private IObjectSet<Service> _service;
    
        public IObjectSet<Service> ServiceReadOnly{get { return Service; }}
    
        public IObjectSet<ServiceProvider> ServiceProvider
        {
            get { return _serviceProvider  ?? (_serviceProvider = new MockObjectSet<ServiceProvider>()); }
        }
        private IObjectSet<ServiceProvider> _serviceProvider;
    
        public IObjectSet<ServiceProvider> ServiceProviderReadOnly{get { return ServiceProvider; }}
    
        public IObjectSet<ServiceType> ServiceType
        {
            get { return _serviceType  ?? (_serviceType = new MockObjectSet<ServiceType>()); }
        }
        private IObjectSet<ServiceType> _serviceType;
    
        public IObjectSet<ServiceType> ServiceTypeReadOnly{get { return ServiceType; }}
    
        public IObjectSet<ServiceView> ServiceView
        {
            get { return _serviceView  ?? (_serviceView = new MockObjectSet<ServiceView>()); }
        }
        private IObjectSet<ServiceView> _serviceView;
    
        public IObjectSet<ServiceView> ServiceViewReadOnly{get { return ServiceView; }}
    
        public IObjectSet<Site> Site
        {
            get { return _site  ?? (_site = new MockObjectSet<Site>()); }
        }
        private IObjectSet<Site> _site;
    
        public IObjectSet<Site> SiteReadOnly{get { return Site; }}
    
        public IObjectSet<SiteDispatched> SiteDispatched
        {
            get { return _siteDispatched  ?? (_siteDispatched = new MockObjectSet<SiteDispatched>()); }
        }
        private IObjectSet<SiteDispatched> _siteDispatched;
    
        public IObjectSet<SiteDispatched> SiteDispatchedReadOnly{get { return SiteDispatched; }}
    
        public IObjectSet<SiteType> SiteType
        {
            get { return _siteType  ?? (_siteType = new MockObjectSet<SiteType>()); }
        }
        private IObjectSet<SiteType> _siteType;
    
        public IObjectSet<SiteType> SiteTypeReadOnly{get { return SiteType; }}
    
        public IObjectSet<TelematicsSync> TelematicsSync
        {
            get { return _telematicsSync  ?? (_telematicsSync = new MockObjectSet<TelematicsSync>()); }
        }
        private IObjectSet<TelematicsSync> _telematicsSync;
    
        public IObjectSet<TelematicsSync> TelematicsSyncReadOnly{get { return TelematicsSync; }}
    
        public IObjectSet<TermsOfUse> TermsOfUse
        {
            get { return _termsOfUse  ?? (_termsOfUse = new MockObjectSet<TermsOfUse>()); }
        }
        private IObjectSet<TermsOfUse> _termsOfUse;
    
        public IObjectSet<TermsOfUse> TermsOfUseReadOnly{get { return TermsOfUse; }}
    
        public IObjectSet<TopicPriority> TopicPriority
        {
            get { return _topicPriority  ?? (_topicPriority = new MockObjectSet<TopicPriority>()); }
        }
        private IObjectSet<TopicPriority> _topicPriority;
    
        public IObjectSet<TopicPriority> TopicPriorityReadOnly{get { return TopicPriority; }}
    
        public IObjectSet<TopicScalePolicy> TopicScalePolicy
        {
            get { return _topicScalePolicy  ?? (_topicScalePolicy = new MockObjectSet<TopicScalePolicy>()); }
        }
        private IObjectSet<TopicScalePolicy> _topicScalePolicy;
    
        public IObjectSet<TopicScalePolicy> TopicScalePolicyReadOnly{get { return TopicScalePolicy; }}
    
        public IObjectSet<User> User
        {
            get { return _user  ?? (_user = new MockObjectSet<User>()); }
        }
        private IObjectSet<User> _user;
    
        public IObjectSet<User> UserReadOnly{get { return User; }}
    
        public IObjectSet<UserActivation> UserActivation
        {
            get { return _userActivation  ?? (_userActivation = new MockObjectSet<UserActivation>()); }
        }
        private IObjectSet<UserActivation> _userActivation;
    
        public IObjectSet<UserActivation> UserActivationReadOnly{get { return UserActivation; }}
    
        public IObjectSet<UserActivationStatus> UserActivationStatus
        {
            get { return _userActivationStatus  ?? (_userActivationStatus = new MockObjectSet<UserActivationStatus>()); }
        }
        private IObjectSet<UserActivationStatus> _userActivationStatus;
    
        public IObjectSet<UserActivationStatus> UserActivationStatusReadOnly{get { return UserActivationStatus; }}
    
        public IObjectSet<UserNoticeDismissed> UserNoticeDismissed
        {
            get { return _userNoticeDismissed  ?? (_userNoticeDismissed = new MockObjectSet<UserNoticeDismissed>()); }
        }
        private IObjectSet<UserNoticeDismissed> _userNoticeDismissed;
    
        public IObjectSet<UserNoticeDismissed> UserNoticeDismissedReadOnly{get { return UserNoticeDismissed; }}
    
        public IObjectSet<UserPasswordHistory> UserPasswordHistory
        {
            get { return _userPasswordHistory  ?? (_userPasswordHistory = new MockObjectSet<UserPasswordHistory>()); }
        }
        private IObjectSet<UserPasswordHistory> _userPasswordHistory;
    
        public IObjectSet<UserPasswordHistory> UserPasswordHistoryReadOnly{get { return UserPasswordHistory; }}
    
        public IObjectSet<UserPreferences> UserPreferences
        {
            get { return _userPreferences  ?? (_userPreferences = new MockObjectSet<UserPreferences>()); }
        }
        private IObjectSet<UserPreferences> _userPreferences;
    
        public IObjectSet<UserPreferences> UserPreferencesReadOnly{get { return UserPreferences; }}
    
        public IObjectSet<WorkDefinition> WorkDefinition
        {
            get { return _workDefinition  ?? (_workDefinition = new MockObjectSet<WorkDefinition>()); }
        }
        private IObjectSet<WorkDefinition> _workDefinition;
    
        public IObjectSet<WorkDefinition> WorkDefinitionReadOnly{get { return WorkDefinition; }}
    
        public IObjectSet<DeviceTypeServiceType> DeviceTypeServiceType
        {
            get { return _deviceTypeServiceType  ?? (_deviceTypeServiceType = new MockObjectSet<DeviceTypeServiceType>()); }
        }
        private IObjectSet<DeviceTypeServiceType> _deviceTypeServiceType;
    
        public IObjectSet<DeviceTypeServiceType> DeviceTypeServiceTypeReadOnly{get { return DeviceTypeServiceType; }}
    
        public IObjectSet<AssetDeviceHistory> AssetDeviceHistory
        {
            get { return _assetDeviceHistory  ?? (_assetDeviceHistory = new MockObjectSet<AssetDeviceHistory>()); }
        }
        private IObjectSet<AssetDeviceHistory> _assetDeviceHistory;
    
        public IObjectSet<AssetDeviceHistory> AssetDeviceHistoryReadOnly{get { return AssetDeviceHistory; }}
    
        public IObjectSet<CustomerRelationshipType> CustomerRelationshipType
        {
            get { return _customerRelationshipType  ?? (_customerRelationshipType = new MockObjectSet<CustomerRelationshipType>()); }
        }
        private IObjectSet<CustomerRelationshipType> _customerRelationshipType;
    
        public IObjectSet<CustomerRelationshipType> CustomerRelationshipTypeReadOnly{get { return CustomerRelationshipType; }}
    
        public IObjectSet<BSSProvisioningMsg> BSSProvisioningMsg
        {
            get { return _bSSProvisioningMsg  ?? (_bSSProvisioningMsg = new MockObjectSet<BSSProvisioningMsg>()); }
        }
        private IObjectSet<BSSProvisioningMsg> _bSSProvisioningMsg;
    
        public IObjectSet<BSSProvisioningMsg> BSSProvisioningMsgReadOnly{get { return BSSProvisioningMsg; }}
    
        public IObjectSet<BSSResponseEndPoint> BSSResponseEndPoint
        {
            get { return _bSSResponseEndPoint  ?? (_bSSResponseEndPoint = new MockObjectSet<BSSResponseEndPoint>()); }
        }
        private IObjectSet<BSSResponseEndPoint> _bSSResponseEndPoint;
    
        public IObjectSet<BSSResponseEndPoint> BSSResponseEndPointReadOnly{get { return BSSResponseEndPoint; }}
    
        public IObjectSet<BSSResponseMsg> BSSResponseMsg
        {
            get { return _bSSResponseMsg  ?? (_bSSResponseMsg = new MockObjectSet<BSSResponseMsg>()); }
        }
        private IObjectSet<BSSResponseMsg> _bSSResponseMsg;
    
        public IObjectSet<BSSResponseMsg> BSSResponseMsgReadOnly{get { return BSSResponseMsg; }}
    
        public IObjectSet<BSSStatus> BSSStatus
        {
            get { return _bSSStatus  ?? (_bSSStatus = new MockObjectSet<BSSStatus>()); }
        }
        private IObjectSet<BSSStatus> _bSSStatus;
    
        public IObjectSet<BSSStatus> BSSStatusReadOnly{get { return BSSStatus; }}
    
        public IObjectSet<VLAdminErrorMsg> VLAdminErrorMsg
        {
            get { return _vLAdminErrorMsg  ?? (_vLAdminErrorMsg = new MockObjectSet<VLAdminErrorMsg>()); }
        }
        private IObjectSet<VLAdminErrorMsg> _vLAdminErrorMsg;
    
        public IObjectSet<VLAdminErrorMsg> VLAdminErrorMsgReadOnly{get { return VLAdminErrorMsg; }}
    
        public IObjectSet<DeviceICDSeries> DeviceICDSeries
        {
            get { return _deviceICDSeries  ?? (_deviceICDSeries = new MockObjectSet<DeviceICDSeries>()); }
        }
        private IObjectSet<DeviceICDSeries> _deviceICDSeries;
    
        public IObjectSet<DeviceICDSeries> DeviceICDSeriesReadOnly{get { return DeviceICDSeries; }}
    
        public IObjectSet<DevicePartNumber> DevicePartNumber
        {
            get { return _devicePartNumber  ?? (_devicePartNumber = new MockObjectSet<DevicePartNumber>()); }
        }
        private IObjectSet<DevicePartNumber> _devicePartNumber;
    
        public IObjectSet<DevicePartNumber> DevicePartNumberReadOnly{get { return DevicePartNumber; }}
    
        public IObjectSet<AssetSecurityIncident> AssetSecurityIncident
        {
            get { return _assetSecurityIncident  ?? (_assetSecurityIncident = new MockObjectSet<AssetSecurityIncident>()); }
        }
        private IObjectSet<AssetSecurityIncident> _assetSecurityIncident;
    
        public IObjectSet<AssetSecurityIncident> AssetSecurityIncidentReadOnly{get { return AssetSecurityIncident; }}
    
        public IObjectSet<ActiveUserAssetSelection> ActiveUserAssetSelection
        {
            get { return _activeUserAssetSelection  ?? (_activeUserAssetSelection = new MockObjectSet<ActiveUserAssetSelection>()); }
        }
        private IObjectSet<ActiveUserAssetSelection> _activeUserAssetSelection;
    
        public IObjectSet<ActiveUserAssetSelection> ActiveUserAssetSelectionReadOnly{get { return ActiveUserAssetSelection; }}
    
        public IObjectSet<ActiveUser> ActiveUser
        {
            get { return _activeUser  ?? (_activeUser = new MockObjectSet<ActiveUser>()); }
        }
        private IObjectSet<ActiveUser> _activeUser;
    
        public IObjectSet<ActiveUser> ActiveUserReadOnly{get { return ActiveUser; }}
    
        public IObjectSet<vw_DealerOwnedAssets> vw_DealerOwnedAssets
        {
            get { return _vw_DealerOwnedAssets  ?? (_vw_DealerOwnedAssets = new MockObjectSet<vw_DealerOwnedAssets>()); }
        }
        private IObjectSet<vw_DealerOwnedAssets> _vw_DealerOwnedAssets;
    
        public IObjectSet<vw_DealerOwnedAssets> vw_DealerOwnedAssetsReadOnly{get { return vw_DealerOwnedAssets; }}
    
        public IObjectSet<vw_ParentCustomerOwnedAssets> vw_ParentCustomerOwnedAssets
        {
            get { return _vw_ParentCustomerOwnedAssets  ?? (_vw_ParentCustomerOwnedAssets = new MockObjectSet<vw_ParentCustomerOwnedAssets>()); }
        }
        private IObjectSet<vw_ParentCustomerOwnedAssets> _vw_ParentCustomerOwnedAssets;
    
        public IObjectSet<vw_ParentCustomerOwnedAssets> vw_ParentCustomerOwnedAssetsReadOnly{get { return vw_ParentCustomerOwnedAssets; }}
    
        public IObjectSet<CustomerAsset> CustomerAsset
        {
            get { return _customerAsset  ?? (_customerAsset = new MockObjectSet<CustomerAsset>()); }
        }
        private IObjectSet<CustomerAsset> _customerAsset;
    
        public IObjectSet<CustomerAsset> CustomerAssetReadOnly{get { return CustomerAsset; }}
    
        public IObjectSet<vw_AssetWorkingSet> vw_AssetWorkingSet
        {
            get { return _vw_AssetWorkingSet  ?? (_vw_AssetWorkingSet = new MockObjectSet<vw_AssetWorkingSet>()); }
        }
        private IObjectSet<vw_AssetWorkingSet> _vw_AssetWorkingSet;
    
        public IObjectSet<vw_AssetWorkingSet> vw_AssetWorkingSetReadOnly{get { return vw_AssetWorkingSet; }}
    
        public IObjectSet<PMInterval> PMInterval
        {
            get { return _pMInterval  ?? (_pMInterval = new MockObjectSet<PMInterval>()); }
        }
        private IObjectSet<PMInterval> _pMInterval;
    
        public IObjectSet<PMInterval> PMIntervalReadOnly{get { return PMInterval; }}
    
        public IObjectSet<vw_Address> vw_Address
        {
            get { return _vw_Address  ?? (_vw_Address = new MockObjectSet<vw_Address>()); }
        }
        private IObjectSet<vw_Address> _vw_Address;
    
        public IObjectSet<vw_Address> vw_AddressReadOnly{get { return vw_Address; }}
    
        public IObjectSet<AssetBurnRates> AssetBurnRates
        {
            get { return _assetBurnRates  ?? (_assetBurnRates = new MockObjectSet<AssetBurnRates>()); }
        }
        private IObjectSet<AssetBurnRates> _assetBurnRates;
    
        public IObjectSet<AssetBurnRates> AssetBurnRatesReadOnly{get { return AssetBurnRates; }}
    
        public IObjectSet<AssetExpectedRuntimeHoursProjected> AssetExpectedRuntimeHoursProjected
        {
            get { return _assetExpectedRuntimeHoursProjected  ?? (_assetExpectedRuntimeHoursProjected = new MockObjectSet<AssetExpectedRuntimeHoursProjected>()); }
        }
        private IObjectSet<AssetExpectedRuntimeHoursProjected> _assetExpectedRuntimeHoursProjected;
    
        public IObjectSet<AssetExpectedRuntimeHoursProjected> AssetExpectedRuntimeHoursProjectedReadOnly{get { return AssetExpectedRuntimeHoursProjected; }}
    
        public IObjectSet<AssetWorkingDefinition> AssetWorkingDefinition
        {
            get { return _assetWorkingDefinition  ?? (_assetWorkingDefinition = new MockObjectSet<AssetWorkingDefinition>()); }
        }
        private IObjectSet<AssetWorkingDefinition> _assetWorkingDefinition;
    
        public IObjectSet<AssetWorkingDefinition> AssetWorkingDefinitionReadOnly{get { return AssetWorkingDefinition; }}
    
        public IObjectSet<vw_FactAssetCustomerSite> vw_FactAssetCustomerSite
        {
            get { return _vw_FactAssetCustomerSite  ?? (_vw_FactAssetCustomerSite = new MockObjectSet<vw_FactAssetCustomerSite>()); }
        }
        private IObjectSet<vw_FactAssetCustomerSite> _vw_FactAssetCustomerSite;
    
        public IObjectSet<vw_FactAssetCustomerSite> vw_FactAssetCustomerSiteReadOnly{get { return vw_FactAssetCustomerSite; }}
    
        public IObjectSet<TemperatureUnit> TemperatureUnit
        {
            get { return _temperatureUnit  ?? (_temperatureUnit = new MockObjectSet<TemperatureUnit>()); }
        }
        private IObjectSet<TemperatureUnit> _temperatureUnit;
    
        public IObjectSet<TemperatureUnit> TemperatureUnitReadOnly{get { return TemperatureUnit; }}
    
        public IObjectSet<DailyReport> DailyReport
        {
            get { return _dailyReport  ?? (_dailyReport = new MockObjectSet<DailyReport>()); }
        }
        private IObjectSet<DailyReport> _dailyReport;
    
        public IObjectSet<DailyReport> DailyReportReadOnly{get { return DailyReport; }}
    
        public IObjectSet<ModelVariant> ModelVariant
        {
            get { return _modelVariant  ?? (_modelVariant = new MockObjectSet<ModelVariant>()); }
        }
        private IObjectSet<ModelVariant> _modelVariant;
    
        public IObjectSet<ModelVariant> ModelVariantReadOnly{get { return ModelVariant; }}
    
        public IObjectSet<PMIntervalInstance> PMIntervalInstance
        {
            get { return _pMIntervalInstance  ?? (_pMIntervalInstance = new MockObjectSet<PMIntervalInstance>()); }
        }
        private IObjectSet<PMIntervalInstance> _pMIntervalInstance;
    
        public IObjectSet<PMIntervalInstance> PMIntervalInstanceReadOnly{get { return PMIntervalInstance; }}
    
        public IObjectSet<FederatedLogonInfo> FederatedLogonInfo
        {
            get { return _federatedLogonInfo  ?? (_federatedLogonInfo = new MockObjectSet<FederatedLogonInfo>()); }
        }
        private IObjectSet<FederatedLogonInfo> _federatedLogonInfo;
    
        public IObjectSet<FederatedLogonInfo> FederatedLogonInfoReadOnly{get { return FederatedLogonInfo; }}
    
        public IObjectSet<AssetReposessionHistory> AssetReposessionHistory
        {
            get { return _assetReposessionHistory  ?? (_assetReposessionHistory = new MockObjectSet<AssetReposessionHistory>()); }
        }
        private IObjectSet<AssetReposessionHistory> _assetReposessionHistory;
    
        public IObjectSet<AssetReposessionHistory> AssetReposessionHistoryReadOnly{get { return AssetReposessionHistory; }}
    
        public IObjectSet<DevicePersonality> DevicePersonality
        {
            get { return _devicePersonality  ?? (_devicePersonality = new MockObjectSet<DevicePersonality>()); }
        }
        private IObjectSet<DevicePersonality> _devicePersonality;
    
        public IObjectSet<DevicePersonality> DevicePersonalityReadOnly{get { return DevicePersonality; }}
    
        public IObjectSet<MonitoringMachineType> MonitoringMachineType
        {
            get { return _monitoringMachineType  ?? (_monitoringMachineType = new MockObjectSet<MonitoringMachineType>()); }
        }
        private IObjectSet<MonitoringMachineType> _monitoringMachineType;
    
        public IObjectSet<MonitoringMachineType> MonitoringMachineTypeReadOnly{get { return MonitoringMachineType; }}
    
        public IObjectSet<AssetAlias> AssetAlias
        {
            get { return _assetAlias  ?? (_assetAlias = new MockObjectSet<AssetAlias>()); }
        }
        private IObjectSet<AssetAlias> _assetAlias;
    
        public IObjectSet<AssetAlias> AssetAliasReadOnly{get { return AssetAlias; }}
    
        public IObjectSet<EmailPriority> EmailPriority
        {
            get { return _emailPriority  ?? (_emailPriority = new MockObjectSet<EmailPriority>()); }
        }
        private IObjectSet<EmailPriority> _emailPriority;
    
        public IObjectSet<EmailPriority> EmailPriorityReadOnly{get { return EmailPriority; }}
    
        public IObjectSet<EmailQueue> EmailQueue
        {
            get { return _emailQueue  ?? (_emailQueue = new MockObjectSet<EmailQueue>()); }
        }
        private IObjectSet<EmailQueue> _emailQueue;
    
        public IObjectSet<EmailQueue> EmailQueueReadOnly{get { return EmailQueue; }}
    
        public IObjectSet<vw_FaultDescriptions> vw_FaultDescriptions
        {
            get { return _vw_FaultDescriptions  ?? (_vw_FaultDescriptions = new MockObjectSet<vw_FaultDescriptions>()); }
        }
        private IObjectSet<vw_FaultDescriptions> _vw_FaultDescriptions;
    
        public IObjectSet<vw_FaultDescriptions> vw_FaultDescriptionsReadOnly{get { return vw_FaultDescriptions; }}
    
        public IObjectSet<SalesModel> SalesModel
        {
            get { return _salesModel  ?? (_salesModel = new MockObjectSet<SalesModel>()); }
        }
        private IObjectSet<SalesModel> _salesModel;
    
        public IObjectSet<SalesModel> SalesModelReadOnly{get { return SalesModel; }}
    
        public IObjectSet<PressureUnit> PressureUnit
        {
            get { return _pressureUnit  ?? (_pressureUnit = new MockObjectSet<PressureUnit>()); }
        }
        private IObjectSet<PressureUnit> _pressureUnit;
    
        public IObjectSet<PressureUnit> PressureUnitReadOnly{get { return PressureUnit; }}
    
        public IObjectSet<VLSupportAudit> VLSupportAudit
        {
            get { return _vLSupportAudit  ?? (_vLSupportAudit = new MockObjectSet<VLSupportAudit>()); }
        }
        private IObjectSet<VLSupportAudit> _vLSupportAudit;
    
        public IObjectSet<VLSupportAudit> VLSupportAuditReadOnly{get { return VLSupportAudit; }}
    
        public IObjectSet<PMSalesModel> PMSalesModel
        {
            get { return _pMSalesModel  ?? (_pMSalesModel = new MockObjectSet<PMSalesModel>()); }
        }
        private IObjectSet<PMSalesModel> _pMSalesModel;
    
        public IObjectSet<PMSalesModel> PMSalesModelReadOnly{get { return PMSalesModel; }}
    
        public IObjectSet<CustomerStore> CustomerStore
        {
            get { return _customerStore  ?? (_customerStore = new MockObjectSet<CustomerStore>()); }
        }
        private IObjectSet<CustomerStore> _customerStore;
    
        public IObjectSet<CustomerStore> CustomerStoreReadOnly{get { return CustomerStore; }}
    
        public IObjectSet<Store> Store
        {
            get { return _store  ?? (_store = new MockObjectSet<Store>()); }
        }
        private IObjectSet<Store> _store;
    
        public IObjectSet<Store> StoreReadOnly{get { return Store; }}
    
        public IObjectSet<AssetReference> AssetReference
        {
            get { return _assetReference  ?? (_assetReference = new MockObjectSet<AssetReference>()); }
        }
        private IObjectSet<AssetReference> _assetReference;
    
        public IObjectSet<AssetReference> AssetReferenceReadOnly{get { return AssetReference; }}
    
        public IObjectSet<CustomerReference> CustomerReference
        {
            get { return _customerReference  ?? (_customerReference = new MockObjectSet<CustomerReference>()); }
        }
        private IObjectSet<CustomerReference> _customerReference;
    
        public IObjectSet<CustomerReference> CustomerReferenceReadOnly{get { return CustomerReference; }}
    
        public IObjectSet<DeviceReference> DeviceReference
        {
            get { return _deviceReference  ?? (_deviceReference = new MockObjectSet<DeviceReference>()); }
        }
        private IObjectSet<DeviceReference> _deviceReference;
    
        public IObjectSet<DeviceReference> DeviceReferenceReadOnly{get { return DeviceReference; }}
    
        public IObjectSet<ServiceReference> ServiceReference
        {
            get { return _serviceReference  ?? (_serviceReference = new MockObjectSet<ServiceReference>()); }
        }
        private IObjectSet<ServiceReference> _serviceReference;
    
        public IObjectSet<ServiceReference> ServiceReferenceReadOnly{get { return ServiceReference; }}
    
        public IObjectSet<AppFeatureSet> AppFeatureSet
        {
            get { return _appFeatureSet  ?? (_appFeatureSet = new MockObjectSet<AppFeatureSet>()); }
        }
        private IObjectSet<AppFeatureSet> _appFeatureSet;
    
        public IObjectSet<AppFeatureSet> AppFeatureSetReadOnly{get { return AppFeatureSet; }}
    
        public IObjectSet<AppFeature> AppFeature
        {
            get { return _appFeature  ?? (_appFeature = new MockObjectSet<AppFeature>()); }
        }
        private IObjectSet<AppFeature> _appFeature;
    
        public IObjectSet<AppFeature> AppFeatureReadOnly{get { return AppFeature; }}
    
        public IObjectSet<ServiceTypeAppFeature> ServiceTypeAppFeature
        {
            get { return _serviceTypeAppFeature  ?? (_serviceTypeAppFeature = new MockObjectSet<ServiceTypeAppFeature>()); }
        }
        private IObjectSet<ServiceTypeAppFeature> _serviceTypeAppFeature;
    
        public IObjectSet<ServiceTypeAppFeature> ServiceTypeAppFeatureReadOnly{get { return ServiceTypeAppFeature; }}
    
        public IObjectSet<vw_Asset_AppFeature> vw_Asset_AppFeature
        {
            get { return _vw_Asset_AppFeature  ?? (_vw_Asset_AppFeature = new MockObjectSet<vw_Asset_AppFeature>()); }
        }
        private IObjectSet<vw_Asset_AppFeature> _vw_Asset_AppFeature;
    
        public IObjectSet<vw_Asset_AppFeature> vw_Asset_AppFeatureReadOnly{get { return vw_Asset_AppFeature; }}
    
        public IObjectSet<TimeZoneStandardAbbreviation> TimeZoneStandardAbbreviation
        {
            get { return _timeZoneStandardAbbreviation  ?? (_timeZoneStandardAbbreviation = new MockObjectSet<TimeZoneStandardAbbreviation>()); }
        }
        private IObjectSet<TimeZoneStandardAbbreviation> _timeZoneStandardAbbreviation;
    
        public IObjectSet<TimeZoneStandardAbbreviation> TimeZoneStandardAbbreviationReadOnly{get { return TimeZoneStandardAbbreviation; }}
    
        public IObjectSet<ProjectType> ProjectType
        {
            get { return _projectType  ?? (_projectType = new MockObjectSet<ProjectType>()); }
        }
        private IObjectSet<ProjectType> _projectType;
    
        public IObjectSet<ProjectType> ProjectTypeReadOnly{get { return ProjectType; }}
    
        public IObjectSet<Feature> Feature
        {
            get { return _feature  ?? (_feature = new MockObjectSet<Feature>()); }
        }
        private IObjectSet<Feature> _feature;
    
        public IObjectSet<Feature> FeatureReadOnly{get { return Feature; }}
    
        public IObjectSet<FeatureType> FeatureType
        {
            get { return _featureType  ?? (_featureType = new MockObjectSet<FeatureType>()); }
        }
        private IObjectSet<FeatureType> _featureType;
    
        public IObjectSet<FeatureType> FeatureTypeReadOnly{get { return FeatureType; }}
    
        public IObjectSet<FeatureURLTemplate> FeatureURLTemplate
        {
            get { return _featureURLTemplate  ?? (_featureURLTemplate = new MockObjectSet<FeatureURLTemplate>()); }
        }
        private IObjectSet<FeatureURLTemplate> _featureURLTemplate;
    
        public IObjectSet<FeatureURLTemplate> FeatureURLTemplateReadOnly{get { return FeatureURLTemplate; }}
    
        public IObjectSet<TDMGClaimedDevices> TDMGClaimedDevices
        {
            get { return _tDMGClaimedDevices  ?? (_tDMGClaimedDevices = new MockObjectSet<TDMGClaimedDevices>()); }
        }
        private IObjectSet<TDMGClaimedDevices> _tDMGClaimedDevices;
    
        public IObjectSet<TDMGClaimedDevices> TDMGClaimedDevicesReadOnly{get { return TDMGClaimedDevices; }}
    
        public IObjectSet<vw_CustomerIDsWithMaxAssetsForAirLift> vw_CustomerIDsWithMaxAssetsForAirLift
        {
            get { return _vw_CustomerIDsWithMaxAssetsForAirLift  ?? (_vw_CustomerIDsWithMaxAssetsForAirLift = new MockObjectSet<vw_CustomerIDsWithMaxAssetsForAirLift>()); }
        }
        private IObjectSet<vw_CustomerIDsWithMaxAssetsForAirLift> _vw_CustomerIDsWithMaxAssetsForAirLift;
    
        public IObjectSet<vw_CustomerIDsWithMaxAssetsForAirLift> vw_CustomerIDsWithMaxAssetsForAirLiftReadOnly{get { return vw_CustomerIDsWithMaxAssetsForAirLift; }}
    
        public IObjectSet<CGSyncBookMark> CGSyncBookMark
        {
            get { return _cGSyncBookMark  ?? (_cGSyncBookMark = new MockObjectSet<CGSyncBookMark>()); }
        }
        private IObjectSet<CGSyncBookMark> _cGSyncBookMark;
    
        public IObjectSet<CGSyncBookMark> CGSyncBookMarkReadOnly{get { return CGSyncBookMark; }}
    
        public IObjectSet<MTSBIT> MTSBIT
        {
            get { return _mTSBIT  ?? (_mTSBIT = new MockObjectSet<MTSBIT>()); }
        }
        private IObjectSet<MTSBIT> _mTSBIT;
    
        public IObjectSet<MTSBIT> MTSBITReadOnly{get { return MTSBIT; }}
    
        public IObjectSet<MTSDevice> MTSDevice
        {
            get { return _mTSDevice  ?? (_mTSDevice = new MockObjectSet<MTSDevice>()); }
        }
        private IObjectSet<MTSDevice> _mTSDevice;
    
        public IObjectSet<MTSDevice> MTSDeviceReadOnly{get { return MTSDevice; }}
    
        public IObjectSet<MTSMessage> MTSMessage
        {
            get { return _mTSMessage  ?? (_mTSMessage = new MockObjectSet<MTSMessage>()); }
        }
        private IObjectSet<MTSMessage> _mTSMessage;
    
        public IObjectSet<MTSMessage> MTSMessageReadOnly{get { return MTSMessage; }}
    
        public IObjectSet<MTSOut> MTSOut
        {
            get { return _mTSOut  ?? (_mTSOut = new MockObjectSet<MTSOut>()); }
        }
        private IObjectSet<MTSOut> _mTSOut;
    
        public IObjectSet<MTSOut> MTSOutReadOnly{get { return MTSOut; }}
    
        public IObjectSet<PLDevice> PLDevice
        {
            get { return _pLDevice  ?? (_pLDevice = new MockObjectSet<PLDevice>()); }
        }
        private IObjectSet<PLDevice> _pLDevice;
    
        public IObjectSet<PLDevice> PLDeviceReadOnly{get { return PLDevice; }}
    
        public IObjectSet<PLOut> PLOut
        {
            get { return _pLOut  ?? (_pLOut = new MockObjectSet<PLOut>()); }
        }
        private IObjectSet<PLOut> _pLOut;
    
        public IObjectSet<PLOut> PLOutReadOnly{get { return PLOut; }}
    
        public IObjectSet<RuntimeCalibration> RuntimeCalibration
        {
            get { return _runtimeCalibration  ?? (_runtimeCalibration = new MockObjectSet<RuntimeCalibration>()); }
        }
        private IObjectSet<RuntimeCalibration> _runtimeCalibration;
    
        public IObjectSet<RuntimeCalibration> RuntimeCalibrationReadOnly{get { return RuntimeCalibration; }}
    
        public IObjectSet<Sequence> Sequence
        {
            get { return _sequence  ?? (_sequence = new MockObjectSet<Sequence>()); }
        }
        private IObjectSet<Sequence> _sequence;
    
        public IObjectSet<Sequence> SequenceReadOnly{get { return Sequence; }}
    
        public IObjectSet<TTDevice> TTDevice
        {
            get { return _tTDevice  ?? (_tTDevice = new MockObjectSet<TTDevice>()); }
        }
        private IObjectSet<TTDevice> _tTDevice;
    
        public IObjectSet<TTDevice> TTDeviceReadOnly{get { return TTDevice; }}
    
        public IObjectSet<TTOut> TTOut
        {
            get { return _tTOut  ?? (_tTOut = new MockObjectSet<TTOut>()); }
        }
        private IObjectSet<TTOut> _tTOut;
    
        public IObjectSet<TTOut> TTOutReadOnly{get { return TTOut; }}
    
        public IObjectSet<UserFeatureAudit> UserFeatureAudit
        {
            get { return _userFeatureAudit  ?? (_userFeatureAudit = new MockObjectSet<UserFeatureAudit>()); }
        }
        private IObjectSet<UserFeatureAudit> _userFeatureAudit;
    
        public IObjectSet<UserFeatureAudit> UserFeatureAuditReadOnly{get { return UserFeatureAudit; }}
    
        public IObjectSet<vw_Asset_AssetFeature_bckup_20140112> vw_Asset_AssetFeature_bckup_20140112
        {
            get { return _vw_Asset_AssetFeature_bckup_20140112  ?? (_vw_Asset_AssetFeature_bckup_20140112 = new MockObjectSet<vw_Asset_AssetFeature_bckup_20140112>()); }
        }
        private IObjectSet<vw_Asset_AssetFeature_bckup_20140112> _vw_Asset_AssetFeature_bckup_20140112;
    
        public IObjectSet<vw_Asset_AssetFeature_bckup_20140112> vw_Asset_AssetFeature_bckup_20140112ReadOnly{get { return vw_Asset_AssetFeature_bckup_20140112; }}
    
        public IObjectSet<Customer> Customer
        {
            get { return _customer  ?? (_customer = new MockObjectSet<Customer>()); }
        }
        private IObjectSet<Customer> _customer;
    
        public IObjectSet<Customer> CustomerReadOnly{get { return Customer; }}
    
        public IObjectSet<CustomerRelationshipAudit> CustomerRelationshipAudit
        {
            get { return _customerRelationshipAudit  ?? (_customerRelationshipAudit = new MockObjectSet<CustomerRelationshipAudit>()); }
        }
        private IObjectSet<CustomerRelationshipAudit> _customerRelationshipAudit;
    
        public IObjectSet<CustomerRelationshipAudit> CustomerRelationshipAuditReadOnly{get { return CustomerRelationshipAudit; }}
    
        public IObjectSet<CustomerRelationshipExport> CustomerRelationshipExport
        {
            get { return _customerRelationshipExport  ?? (_customerRelationshipExport = new MockObjectSet<CustomerRelationshipExport>()); }
        }
        private IObjectSet<CustomerRelationshipExport> _customerRelationshipExport;
    
        public IObjectSet<CustomerRelationshipExport> CustomerRelationshipExportReadOnly{get { return CustomerRelationshipExport; }}
    
        public IObjectSet<AppFeatureSetAppFeature> AppFeatureSetAppFeature
        {
            get { return _appFeatureSetAppFeature  ?? (_appFeatureSetAppFeature = new MockObjectSet<AppFeatureSetAppFeature>()); }
        }
        private IObjectSet<AppFeatureSetAppFeature> _appFeatureSetAppFeature;
    
        public IObjectSet<AppFeatureSetAppFeature> AppFeatureSetAppFeatureReadOnly{get { return AppFeatureSetAppFeature; }}
    
        public IObjectSet<AssetMonitoring> AssetMonitoring
        {
            get { return _assetMonitoring  ?? (_assetMonitoring = new MockObjectSet<AssetMonitoring>()); }
        }
        private IObjectSet<AssetMonitoring> _assetMonitoring;
    
        public IObjectSet<AssetMonitoring> AssetMonitoringReadOnly{get { return AssetMonitoring; }}
    
        public IObjectSet<PMTrackingType> PMTrackingType
        {
            get { return _pMTrackingType  ?? (_pMTrackingType = new MockObjectSet<PMTrackingType>()); }
        }
        private IObjectSet<PMTrackingType> _pMTrackingType;
    
        public IObjectSet<PMTrackingType> PMTrackingTypeReadOnly{get { return PMTrackingType; }}
    
        public IObjectSet<ServiceTypeMap> ServiceTypeMap
        {
            get { return _serviceTypeMap  ?? (_serviceTypeMap = new MockObjectSet<ServiceTypeMap>()); }
        }
        private IObjectSet<ServiceTypeMap> _serviceTypeMap;
    
        public IObjectSet<ServiceTypeMap> ServiceTypeMapReadOnly{get { return ServiceTypeMap; }}
    
        public IObjectSet<SharedView> SharedView
        {
            get { return _sharedView  ?? (_sharedView = new MockObjectSet<SharedView>()); }
        }
        private IObjectSet<SharedView> _sharedView;
    
        public IObjectSet<SharedView> SharedViewReadOnly{get { return SharedView; }}
    
        public IObjectSet<UserFeature> UserFeature
        {
            get { return _userFeature  ?? (_userFeature = new MockObjectSet<UserFeature>()); }
        }
        private IObjectSet<UserFeature> _userFeature;
    
        public IObjectSet<UserFeature> UserFeatureReadOnly{get { return UserFeature; }}
    
        public IObjectSet<UnitType> UnitType
        {
            get { return _unitType  ?? (_unitType = new MockObjectSet<UnitType>()); }
        }
        private IObjectSet<UnitType> _unitType;
    
        public IObjectSet<UnitType> UnitTypeReadOnly{get { return UnitType; }}
    
    }
}
