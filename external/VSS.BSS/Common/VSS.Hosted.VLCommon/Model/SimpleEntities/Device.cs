//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace VSS.Hosted.VLCommon
{
    public partial class Device
    {
        #region Primitive Properties
    
        public virtual long ID
        {
            get;
            set;
        }
    
        public virtual string IBKey
        {
            get;
            set;
        }
    
        public virtual string OwnerBSSID
        {
            get;
            set;
        }
    
        public virtual string GpsDeviceID
        {
            get;
            set;
        }
    
        public virtual int fk_DeviceTypeID
        {
            get;
            set;
        }
    
        public virtual System.DateTime UpdateUTC
        {
            get;
            set;
        }
    
        public virtual int fk_DeviceStateID
        {
            get;
            set;
        }
    
        public virtual string DeviceDetailsXML
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DeregisteredUTC
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> DeviceUID
        {
            get;
            set;
        }
    
        public virtual Nullable<int> OldestPendingKeyDate
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Asset> Asset
        {
            get
            {
                if (_asset == null)
                {
                    var newCollection = new FixupCollection<Asset>();
                    newCollection.CollectionChanged += FixupAsset;
                    _asset = newCollection;
                }
                return _asset;
            }
            set
            {
                if (!ReferenceEquals(_asset, value))
                {
                    var previousValue = _asset as FixupCollection<Asset>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAsset;
                    }
                    _asset = value;
                    var newValue = value as FixupCollection<Asset>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAsset;
                    }
                }
            }
        }
        private ICollection<Asset> _asset;
    
        public virtual ICollection<CrosscheckConfig> CrosscheckConfig
        {
            get
            {
                if (_crosscheckConfig == null)
                {
                    var newCollection = new FixupCollection<CrosscheckConfig>();
                    newCollection.CollectionChanged += FixupCrosscheckConfig;
                    _crosscheckConfig = newCollection;
                }
                return _crosscheckConfig;
            }
            set
            {
                if (!ReferenceEquals(_crosscheckConfig, value))
                {
                    var previousValue = _crosscheckConfig as FixupCollection<CrosscheckConfig>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCrosscheckConfig;
                    }
                    _crosscheckConfig = value;
                    var newValue = value as FixupCollection<CrosscheckConfig>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCrosscheckConfig;
                    }
                }
            }
        }
        private ICollection<CrosscheckConfig> _crosscheckConfig;
    
        public virtual ICollection<DeviceFirmwareVersion> DeviceFirmwareVersion
        {
            get
            {
                if (_deviceFirmwareVersion == null)
                {
                    var newCollection = new FixupCollection<DeviceFirmwareVersion>();
                    newCollection.CollectionChanged += FixupDeviceFirmwareVersion;
                    _deviceFirmwareVersion = newCollection;
                }
                return _deviceFirmwareVersion;
            }
            set
            {
                if (!ReferenceEquals(_deviceFirmwareVersion, value))
                {
                    var previousValue = _deviceFirmwareVersion as FixupCollection<DeviceFirmwareVersion>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDeviceFirmwareVersion;
                    }
                    _deviceFirmwareVersion = value;
                    var newValue = value as FixupCollection<DeviceFirmwareVersion>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDeviceFirmwareVersion;
                    }
                }
            }
        }
        private ICollection<DeviceFirmwareVersion> _deviceFirmwareVersion;
    
        public virtual ICollection<ECMInfo> ECMInfo
        {
            get
            {
                if (_eCMInfo == null)
                {
                    var newCollection = new FixupCollection<ECMInfo>();
                    newCollection.CollectionChanged += FixupECMInfo;
                    _eCMInfo = newCollection;
                }
                return _eCMInfo;
            }
            set
            {
                if (!ReferenceEquals(_eCMInfo, value))
                {
                    var previousValue = _eCMInfo as FixupCollection<ECMInfo>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupECMInfo;
                    }
                    _eCMInfo = value;
                    var newValue = value as FixupCollection<ECMInfo>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupECMInfo;
                    }
                }
            }
        }
        private ICollection<ECMInfo> _eCMInfo;
    
        public virtual ICollection<Service> Service
        {
            get
            {
                if (_service == null)
                {
                    var newCollection = new FixupCollection<Service>();
                    newCollection.CollectionChanged += FixupService;
                    _service = newCollection;
                }
                return _service;
            }
            set
            {
                if (!ReferenceEquals(_service, value))
                {
                    var previousValue = _service as FixupCollection<Service>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupService;
                    }
                    _service = value;
                    var newValue = value as FixupCollection<Service>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupService;
                    }
                }
            }
        }
        private ICollection<Service> _service;

        #endregion

        #region Association Fixup
    
        private void FixupAsset(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Asset item in e.NewItems)
                {
                    item.Device = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Asset item in e.OldItems)
                {
                    if (ReferenceEquals(item.Device, this))
                    {
                        item.Device = null;
                    }
                }
            }
        }
    
        private void FixupCrosscheckConfig(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CrosscheckConfig item in e.NewItems)
                {
                    item.Device = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CrosscheckConfig item in e.OldItems)
                {
                    if (ReferenceEquals(item.Device, this))
                    {
                        item.Device = null;
                    }
                }
            }
        }
    
        private void FixupDeviceFirmwareVersion(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DeviceFirmwareVersion item in e.NewItems)
                {
                    item.fk_DeviceID = ID;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DeviceFirmwareVersion item in e.OldItems)
                {
                }
            }
        }
    
        private void FixupECMInfo(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ECMInfo item in e.NewItems)
                {
                    item.Device = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ECMInfo item in e.OldItems)
                {
                    if (ReferenceEquals(item.Device, this))
                    {
                        item.Device = null;
                    }
                }
            }
        }
    
        private void FixupService(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Service item in e.NewItems)
                {
                    item.Device = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Service item in e.OldItems)
                {
                    if (ReferenceEquals(item.Device, this))
                    {
                        item.Device = null;
                    }
                }
            }
        }

        #endregion

    }
}
