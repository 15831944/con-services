//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace VSS.Hosted.VLCommon
{
    public partial class Customer
    {
        #region Primitive Properties
    
        public virtual long ID
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual System.DateTime UpdateUTC
        {
            get;
            set;
        }
    
        public virtual int fk_CustomerTypeID
        {
            get { return _fk_CustomerTypeID; }
            set
            {
                if (_fk_CustomerTypeID != value)
                {
                    if (CustomerType != null && CustomerType.ID != value)
                    {
                        CustomerType = null;
                    }
                    _fk_CustomerTypeID = value;
                }
            }
        }
        private int _fk_CustomerTypeID;
    
        public virtual string BSSID
        {
            get;
            set;
        }
    
        public virtual int fk_DealerNetworkID
        {
            get { return _fk_DealerNetworkID; }
            set
            {
                if (_fk_DealerNetworkID != value)
                {
                    if (DealerNetwork != null && DealerNetwork.ID != value)
                    {
                        DealerNetwork = null;
                    }
                    _fk_DealerNetworkID = value;
                }
            }
        }
        private int _fk_DealerNetworkID;
    
        public virtual string NetworkDealerCode
        {
            get;
            set;
        }
    
        public virtual string NetworkCustomerCode
        {
            get;
            set;
        }
    
        public virtual string DealerAccountCode
        {
            get;
            set;
        }
    
        public virtual bool IsActivated
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> CustomerUID
        {
            get;
            set;
        }
    
        public virtual string MapAPIProvider
        {
            get;
            set;
        }
    
        public virtual string TCCOrgId
        {
            get;
            set;
        }
    
        public virtual string PrimaryEmailContact
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<AssetAlias> AssetAlias
        {
            get
            {
                if (_assetAlias == null)
                {
                    var newCollection = new FixupCollection<AssetAlias>();
                    newCollection.CollectionChanged += FixupAssetAlias;
                    _assetAlias = newCollection;
                }
                return _assetAlias;
            }
            set
            {
                if (!ReferenceEquals(_assetAlias, value))
                {
                    var previousValue = _assetAlias as FixupCollection<AssetAlias>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAssetAlias;
                    }
                    _assetAlias = value;
                    var newValue = value as FixupCollection<AssetAlias>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAssetAlias;
                    }
                }
            }
        }
        private ICollection<AssetAlias> _assetAlias;
    
        public virtual ICollection<Contact> Contact
        {
            get
            {
                if (_contact == null)
                {
                    var newCollection = new FixupCollection<Contact>();
                    newCollection.CollectionChanged += FixupContact;
                    _contact = newCollection;
                }
                return _contact;
            }
            set
            {
                if (!ReferenceEquals(_contact, value))
                {
                    var previousValue = _contact as FixupCollection<Contact>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupContact;
                    }
                    _contact = value;
                    var newValue = value as FixupCollection<Contact>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupContact;
                    }
                }
            }
        }
        private ICollection<Contact> _contact;
    
        public virtual CustomerType CustomerType
        {
            get { return _customerType; }
            set
            {
                if (!ReferenceEquals(_customerType, value))
                {
                    var previousValue = _customerType;
                    _customerType = value;
                    FixupCustomerType(previousValue);
                }
            }
        }
        private CustomerType _customerType;
    
        public virtual DealerNetwork DealerNetwork
        {
            get { return _dealerNetwork; }
            set
            {
                if (!ReferenceEquals(_dealerNetwork, value))
                {
                    var previousValue = _dealerNetwork;
                    _dealerNetwork = value;
                    FixupDealerNetwork(previousValue);
                }
            }
        }
        private DealerNetwork _dealerNetwork;
    
        public virtual ICollection<CustomerAsset> CustomerAsset
        {
            get
            {
                if (_customerAsset == null)
                {
                    var newCollection = new FixupCollection<CustomerAsset>();
                    newCollection.CollectionChanged += FixupCustomerAsset;
                    _customerAsset = newCollection;
                }
                return _customerAsset;
            }
            set
            {
                if (!ReferenceEquals(_customerAsset, value))
                {
                    var previousValue = _customerAsset as FixupCollection<CustomerAsset>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerAsset;
                    }
                    _customerAsset = value;
                    var newValue = value as FixupCollection<CustomerAsset>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerAsset;
                    }
                }
            }
        }
        private ICollection<CustomerAsset> _customerAsset;
    
        public virtual ICollection<CustomerRelationship> CustomerRelationship
        {
            get
            {
                if (_customerRelationship == null)
                {
                    var newCollection = new FixupCollection<CustomerRelationship>();
                    newCollection.CollectionChanged += FixupCustomerRelationship;
                    _customerRelationship = newCollection;
                }
                return _customerRelationship;
            }
            set
            {
                if (!ReferenceEquals(_customerRelationship, value))
                {
                    var previousValue = _customerRelationship as FixupCollection<CustomerRelationship>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerRelationship;
                    }
                    _customerRelationship = value;
                    var newValue = value as FixupCollection<CustomerRelationship>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerRelationship;
                    }
                }
            }
        }
        private ICollection<CustomerRelationship> _customerRelationship;
    
        public virtual ICollection<CustomerRelationship> CustomerRelationship1
        {
            get
            {
                if (_customerRelationship1 == null)
                {
                    var newCollection = new FixupCollection<CustomerRelationship>();
                    newCollection.CollectionChanged += FixupCustomerRelationship1;
                    _customerRelationship1 = newCollection;
                }
                return _customerRelationship1;
            }
            set
            {
                if (!ReferenceEquals(_customerRelationship1, value))
                {
                    var previousValue = _customerRelationship1 as FixupCollection<CustomerRelationship>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerRelationship1;
                    }
                    _customerRelationship1 = value;
                    var newValue = value as FixupCollection<CustomerRelationship>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerRelationship1;
                    }
                }
            }
        }
        private ICollection<CustomerRelationship> _customerRelationship1;
    
        public virtual ICollection<CustomerRelationshipAudit> CustomerRelationshipAudit
        {
            get
            {
                if (_customerRelationshipAudit == null)
                {
                    var newCollection = new FixupCollection<CustomerRelationshipAudit>();
                    newCollection.CollectionChanged += FixupCustomerRelationshipAudit;
                    _customerRelationshipAudit = newCollection;
                }
                return _customerRelationshipAudit;
            }
            set
            {
                if (!ReferenceEquals(_customerRelationshipAudit, value))
                {
                    var previousValue = _customerRelationshipAudit as FixupCollection<CustomerRelationshipAudit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerRelationshipAudit;
                    }
                    _customerRelationshipAudit = value;
                    var newValue = value as FixupCollection<CustomerRelationshipAudit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerRelationshipAudit;
                    }
                }
            }
        }
        private ICollection<CustomerRelationshipAudit> _customerRelationshipAudit;
    
        public virtual ICollection<CustomerRelationshipAudit> CustomerRelationshipAudit1
        {
            get
            {
                if (_customerRelationshipAudit1 == null)
                {
                    var newCollection = new FixupCollection<CustomerRelationshipAudit>();
                    newCollection.CollectionChanged += FixupCustomerRelationshipAudit1;
                    _customerRelationshipAudit1 = newCollection;
                }
                return _customerRelationshipAudit1;
            }
            set
            {
                if (!ReferenceEquals(_customerRelationshipAudit1, value))
                {
                    var previousValue = _customerRelationshipAudit1 as FixupCollection<CustomerRelationshipAudit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerRelationshipAudit1;
                    }
                    _customerRelationshipAudit1 = value;
                    var newValue = value as FixupCollection<CustomerRelationshipAudit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerRelationshipAudit1;
                    }
                }
            }
        }
        private ICollection<CustomerRelationshipAudit> _customerRelationshipAudit1;
    
        public virtual ICollection<CustomerStore> CustomerStore
        {
            get
            {
                if (_customerStore == null)
                {
                    var newCollection = new FixupCollection<CustomerStore>();
                    newCollection.CollectionChanged += FixupCustomerStore;
                    _customerStore = newCollection;
                }
                return _customerStore;
            }
            set
            {
                if (!ReferenceEquals(_customerStore, value))
                {
                    var previousValue = _customerStore as FixupCollection<CustomerStore>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerStore;
                    }
                    _customerStore = value;
                    var newValue = value as FixupCollection<CustomerStore>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerStore;
                    }
                }
            }
        }
        private ICollection<CustomerStore> _customerStore;
    
        public virtual ICollection<Project> Project
        {
            get
            {
                if (_project == null)
                {
                    var newCollection = new FixupCollection<Project>();
                    newCollection.CollectionChanged += FixupProject;
                    _project = newCollection;
                }
                return _project;
            }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project as FixupCollection<Project>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProject;
                    }
                    _project = value;
                    var newValue = value as FixupCollection<Project>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProject;
                    }
                }
            }
        }
        private ICollection<Project> _project;
    
        public virtual ICollection<ServiceView> ServiceView
        {
            get
            {
                if (_serviceView == null)
                {
                    var newCollection = new FixupCollection<ServiceView>();
                    newCollection.CollectionChanged += FixupServiceView;
                    _serviceView = newCollection;
                }
                return _serviceView;
            }
            set
            {
                if (!ReferenceEquals(_serviceView, value))
                {
                    var previousValue = _serviceView as FixupCollection<ServiceView>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupServiceView;
                    }
                    _serviceView = value;
                    var newValue = value as FixupCollection<ServiceView>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupServiceView;
                    }
                }
            }
        }
        private ICollection<ServiceView> _serviceView;
    
        public virtual ICollection<Site> Site
        {
            get
            {
                if (_site == null)
                {
                    var newCollection = new FixupCollection<Site>();
                    newCollection.CollectionChanged += FixupSite;
                    _site = newCollection;
                }
                return _site;
            }
            set
            {
                if (!ReferenceEquals(_site, value))
                {
                    var previousValue = _site as FixupCollection<Site>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSite;
                    }
                    _site = value;
                    var newValue = value as FixupCollection<Site>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSite;
                    }
                }
            }
        }
        private ICollection<Site> _site;
    
        public virtual ICollection<User> User
        {
            get
            {
                if (_user == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUser;
                    _user = newCollection;
                }
                return _user;
            }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUser;
                    }
                    _user = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUser;
                    }
                }
            }
        }
        private ICollection<User> _user;
    
        public virtual ICollection<SharedView> SharedView
        {
            get
            {
                if (_sharedView == null)
                {
                    var newCollection = new FixupCollection<SharedView>();
                    newCollection.CollectionChanged += FixupSharedView;
                    _sharedView = newCollection;
                }
                return _sharedView;
            }
            set
            {
                if (!ReferenceEquals(_sharedView, value))
                {
                    var previousValue = _sharedView as FixupCollection<SharedView>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSharedView;
                    }
                    _sharedView = value;
                    var newValue = value as FixupCollection<SharedView>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSharedView;
                    }
                }
            }
        }
        private ICollection<SharedView> _sharedView;

        #endregion

        #region Association Fixup
    
        private void FixupCustomerType(CustomerType previousValue)
        {
            if (previousValue != null && previousValue.Customer.Contains(this))
            {
                previousValue.Customer.Remove(this);
            }
    
            if (CustomerType != null)
            {
                if (!CustomerType.Customer.Contains(this))
                {
                    CustomerType.Customer.Add(this);
                }
                if (fk_CustomerTypeID != CustomerType.ID)
                {
                    fk_CustomerTypeID = CustomerType.ID;
                }
            }
        }
    
        private void FixupDealerNetwork(DealerNetwork previousValue)
        {
            if (previousValue != null && previousValue.Customer.Contains(this))
            {
                previousValue.Customer.Remove(this);
            }
    
            if (DealerNetwork != null)
            {
                if (!DealerNetwork.Customer.Contains(this))
                {
                    DealerNetwork.Customer.Add(this);
                }
                if (fk_DealerNetworkID != DealerNetwork.ID)
                {
                    fk_DealerNetworkID = DealerNetwork.ID;
                }
            }
        }
    
        private void FixupAssetAlias(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AssetAlias item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AssetAlias item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupContact(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Contact item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Contact item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerAsset(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerAsset item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerAsset item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerRelationship(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerRelationship item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerRelationship item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerRelationship1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerRelationship item in e.NewItems)
                {
                    item.Customer1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerRelationship item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer1, this))
                    {
                        item.Customer1 = null;
                    }
                }
            }
        }
    
        private void FixupCustomerRelationshipAudit(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerRelationshipAudit item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerRelationshipAudit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerRelationshipAudit1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerRelationshipAudit item in e.NewItems)
                {
                    item.Customer1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerRelationshipAudit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer1, this))
                    {
                        item.Customer1 = null;
                    }
                }
            }
        }
    
        private void FixupCustomerStore(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerStore item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerStore item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupProject(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Project item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Project item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupServiceView(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ServiceView item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ServiceView item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupSite(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Site item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Site item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupUser(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupSharedView(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SharedView item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SharedView item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }

        #endregion

    }
}
