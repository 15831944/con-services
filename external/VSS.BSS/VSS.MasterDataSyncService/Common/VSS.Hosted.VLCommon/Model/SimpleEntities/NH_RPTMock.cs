//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using VSS.Hosted.VLCommon.NH_RPTMockObjectSet;
using System.Reflection;

namespace VSS.Hosted.VLCommon
{
    /// <summary>
    /// The concrete mock context object that implements the context's interface.
    /// Provide an instance of this mock context class to client logic when testing, 
    /// instead of providing a functional context object.
    /// </summary>
    public partial class NH_RPTMock : INH_RPT
    {
    
        private bool _readOnlyCurrent = false;
        private Stack<bool> _readOnlyStack = new Stack<bool>();
    		public System.Data.Common.DbConnection Connection { get {return null;} }
        public int SaveChanges() 
        { 
          if (_readOnlyCurrent == true)
            throw new System.NotSupportedException("This ObjectContext cannot be used to change data on the database");
          return 1; 
        }
    
        public void SetReadOnlyness(bool readOnly)
        {
          _readOnlyStack.Push(_readOnlyCurrent);
          _readOnlyCurrent = readOnly;
        }
    
        public NH_RPTMock()
        {
        }
    
    	  ~NH_RPTMock()
        {
          Dispose();
        }
    
    
        #region IDisposable
    	  public void Dispose()
        {
            if (_readOnlyStack.Count > 0)
            {
              _readOnlyCurrent = _readOnlyStack.Pop();
            }
        }
        #endregion
    
        public IObjectSet<AssetDiscreteIOState> AssetDiscreteIOState
        {
            get { return _assetDiscreteIOState  ?? (_assetDiscreteIOState = new MockObjectSet<AssetDiscreteIOState>()); }
        }
        private IObjectSet<AssetDiscreteIOState> _assetDiscreteIOState;
    
        public IObjectSet<AssetDiscreteIOState> AssetDiscreteIOStateReadOnly{get { return AssetDiscreteIOState; }}
    
        public IObjectSet<DimAssetWorkingState> DimAssetWorkingState
        {
            get { return _dimAssetWorkingState  ?? (_dimAssetWorkingState = new MockObjectSet<DimAssetWorkingState>()); }
        }
        private IObjectSet<DimAssetWorkingState> _dimAssetWorkingState;
    
        public IObjectSet<DimAssetWorkingState> DimAssetWorkingStateReadOnly{get { return DimAssetWorkingState; }}
    
        public IObjectSet<DimConfiguration> DimConfiguration
        {
            get { return _dimConfiguration  ?? (_dimConfiguration = new MockObjectSet<DimConfiguration>()); }
        }
        private IObjectSet<DimConfiguration> _dimConfiguration;
    
        public IObjectSet<DimConfiguration> DimConfigurationReadOnly{get { return DimConfiguration; }}
    
        public IObjectSet<DimDatalink> DimDatalink
        {
            get { return _dimDatalink  ?? (_dimDatalink = new MockObjectSet<DimDatalink>()); }
        }
        private IObjectSet<DimDatalink> _dimDatalink;
    
        public IObjectSet<DimDatalink> DimDatalinkReadOnly{get { return DimDatalink; }}
    
        public IObjectSet<DimEventType> DimEventType
        {
            get { return _dimEventType  ?? (_dimEventType = new MockObjectSet<DimEventType>()); }
        }
        private IObjectSet<DimEventType> _dimEventType;
    
        public IObjectSet<DimEventType> DimEventTypeReadOnly{get { return DimEventType; }}
    
        public IObjectSet<DimFault> DimFault
        {
            get { return _dimFault  ?? (_dimFault = new MockObjectSet<DimFault>()); }
        }
        private IObjectSet<DimFault> _dimFault;
    
        public IObjectSet<DimFault> DimFaultReadOnly{get { return DimFault; }}
    
        public IObjectSet<DimFaultDescription> DimFaultDescription
        {
            get { return _dimFaultDescription  ?? (_dimFaultDescription = new MockObjectSet<DimFaultDescription>()); }
        }
        private IObjectSet<DimFaultDescription> _dimFaultDescription;
    
        public IObjectSet<DimFaultDescription> DimFaultDescriptionReadOnly{get { return DimFaultDescription; }}
    
        public IObjectSet<DimFaultType> DimFaultType
        {
            get { return _dimFaultType  ?? (_dimFaultType = new MockObjectSet<DimFaultType>()); }
        }
        private IObjectSet<DimFaultType> _dimFaultType;
    
        public IObjectSet<DimFaultType> DimFaultTypeReadOnly{get { return DimFaultType; }}
    
        public IObjectSet<DimKeyDate> DimKeyDate
        {
            get { return _dimKeyDate  ?? (_dimKeyDate = new MockObjectSet<DimKeyDate>()); }
        }
        private IObjectSet<DimKeyDate> _dimKeyDate;
    
        public IObjectSet<DimKeyDate> DimKeyDateReadOnly{get { return DimKeyDate; }}
    
        public IObjectSet<DimLanguage> DimLanguage
        {
            get { return _dimLanguage  ?? (_dimLanguage = new MockObjectSet<DimLanguage>()); }
        }
        private IObjectSet<DimLanguage> _dimLanguage;
    
        public IObjectSet<DimLanguage> DimLanguageReadOnly{get { return DimLanguage; }}
    
        public IObjectSet<DimMID> DimMID
        {
            get { return _dimMID  ?? (_dimMID = new MockObjectSet<DimMID>()); }
        }
        private IObjectSet<DimMID> _dimMID;
    
        public IObjectSet<DimMID> DimMIDReadOnly{get { return DimMID; }}
    
        public IObjectSet<DimMIDDesc> DimMIDDesc
        {
            get { return _dimMIDDesc  ?? (_dimMIDDesc = new MockObjectSet<DimMIDDesc>()); }
        }
        private IObjectSet<DimMIDDesc> _dimMIDDesc;
    
        public IObjectSet<DimMIDDesc> DimMIDDescReadOnly{get { return DimMIDDesc; }}
    
        public IObjectSet<DimReportServicePlan> DimReportServicePlan
        {
            get { return _dimReportServicePlan  ?? (_dimReportServicePlan = new MockObjectSet<DimReportServicePlan>()); }
        }
        private IObjectSet<DimReportServicePlan> _dimReportServicePlan;
    
        public IObjectSet<DimReportServicePlan> DimReportServicePlanReadOnly{get { return DimReportServicePlan; }}
    
        public IObjectSet<DimReportType> DimReportType
        {
            get { return _dimReportType  ?? (_dimReportType = new MockObjectSet<DimReportType>()); }
        }
        private IObjectSet<DimReportType> _dimReportType;
    
        public IObjectSet<DimReportType> DimReportTypeReadOnly{get { return DimReportType; }}
    
        public IObjectSet<DimServiceType> DimServiceType
        {
            get { return _dimServiceType  ?? (_dimServiceType = new MockObjectSet<DimServiceType>()); }
        }
        private IObjectSet<DimServiceType> _dimServiceType;
    
        public IObjectSet<DimServiceType> DimServiceTypeReadOnly{get { return DimServiceType; }}
    
        public IObjectSet<DimServiceView> DimServiceView
        {
            get { return _dimServiceView  ?? (_dimServiceView = new MockObjectSet<DimServiceView>()); }
        }
        private IObjectSet<DimServiceView> _dimServiceView;
    
        public IObjectSet<DimServiceView> DimServiceViewReadOnly{get { return DimServiceView; }}
    
        public IObjectSet<DimSeverityLevel> DimSeverityLevel
        {
            get { return _dimSeverityLevel  ?? (_dimSeverityLevel = new MockObjectSet<DimSeverityLevel>()); }
        }
        private IObjectSet<DimSeverityLevel> _dimSeverityLevel;
    
        public IObjectSet<DimSeverityLevel> DimSeverityLevelReadOnly{get { return DimSeverityLevel; }}
    
        public IObjectSet<DimSeverityLevelIDMap> DimSeverityLevelIDMap
        {
            get { return _dimSeverityLevelIDMap  ?? (_dimSeverityLevelIDMap = new MockObjectSet<DimSeverityLevelIDMap>()); }
        }
        private IObjectSet<DimSeverityLevelIDMap> _dimSeverityLevelIDMap;
    
        public IObjectSet<DimSeverityLevelIDMap> DimSeverityLevelIDMapReadOnly{get { return DimSeverityLevelIDMap; }}
    
        public IObjectSet<DimSISLinkCodes> DimSISLinkCodes
        {
            get { return _dimSISLinkCodes  ?? (_dimSISLinkCodes = new MockObjectSet<DimSISLinkCodes>()); }
        }
        private IObjectSet<DimSISLinkCodes> _dimSISLinkCodes;
    
        public IObjectSet<DimSISLinkCodes> DimSISLinkCodesReadOnly{get { return DimSISLinkCodes; }}
    
        public IObjectSet<DimSite> DimSite
        {
            get { return _dimSite  ?? (_dimSite = new MockObjectSet<DimSite>()); }
        }
        private IObjectSet<DimSite> _dimSite;
    
        public IObjectSet<DimSite> DimSiteReadOnly{get { return DimSite; }}
    
        public IObjectSet<DimTimeZone> DimTimeZone
        {
            get { return _dimTimeZone  ?? (_dimTimeZone = new MockObjectSet<DimTimeZone>()); }
        }
        private IObjectSet<DimTimeZone> _dimTimeZone;
    
        public IObjectSet<DimTimeZone> DimTimeZoneReadOnly{get { return DimTimeZone; }}
    
        public IObjectSet<DimWorkDefinition> DimWorkDefinition
        {
            get { return _dimWorkDefinition  ?? (_dimWorkDefinition = new MockObjectSet<DimWorkDefinition>()); }
        }
        private IObjectSet<DimWorkDefinition> _dimWorkDefinition;
    
        public IObjectSet<DimWorkDefinition> DimWorkDefinitionReadOnly{get { return DimWorkDefinition; }}
    
        public IObjectSet<Event> Event
        {
            get { return _event  ?? (_event = new MockObjectSet<Event>()); }
        }
        private IObjectSet<Event> _event;
    
        public IObjectSet<Event> EventReadOnly{get { return Event; }}
    
        public IObjectSet<FeedDigitalSwitchStatus> FeedDigitalSwitchStatus
        {
            get { return _feedDigitalSwitchStatus  ?? (_feedDigitalSwitchStatus = new MockObjectSet<FeedDigitalSwitchStatus>()); }
        }
        private IObjectSet<FeedDigitalSwitchStatus> _feedDigitalSwitchStatus;
    
        public IObjectSet<FeedDigitalSwitchStatus> FeedDigitalSwitchStatusReadOnly{get { return FeedDigitalSwitchStatus; }}
    
        public IObjectSet<FeedEngineParameters> FeedEngineParameters
        {
            get { return _feedEngineParameters  ?? (_feedEngineParameters = new MockObjectSet<FeedEngineParameters>()); }
        }
        private IObjectSet<FeedEngineParameters> _feedEngineParameters;
    
        public IObjectSet<FeedEngineParameters> FeedEngineParametersReadOnly{get { return FeedEngineParameters; }}
    
        public IObjectSet<FeedEngStartStop> FeedEngStartStop
        {
            get { return _feedEngStartStop  ?? (_feedEngStartStop = new MockObjectSet<FeedEngStartStop>()); }
        }
        private IObjectSet<FeedEngStartStop> _feedEngStartStop;
    
        public IObjectSet<FeedEngStartStop> FeedEngStartStopReadOnly{get { return FeedEngStartStop; }}
    
        public IObjectSet<FeedFaultEvent> FeedFaultEvent
        {
            get { return _feedFaultEvent  ?? (_feedFaultEvent = new MockObjectSet<FeedFaultEvent>()); }
        }
        private IObjectSet<FeedFaultEvent> _feedFaultEvent;
    
        public IObjectSet<FeedFaultEvent> FeedFaultEventReadOnly{get { return FeedFaultEvent; }}
    
        public IObjectSet<FeedFenceAlarm> FeedFenceAlarm
        {
            get { return _feedFenceAlarm  ?? (_feedFenceAlarm = new MockObjectSet<FeedFenceAlarm>()); }
        }
        private IObjectSet<FeedFenceAlarm> _feedFenceAlarm;
    
        public IObjectSet<FeedFenceAlarm> FeedFenceAlarmReadOnly{get { return FeedFenceAlarm; }}
    
        public IObjectSet<FeedFuel> FeedFuel
        {
            get { return _feedFuel  ?? (_feedFuel = new MockObjectSet<FeedFuel>()); }
        }
        private IObjectSet<FeedFuel> _feedFuel;
    
        public IObjectSet<FeedFuel> FeedFuelReadOnly{get { return FeedFuel; }}
    
        public IObjectSet<FeedSMULocation> FeedSMULocation
        {
            get { return _feedSMULocation  ?? (_feedSMULocation = new MockObjectSet<FeedSMULocation>()); }
        }
        private IObjectSet<FeedSMULocation> _feedSMULocation;
    
        public IObjectSet<FeedSMULocation> FeedSMULocationReadOnly{get { return FeedSMULocation; }}
    
        public IObjectSet<FluidAnalysis> FluidAnalysis
        {
            get { return _fluidAnalysis  ?? (_fluidAnalysis = new MockObjectSet<FluidAnalysis>()); }
        }
        private IObjectSet<FluidAnalysis> _fluidAnalysis;
    
        public IObjectSet<FluidAnalysis> FluidAnalysisReadOnly{get { return FluidAnalysis; }}
    
        public IObjectSet<FuelLossCandidate> FuelLossCandidate
        {
            get { return _fuelLossCandidate  ?? (_fuelLossCandidate = new MockObjectSet<FuelLossCandidate>()); }
        }
        private IObjectSet<FuelLossCandidate> _fuelLossCandidate;
    
        public IObjectSet<FuelLossCandidate> FuelLossCandidateReadOnly{get { return FuelLossCandidate; }}
    
        public IObjectSet<ReportParameter> ReportParameter
        {
            get { return _reportParameter  ?? (_reportParameter = new MockObjectSet<ReportParameter>()); }
        }
        private IObjectSet<ReportParameter> _reportParameter;
    
        public IObjectSet<ReportParameter> ReportParameterReadOnly{get { return ReportParameter; }}
    
        public IObjectSet<vw_LocationHistory> vw_LocationHistory
        {
            get { return _vw_LocationHistory  ?? (_vw_LocationHistory = new MockObjectSet<vw_LocationHistory>()); }
        }
        private IObjectSet<vw_LocationHistory> _vw_LocationHistory;
    
        public IObjectSet<vw_LocationHistory> vw_LocationHistoryReadOnly{get { return vw_LocationHistory; }}
    
        public IObjectSet<DimCustomer> DimCustomer
        {
            get { return _dimCustomer  ?? (_dimCustomer = new MockObjectSet<DimCustomer>()); }
        }
        private IObjectSet<DimCustomer> _dimCustomer;
    
        public IObjectSet<DimCustomer> DimCustomerReadOnly{get { return DimCustomer; }}
    
        public IObjectSet<DimSensor> DimSensor
        {
            get { return _dimSensor  ?? (_dimSensor = new MockObjectSet<DimSensor>()); }
        }
        private IObjectSet<DimSensor> _dimSensor;
    
        public IObjectSet<DimSensor> DimSensorReadOnly{get { return DimSensor; }}
    
        public IObjectSet<DimFaultParameter> DimFaultParameter
        {
            get { return _dimFaultParameter  ?? (_dimFaultParameter = new MockObjectSet<DimFaultParameter>()); }
        }
        private IObjectSet<DimFaultParameter> _dimFaultParameter;
    
        public IObjectSet<DimFaultParameter> DimFaultParameterReadOnly{get { return DimFaultParameter; }}
    
        public IObjectSet<DimFaultParameterType> DimFaultParameterType
        {
            get { return _dimFaultParameterType  ?? (_dimFaultParameterType = new MockObjectSet<DimFaultParameterType>()); }
        }
        private IObjectSet<DimFaultParameterType> _dimFaultParameterType;
    
        public IObjectSet<DimFaultParameterType> DimFaultParameterTypeReadOnly{get { return DimFaultParameterType; }}
    
        public IObjectSet<DimAssetHistoryEventType> DimAssetHistoryEventType
        {
            get { return _dimAssetHistoryEventType  ?? (_dimAssetHistoryEventType = new MockObjectSet<DimAssetHistoryEventType>()); }
        }
        private IObjectSet<DimAssetHistoryEventType> _dimAssetHistoryEventType;
    
        public IObjectSet<DimAssetHistoryEventType> DimAssetHistoryEventTypeReadOnly{get { return DimAssetHistoryEventType; }}
    
        public IObjectSet<AssetCurrentStatus> AssetCurrentStatus
        {
            get { return _assetCurrentStatus  ?? (_assetCurrentStatus = new MockObjectSet<AssetCurrentStatus>()); }
        }
        private IObjectSet<AssetCurrentStatus> _assetCurrentStatus;
    
        public IObjectSet<AssetCurrentStatus> AssetCurrentStatusReadOnly{get { return AssetCurrentStatus; }}
    
        public IObjectSet<DimAsset> DimAsset
        {
            get { return _dimAsset  ?? (_dimAsset = new MockObjectSet<DimAsset>()); }
        }
        private IObjectSet<DimAsset> _dimAsset;
    
        public IObjectSet<DimAsset> DimAssetReadOnly{get { return DimAsset; }}
    
        public IObjectSet<vw_WorkingSet> vw_WorkingSet
        {
            get { return _vw_WorkingSet  ?? (_vw_WorkingSet = new MockObjectSet<vw_WorkingSet>()); }
        }
        private IObjectSet<vw_WorkingSet> _vw_WorkingSet;
    
        public IObjectSet<vw_WorkingSet> vw_WorkingSetReadOnly{get { return vw_WorkingSet; }}
    
        public IObjectSet<vw_WorkingSetPopulation> vw_WorkingSetPopulation
        {
            get { return _vw_WorkingSetPopulation  ?? (_vw_WorkingSetPopulation = new MockObjectSet<vw_WorkingSetPopulation>()); }
        }
        private IObjectSet<vw_WorkingSetPopulation> _vw_WorkingSetPopulation;
    
        public IObjectSet<vw_WorkingSetPopulation> vw_WorkingSetPopulationReadOnly{get { return vw_WorkingSetPopulation; }}
    
        public IObjectSet<FactAssetCustomerSite> FactAssetCustomerSite
        {
            get { return _factAssetCustomerSite  ?? (_factAssetCustomerSite = new MockObjectSet<FactAssetCustomerSite>()); }
        }
        private IObjectSet<FactAssetCustomerSite> _factAssetCustomerSite;
    
        public IObjectSet<FactAssetCustomerSite> FactAssetCustomerSiteReadOnly{get { return FactAssetCustomerSite; }}
    
        public IObjectSet<DimAssetCycle> DimAssetCycle
        {
            get { return _dimAssetCycle  ?? (_dimAssetCycle = new MockObjectSet<DimAssetCycle>()); }
        }
        private IObjectSet<DimAssetCycle> _dimAssetCycle;
    
        public IObjectSet<DimAssetCycle> DimAssetCycleReadOnly{get { return DimAssetCycle; }}
    
        public IObjectSet<DimAssetMonitoringSettings> DimAssetMonitoringSettings
        {
            get { return _dimAssetMonitoringSettings  ?? (_dimAssetMonitoringSettings = new MockObjectSet<DimAssetMonitoringSettings>()); }
        }
        private IObjectSet<DimAssetMonitoringSettings> _dimAssetMonitoringSettings;
    
        public IObjectSet<DimAssetMonitoringSettings> DimAssetMonitoringSettingsReadOnly{get { return DimAssetMonitoringSettings; }}
    
        public IObjectSet<ReportWorkingSet> ReportWorkingSet
        {
            get { return _reportWorkingSet  ?? (_reportWorkingSet = new MockObjectSet<ReportWorkingSet>()); }
        }
        private IObjectSet<ReportWorkingSet> _reportWorkingSet;
    
        public IObjectSet<ReportWorkingSet> ReportWorkingSetReadOnly{get { return ReportWorkingSet; }}
    
        public IObjectSet<FactFault> FactFault
        {
            get { return _factFault  ?? (_factFault = new MockObjectSet<FactFault>()); }
        }
        private IObjectSet<FactFault> _factFault;
    
        public IObjectSet<FactFault> FactFaultReadOnly{get { return FactFault; }}
    
        public IObjectSet<DimAssetExpectedRuntimeHours> DimAssetExpectedRuntimeHours
        {
            get { return _dimAssetExpectedRuntimeHours  ?? (_dimAssetExpectedRuntimeHours = new MockObjectSet<DimAssetExpectedRuntimeHours>()); }
        }
        private IObjectSet<DimAssetExpectedRuntimeHours> _dimAssetExpectedRuntimeHours;
    
        public IObjectSet<DimAssetExpectedRuntimeHours> DimAssetExpectedRuntimeHoursReadOnly{get { return DimAssetExpectedRuntimeHours; }}
    
        public IObjectSet<DimAssetWorkingDefinition> DimAssetWorkingDefinition
        {
            get { return _dimAssetWorkingDefinition  ?? (_dimAssetWorkingDefinition = new MockObjectSet<DimAssetWorkingDefinition>()); }
        }
        private IObjectSet<DimAssetWorkingDefinition> _dimAssetWorkingDefinition;
    
        public IObjectSet<DimAssetWorkingDefinition> DimAssetWorkingDefinitionReadOnly{get { return DimAssetWorkingDefinition; }}
    
        public IObjectSet<DimAssetBurnRates> DimAssetBurnRates
        {
            get { return _dimAssetBurnRates  ?? (_dimAssetBurnRates = new MockObjectSet<DimAssetBurnRates>()); }
        }
        private IObjectSet<DimAssetBurnRates> _dimAssetBurnRates;
    
        public IObjectSet<DimAssetBurnRates> DimAssetBurnRatesReadOnly{get { return DimAssetBurnRates; }}
    
        public IObjectSet<EngineParameters> EngineParameters
        {
            get { return _engineParameters  ?? (_engineParameters = new MockObjectSet<EngineParameters>()); }
        }
        private IObjectSet<EngineParameters> _engineParameters;
    
        public IObjectSet<EngineParameters> EngineParametersReadOnly{get { return EngineParameters; }}
    
        public IObjectSet<Configuration> Configuration
        {
            get { return _configuration  ?? (_configuration = new MockObjectSet<Configuration>()); }
        }
        private IObjectSet<Configuration> _configuration;
    
        public IObjectSet<Configuration> ConfigurationReadOnly{get { return Configuration; }}
    
        public IObjectSet<DimAddress> DimAddress
        {
            get { return _dimAddress  ?? (_dimAddress = new MockObjectSet<DimAddress>()); }
        }
        private IObjectSet<DimAddress> _dimAddress;
    
        public IObjectSet<DimAddress> DimAddressReadOnly{get { return DimAddress; }}
    
        public IObjectSet<DimAssetGroup> DimAssetGroup
        {
            get { return _dimAssetGroup  ?? (_dimAssetGroup = new MockObjectSet<DimAssetGroup>()); }
        }
        private IObjectSet<DimAssetGroup> _dimAssetGroup;
    
        public IObjectSet<DimAssetGroup> DimAssetGroupReadOnly{get { return DimAssetGroup; }}
    
        public IObjectSet<DimProjectSiteSetting> DimProjectSiteSetting
        {
            get { return _dimProjectSiteSetting  ?? (_dimProjectSiteSetting = new MockObjectSet<DimProjectSiteSetting>()); }
        }
        private IObjectSet<DimProjectSiteSetting> _dimProjectSiteSetting;
    
        public IObjectSet<DimProjectSiteSetting> DimProjectSiteSettingReadOnly{get { return DimProjectSiteSetting; }}
    
        public IObjectSet<DimSiteType> DimSiteType
        {
            get { return _dimSiteType  ?? (_dimSiteType = new MockObjectSet<DimSiteType>()); }
        }
        private IObjectSet<DimSiteType> _dimSiteType;
    
        public IObjectSet<DimSiteType> DimSiteTypeReadOnly{get { return DimSiteType; }}
    
        public IObjectSet<FactSiteAssetDaily> FactSiteAssetDaily
        {
            get { return _factSiteAssetDaily  ?? (_factSiteAssetDaily = new MockObjectSet<FactSiteAssetDaily>()); }
        }
        private IObjectSet<FactSiteAssetDaily> _factSiteAssetDaily;
    
        public IObjectSet<FactSiteAssetDaily> FactSiteAssetDailyReadOnly{get { return FactSiteAssetDaily; }}
    
        public IObjectSet<FeedFaultDiagnostic> FeedFaultDiagnostic
        {
            get { return _feedFaultDiagnostic  ?? (_feedFaultDiagnostic = new MockObjectSet<FeedFaultDiagnostic>()); }
        }
        private IObjectSet<FeedFaultDiagnostic> _feedFaultDiagnostic;
    
        public IObjectSet<FeedFaultDiagnostic> FeedFaultDiagnosticReadOnly{get { return FeedFaultDiagnostic; }}
    
        public IObjectSet<FactAssetOperationPeriod> FactAssetOperationPeriod
        {
            get { return _factAssetOperationPeriod  ?? (_factAssetOperationPeriod = new MockObjectSet<FactAssetOperationPeriod>()); }
        }
        private IObjectSet<FactAssetOperationPeriod> _factAssetOperationPeriod;
    
        public IObjectSet<FactAssetOperationPeriod> FactAssetOperationPeriodReadOnly{get { return FactAssetOperationPeriod; }}
    
        public IObjectSet<HoursLocation> HoursLocation
        {
            get { return _hoursLocation  ?? (_hoursLocation = new MockObjectSet<HoursLocation>()); }
        }
        private IObjectSet<HoursLocation> _hoursLocation;
    
        public IObjectSet<HoursLocation> HoursLocationReadOnly{get { return HoursLocation; }}
    
        public IObjectSet<FactPMDue> FactPMDue
        {
            get { return _factPMDue  ?? (_factPMDue = new MockObjectSet<FactPMDue>()); }
        }
        private IObjectSet<FactPMDue> _factPMDue;
    
        public IObjectSet<FactPMDue> FactPMDueReadOnly{get { return FactPMDue; }}
    
        public IObjectSet<FactAssetLoadCountPeriod> FactAssetLoadCountPeriod
        {
            get { return _factAssetLoadCountPeriod  ?? (_factAssetLoadCountPeriod = new MockObjectSet<FactAssetLoadCountPeriod>()); }
        }
        private IObjectSet<FactAssetLoadCountPeriod> _factAssetLoadCountPeriod;
    
        public IObjectSet<FactAssetLoadCountPeriod> FactAssetLoadCountPeriodReadOnly{get { return FactAssetLoadCountPeriod; }}
    
        public IObjectSet<FactAssetCycles> FactAssetCycles
        {
            get { return _factAssetCycles  ?? (_factAssetCycles = new MockObjectSet<FactAssetCycles>()); }
        }
        private IObjectSet<FactAssetCycles> _factAssetCycles;
    
        public IObjectSet<FactAssetCycles> FactAssetCyclesReadOnly{get { return FactAssetCycles; }}
    
        public IObjectSet<DimModelVariant> DimModelVariant
        {
            get { return _dimModelVariant  ?? (_dimModelVariant = new MockObjectSet<DimModelVariant>()); }
        }
        private IObjectSet<DimModelVariant> _dimModelVariant;
    
        public IObjectSet<DimModelVariant> DimModelVariantReadOnly{get { return DimModelVariant; }}
    
        public IObjectSet<DimUtilizationCalloutType> DimUtilizationCalloutType
        {
            get { return _dimUtilizationCalloutType  ?? (_dimUtilizationCalloutType = new MockObjectSet<DimUtilizationCalloutType>()); }
        }
        private IObjectSet<DimUtilizationCalloutType> _dimUtilizationCalloutType;
    
        public IObjectSet<DimUtilizationCalloutType> DimUtilizationCalloutTypeReadOnly{get { return DimUtilizationCalloutType; }}
    
        public IObjectSet<FactAssetUtilizationDaily> FactAssetUtilizationDaily
        {
            get { return _factAssetUtilizationDaily  ?? (_factAssetUtilizationDaily = new MockObjectSet<FactAssetUtilizationDaily>()); }
        }
        private IObjectSet<FactAssetUtilizationDaily> _factAssetUtilizationDaily;
    
        public IObjectSet<FactAssetUtilizationDaily> FactAssetUtilizationDailyReadOnly{get { return FactAssetUtilizationDaily; }}
    
        public IObjectSet<DimMassHaulPlan> DimMassHaulPlan
        {
            get { return _dimMassHaulPlan  ?? (_dimMassHaulPlan = new MockObjectSet<DimMassHaulPlan>()); }
        }
        private IObjectSet<DimMassHaulPlan> _dimMassHaulPlan;
    
        public IObjectSet<DimMassHaulPlan> DimMassHaulPlanReadOnly{get { return DimMassHaulPlan; }}
    
        public IObjectSet<DimAssetMonitoring> DimAssetMonitoring
        {
            get { return _dimAssetMonitoring  ?? (_dimAssetMonitoring = new MockObjectSet<DimAssetMonitoring>()); }
        }
        private IObjectSet<DimAssetMonitoring> _dimAssetMonitoring;
    
        public IObjectSet<DimAssetMonitoring> DimAssetMonitoringReadOnly{get { return DimAssetMonitoring; }}
    
        public IObjectSet<WorkingSiteOccupancy> WorkingSiteOccupancy
        {
            get { return _workingSiteOccupancy  ?? (_workingSiteOccupancy = new MockObjectSet<WorkingSiteOccupancy>()); }
        }
        private IObjectSet<WorkingSiteOccupancy> _workingSiteOccupancy;
    
        public IObjectSet<WorkingSiteOccupancy> WorkingSiteOccupancyReadOnly{get { return WorkingSiteOccupancy; }}
    
        public IObjectSet<AssetCurrentSecurityStatus> AssetCurrentSecurityStatus
        {
            get { return _assetCurrentSecurityStatus  ?? (_assetCurrentSecurityStatus = new MockObjectSet<AssetCurrentSecurityStatus>()); }
        }
        private IObjectSet<AssetCurrentSecurityStatus> _assetCurrentSecurityStatus;
    
        public IObjectSet<AssetCurrentSecurityStatus> AssetCurrentSecurityStatusReadOnly{get { return AssetCurrentSecurityStatus; }}
    
        public IObjectSet<DimSharedView> DimSharedView
        {
            get { return _dimSharedView  ?? (_dimSharedView = new MockObjectSet<DimSharedView>()); }
        }
        private IObjectSet<DimSharedView> _dimSharedView;
    
        public IObjectSet<DimSharedView> DimSharedViewReadOnly{get { return DimSharedView; }}
    
        public IObjectSet<vw_WorkingSetService> vw_WorkingSetService
        {
            get { return _vw_WorkingSetService  ?? (_vw_WorkingSetService = new MockObjectSet<vw_WorkingSetService>()); }
        }
        private IObjectSet<vw_WorkingSetService> _vw_WorkingSetService;
    
        public IObjectSet<vw_WorkingSetService> vw_WorkingSetServiceReadOnly{get { return vw_WorkingSetService; }}
    
        public IObjectSet<DimAlertSubType> DimAlertSubType
        {
            get { return _dimAlertSubType  ?? (_dimAlertSubType = new MockObjectSet<DimAlertSubType>()); }
        }
        private IObjectSet<DimAlertSubType> _dimAlertSubType;
    
        public IObjectSet<DimAlertSubType> DimAlertSubTypeReadOnly{get { return DimAlertSubType; }}
    
        public IObjectSet<FactAssetProjectTagFileError> FactAssetProjectTagFileError
        {
            get { return _factAssetProjectTagFileError  ?? (_factAssetProjectTagFileError = new MockObjectSet<FactAssetProjectTagFileError>()); }
        }
        private IObjectSet<FactAssetProjectTagFileError> _factAssetProjectTagFileError;
    
        public IObjectSet<FactAssetProjectTagFileError> FactAssetProjectTagFileErrorReadOnly{get { return FactAssetProjectTagFileError; }}
    
        public IObjectSet<vw_MaintenanceUsage> vw_MaintenanceUsage
        {
            get { return _vw_MaintenanceUsage  ?? (_vw_MaintenanceUsage = new MockObjectSet<vw_MaintenanceUsage>()); }
        }
        private IObjectSet<vw_MaintenanceUsage> _vw_MaintenanceUsage;
    
        public IObjectSet<vw_MaintenanceUsage> vw_MaintenanceUsageReadOnly{get { return vw_MaintenanceUsage; }}
    
        public IObjectSet<vw_AssetUtilizationDaily> vw_AssetUtilizationDaily
        {
            get { return _vw_AssetUtilizationDaily  ?? (_vw_AssetUtilizationDaily = new MockObjectSet<vw_AssetUtilizationDaily>()); }
        }
        private IObjectSet<vw_AssetUtilizationDaily> _vw_AssetUtilizationDaily;
    
        public IObjectSet<vw_AssetUtilizationDaily> vw_AssetUtilizationDailyReadOnly{get { return vw_AssetUtilizationDaily; }}
    
        public IObjectSet<DigitalSwitchStatus> DigitalSwitchStatus
        {
            get { return _digitalSwitchStatus  ?? (_digitalSwitchStatus = new MockObjectSet<DigitalSwitchStatus>()); }
        }
        private IObjectSet<DigitalSwitchStatus> _digitalSwitchStatus;
    
        public IObjectSet<DigitalSwitchStatus> DigitalSwitchStatusReadOnly{get { return DigitalSwitchStatus; }}
    
        public IObjectSet<FenceAlarm> FenceAlarm
        {
            get { return _fenceAlarm  ?? (_fenceAlarm = new MockObjectSet<FenceAlarm>()); }
        }
        private IObjectSet<FenceAlarm> _fenceAlarm;
    
        public IObjectSet<FenceAlarm> FenceAlarmReadOnly{get { return FenceAlarm; }}
    
        public IObjectSet<ReportTemplateBinary> ReportTemplateBinary
        {
            get { return _reportTemplateBinary  ?? (_reportTemplateBinary = new MockObjectSet<ReportTemplateBinary>()); }
        }
        private IObjectSet<ReportTemplateBinary> _reportTemplateBinary;
    
        public IObjectSet<ReportTemplateBinary> ReportTemplateBinaryReadOnly{get { return ReportTemplateBinary; }}
    
        public IObjectSet<vw_AssetOperation> vw_AssetOperation
        {
            get { return _vw_AssetOperation  ?? (_vw_AssetOperation = new MockObjectSet<vw_AssetOperation>()); }
        }
        private IObjectSet<vw_AssetOperation> _vw_AssetOperation;
    
        public IObjectSet<vw_AssetOperation> vw_AssetOperationReadOnly{get { return vw_AssetOperation; }}
    
        public IObjectSet<DimUtilizationType> DimUtilizationType
        {
            get { return _dimUtilizationType  ?? (_dimUtilizationType = new MockObjectSet<DimUtilizationType>()); }
        }
        private IObjectSet<DimUtilizationType> _dimUtilizationType;
    
        public IObjectSet<DimUtilizationType> DimUtilizationTypeReadOnly{get { return DimUtilizationType; }}
    
        public IObjectSet<DimFaultDescriptionOverride> DimFaultDescriptionOverride
        {
            get { return _dimFaultDescriptionOverride  ?? (_dimFaultDescriptionOverride = new MockObjectSet<DimFaultDescriptionOverride>()); }
        }
        private IObjectSet<DimFaultDescriptionOverride> _dimFaultDescriptionOverride;
    
        public IObjectSet<DimFaultDescriptionOverride> DimFaultDescriptionOverrideReadOnly{get { return DimFaultDescriptionOverride; }}
    
        public IObjectSet<vw_FaultDescription> vw_FaultDescription
        {
            get { return _vw_FaultDescription  ?? (_vw_FaultDescription = new MockObjectSet<vw_FaultDescription>()); }
        }
        private IObjectSet<vw_FaultDescription> _vw_FaultDescription;
    
        public IObjectSet<vw_FaultDescription> vw_FaultDescriptionReadOnly{get { return vw_FaultDescription; }}
    
        public IObjectSet<DimLoadQualityType> DimLoadQualityType
        {
            get { return _dimLoadQualityType  ?? (_dimLoadQualityType = new MockObjectSet<DimLoadQualityType>()); }
        }
        private IObjectSet<DimLoadQualityType> _dimLoadQualityType;
    
        public IObjectSet<DimLoadQualityType> DimLoadQualityTypeReadOnly{get { return DimLoadQualityType; }}
    
        public IObjectSet<FactAssetSiteUtilization> FactAssetSiteUtilization
        {
            get { return _factAssetSiteUtilization  ?? (_factAssetSiteUtilization = new MockObjectSet<FactAssetSiteUtilization>()); }
        }
        private IObjectSet<FactAssetSiteUtilization> _factAssetSiteUtilization;
    
        public IObjectSet<FactAssetSiteUtilization> FactAssetSiteUtilizationReadOnly{get { return FactAssetSiteUtilization; }}
    
        public IObjectSet<vw_FactAssetSiteUtilization> vw_FactAssetSiteUtilization
        {
            get { return _vw_FactAssetSiteUtilization  ?? (_vw_FactAssetSiteUtilization = new MockObjectSet<vw_FactAssetSiteUtilization>()); }
        }
        private IObjectSet<vw_FactAssetSiteUtilization> _vw_FactAssetSiteUtilization;
    
        public IObjectSet<vw_FactAssetSiteUtilization> vw_FactAssetSiteUtilizationReadOnly{get { return vw_FactAssetSiteUtilization; }}
    
        public IObjectSet<ReportEmailContact> ReportEmailContact
        {
            get { return _reportEmailContact  ?? (_reportEmailContact = new MockObjectSet<ReportEmailContact>()); }
        }
        private IObjectSet<ReportEmailContact> _reportEmailContact;
    
        public IObjectSet<ReportEmailContact> ReportEmailContactReadOnly{get { return ReportEmailContact; }}
    
        public IObjectSet<DimCustomUtilizationEventType> DimCustomUtilizationEventType
        {
            get { return _dimCustomUtilizationEventType  ?? (_dimCustomUtilizationEventType = new MockObjectSet<DimCustomUtilizationEventType>()); }
        }
        private IObjectSet<DimCustomUtilizationEventType> _dimCustomUtilizationEventType;
    
        public IObjectSet<DimCustomUtilizationEventType> DimCustomUtilizationEventTypeReadOnly{get { return DimCustomUtilizationEventType; }}
    
        public IObjectSet<FactAssetCustomUtilizationDaily> FactAssetCustomUtilizationDaily
        {
            get { return _factAssetCustomUtilizationDaily  ?? (_factAssetCustomUtilizationDaily = new MockObjectSet<FactAssetCustomUtilizationDaily>()); }
        }
        private IObjectSet<FactAssetCustomUtilizationDaily> _factAssetCustomUtilizationDaily;
    
        public IObjectSet<FactAssetCustomUtilizationDaily> FactAssetCustomUtilizationDailyReadOnly{get { return FactAssetCustomUtilizationDaily; }}
    
        public IObjectSet<DimMonitoringMachineType> DimMonitoringMachineType
        {
            get { return _dimMonitoringMachineType  ?? (_dimMonitoringMachineType = new MockObjectSet<DimMonitoringMachineType>()); }
        }
        private IObjectSet<DimMonitoringMachineType> _dimMonitoringMachineType;
    
        public IObjectSet<DimMonitoringMachineType> DimMonitoringMachineTypeReadOnly{get { return DimMonitoringMachineType; }}
    
        public IObjectSet<vw_AssetUsage> vw_AssetUsage
        {
            get { return _vw_AssetUsage  ?? (_vw_AssetUsage = new MockObjectSet<vw_AssetUsage>()); }
        }
        private IObjectSet<vw_AssetUsage> _vw_AssetUsage;
    
        public IObjectSet<vw_AssetUsage> vw_AssetUsageReadOnly{get { return vw_AssetUsage; }}
    
        public IObjectSet<vw_FuelUsage> vw_FuelUsage
        {
            get { return _vw_FuelUsage  ?? (_vw_FuelUsage = new MockObjectSet<vw_FuelUsage>()); }
        }
        private IObjectSet<vw_FuelUsage> _vw_FuelUsage;
    
        public IObjectSet<vw_FuelUsage> vw_FuelUsageReadOnly{get { return vw_FuelUsage; }}
    
        public IObjectSet<DimMassHaulMasterZoneRoute> DimMassHaulMasterZoneRoute
        {
            get { return _dimMassHaulMasterZoneRoute  ?? (_dimMassHaulMasterZoneRoute = new MockObjectSet<DimMassHaulMasterZoneRoute>()); }
        }
        private IObjectSet<DimMassHaulMasterZoneRoute> _dimMassHaulMasterZoneRoute;
    
        public IObjectSet<DimMassHaulMasterZoneRoute> DimMassHaulMasterZoneRouteReadOnly{get { return DimMassHaulMasterZoneRoute; }}
    
        public IObjectSet<DimLoadIncompleteType> DimLoadIncompleteType
        {
            get { return _dimLoadIncompleteType  ?? (_dimLoadIncompleteType = new MockObjectSet<DimLoadIncompleteType>()); }
        }
        private IObjectSet<DimLoadIncompleteType> _dimLoadIncompleteType;
    
        public IObjectSet<DimLoadIncompleteType> DimLoadIncompleteTypeReadOnly{get { return DimLoadIncompleteType; }}
    
        public IObjectSet<CNHAlarmCodeMap> CNHAlarmCodeMap
        {
            get { return _cNHAlarmCodeMap  ?? (_cNHAlarmCodeMap = new MockObjectSet<CNHAlarmCodeMap>()); }
        }
        private IObjectSet<CNHAlarmCodeMap> _cNHAlarmCodeMap;
    
        public IObjectSet<CNHAlarmCodeMap> CNHAlarmCodeMapReadOnly{get { return CNHAlarmCodeMap; }}
    
        public IObjectSet<FactCatInspection> FactCatInspection
        {
            get { return _factCatInspection  ?? (_factCatInspection = new MockObjectSet<FactCatInspection>()); }
        }
        private IObjectSet<FactCatInspection> _factCatInspection;
    
        public IObjectSet<FactCatInspection> FactCatInspectionReadOnly{get { return FactCatInspection; }}
    
        public IObjectSet<FactExcavatorUtilization> FactExcavatorUtilization
        {
            get { return _factExcavatorUtilization  ?? (_factExcavatorUtilization = new MockObjectSet<FactExcavatorUtilization>()); }
        }
        private IObjectSet<FactExcavatorUtilization> _factExcavatorUtilization;
    
        public IObjectSet<FactExcavatorUtilization> FactExcavatorUtilizationReadOnly{get { return FactExcavatorUtilization; }}
    
        public IObjectSet<FactPayloadCycleUtilizationDaily> FactPayloadCycleUtilizationDaily
        {
            get { return _factPayloadCycleUtilizationDaily  ?? (_factPayloadCycleUtilizationDaily = new MockObjectSet<FactPayloadCycleUtilizationDaily>()); }
        }
        private IObjectSet<FactPayloadCycleUtilizationDaily> _factPayloadCycleUtilizationDaily;
    
        public IObjectSet<FactPayloadCycleUtilizationDaily> FactPayloadCycleUtilizationDailyReadOnly{get { return FactPayloadCycleUtilizationDaily; }}
    
        public IObjectSet<DimAppFeatureSet> DimAppFeatureSet
        {
            get { return _dimAppFeatureSet  ?? (_dimAppFeatureSet = new MockObjectSet<DimAppFeatureSet>()); }
        }
        private IObjectSet<DimAppFeatureSet> _dimAppFeatureSet;
    
        public IObjectSet<DimAppFeatureSet> DimAppFeatureSetReadOnly{get { return DimAppFeatureSet; }}
    
        public IObjectSet<DimDeviceType> DimDeviceType
        {
            get { return _dimDeviceType  ?? (_dimDeviceType = new MockObjectSet<DimDeviceType>()); }
        }
        private IObjectSet<DimDeviceType> _dimDeviceType;
    
        public IObjectSet<DimDeviceType> DimDeviceTypeReadOnly{get { return DimDeviceType; }}
    
        public IObjectSet<FactTireMonitorSummary> FactTireMonitorSummary
        {
            get { return _factTireMonitorSummary  ?? (_factTireMonitorSummary = new MockObjectSet<FactTireMonitorSummary>()); }
        }
        private IObjectSet<FactTireMonitorSummary> _factTireMonitorSummary;
    
        public IObjectSet<FactTireMonitorSummary> FactTireMonitorSummaryReadOnly{get { return FactTireMonitorSummary; }}
    
        public IObjectSet<FactTireMonitorSystem> FactTireMonitorSystem
        {
            get { return _factTireMonitorSystem  ?? (_factTireMonitorSystem = new MockObjectSet<FactTireMonitorSystem>()); }
        }
        private IObjectSet<FactTireMonitorSystem> _factTireMonitorSystem;
    
        public IObjectSet<FactTireMonitorSystem> FactTireMonitorSystemReadOnly{get { return FactTireMonitorSystem; }}
    
        public IObjectSet<FactPMCompletedService> FactPMCompletedService
        {
            get { return _factPMCompletedService  ?? (_factPMCompletedService = new MockObjectSet<FactPMCompletedService>()); }
        }
        private IObjectSet<FactPMCompletedService> _factPMCompletedService;
    
        public IObjectSet<FactPMCompletedService> FactPMCompletedServiceReadOnly{get { return FactPMCompletedService; }}
    
        public IObjectSet<DimSensorAspects> DimSensorAspects
        {
            get { return _dimSensorAspects  ?? (_dimSensorAspects = new MockObjectSet<DimSensorAspects>()); }
        }
        private IObjectSet<DimSensorAspects> _dimSensorAspects;
    
        public IObjectSet<DimSensorAspects> DimSensorAspectsReadOnly{get { return DimSensorAspects; }}
    
        public IObjectSet<DimSensorType> DimSensorType
        {
            get { return _dimSensorType  ?? (_dimSensorType = new MockObjectSet<DimSensorType>()); }
        }
        private IObjectSet<DimSensorType> _dimSensorType;
    
        public IObjectSet<DimSensorType> DimSensorTypeReadOnly{get { return DimSensorType; }}
    
        public IObjectSet<DimWarningLevel> DimWarningLevel
        {
            get { return _dimWarningLevel  ?? (_dimWarningLevel = new MockObjectSet<DimWarningLevel>()); }
        }
        private IObjectSet<DimWarningLevel> _dimWarningLevel;
    
        public IObjectSet<DimWarningLevel> DimWarningLevelReadOnly{get { return DimWarningLevel; }}
    
        public IObjectSet<FactTireMonitorLevelPeriod> FactTireMonitorLevelPeriod
        {
            get { return _factTireMonitorLevelPeriod  ?? (_factTireMonitorLevelPeriod = new MockObjectSet<FactTireMonitorLevelPeriod>()); }
        }
        private IObjectSet<FactTireMonitorLevelPeriod> _factTireMonitorLevelPeriod;
    
        public IObjectSet<FactTireMonitorLevelPeriod> FactTireMonitorLevelPeriodReadOnly{get { return FactTireMonitorLevelPeriod; }}
    
        public IObjectSet<DailyUsageMetrics> DailyUsageMetrics
        {
            get { return _dailyUsageMetrics  ?? (_dailyUsageMetrics = new MockObjectSet<DailyUsageMetrics>()); }
        }
        private IObjectSet<DailyUsageMetrics> _dailyUsageMetrics;
    
        public IObjectSet<DailyUsageMetrics> DailyUsageMetricsReadOnly{get { return DailyUsageMetrics; }}
    
        public IObjectSet<UsageMetricsDataElement> UsageMetricsDataElement
        {
            get { return _usageMetricsDataElement  ?? (_usageMetricsDataElement = new MockObjectSet<UsageMetricsDataElement>()); }
        }
        private IObjectSet<UsageMetricsDataElement> _usageMetricsDataElement;
    
        public IObjectSet<UsageMetricsDataElement> UsageMetricsDataElementReadOnly{get { return UsageMetricsDataElement; }}
    
        public IObjectSet<UsageMetricsGroup> UsageMetricsGroup
        {
            get { return _usageMetricsGroup  ?? (_usageMetricsGroup = new MockObjectSet<UsageMetricsGroup>()); }
        }
        private IObjectSet<UsageMetricsGroup> _usageMetricsGroup;
    
        public IObjectSet<UsageMetricsGroup> UsageMetricsGroupReadOnly{get { return UsageMetricsGroup; }}
    
        public IObjectSet<DimMassHaulType> DimMassHaulType
        {
            get { return _dimMassHaulType  ?? (_dimMassHaulType = new MockObjectSet<DimMassHaulType>()); }
        }
        private IObjectSet<DimMassHaulType> _dimMassHaulType;
    
        public IObjectSet<DimMassHaulType> DimMassHaulTypeReadOnly{get { return DimMassHaulType; }}
    
        public IObjectSet<DimMaterialType> DimMaterialType
        {
            get { return _dimMaterialType  ?? (_dimMaterialType = new MockObjectSet<DimMaterialType>()); }
        }
        private IObjectSet<DimMaterialType> _dimMaterialType;
    
        public IObjectSet<DimMaterialType> DimMaterialTypeReadOnly{get { return DimMaterialType; }}
    
        public IObjectSet<DeviceCurrentStatus> DeviceCurrentStatus
        {
            get { return _deviceCurrentStatus  ?? (_deviceCurrentStatus = new MockObjectSet<DeviceCurrentStatus>()); }
        }
        private IObjectSet<DeviceCurrentStatus> _deviceCurrentStatus;
    
        public IObjectSet<DeviceCurrentStatus> DeviceCurrentStatusReadOnly{get { return DeviceCurrentStatus; }}
    
        public IObjectSet<DimSiteAssetMonitoringArchive> DimSiteAssetMonitoringArchive
        {
            get { return _dimSiteAssetMonitoringArchive  ?? (_dimSiteAssetMonitoringArchive = new MockObjectSet<DimSiteAssetMonitoringArchive>()); }
        }
        private IObjectSet<DimSiteAssetMonitoringArchive> _dimSiteAssetMonitoringArchive;
    
        public IObjectSet<DimSiteAssetMonitoringArchive> DimSiteAssetMonitoringArchiveReadOnly{get { return DimSiteAssetMonitoringArchive; }}
    
        public IObjectSet<EngineLubeOilTemperature> EngineLubeOilTemperature
        {
            get { return _engineLubeOilTemperature  ?? (_engineLubeOilTemperature = new MockObjectSet<EngineLubeOilTemperature>()); }
        }
        private IObjectSet<EngineLubeOilTemperature> _engineLubeOilTemperature;
    
        public IObjectSet<EngineLubeOilTemperature> EngineLubeOilTemperatureReadOnly{get { return EngineLubeOilTemperature; }}
    
        public IObjectSet<EngineOilPressure> EngineOilPressure
        {
            get { return _engineOilPressure  ?? (_engineOilPressure = new MockObjectSet<EngineOilPressure>()); }
        }
        private IObjectSet<EngineOilPressure> _engineOilPressure;
    
        public IObjectSet<EngineOilPressure> EngineOilPressureReadOnly{get { return EngineOilPressure; }}
    
        public IObjectSet<EngineTemperature> EngineTemperature
        {
            get { return _engineTemperature  ?? (_engineTemperature = new MockObjectSet<EngineTemperature>()); }
        }
        private IObjectSet<EngineTemperature> _engineTemperature;
    
        public IObjectSet<EngineTemperature> EngineTemperatureReadOnly{get { return EngineTemperature; }}
    
        public IObjectSet<HydraulicOilTemperature> HydraulicOilTemperature
        {
            get { return _hydraulicOilTemperature  ?? (_hydraulicOilTemperature = new MockObjectSet<HydraulicOilTemperature>()); }
        }
        private IObjectSet<HydraulicOilTemperature> _hydraulicOilTemperature;
    
        public IObjectSet<HydraulicOilTemperature> HydraulicOilTemperatureReadOnly{get { return HydraulicOilTemperature; }}
    
        public IObjectSet<SISLink_FFDiag> SISLink_FFDiag
        {
            get { return _sISLink_FFDiag  ?? (_sISLink_FFDiag = new MockObjectSet<SISLink_FFDiag>()); }
        }
        private IObjectSet<SISLink_FFDiag> _sISLink_FFDiag;
    
        public IObjectSet<SISLink_FFDiag> SISLink_FFDiagReadOnly{get { return SISLink_FFDiag; }}
    
        public IObjectSet<SISLink_FFEvents> SISLink_FFEvents
        {
            get { return _sISLink_FFEvents  ?? (_sISLink_FFEvents = new MockObjectSet<SISLink_FFEvents>()); }
        }
        private IObjectSet<SISLink_FFEvents> _sISLink_FFEvents;
    
        public IObjectSet<SISLink_FFEvents> SISLink_FFEventsReadOnly{get { return SISLink_FFEvents; }}
    
        public IObjectSet<SISLinkCodes_Staging> SISLinkCodes_Staging
        {
            get { return _sISLinkCodes_Staging  ?? (_sISLinkCodes_Staging = new MockObjectSet<SISLinkCodes_Staging>()); }
        }
        private IObjectSet<SISLinkCodes_Staging> _sISLinkCodes_Staging;
    
        public IObjectSet<SISLinkCodes_Staging> SISLinkCodes_StagingReadOnly{get { return SISLinkCodes_Staging; }}
    
        public IObjectSet<DimEmulatedEventType> DimEmulatedEventType
        {
            get { return _dimEmulatedEventType  ?? (_dimEmulatedEventType = new MockObjectSet<DimEmulatedEventType>()); }
        }
        private IObjectSet<DimEmulatedEventType> _dimEmulatedEventType;
    
        public IObjectSet<DimEmulatedEventType> DimEmulatedEventTypeReadOnly{get { return DimEmulatedEventType; }}
    
        public IObjectSet<Speeding> Speeding
        {
            get { return _speeding  ?? (_speeding = new MockObjectSet<Speeding>()); }
        }
        private IObjectSet<Speeding> _speeding;
    
        public IObjectSet<Speeding> SpeedingReadOnly{get { return Speeding; }}
    
        public IObjectSet<FactAssetCycleEventEmulatedManual> FactAssetCycleEventEmulatedManual
        {
            get { return _factAssetCycleEventEmulatedManual  ?? (_factAssetCycleEventEmulatedManual = new MockObjectSet<FactAssetCycleEventEmulatedManual>()); }
        }
        private IObjectSet<FactAssetCycleEventEmulatedManual> _factAssetCycleEventEmulatedManual;
    
        public IObjectSet<FactAssetCycleEventEmulatedManual> FactAssetCycleEventEmulatedManualReadOnly{get { return FactAssetCycleEventEmulatedManual; }}
    
        public IObjectSet<BoostPressure> BoostPressure
        {
            get { return _boostPressure  ?? (_boostPressure = new MockObjectSet<BoostPressure>()); }
        }
        private IObjectSet<BoostPressure> _boostPressure;
    
        public IObjectSet<BoostPressure> BoostPressureReadOnly{get { return BoostPressure; }}
    
        public IObjectSet<BoostTemperature> BoostTemperature
        {
            get { return _boostTemperature  ?? (_boostTemperature = new MockObjectSet<BoostTemperature>()); }
        }
        private IObjectSet<BoostTemperature> _boostTemperature;
    
        public IObjectSet<BoostTemperature> BoostTemperatureReadOnly{get { return BoostTemperature; }}
    
        public IObjectSet<EngineOilLevel> EngineOilLevel
        {
            get { return _engineOilLevel  ?? (_engineOilLevel = new MockObjectSet<EngineOilLevel>()); }
        }
        private IObjectSet<EngineOilLevel> _engineOilLevel;
    
        public IObjectSet<EngineOilLevel> EngineOilLevelReadOnly{get { return EngineOilLevel; }}
    
        public IObjectSet<TransmissionOilTemperatureSensorSample> TransmissionOilTemperatureSensorSample
        {
            get { return _transmissionOilTemperatureSensorSample  ?? (_transmissionOilTemperatureSensorSample = new MockObjectSet<TransmissionOilTemperatureSensorSample>()); }
        }
        private IObjectSet<TransmissionOilTemperatureSensorSample> _transmissionOilTemperatureSensorSample;
    
        public IObjectSet<TransmissionOilTemperatureSensorSample> TransmissionOilTemperatureSensorSampleReadOnly{get { return TransmissionOilTemperatureSensorSample; }}
    
        public IObjectSet<BatteryChargeVoltage> BatteryChargeVoltage
        {
            get { return _batteryChargeVoltage  ?? (_batteryChargeVoltage = new MockObjectSet<BatteryChargeVoltage>()); }
        }
        private IObjectSet<BatteryChargeVoltage> _batteryChargeVoltage;
    
        public IObjectSet<BatteryChargeVoltage> BatteryChargeVoltageReadOnly{get { return BatteryChargeVoltage; }}
    
        public IObjectSet<StateBoundary> StateBoundary
        {
            get { return _stateBoundary  ?? (_stateBoundary = new MockObjectSet<StateBoundary>()); }
        }
        private IObjectSet<StateBoundary> _stateBoundary;
    
        public IObjectSet<StateBoundary> StateBoundaryReadOnly{get { return StateBoundary; }}
    
        public IObjectSet<DimAddressStateBoundary> DimAddressStateBoundary
        {
            get { return _dimAddressStateBoundary  ?? (_dimAddressStateBoundary = new MockObjectSet<DimAddressStateBoundary>()); }
        }
        private IObjectSet<DimAddressStateBoundary> _dimAddressStateBoundary;
    
        public IObjectSet<DimAddressStateBoundary> DimAddressStateBoundaryReadOnly{get { return DimAddressStateBoundary; }}
    
        
    
    
    	  public IObjectSet<T> GetObjectSet<T>() where T: class
          {
    
            PropertyInfo[] props = typeof(NH_RPTMock).GetProperties(BindingFlags.Public | BindingFlags.Instance);
            foreach (PropertyInfo prop in props)
            {
              if (prop.PropertyType == typeof(IObjectSet<T>) && prop.Name.EndsWith("ReadOnly"))
              {
                return (IObjectSet<T>)prop.GetValue(this, null);
              }
            }
    
            return null;
          }
    
    }
}
