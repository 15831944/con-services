//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using VSS.Hosted.VLCommon.NH_DATAMockObjectSet;

namespace VSS.Hosted.VLCommon
{
    /// <summary>
    /// The concrete mock context object that implements the context's interface.
    /// Provide an instance of this mock context class to client logic when testing, 
    /// instead of providing a functional context object.
    /// </summary>
    public partial class NH_DATAMock : INH_DATA
    {
        private bool _readOnlyCurrent = false;
        private Stack<bool> _readOnlyStack = new Stack<bool>();
    		public System.Data.Common.DbConnection Connection { get {return null;} }
        public int SaveChanges() 
        { 
          if (_readOnlyCurrent == true)
            throw new System.NotSupportedException("This ObjectContext cannot be used to change data on the database");
          return 1; 
        }
    
        public void SetReadOnlyness(bool readOnly)
        {
          _readOnlyStack.Push(_readOnlyCurrent);
          _readOnlyCurrent = readOnly;
        }
    
        public NH_DATAMock()
        {
        }
    
    	  ~NH_DATAMock()
        {
          Dispose();
        }
    
    
        #region IDisposable
    	  public void Dispose()
        {
            if (_readOnlyStack.Count > 0)
            {
              _readOnlyCurrent = _readOnlyStack.Pop();
            }
        }
        #endregion
    
        public IObjectSet<AntiData> AntiData
        {
            get { return _antiData  ?? (_antiData = new MockObjectSet<AntiData>()); }
        }
        private IObjectSet<AntiData> _antiData;
    
        public IObjectSet<AntiData> AntiDataReadOnly{get { return AntiData; }}
    
        public IObjectSet<DataEngineParameters> DataEngineParameters
        {
            get { return _dataEngineParameters  ?? (_dataEngineParameters = new MockObjectSet<DataEngineParameters>()); }
        }
        private IObjectSet<DataEngineParameters> _dataEngineParameters;
    
        public IObjectSet<DataEngineParameters> DataEngineParametersReadOnly{get { return DataEngineParameters; }}
    
        public IObjectSet<DataEngineStartStop> DataEngineStartStop
        {
            get { return _dataEngineStartStop  ?? (_dataEngineStartStop = new MockObjectSet<DataEngineStartStop>()); }
        }
        private IObjectSet<DataEngineStartStop> _dataEngineStartStop;
    
        public IObjectSet<DataEngineStartStop> DataEngineStartStopReadOnly{get { return DataEngineStartStop; }}
    
        public IObjectSet<DataFaultDiagnostic> DataFaultDiagnostic
        {
            get { return _dataFaultDiagnostic  ?? (_dataFaultDiagnostic = new MockObjectSet<DataFaultDiagnostic>()); }
        }
        private IObjectSet<DataFaultDiagnostic> _dataFaultDiagnostic;
    
        public IObjectSet<DataFaultDiagnostic> DataFaultDiagnosticReadOnly{get { return DataFaultDiagnostic; }}
    
        public IObjectSet<DataFaultEvent> DataFaultEvent
        {
            get { return _dataFaultEvent  ?? (_dataFaultEvent = new MockObjectSet<DataFaultEvent>()); }
        }
        private IObjectSet<DataFaultEvent> _dataFaultEvent;
    
        public IObjectSet<DataFaultEvent> DataFaultEventReadOnly{get { return DataFaultEvent; }}
    
        public IObjectSet<DataFenceAlarm> DataFenceAlarm
        {
            get { return _dataFenceAlarm  ?? (_dataFenceAlarm = new MockObjectSet<DataFenceAlarm>()); }
        }
        private IObjectSet<DataFenceAlarm> _dataFenceAlarm;
    
        public IObjectSet<DataFenceAlarm> DataFenceAlarmReadOnly{get { return DataFenceAlarm; }}
    
        public IObjectSet<DataHoursLocation> DataHoursLocation
        {
            get { return _dataHoursLocation  ?? (_dataHoursLocation = new MockObjectSet<DataHoursLocation>()); }
        }
        private IObjectSet<DataHoursLocation> _dataHoursLocation;
    
        public IObjectSet<DataHoursLocation> DataHoursLocationReadOnly{get { return DataHoursLocation; }}
    
        public IObjectSet<DataIgnOnOff> DataIgnOnOff
        {
            get { return _dataIgnOnOff  ?? (_dataIgnOnOff = new MockObjectSet<DataIgnOnOff>()); }
        }
        private IObjectSet<DataIgnOnOff> _dataIgnOnOff;
    
        public IObjectSet<DataIgnOnOff> DataIgnOnOffReadOnly{get { return DataIgnOnOff; }}
    
        public IObjectSet<DataMoving> DataMoving
        {
            get { return _dataMoving  ?? (_dataMoving = new MockObjectSet<DataMoving>()); }
        }
        private IObjectSet<DataMoving> _dataMoving;
    
        public IObjectSet<DataMoving> DataMovingReadOnly{get { return DataMoving; }}
    
        public IObjectSet<DataMSSKeyID> DataMSSKeyID
        {
            get { return _dataMSSKeyID  ?? (_dataMSSKeyID = new MockObjectSet<DataMSSKeyID>()); }
        }
        private IObjectSet<DataMSSKeyID> _dataMSSKeyID;
    
        public IObjectSet<DataMSSKeyID> DataMSSKeyIDReadOnly{get { return DataMSSKeyID; }}
    
        public IObjectSet<DataServiceMeterAdjustment> DataServiceMeterAdjustment
        {
            get { return _dataServiceMeterAdjustment  ?? (_dataServiceMeterAdjustment = new MockObjectSet<DataServiceMeterAdjustment>()); }
        }
        private IObjectSet<DataServiceMeterAdjustment> _dataServiceMeterAdjustment;
    
        public IObjectSet<DataServiceMeterAdjustment> DataServiceMeterAdjustmentReadOnly{get { return DataServiceMeterAdjustment; }}
    
        public IObjectSet<DataSiteState> DataSiteState
        {
            get { return _dataSiteState  ?? (_dataSiteState = new MockObjectSet<DataSiteState>()); }
        }
        private IObjectSet<DataSiteState> _dataSiteState;
    
        public IObjectSet<DataSiteState> DataSiteStateReadOnly{get { return DataSiteState; }}
    
        public IObjectSet<DataSpeeding> DataSpeeding
        {
            get { return _dataSpeeding  ?? (_dataSpeeding = new MockObjectSet<DataSpeeding>()); }
        }
        private IObjectSet<DataSpeeding> _dataSpeeding;
    
        public IObjectSet<DataSpeeding> DataSpeedingReadOnly{get { return DataSpeeding; }}
    
        public IObjectSet<DimSeverityLevel> DimSeverityLevel
        {
            get { return _dimSeverityLevel  ?? (_dimSeverityLevel = new MockObjectSet<DimSeverityLevel>()); }
        }
        private IObjectSet<DimSeverityLevel> _dimSeverityLevel;
    
        public IObjectSet<DimSeverityLevel> DimSeverityLevelReadOnly{get { return DimSeverityLevel; }}
    
        public IObjectSet<DimSource> DimSource
        {
            get { return _dimSource  ?? (_dimSource = new MockObjectSet<DimSource>()); }
        }
        private IObjectSet<DimSource> _dimSource;
    
        public IObjectSet<DimSource> DimSourceReadOnly{get { return DimSource; }}
    
        public IObjectSet<DimDatalink> DimDatalink
        {
            get { return _dimDatalink  ?? (_dimDatalink = new MockObjectSet<DimDatalink>()); }
        }
        private IObjectSet<DimDatalink> _dimDatalink;
    
        public IObjectSet<DimDatalink> DimDatalinkReadOnly{get { return DimDatalink; }}
    
        public IObjectSet<DataFluidAnalysis> DataFluidAnalysis
        {
            get { return _dataFluidAnalysis  ?? (_dataFluidAnalysis = new MockObjectSet<DataFluidAnalysis>()); }
        }
        private IObjectSet<DataFluidAnalysis> _dataFluidAnalysis;
    
        public IObjectSet<DataFluidAnalysis> DataFluidAnalysisReadOnly{get { return DataFluidAnalysis; }}
    
        public IObjectSet<DataPassThroughPortData> DataPassThroughPortDatas
        {
            get { return _dataPassThroughPortDatas  ?? (_dataPassThroughPortDatas = new MockObjectSet<DataPassThroughPortData>()); }
        }
        private IObjectSet<DataPassThroughPortData> _dataPassThroughPortDatas;
    
        public IObjectSet<DataPassThroughPortData> DataPassThroughPortDatasReadOnly{get { return DataPassThroughPortDatas; }}
    
        public IObjectSet<DataTamperSecurityStatus> DataTamperSecurityStatus
        {
            get { return _dataTamperSecurityStatus  ?? (_dataTamperSecurityStatus = new MockObjectSet<DataTamperSecurityStatus>()); }
        }
        private IObjectSet<DataTamperSecurityStatus> _dataTamperSecurityStatus;
    
        public IObjectSet<DataTamperSecurityStatus> DataTamperSecurityStatusReadOnly{get { return DataTamperSecurityStatus; }}
    
        public IObjectSet<DataRawCANMessage> DataRawCANMessage
        {
            get { return _dataRawCANMessage  ?? (_dataRawCANMessage = new MockObjectSet<DataRawCANMessage>()); }
        }
        private IObjectSet<DataRawCANMessage> _dataRawCANMessage;
    
        public IObjectSet<DataRawCANMessage> DataRawCANMessageReadOnly{get { return DataRawCANMessage; }}
    
        public IObjectSet<DimUnitType> DimUnitType
        {
            get { return _dimUnitType  ?? (_dimUnitType = new MockObjectSet<DimUnitType>()); }
        }
        private IObjectSet<DimUnitType> _dimUnitType;
    
        public IObjectSet<DimUnitType> DimUnitTypeReadOnly{get { return DimUnitType; }}
    
        public IObjectSet<DataParametersReport> DataParametersReport
        {
            get { return _dataParametersReport  ?? (_dataParametersReport = new MockObjectSet<DataParametersReport>()); }
        }
        private IObjectSet<DataParametersReport> _dataParametersReport;
    
        public IObjectSet<DataParametersReport> DataParametersReportReadOnly{get { return DataParametersReport; }}
    
        public IObjectSet<DataStatisticsReport> DataStatisticsReport
        {
            get { return _dataStatisticsReport  ?? (_dataStatisticsReport = new MockObjectSet<DataStatisticsReport>()); }
        }
        private IObjectSet<DataStatisticsReport> _dataStatisticsReport;
    
        public IObjectSet<DataStatisticsReport> DataStatisticsReportReadOnly{get { return DataStatisticsReport; }}
    
        public IObjectSet<DimEngineState> DimEngineState
        {
            get { return _dimEngineState  ?? (_dimEngineState = new MockObjectSet<DimEngineState>()); }
        }
        private IObjectSet<DimEngineState> _dimEngineState;
    
        public IObjectSet<DimEngineState> DimEngineStateReadOnly{get { return DimEngineState; }}
    
        public IObjectSet<DataGensetOperationalState> DataGensetOperationalState
        {
            get { return _dataGensetOperationalState  ?? (_dataGensetOperationalState = new MockObjectSet<DataGensetOperationalState>()); }
        }
        private IObjectSet<DataGensetOperationalState> _dataGensetOperationalState;
    
        public IObjectSet<DataGensetOperationalState> DataGensetOperationalStateReadOnly{get { return DataGensetOperationalState; }}
    
        public IObjectSet<DataProjectTagFileError> DataProjectTagFileError
        {
            get { return _dataProjectTagFileError  ?? (_dataProjectTagFileError = new MockObjectSet<DataProjectTagFileError>()); }
        }
        private IObjectSet<DataProjectTagFileError> _dataProjectTagFileError;
    
        public IObjectSet<DataProjectTagFileError> DataProjectTagFileErrorReadOnly{get { return DataProjectTagFileError; }}
    
        public IObjectSet<DataPowerState> DataPowerState
        {
            get { return _dataPowerState  ?? (_dataPowerState = new MockObjectSet<DataPowerState>()); }
        }
        private IObjectSet<DataPowerState> _dataPowerState;
    
        public IObjectSet<DataPowerState> DataPowerStateReadOnly{get { return DataPowerState; }}
    
        public IObjectSet<DataIdleTimeOut> DataIdleTimeOut
        {
            get { return _dataIdleTimeOut  ?? (_dataIdleTimeOut = new MockObjectSet<DataIdleTimeOut>()); }
        }
        private IObjectSet<DataIdleTimeOut> _dataIdleTimeOut;
    
        public IObjectSet<DataIdleTimeOut> DataIdleTimeOutReadOnly{get { return DataIdleTimeOut; }}
    
        public IObjectSet<SensorAspects> SensorAspects
        {
            get { return _sensorAspects  ?? (_sensorAspects = new MockObjectSet<SensorAspects>()); }
        }
        private IObjectSet<SensorAspects> _sensorAspects;
    
        public IObjectSet<SensorAspects> SensorAspectsReadOnly{get { return SensorAspects; }}
    
        public IObjectSet<SensorType> SensorType
        {
            get { return _sensorType  ?? (_sensorType = new MockObjectSet<SensorType>()); }
        }
        private IObjectSet<SensorType> _sensorType;
    
        public IObjectSet<SensorType> SensorTypeReadOnly{get { return SensorType; }}
    
        public IObjectSet<DataTirePressureMonitorSystem> DataTirePressureMonitorSystem
        {
            get { return _dataTirePressureMonitorSystem  ?? (_dataTirePressureMonitorSystem = new MockObjectSet<DataTirePressureMonitorSystem>()); }
        }
        private IObjectSet<DataTirePressureMonitorSystem> _dataTirePressureMonitorSystem;
    
        public IObjectSet<DataTirePressureMonitorSystem> DataTirePressureMonitorSystemReadOnly{get { return DataTirePressureMonitorSystem; }}
    
        public IObjectSet<DataCustomUtilizationEvent> DataCustomUtilizationEvent
        {
            get { return _dataCustomUtilizationEvent  ?? (_dataCustomUtilizationEvent = new MockObjectSet<DataCustomUtilizationEvent>()); }
        }
        private IObjectSet<DataCustomUtilizationEvent> _dataCustomUtilizationEvent;
    
        public IObjectSet<DataCustomUtilizationEvent> DataCustomUtilizationEventReadOnly{get { return DataCustomUtilizationEvent; }}
    
        public IObjectSet<DimCustomUtilizationEventType> DimCustomUtilizationEventType
        {
            get { return _dimCustomUtilizationEventType  ?? (_dimCustomUtilizationEventType = new MockObjectSet<DimCustomUtilizationEventType>()); }
        }
        private IObjectSet<DimCustomUtilizationEventType> _dimCustomUtilizationEventType;
    
        public IObjectSet<DimCustomUtilizationEventType> DimCustomUtilizationEventTypeReadOnly{get { return DimCustomUtilizationEventType; }}
    
        public IObjectSet<DataEngineTempSensorSample> DataEngineTempSensorSample
        {
            get { return _dataEngineTempSensorSample  ?? (_dataEngineTempSensorSample = new MockObjectSet<DataEngineTempSensorSample>()); }
        }
        private IObjectSet<DataEngineTempSensorSample> _dataEngineTempSensorSample;
    
        public IObjectSet<DataEngineTempSensorSample> DataEngineTempSensorSampleReadOnly{get { return DataEngineTempSensorSample; }}
    
        public IObjectSet<OEMDataSourceType> OEMDataSourceType
        {
            get { return _oEMDataSourceType  ?? (_oEMDataSourceType = new MockObjectSet<OEMDataSourceType>()); }
        }
        private IObjectSet<OEMDataSourceType> _oEMDataSourceType;
    
        public IObjectSet<OEMDataSourceType> OEMDataSourceTypeReadOnly{get { return OEMDataSourceType; }}
    
        public IObjectSet<DataCNHCANAlarmCode> DataCNHCANAlarmCode
        {
            get { return _dataCNHCANAlarmCode  ?? (_dataCNHCANAlarmCode = new MockObjectSet<DataCNHCANAlarmCode>()); }
        }
        private IObjectSet<DataCNHCANAlarmCode> _dataCNHCANAlarmCode;
    
        public IObjectSet<DataCNHCANAlarmCode> DataCNHCANAlarmCodeReadOnly{get { return DataCNHCANAlarmCode; }}
    
        public IObjectSet<DimCNHSeverityLevel> DimCNHSeverityLevel
        {
            get { return _dimCNHSeverityLevel  ?? (_dimCNHSeverityLevel = new MockObjectSet<DimCNHSeverityLevel>()); }
        }
        private IObjectSet<DimCNHSeverityLevel> _dimCNHSeverityLevel;
    
        public IObjectSet<DimCNHSeverityLevel> DimCNHSeverityLevelReadOnly{get { return DimCNHSeverityLevel; }}
    
        public IObjectSet<DataCatInspection> DataCatInspection
        {
            get { return _dataCatInspection  ?? (_dataCatInspection = new MockObjectSet<DataCatInspection>()); }
        }
        private IObjectSet<DataCatInspection> _dataCatInspection;
    
        public IObjectSet<DataCatInspection> DataCatInspectionReadOnly{get { return DataCatInspection; }}
    
        public IObjectSet<DataTirePressureMonitorInfo> DataTirePressureMonitorInfo
        {
            get { return _dataTirePressureMonitorInfo  ?? (_dataTirePressureMonitorInfo = new MockObjectSet<DataTirePressureMonitorInfo>()); }
        }
        private IObjectSet<DataTirePressureMonitorInfo> _dataTirePressureMonitorInfo;
    
        public IObjectSet<DataTirePressureMonitorInfo> DataTirePressureMonitorInfoReadOnly{get { return DataTirePressureMonitorInfo; }}
    
        public IObjectSet<DataTamperLevel> DataTamperLevel
        {
            get { return _dataTamperLevel  ?? (_dataTamperLevel = new MockObjectSet<DataTamperLevel>()); }
        }
        private IObjectSet<DataTamperLevel> _dataTamperLevel;
    
        public IObjectSet<DataTamperLevel> DataTamperLevelReadOnly{get { return DataTamperLevel; }}
    
        public IObjectSet<DataDeviceBatteryRemaining> DataDeviceBatteryRemaining
        {
            get { return _dataDeviceBatteryRemaining  ?? (_dataDeviceBatteryRemaining = new MockObjectSet<DataDeviceBatteryRemaining>()); }
        }
        private IObjectSet<DataDeviceBatteryRemaining> _dataDeviceBatteryRemaining;
    
        public IObjectSet<DataDeviceBatteryRemaining> DataDeviceBatteryRemainingReadOnly{get { return DataDeviceBatteryRemaining; }}
    
        public IObjectSet<DataSecurityPendingStartMode> DataSecurityPendingStartMode
        {
            get { return _dataSecurityPendingStartMode  ?? (_dataSecurityPendingStartMode = new MockObjectSet<DataSecurityPendingStartMode>()); }
        }
        private IObjectSet<DataSecurityPendingStartMode> _dataSecurityPendingStartMode;
    
        public IObjectSet<DataSecurityPendingStartMode> DataSecurityPendingStartModeReadOnly{get { return DataSecurityPendingStartMode; }}
    
        public IObjectSet<DataSwitchState> DataSwitchState
        {
            get { return _dataSwitchState  ?? (_dataSwitchState = new MockObjectSet<DataSwitchState>()); }
        }
        private IObjectSet<DataSwitchState> _dataSwitchState;
    
        public IObjectSet<DataSwitchState> DataSwitchStateReadOnly{get { return DataSwitchState; }}
    
        public IObjectSet<DataFeedDigitalSwitchStatus> DataFeedDigitalSwitchStatus
        {
            get { return _dataFeedDigitalSwitchStatus  ?? (_dataFeedDigitalSwitchStatus = new MockObjectSet<DataFeedDigitalSwitchStatus>()); }
        }
        private IObjectSet<DataFeedDigitalSwitchStatus> _dataFeedDigitalSwitchStatus;
    
        public IObjectSet<DataFeedDigitalSwitchStatus> DataFeedDigitalSwitchStatusReadOnly{get { return DataFeedDigitalSwitchStatus; }}
    
        public IObjectSet<DataEngineLubeOilTemperatureSensorSample> DataEngineLubeOilTemperatureSensorSample
        {
            get { return _dataEngineLubeOilTemperatureSensorSample  ?? (_dataEngineLubeOilTemperatureSensorSample = new MockObjectSet<DataEngineLubeOilTemperatureSensorSample>()); }
        }
        private IObjectSet<DataEngineLubeOilTemperatureSensorSample> _dataEngineLubeOilTemperatureSensorSample;
    
        public IObjectSet<DataEngineLubeOilTemperatureSensorSample> DataEngineLubeOilTemperatureSensorSampleReadOnly{get { return DataEngineLubeOilTemperatureSensorSample; }}
    
        public IObjectSet<DataEngineRPMSensorSample> DataEngineRPMSensorSample
        {
            get { return _dataEngineRPMSensorSample  ?? (_dataEngineRPMSensorSample = new MockObjectSet<DataEngineRPMSensorSample>()); }
        }
        private IObjectSet<DataEngineRPMSensorSample> _dataEngineRPMSensorSample;
    
        public IObjectSet<DataEngineRPMSensorSample> DataEngineRPMSensorSampleReadOnly{get { return DataEngineRPMSensorSample; }}
    
        public IObjectSet<DataHydraulicOilTemperatureSensorSample> DataHydraulicOilTemperatureSensorSample
        {
            get { return _dataHydraulicOilTemperatureSensorSample  ?? (_dataHydraulicOilTemperatureSensorSample = new MockObjectSet<DataHydraulicOilTemperatureSensorSample>()); }
        }
        private IObjectSet<DataHydraulicOilTemperatureSensorSample> _dataHydraulicOilTemperatureSensorSample;
    
        public IObjectSet<DataHydraulicOilTemperatureSensorSample> DataHydraulicOilTemperatureSensorSampleReadOnly{get { return DataHydraulicOilTemperatureSensorSample; }}
    
        public IObjectSet<DataEngineOilPressureSensorSample> DataEngineOilPressureSensorSample
        {
            get { return _dataEngineOilPressureSensorSample  ?? (_dataEngineOilPressureSensorSample = new MockObjectSet<DataEngineOilPressureSensorSample>()); }
        }
        private IObjectSet<DataEngineOilPressureSensorSample> _dataEngineOilPressureSensorSample;
    
        public IObjectSet<DataEngineOilPressureSensorSample> DataEngineOilPressureSensorSampleReadOnly{get { return DataEngineOilPressureSensorSample; }}
    
        public IObjectSet<CustomDataEngineParameters> CustomDataEngineParameters
        {
            get { return _customDataEngineParameters  ?? (_customDataEngineParameters = new MockObjectSet<CustomDataEngineParameters>()); }
        }
        private IObjectSet<CustomDataEngineParameters> _customDataEngineParameters;
    
        public IObjectSet<CustomDataEngineParameters> CustomDataEngineParametersReadOnly{get { return CustomDataEngineParameters; }}
    
        public IObjectSet<DimFuelTankCapacity> DimFuelTankCapacity
        {
            get { return _dimFuelTankCapacity  ?? (_dimFuelTankCapacity = new MockObjectSet<DimFuelTankCapacity>()); }
        }
        private IObjectSet<DimFuelTankCapacity> _dimFuelTankCapacity;
    
        public IObjectSet<DimFuelTankCapacity> DimFuelTankCapacityReadOnly{get { return DimFuelTankCapacity; }}
    
        public IObjectSet<DataBatteryChargingVoltage> DataBatteryChargingVoltage
        {
            get { return _dataBatteryChargingVoltage  ?? (_dataBatteryChargingVoltage = new MockObjectSet<DataBatteryChargingVoltage>()); }
        }
        private IObjectSet<DataBatteryChargingVoltage> _dataBatteryChargingVoltage;
    
        public IObjectSet<DataBatteryChargingVoltage> DataBatteryChargingVoltageReadOnly{get { return DataBatteryChargingVoltage; }}
    
        public IObjectSet<DataTamperState> DataTamperState
        {
            get { return _dataTamperState  ?? (_dataTamperState = new MockObjectSet<DataTamperState>()); }
        }
        private IObjectSet<DataTamperState> _dataTamperState;
    
        public IObjectSet<DataTamperState> DataTamperStateReadOnly{get { return DataTamperState; }}
    
        public IObjectSet<DataRemoteSecurityState> DataRemoteSecurityState
        {
            get { return _dataRemoteSecurityState  ?? (_dataRemoteSecurityState = new MockObjectSet<DataRemoteSecurityState>()); }
        }
        private IObjectSet<DataRemoteSecurityState> _dataRemoteSecurityState;
    
        public IObjectSet<DataRemoteSecurityState> DataRemoteSecurityStateReadOnly{get { return DataRemoteSecurityState; }}
    
        public IObjectSet<DataBoostPressure> DataBoostPressure
        {
            get { return _dataBoostPressure  ?? (_dataBoostPressure = new MockObjectSet<DataBoostPressure>()); }
        }
        private IObjectSet<DataBoostPressure> _dataBoostPressure;
    
        public IObjectSet<DataBoostPressure> DataBoostPressureReadOnly{get { return DataBoostPressure; }}
    
        public IObjectSet<DataBoostTemperature> DataBoostTemperature
        {
            get { return _dataBoostTemperature  ?? (_dataBoostTemperature = new MockObjectSet<DataBoostTemperature>()); }
        }
        private IObjectSet<DataBoostTemperature> _dataBoostTemperature;
    
        public IObjectSet<DataBoostTemperature> DataBoostTemperatureReadOnly{get { return DataBoostTemperature; }}
    
        public IObjectSet<DataEngineOilLevel> DataEngineOilLevel
        {
            get { return _dataEngineOilLevel  ?? (_dataEngineOilLevel = new MockObjectSet<DataEngineOilLevel>()); }
        }
        private IObjectSet<DataEngineOilLevel> _dataEngineOilLevel;
    
        public IObjectSet<DataEngineOilLevel> DataEngineOilLevelReadOnly{get { return DataEngineOilLevel; }}
    
        public IObjectSet<DataTransmissionOilTemperatureSensorSample> DataTransmissionOilTemperatureSensorSample
        {
            get { return _dataTransmissionOilTemperatureSensorSample  ?? (_dataTransmissionOilTemperatureSensorSample = new MockObjectSet<DataTransmissionOilTemperatureSensorSample>()); }
        }
        private IObjectSet<DataTransmissionOilTemperatureSensorSample> _dataTransmissionOilTemperatureSensorSample;
    
        public IObjectSet<DataTransmissionOilTemperatureSensorSample> DataTransmissionOilTemperatureSensorSampleReadOnly{get { return DataTransmissionOilTemperatureSensorSample; }}
    
        public IObjectSet<DataPowerMode> DataPowerMode
        {
            get { return _dataPowerMode  ?? (_dataPowerMode = new MockObjectSet<DataPowerMode>()); }
        }
        private IObjectSet<DataPowerMode> _dataPowerMode;
    
        public IObjectSet<DataPowerMode> DataPowerModeReadOnly{get { return DataPowerMode; }}
    
        public IObjectSet<DimPowerMode> DimPowerMode
        {
            get { return _dimPowerMode  ?? (_dimPowerMode = new MockObjectSet<DimPowerMode>()); }
        }
        private IObjectSet<DimPowerMode> _dimPowerMode;
    
        public IObjectSet<DimPowerMode> DimPowerModeReadOnly{get { return DimPowerMode; }}
    
        public IObjectSet<ExternalCustomerKeyType> ExternalCustomerKeyType
        {
            get { return _externalCustomerKeyType  ?? (_externalCustomerKeyType = new MockObjectSet<ExternalCustomerKeyType>()); }
        }
        private IObjectSet<ExternalCustomerKeyType> _externalCustomerKeyType;
    
        public IObjectSet<ExternalCustomerKeyType> ExternalCustomerKeyTypeReadOnly{get { return ExternalCustomerKeyType; }}
    
        public IObjectSet<DataOperator> DataOperator
        {
            get { return _dataOperator  ?? (_dataOperator = new MockObjectSet<DataOperator>()); }
        }
        private IObjectSet<DataOperator> _dataOperator;
    
        public IObjectSet<DataOperator> DataOperatorReadOnly{get { return DataOperator; }}
    
        public IObjectSet<DataDieselExhaustFluid> DataDieselExhaustFluid
        {
            get { return _dataDieselExhaustFluid  ?? (_dataDieselExhaustFluid = new MockObjectSet<DataDieselExhaustFluid>()); }
        }
        private IObjectSet<DataDieselExhaustFluid> _dataDieselExhaustFluid;
    
        public IObjectSet<DataDieselExhaustFluid> DataDieselExhaustFluidReadOnly{get { return DataDieselExhaustFluid; }}
    
    }
}
