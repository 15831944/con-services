//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace VSS.Hosted.VLCommon
{
    public partial class ECMInfo
    {
        #region Primitive Properties
    
        public virtual long ID
        {
            get;
            set;
        }
    
        public virtual bool IsSyncClockMaster
        {
            get;
            set;
        }
    
        public virtual bool HasSMUClock
        {
            get;
            set;
        }
    
        public virtual string Engine1SN
        {
            get;
            set;
        }
    
        public virtual string Transmission1SN
        {
            get;
            set;
        }
    
        public virtual string Engine2SN
        {
            get;
            set;
        }
    
        public virtual string Transmission2SN
        {
            get;
            set;
        }
    
        public virtual bool EventProtocolVer
        {
            get;
            set;
        }
    
        public virtual bool DiagnosticProtocolVer
        {
            get;
            set;
        }
    
        public virtual string SoftwarePartNumber
        {
            get;
            set;
        }
    
        public virtual string SerialNumber
        {
            get;
            set;
        }
    
        public virtual long fk_DeviceID
        {
            get { return _fk_DeviceID; }
            set
            {
                if (_fk_DeviceID != value)
                {
                    if (Device != null && Device.ID != value)
                    {
                        Device = null;
                    }
                    _fk_DeviceID = value;
                }
            }
        }
        private long _fk_DeviceID;
    
        public virtual string SoftwareDescription
        {
            get;
            set;
        }
    
        public virtual string SoftwareReleaseDate
        {
            get;
            set;
        }
    
        public virtual string PartNumber
        {
            get;
            set;
        }
    
        public virtual Nullable<int> SourceAddress
        {
            get;
            set;
        }
    
        public virtual string J1939Name
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastECMInfoUTC
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Device Device
        {
            get { return _device; }
            set
            {
                if (!ReferenceEquals(_device, value))
                {
                    var previousValue = _device;
                    _device = value;
                    FixupDevice(previousValue);
                }
            }
        }
        private Device _device;
    
        public virtual ICollection<ECMDatalinkInfo> ECMDatalinkInfo
        {
            get
            {
                if (_eCMDatalinkInfo == null)
                {
                    var newCollection = new FixupCollection<ECMDatalinkInfo>();
                    newCollection.CollectionChanged += FixupECMDatalinkInfo;
                    _eCMDatalinkInfo = newCollection;
                }
                return _eCMDatalinkInfo;
            }
            set
            {
                if (!ReferenceEquals(_eCMDatalinkInfo, value))
                {
                    var previousValue = _eCMDatalinkInfo as FixupCollection<ECMDatalinkInfo>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupECMDatalinkInfo;
                    }
                    _eCMDatalinkInfo = value;
                    var newValue = value as FixupCollection<ECMDatalinkInfo>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupECMDatalinkInfo;
                    }
                }
            }
        }
        private ICollection<ECMDatalinkInfo> _eCMDatalinkInfo;

        #endregion

        #region Association Fixup
    
        private void FixupDevice(Device previousValue)
        {
            if (previousValue != null && previousValue.ECMInfo.Contains(this))
            {
                previousValue.ECMInfo.Remove(this);
            }
    
            if (Device != null)
            {
                if (!Device.ECMInfo.Contains(this))
                {
                    Device.ECMInfo.Add(this);
                }
                if (fk_DeviceID != Device.ID)
                {
                    fk_DeviceID = Device.ID;
                }
            }
        }
    
        private void FixupECMDatalinkInfo(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ECMDatalinkInfo item in e.NewItems)
                {
                    item.fk_ECMInfoID = ID;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ECMDatalinkInfo item in e.OldItems)
                {
                }
            }
        }

        #endregion

    }
}
