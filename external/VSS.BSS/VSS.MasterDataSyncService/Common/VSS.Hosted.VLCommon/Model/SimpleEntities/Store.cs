//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace VSS.Hosted.VLCommon
{
    public partial class Store
    {
        #region Primitive Properties
    
        public virtual long ID
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<AssetReference> AssetReference
        {
            get
            {
                if (_assetReference == null)
                {
                    var newCollection = new FixupCollection<AssetReference>();
                    newCollection.CollectionChanged += FixupAssetReference;
                    _assetReference = newCollection;
                }
                return _assetReference;
            }
            set
            {
                if (!ReferenceEquals(_assetReference, value))
                {
                    var previousValue = _assetReference as FixupCollection<AssetReference>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAssetReference;
                    }
                    _assetReference = value;
                    var newValue = value as FixupCollection<AssetReference>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAssetReference;
                    }
                }
            }
        }
        private ICollection<AssetReference> _assetReference;
    
        public virtual ICollection<CustomerReference> CustomerReference
        {
            get
            {
                if (_customerReference == null)
                {
                    var newCollection = new FixupCollection<CustomerReference>();
                    newCollection.CollectionChanged += FixupCustomerReference;
                    _customerReference = newCollection;
                }
                return _customerReference;
            }
            set
            {
                if (!ReferenceEquals(_customerReference, value))
                {
                    var previousValue = _customerReference as FixupCollection<CustomerReference>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerReference;
                    }
                    _customerReference = value;
                    var newValue = value as FixupCollection<CustomerReference>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerReference;
                    }
                }
            }
        }
        private ICollection<CustomerReference> _customerReference;
    
        public virtual ICollection<DeviceReference> DeviceReference
        {
            get
            {
                if (_deviceReference == null)
                {
                    var newCollection = new FixupCollection<DeviceReference>();
                    newCollection.CollectionChanged += FixupDeviceReference;
                    _deviceReference = newCollection;
                }
                return _deviceReference;
            }
            set
            {
                if (!ReferenceEquals(_deviceReference, value))
                {
                    var previousValue = _deviceReference as FixupCollection<DeviceReference>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDeviceReference;
                    }
                    _deviceReference = value;
                    var newValue = value as FixupCollection<DeviceReference>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDeviceReference;
                    }
                }
            }
        }
        private ICollection<DeviceReference> _deviceReference;
    
        public virtual ICollection<ServiceReference> ServiceReference
        {
            get
            {
                if (_serviceReference == null)
                {
                    var newCollection = new FixupCollection<ServiceReference>();
                    newCollection.CollectionChanged += FixupServiceReference;
                    _serviceReference = newCollection;
                }
                return _serviceReference;
            }
            set
            {
                if (!ReferenceEquals(_serviceReference, value))
                {
                    var previousValue = _serviceReference as FixupCollection<ServiceReference>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupServiceReference;
                    }
                    _serviceReference = value;
                    var newValue = value as FixupCollection<ServiceReference>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupServiceReference;
                    }
                }
            }
        }
        private ICollection<ServiceReference> _serviceReference;

        #endregion

        #region Association Fixup
    
        private void FixupAssetReference(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AssetReference item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AssetReference item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupCustomerReference(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerReference item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerReference item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupDeviceReference(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DeviceReference item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DeviceReference item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupServiceReference(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ServiceReference item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ServiceReference item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }

        #endregion

    }
}
