//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Transactions;

namespace VSS.Hosted.VLCommon
{
    /// <summary>
    /// The functional concrete object context. This is just like the normal
    /// context that would be generated using the POCO artefact generator, 
    /// apart from the fact that this one implements an interface containing 
    /// the entity set properties and exposes <code>IObjectSet</code>
    /// instances for entity set properties.
    ///
    /// The context can be constructed as "read-only", in which case SNAPSHOT IsolationLevel is used for queries
    /// and calls to SaveChanges are not supported.
    /// </summary>
    public partial class NH_OEMDATA : ObjectContext, INH_OEMDATA 
    {
        public const string ConnectionString = "name=NH_OEMDATA";
        public const string ContainerName = "NH_OEMDATA";
    
        private bool _readOnly = false;
    
        #region Constructors
    
        public NH_OEMDATA(bool readOnly = false):
            base(ConnectionString, ContainerName)
        {
        	  _readOnly = readOnly;
    
        }
    
        public NH_OEMDATA(string connectionString, bool readOnly = false):
            base(connectionString, ContainerName)
        {
        	  _readOnly = readOnly;
    
        }
    
        public NH_OEMDATA(EntityConnection connection,bool readOnly = false):
            base(connection, ContainerName)
        {
        	  _readOnly = readOnly;
    
        }
    
    	~NH_OEMDATA()
        {
          Dispose();
        }
    
        #endregion
    
    	#region IDisposable
    	new public void Dispose()
        {
          base.Dispose();
        }
    
        protected override void Dispose(bool disposing)
        {
          base.Dispose(disposing);
        }
    
        #endregion
    
        #region SaveChanges
    
    	public override int SaveChanges(SaveOptions options)
    	{
    	  if ( _readOnly )
    	    throw new System.NotSupportedException("This ObjectContext cannot be used to change data on the database");
    
        return base.SaveChanges(options);
    	}
    
        #endregion
    
        #region ObjectSet Properties
    
        public IObjectSet<CAT_AntiData> CAT_AntiData
        {
            get { return _cAT_AntiData ?? (_cAT_AntiData = CreateObjectSet<CAT_AntiData>("CAT_AntiData")); }
        }
        private ObjectSet<CAT_AntiData> _cAT_AntiData;
        public IObjectSet<CAT_AntiData> CAT_AntiDataReadOnly
        {
            get 
            { 
              if (null == _cAT_AntiDataRO)
              {
                _cAT_AntiDataRO = CreateObjectSet<CAT_AntiData>("CAT_AntiData"); 
                _cAT_AntiDataRO.MergeOption=MergeOption.NoTracking;
              }
              return _cAT_AntiDataRO;
            }
        }
        private ObjectSet<CAT_AntiData> _cAT_AntiDataRO;
    
        public IObjectSet<CAT_Diagnostic> CAT_Diagnostic
        {
            get { return _cAT_Diagnostic ?? (_cAT_Diagnostic = CreateObjectSet<CAT_Diagnostic>("CAT_Diagnostic")); }
        }
        private ObjectSet<CAT_Diagnostic> _cAT_Diagnostic;
        public IObjectSet<CAT_Diagnostic> CAT_DiagnosticReadOnly
        {
            get 
            { 
              if (null == _cAT_DiagnosticRO)
              {
                _cAT_DiagnosticRO = CreateObjectSet<CAT_Diagnostic>("CAT_Diagnostic"); 
                _cAT_DiagnosticRO.MergeOption=MergeOption.NoTracking;
              }
              return _cAT_DiagnosticRO;
            }
        }
        private ObjectSet<CAT_Diagnostic> _cAT_DiagnosticRO;
    
        public IObjectSet<CAT_DigStatus> CAT_DigStatus
        {
            get { return _cAT_DigStatus ?? (_cAT_DigStatus = CreateObjectSet<CAT_DigStatus>("CAT_DigStatus")); }
        }
        private ObjectSet<CAT_DigStatus> _cAT_DigStatus;
        public IObjectSet<CAT_DigStatus> CAT_DigStatusReadOnly
        {
            get 
            { 
              if (null == _cAT_DigStatusRO)
              {
                _cAT_DigStatusRO = CreateObjectSet<CAT_DigStatus>("CAT_DigStatus"); 
                _cAT_DigStatusRO.MergeOption=MergeOption.NoTracking;
              }
              return _cAT_DigStatusRO;
            }
        }
        private ObjectSet<CAT_DigStatus> _cAT_DigStatusRO;
    
        public IObjectSet<CAT_Engine> CAT_Engine
        {
            get { return _cAT_Engine ?? (_cAT_Engine = CreateObjectSet<CAT_Engine>("CAT_Engine")); }
        }
        private ObjectSet<CAT_Engine> _cAT_Engine;
        public IObjectSet<CAT_Engine> CAT_EngineReadOnly
        {
            get 
            { 
              if (null == _cAT_EngineRO)
              {
                _cAT_EngineRO = CreateObjectSet<CAT_Engine>("CAT_Engine"); 
                _cAT_EngineRO.MergeOption=MergeOption.NoTracking;
              }
              return _cAT_EngineRO;
            }
        }
        private ObjectSet<CAT_Engine> _cAT_EngineRO;
    
        public IObjectSet<CAT_Event> CAT_Event
        {
            get { return _cAT_Event ?? (_cAT_Event = CreateObjectSet<CAT_Event>("CAT_Event")); }
        }
        private ObjectSet<CAT_Event> _cAT_Event;
        public IObjectSet<CAT_Event> CAT_EventReadOnly
        {
            get 
            { 
              if (null == _cAT_EventRO)
              {
                _cAT_EventRO = CreateObjectSet<CAT_Event>("CAT_Event"); 
                _cAT_EventRO.MergeOption=MergeOption.NoTracking;
              }
              return _cAT_EventRO;
            }
        }
        private ObjectSet<CAT_Event> _cAT_EventRO;
    
        public IObjectSet<CAT_FenceAlert> CAT_FenceAlert
        {
            get { return _cAT_FenceAlert ?? (_cAT_FenceAlert = CreateObjectSet<CAT_FenceAlert>("CAT_FenceAlert")); }
        }
        private ObjectSet<CAT_FenceAlert> _cAT_FenceAlert;
        public IObjectSet<CAT_FenceAlert> CAT_FenceAlertReadOnly
        {
            get 
            { 
              if (null == _cAT_FenceAlertRO)
              {
                _cAT_FenceAlertRO = CreateObjectSet<CAT_FenceAlert>("CAT_FenceAlert"); 
                _cAT_FenceAlertRO.MergeOption=MergeOption.NoTracking;
              }
              return _cAT_FenceAlertRO;
            }
        }
        private ObjectSet<CAT_FenceAlert> _cAT_FenceAlertRO;
    
        public IObjectSet<CAT_Fuel> CAT_Fuel
        {
            get { return _cAT_Fuel ?? (_cAT_Fuel = CreateObjectSet<CAT_Fuel>("CAT_Fuel")); }
        }
        private ObjectSet<CAT_Fuel> _cAT_Fuel;
        public IObjectSet<CAT_Fuel> CAT_FuelReadOnly
        {
            get 
            { 
              if (null == _cAT_FuelRO)
              {
                _cAT_FuelRO = CreateObjectSet<CAT_Fuel>("CAT_Fuel"); 
                _cAT_FuelRO.MergeOption=MergeOption.NoTracking;
              }
              return _cAT_FuelRO;
            }
        }
        private ObjectSet<CAT_Fuel> _cAT_FuelRO;
    
        public IObjectSet<CAT_ManualSMU> CAT_ManualSMU
        {
            get { return _cAT_ManualSMU ?? (_cAT_ManualSMU = CreateObjectSet<CAT_ManualSMU>("CAT_ManualSMU")); }
        }
        private ObjectSet<CAT_ManualSMU> _cAT_ManualSMU;
        public IObjectSet<CAT_ManualSMU> CAT_ManualSMUReadOnly
        {
            get 
            { 
              if (null == _cAT_ManualSMURO)
              {
                _cAT_ManualSMURO = CreateObjectSet<CAT_ManualSMU>("CAT_ManualSMU"); 
                _cAT_ManualSMURO.MergeOption=MergeOption.NoTracking;
              }
              return _cAT_ManualSMURO;
            }
        }
        private ObjectSet<CAT_ManualSMU> _cAT_ManualSMURO;
    
        public IObjectSet<CAT_SMULoc> CAT_SMULoc
        {
            get { return _cAT_SMULoc ?? (_cAT_SMULoc = CreateObjectSet<CAT_SMULoc>("CAT_SMULoc")); }
        }
        private ObjectSet<CAT_SMULoc> _cAT_SMULoc;
        public IObjectSet<CAT_SMULoc> CAT_SMULocReadOnly
        {
            get 
            { 
              if (null == _cAT_SMULocRO)
              {
                _cAT_SMULocRO = CreateObjectSet<CAT_SMULoc>("CAT_SMULoc"); 
                _cAT_SMULocRO.MergeOption=MergeOption.NoTracking;
              }
              return _cAT_SMULocRO;
            }
        }
        private ObjectSet<CAT_SMULoc> _cAT_SMULocRO;
    
        public IObjectSet<CAT_StartStop> CAT_StartStop
        {
            get { return _cAT_StartStop ?? (_cAT_StartStop = CreateObjectSet<CAT_StartStop>("CAT_StartStop")); }
        }
        private ObjectSet<CAT_StartStop> _cAT_StartStop;
        public IObjectSet<CAT_StartStop> CAT_StartStopReadOnly
        {
            get 
            { 
              if (null == _cAT_StartStopRO)
              {
                _cAT_StartStopRO = CreateObjectSet<CAT_StartStop>("CAT_StartStop"); 
                _cAT_StartStopRO.MergeOption=MergeOption.NoTracking;
              }
              return _cAT_StartStopRO;
            }
        }
        private ObjectSet<CAT_StartStop> _cAT_StartStopRO;
    
        public IObjectSet<UnparsedXML> UnparsedXMLs
        {
            get { return _unparsedXMLs ?? (_unparsedXMLs = CreateObjectSet<UnparsedXML>("UnparsedXMLs")); }
        }
        private ObjectSet<UnparsedXML> _unparsedXMLs;
        public IObjectSet<UnparsedXML> UnparsedXMLsReadOnly
        {
            get 
            { 
              if (null == _unparsedXMLsRO)
              {
                _unparsedXMLsRO = CreateObjectSet<UnparsedXML>("UnparsedXMLs"); 
                _unparsedXMLsRO.MergeOption=MergeOption.NoTracking;
              }
              return _unparsedXMLsRO;
            }
        }
        private ObjectSet<UnparsedXML> _unparsedXMLsRO;
    
        public IObjectSet<CAT_Fluid> CAT_Fluid
        {
            get { return _cAT_Fluid ?? (_cAT_Fluid = CreateObjectSet<CAT_Fluid>("CAT_Fluid")); }
        }
        private ObjectSet<CAT_Fluid> _cAT_Fluid;
        public IObjectSet<CAT_Fluid> CAT_FluidReadOnly
        {
            get 
            { 
              if (null == _cAT_FluidRO)
              {
                _cAT_FluidRO = CreateObjectSet<CAT_Fluid>("CAT_Fluid"); 
                _cAT_FluidRO.MergeOption=MergeOption.NoTracking;
              }
              return _cAT_FluidRO;
            }
        }
        private ObjectSet<CAT_Fluid> _cAT_FluidRO;
    
        public IObjectSet<CAT_PayloadCycle> CAT_PayloadCycle
        {
            get { return _cAT_PayloadCycle ?? (_cAT_PayloadCycle = CreateObjectSet<CAT_PayloadCycle>("CAT_PayloadCycle")); }
        }
        private ObjectSet<CAT_PayloadCycle> _cAT_PayloadCycle;
        public IObjectSet<CAT_PayloadCycle> CAT_PayloadCycleReadOnly
        {
            get 
            { 
              if (null == _cAT_PayloadCycleRO)
              {
                _cAT_PayloadCycleRO = CreateObjectSet<CAT_PayloadCycle>("CAT_PayloadCycle"); 
                _cAT_PayloadCycleRO.MergeOption=MergeOption.NoTracking;
              }
              return _cAT_PayloadCycleRO;
            }
        }
        private ObjectSet<CAT_PayloadCycle> _cAT_PayloadCycleRO;

        #endregion

    }
}
