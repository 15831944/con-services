// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VSS.MasterData.Subscription.AcceptanceTests.Scenarios.SubscriptionService
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SubscriptionListWebApiFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SubscriptionListWebApi.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Subscription List WebApi", @"
 References : https://docs.google.com/document/d/18zWcH34qTGne3rmqbDgqQ8Oh3ochUFJkrpRJfJ1D6vQ/edit
                         
 Dependencies:  Internal -  Kafka Topic
					  VSS DB	 - VSS-MasterData-Subscription
					      Tables - Asset Subscription
								   Project Subscription
								   Customer Subscription

 User Story 12099:Subscription List WebAPI (Master Data Management)", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Subscription List WebApi")))
            {
                VSS.MasterData.Subscription.AcceptanceTests.Scenarios.SubscriptionService.SubscriptionListWebApiFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetSubscriptionDetailsCustomerContext_HappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionListWebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12099")]
        public virtual void GetSubscriptionDetailsCustomerContext_HappyPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetSubscriptionDetailsCustomerContext_HappyPath", new string[] {
                        "Automated",
                        "Sanity",
                        "Positive",
                        "SubscriptionListWebApi",
                        "US12099"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
   testRunner.Given("SubscriptionListWebApi Is Ready To Verify \'GetSubscriptionDetailsCustomerContext_" +
                    "HappyPath\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
  testRunner.And("SubscriptionService AssetSubscriptionCreate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
   testRunner.When("I Post Valid SubscriptionService AssetSubscriptionCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
     testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
   testRunner.Then("The SubscriptionServiceRead Response should return the Subscription Details For T" +
                    "he Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetSubscriptionDetailsCustomerContext_AfterAssetSubscriptionUpdate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionListWebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12099")]
        public virtual void GetSubscriptionDetailsCustomerContext_AfterAssetSubscriptionUpdate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetSubscriptionDetailsCustomerContext_AfterAssetSubscriptionUpdate", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "SubscriptionListWebApi",
                        "US12099"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
   testRunner.Given("SubscriptionListWebApi Is Ready To Verify \'GetSubscriptionDetailsCustomerContext_" +
                    "AfterAssetSubscriptionUpdate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
  testRunner.And("SubscriptionService AssetSubscriptionUpdate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
   testRunner.When("I Post Valid SubscriptionService AssetSubscriptionUpdate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
    testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
   testRunner.Then("The SubscriptionServiceRead Response should return the Subscription UpdatedDetail" +
                    "s For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetSubscriptionDetailsCustomerContext_MultipleSubscriptionsForAsset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionListWebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12099")]
        public virtual void GetSubscriptionDetailsCustomerContext_MultipleSubscriptionsForAsset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetSubscriptionDetailsCustomerContext_MultipleSubscriptionsForAsset", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "SubscriptionListWebApi",
                        "US12099"});
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
      testRunner.Given("SubscriptionListWebApi Is Ready To Verify \'GetSubscriptionDetailsCustomerContext_" +
                    "MultipleSubscriptionsForAsset\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
         testRunner.And("Multiple Subscriptions exist for an asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
      testRunner.When("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
   testRunner.Then("The SubscriptionServiceRead Response should return the MultipleAsset Subscription" +
                    " Details For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetSubscriptionDetailsCustomerContext_CustomerWithMultipleAssets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionListWebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12099")]
        public virtual void GetSubscriptionDetailsCustomerContext_CustomerWithMultipleAssets()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetSubscriptionDetailsCustomerContext_CustomerWithMultipleAssets", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "SubscriptionListWebApi",
                        "US12099"});
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
     testRunner.Given("SubscriptionListWebApi Is Ready To Verify \'GetSubscriptionDetailsCustomerContext_" +
                    "CustomerWithMultipleAssets\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
  testRunner.And("SubscriptionType \'Essentials\' has been setup for multiple assets under a customer" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
  testRunner.When("I Set Valid SubscriptionService AssetSubscriptionCreate Request StartDate To \'Min" +
                    " Date\' For First Asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
        testRunner.And("I Set Valid SubscriptionService AssetSubscriptionCreate Request EndDate To \'Max D" +
                    "ate\' For Second Asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
     testRunner.And("I Post Valid SubscriptionService Create Request For Multiple Asset Subscriptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
     testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
  testRunner.Then("The GetSubscriptionDetailsCustomerContext should return the Subscription Details " +
                    "With Start Date as \'Min Date\' and End Date as \'Max Date\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_Customer_AssetSubscriptionUpdateEndDate_TerminatingAssetS" +
            "ubscriptionForFirstAssetWithEndDateasStartDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12099")]
        public virtual void SubscriptionReadService_Customer_AssetSubscriptionUpdateEndDate_TerminatingAssetSubscriptionForFirstAssetWithEndDateasStartDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SubscriptionReadService_Customer_AssetSubscriptionUpdateEndDate_TerminatingAssetS" +
                    "ubscriptionForFirstAssetWithEndDateasStartDate", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "SubscriptionReadService",
                        "US12099"});
#line 80
this.ScenarioSetup(scenarioInfo);
#line 81
     testRunner.Given("SubscriptionReadService Is Ready To Verify \'SubscriptionReadService_Customer_Asse" +
                    "tSubscriptionUpdateEndDate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 82
     testRunner.And("SubscriptionService AssetSubscriptionCreate Request Is Setup With Default Values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
  testRunner.When("I Set Valid SubscriptionService AssetSubscriptionCreate Request StartDate To Min " +
                    "Date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
        testRunner.And("I Post Valid SubscriptionService AssetSubscriptionCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
        testRunner.And("I Set Valid SubscriptionService AssetSubscriptionCreate Request AssetUID To Secon" +
                    "d AssetUID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
  testRunner.And("I Set Valid SubscriptionService AssetSubscriptionCreate Request StartDate To Curr" +
                    "ent Date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
        testRunner.And("I Set Valid SubscriptionService AssetSubscriptionCreate Request EndDate To Max Da" +
                    "te", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
  testRunner.And("I Set Valid SubscriptionService AssetSubscriptionCreate Request SubscriptionUID T" +
                    "o Unique UID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
        testRunner.And("I Post Valid SubscriptionService AssetSubscriptionCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
  testRunner.And("I Set Valid SubscriptionService AssetSubscriptionUpdate Request SubscriptionUID T" +
                    "o First Asset SubscriptionUID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
  testRunner.And("I Set Valid SubscriptionService AssetSubscriptionUpdate Request ActionUTC To Curr" +
                    "ent Date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
  testRunner.And("I Set Valid SubscriptionService AssetSubscriptionUpdate Request EndDate To Min Da" +
                    "te", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
  testRunner.And("I Post Valid SubscriptionService AssetSubscriptionUpdate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
     testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
  testRunner.Then("The SubscriptionServiceRead Response should return the Subscription Details For T" +
                    "he Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetSubscriptionDetailsCustomerContext_CustomerWithMultipleAssets_AfterUpdatingEnd" +
            "Date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionListWebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12099")]
        public virtual void GetSubscriptionDetailsCustomerContext_CustomerWithMultipleAssets_AfterUpdatingEndDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetSubscriptionDetailsCustomerContext_CustomerWithMultipleAssets_AfterUpdatingEnd" +
                    "Date", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "SubscriptionListWebApi",
                        "US12099"});
#line 99
this.ScenarioSetup(scenarioInfo);
#line 100
     testRunner.Given("SubscriptionReadService Is Ready To Verify \'GetSubscriptionDetailsCustomerContext" +
                    "_CustomerWithMultipleAssets_AfterUpdatingEndDate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 101
  testRunner.And("SubscriptionType \'Essentials\' has been setup for multiple assets under a customer" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
  testRunner.When("I Set Valid SubscriptionService AssetSubscriptionCreate Request StartDate To \'Min" +
                    " Date\' For First Asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
        testRunner.And("I Set Valid SubscriptionService AssetSubscriptionCreate Request EndDate To \'Max D" +
                    "ate\' For Second Asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
     testRunner.And("I Post Valid SubscriptionService Create Request For Multiple Asset Subscriptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
  testRunner.And("I Set Valid SubscriptionService AssetSubscriptionUpdate Request EndDate To \'Curre" +
                    "nt Date\' For First Asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
  testRunner.And("I Post Valid SubscriptionService AssetSubscriptionUpdate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
     testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
  testRunner.Then("The GetSubscriptionDetailsCustomerContext should return the Subscription Details " +
                    "With Start Date as \'Current Date\' and End Date as \'Max Date\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetSubscriptionDetailsCustomerContext_CustomerWithMultipleAssets_AfterUpdatingSta" +
            "rtDateAndEndDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionListWebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12099")]
        public virtual void GetSubscriptionDetailsCustomerContext_CustomerWithMultipleAssets_AfterUpdatingStartDateAndEndDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetSubscriptionDetailsCustomerContext_CustomerWithMultipleAssets_AfterUpdatingSta" +
                    "rtDateAndEndDate", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "SubscriptionListWebApi",
                        "US12099"});
#line 112
this.ScenarioSetup(scenarioInfo);
#line 113
     testRunner.Given("SubscriptionReadService Is Ready To Verify \'GetSubscriptionDetailsCustomerContext" +
                    "_CustomerWithMultipleAssets_AfterUpdatingStartDateAndEndDate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
  testRunner.And("SubscriptionType \'Essentials\' has been setup for multiple assets under a customer" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
  testRunner.When("I Set Valid SubscriptionService AssetSubscriptionCreate Request StartDate To \'Min" +
                    " Date\' For First Asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
        testRunner.And("I Set Valid SubscriptionService AssetSubscriptionCreate Request StartDate To \'Min" +
                    " Date\' For Second Asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
     testRunner.And("I Post Valid SubscriptionService Create Request For Multiple Asset Subscriptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
  testRunner.And("I Set Valid SubscriptionService AssetSubscriptionUpdate Request StartDate To \'Cur" +
                    "rent Date\' For First Asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
  testRunner.And("I Set Valid SubscriptionService AssetSubscriptionUpdate Request EndDate To \'Max D" +
                    "ate\' For First Asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
  testRunner.And("I Post Valid SubscriptionService AssetSubscriptionUpdate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
     testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
  testRunner.Then("The GetSubscriptionDetailsCustomerContext should return the Subscription Details " +
                    "With Start Date as \'Min Date\' and End Date as \'Max Date\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_CustomerSubscriptionCreateHappyPath1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12871")]
        public virtual void SubscriptionReadService_CustomerSubscriptionCreateHappyPath1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SubscriptionReadService_CustomerSubscriptionCreateHappyPath1", new string[] {
                        "Automated",
                        "Sanity",
                        "Positive",
                        "SubscriptionReadService",
                        "US12871"});
#line 136
this.ScenarioSetup(scenarioInfo);
#line 137
   testRunner.Given("SubscriptionReadService Is Ready To Verify \'SubscriptionReadService_CustomerSubsc" +
                    "riptionCreateHappyPath\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 138
  testRunner.And("SubscriptionService CustomerSubscriptionCreate Request Is Setup With Default Valu" +
                    "es", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
   testRunner.When("I Post Valid SubscriptionService CustomerSubscriptionCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 140
     testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
   testRunner.Then("The SubscriptionServiceRead Response should return the Subscription Details For T" +
                    "he Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_CustomerSubscriptionUpdateHappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12871")]
        public virtual void SubscriptionReadService_CustomerSubscriptionUpdateHappyPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SubscriptionReadService_CustomerSubscriptionUpdateHappyPath", new string[] {
                        "Automated",
                        "Regression",
                        "Positive",
                        "SubscriptionReadService",
                        "US12871"});
#line 145
this.ScenarioSetup(scenarioInfo);
#line 146
   testRunner.Given("SubscriptionReadService Is Ready To Verify \'SubscriptionReadService_CustomerSubsc" +
                    "riptionUpdateHappyPath\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
  testRunner.And("SubscriptionService CustomerSubscriptionUpdate Request Is Setup With Default Valu" +
                    "es", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
   testRunner.When("I Post Valid SubscriptionService CustomerSubscriptionUpdate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
     testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
   testRunner.Then("The SubscriptionServiceRead Response should return the Subscription Details For T" +
                    "he Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void SubscriptionReadService_CustomerSubscriptionpdateValidOptionalFields(string description, string startDate, string endDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Positive",
                    "SubscriptionReadService",
                    "US12871"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SubscriptionReadService_CustomerSubscriptionpdateValidOptionalFields", @__tags);
#line 154
this.ScenarioSetup(scenarioInfo);
#line 155
   testRunner.Given("SubscriptionReadService Is Ready To Verify \'SubscriptionReadService_CustomerSubsc" +
                    "riptionpdateValidOptionalFields\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 156
  testRunner.And("SubscriptionService CustomerSubscriptionUpdate Request Is Setup With Default Valu" +
                    "es", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
   testRunner.When(string.Format("I Set SubscriptionService CustomerSubscriptionUpdate StartDate  To \'{0}\'", startDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 158
  testRunner.And(string.Format("I Set SubscriptionService CustomerSubscriptionUpdate EndDate To \'{0}\'", endDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
     testRunner.And("I Post Valid SubscriptionService CustomerSubscriptionUpdate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
     testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
   testRunner.Then("The SubscriptionServiceRead Response should return the Subscription Details For T" +
                    "he Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_CustomerSubscriptionpdateValidOptionalFields")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12871")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "StartDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "StartDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartDate", "11/22/2015 2:29:55 PM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndDate", "NULL_NULL")]
        public virtual void SubscriptionReadService_CustomerSubscriptionpdateValidOptionalFields_StartDate()
        {
            this.SubscriptionReadService_CustomerSubscriptionpdateValidOptionalFields("StartDate", "11/22/2015 2:29:55 PM", "NULL_NULL", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_CustomerSubscriptionpdateValidOptionalFields")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12871")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EndDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "EndDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartDate", "NULL_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndDate", "11/22/2015 2:29:55 PM")]
        public virtual void SubscriptionReadService_CustomerSubscriptionpdateValidOptionalFields_EndDate()
        {
            this.SubscriptionReadService_CustomerSubscriptionpdateValidOptionalFields("EndDate", "NULL_NULL", "11/22/2015 2:29:55 PM", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_ProjectSubscriptionCreateHappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12871")]
        public virtual void SubscriptionReadService_ProjectSubscriptionCreateHappyPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SubscriptionReadService_ProjectSubscriptionCreateHappyPath", new string[] {
                        "Automated",
                        "Sanity",
                        "Positive",
                        "SubscriptionReadService",
                        "US12871"});
#line 169
this.ScenarioSetup(scenarioInfo);
#line 170
   testRunner.Given("SubscriptionReadService Is Ready To Verify \'SubscriptionReadService_ProjectSubscr" +
                    "iptionCreateHappyPath\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 171
  testRunner.And("SubscriptionService ProjectSubscriptionCreate Request Is Setup With Default Value" +
                    "s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
   testRunner.When("I Post Valid SubscriptionService ProjectSubscriptionCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 173
     testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
   testRunner.Then("The SubscriptionServiceRead Response should return the Subscription Details For T" +
                    "he Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void SubscriptionReadService_ProjectSubscriptionUpdateHappyPath(string description, string subscriptionType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Positive",
                    "SubscriptionReadService",
                    "US12871"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SubscriptionReadService_ProjectSubscriptionUpdateHappyPath", @__tags);
#line 178
this.ScenarioSetup(scenarioInfo);
#line 179
   testRunner.Given("SubscriptionReadService Is Ready To Verify \'SubscriptionReadService_ProjectSubscr" +
                    "iptionUpdateHappyPath\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 180
  testRunner.And("SubscriptionService ProjectSubscriptionUpdate Request Is Setup With Default Value" +
                    "s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 181
   testRunner.When(string.Format("I set SubscriptionService ProjectSubscriptionUpdate SubscriptionType To \'{0}\'", subscriptionType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 182
  testRunner.And("I Post Valid SubscriptionService ProjectSubscriptionUpdate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
     testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
   testRunner.Then("The SubscriptionServiceRead Response should return the Subscription Details For T" +
                    "he Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_ProjectSubscriptionUpdateHappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12871")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Landfill")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "Landfill")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SubscriptionType", "Landfill")]
        public virtual void SubscriptionReadService_ProjectSubscriptionUpdateHappyPath_Landfill()
        {
            this.SubscriptionReadService_ProjectSubscriptionUpdateHappyPath("Landfill", "Landfill", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_ProjectSubscriptionUpdateHappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12871")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Project Monitoring")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "Project Monitoring")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SubscriptionType", "Project Monitoring")]
        public virtual void SubscriptionReadService_ProjectSubscriptionUpdateHappyPath_ProjectMonitoring()
        {
            this.SubscriptionReadService_ProjectSubscriptionUpdateHappyPath("Project Monitoring", "Project Monitoring", ((string[])(null)));
        }
        
        public virtual void SubscriptionReadService_ProjectSubscriptionpdateValidOptionalFields(string description, string startDate, string endDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automated",
                    "Regression",
                    "Positive",
                    "SubscriptionReadService",
                    "US12871"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SubscriptionReadService_ProjectSubscriptionpdateValidOptionalFields", @__tags);
#line 192
this.ScenarioSetup(scenarioInfo);
#line 193
   testRunner.Given("SubscriptionReadService Is Ready To Verify \'SubscriptionReadService_ProjectSubscr" +
                    "iptionpdateValidOptionalFields\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 194
  testRunner.And("SubscriptionService ProjectSubscriptionUpdate Request Is Setup With Default Value" +
                    "s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
   testRunner.When(string.Format("I Set SubscriptionService ProjectSubscriptionUpdate StartDate  To \'{0}\'", startDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 196
  testRunner.And(string.Format("I Set SubscriptionService ProjectSubscriptionUpdate EndDate To \'{0}\'", endDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
     testRunner.And("I Post Valid SubscriptionService ProjectSubscriptionUpdate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 198
     testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
   testRunner.Then("The SubscriptionServiceRead Response should return the Subscription Details For T" +
                    "he Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_ProjectSubscriptionpdateValidOptionalFields")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12871")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "StartDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "StartDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartDate", "11/22/2015 2:29:55 PM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndDate", "NULL_NULL")]
        public virtual void SubscriptionReadService_ProjectSubscriptionpdateValidOptionalFields_StartDate()
        {
            this.SubscriptionReadService_ProjectSubscriptionpdateValidOptionalFields("StartDate", "11/22/2015 2:29:55 PM", "NULL_NULL", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_ProjectSubscriptionpdateValidOptionalFields")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12871")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EndDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "EndDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartDate", "NULL_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndDate", "11/22/2015 2:29:55 PM")]
        public virtual void SubscriptionReadService_ProjectSubscriptionpdateValidOptionalFields_EndDate()
        {
            this.SubscriptionReadService_ProjectSubscriptionpdateValidOptionalFields("EndDate", "NULL_NULL", "11/22/2015 2:29:55 PM", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_ProjectSubscriptionAssociateProjectSubscriptionHappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12871")]
        public virtual void SubscriptionReadService_ProjectSubscriptionAssociateProjectSubscriptionHappyPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SubscriptionReadService_ProjectSubscriptionAssociateProjectSubscriptionHappyPath", new string[] {
                        "Automated",
                        "Sanity",
                        "Positive",
                        "SubscriptionReadService",
                        "US12871"});
#line 207
this.ScenarioSetup(scenarioInfo);
#line 208
   testRunner.Given("SubscriptionReadService Is Ready To Verify \'SubscriptionReadService_ProjectSubscr" +
                    "iptionAssociateProjectSubscriptionHappyPath\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 209
  testRunner.And("SubscriptionService AssociateProjectSubscription Request Is Setup With Default Va" +
                    "lues", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
   testRunner.When("I Post Valid SubscriptionService AssociateProjectSubscription Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 211
     testRunner.And("I Post Valid GetActiveProjectSubscriptions For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
   testRunner.Then("The SubscriptionServiceRead Response should return the Subscription Details Subsc" +
                    "riptionCount as \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_ProjectSubscriptionDissociateProjectSubscriptionHappyPath" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12871")]
        public virtual void SubscriptionReadService_ProjectSubscriptionDissociateProjectSubscriptionHappyPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SubscriptionReadService_ProjectSubscriptionDissociateProjectSubscriptionHappyPath" +
                    "", new string[] {
                        "Automated",
                        "Sanity",
                        "Positive",
                        "SubscriptionReadService",
                        "US12871"});
#line 216
this.ScenarioSetup(scenarioInfo);
#line 217
   testRunner.Given("SubscriptionReadService Is Ready To Verify \'SubscriptionReadService_ProjectSubscr" +
                    "iptionDissociateProjectSubscriptionHappyPath\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 218
  testRunner.And("SubscriptionService DissociateProjectSubscription Request Is Setup With Default V" +
                    "alues", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
   testRunner.When("I Post Valid SubscriptionService DissociateProjectSubscription Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 220
     testRunner.And("I Post Valid GetActiveProjectSubscriptions For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
   testRunner.Then("The SubscriptionServiceRead Response should return the Subscription Details For T" +
                    "he Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_CustomerSubscriptionCreate_StartDateFutureDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12871")]
        public virtual void SubscriptionReadService_CustomerSubscriptionCreate_StartDateFutureDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SubscriptionReadService_CustomerSubscriptionCreate_StartDateFutureDate", new string[] {
                        "Automated",
                        "Sanity",
                        "Negative",
                        "SubscriptionReadService",
                        "US12871"});
#line 228
this.ScenarioSetup(scenarioInfo);
#line 229
   testRunner.Given("SubscriptionReadService Is Ready To Verify \'SubscriptionReadService_CustomerSubsc" +
                    "riptionCreateHappyPath\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 230
  testRunner.And("SubscriptionService CustomerSubscriptionCreate Request Is Setup With Default Valu" +
                    "es", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
   testRunner.When("I set SubscriptionService CustomerSubscriptionCreate StartDate To FutureDate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 232
     testRunner.And("I Post Valid SubscriptionService CustomerSubscriptionCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 233
     testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
   testRunner.Then("The SubscriptionServiceRead Response should return the Subscription Details Subsc" +
                    "riptionCount as \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SubscriptionReadService_ProjectSubscriptionCreate_StartDateFutureDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Subscription List WebApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SubscriptionReadService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US12871")]
        public virtual void SubscriptionReadService_ProjectSubscriptionCreate_StartDateFutureDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SubscriptionReadService_ProjectSubscriptionCreate_StartDateFutureDate", new string[] {
                        "Automated",
                        "Sanity",
                        "Negative",
                        "SubscriptionReadService",
                        "US12871"});
#line 238
this.ScenarioSetup(scenarioInfo);
#line 239
   testRunner.Given("SubscriptionReadService Is Ready To Verify \'SubscriptionReadService_ProjectSubscr" +
                    "iptionStartDate_FutureDate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 240
  testRunner.And("SubscriptionService ProjectSubscriptionCreate Request Is Setup With Default Value" +
                    "s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 241
   testRunner.When("I set SubscriptionService ProjectSubscriptionCreate StartDate To FutureDate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 242
     testRunner.And("I Post Valid SubscriptionService ProjectSubscriptionCreate Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
     testRunner.And("I Post Valid SubscriptionService Read Request For The Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 244
   testRunner.Then("The SubscriptionServiceRead Response should return the Subscription Details Subsc" +
                    "riptionCount as \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
