// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VSS.MasterData.Device.AcceptanceTests.Scenarios.DeviceFirmwarePartnumber
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DeviceFirmwarePartNumberFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DeviceFirmwarePartNumber.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DeviceFirmwarePartNumber", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "DeviceFirmwarePartNumber")))
            {
                global::VSS.MasterData.Device.AcceptanceTests.Scenarios.DeviceFirmwarePartnumber.DeviceFirmwarePartNumberFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeviceFirmware_HappyPathCellularRadioFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeviceFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Level1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ECMInfo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPathCellularRadioFirmwarePartNumber")]
        public virtual void DeviceFirmware_HappyPathCellularRadioFirmwarePartNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DeviceFirmware_HappyPathCellularRadioFirmwarePartNumber", new string[] {
                        "Positive",
                        "Level1",
                        "Regression",
                        "ECMInfo",
                        "HappyPathCellularRadioFirmwarePartNumber"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("There Is DeviceCellularRadioFirmwarePartNumber_HappyPath Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("I Publish Valid Device Firmware Info to Kafka Topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then("The Device Firmware Info Value Should Be Available In VSSDB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeviceFirmware_HappyPathNetworkManagerFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeviceFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Level1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ECMInfo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPathNetworkManagerFirmwarePartNumber")]
        public virtual void DeviceFirmware_HappyPathNetworkManagerFirmwarePartNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DeviceFirmware_HappyPathNetworkManagerFirmwarePartNumber", new string[] {
                        "Positive",
                        "Level1",
                        "Regression",
                        "ECMInfo",
                        "HappyPathNetworkManagerFirmwarePartNumber"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("There Is DeviceNetworkManagerFirmwarePartNumber_HappyPath Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.When("I Publish Valid Device Firmware Info to Kafka Topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.Then("The Device Firmware Info Value Should Be Available In VSSDB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeviceFirmware_HappyPathSatelliteRadioFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeviceFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Level1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SanityTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ECMInfo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPathSatelliteRadioFirmwarePartNumber")]
        public virtual void DeviceFirmware_HappyPathSatelliteRadioFirmwarePartNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DeviceFirmware_HappyPathSatelliteRadioFirmwarePartNumber", new string[] {
                        "Manual",
                        "Sanity",
                        "Positive",
                        "Level1",
                        "SanityTest",
                        "ECMInfo",
                        "HappyPathSatelliteRadioFirmwarePartNumber"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("There Is DeviceSatelliteRadioFirmwarePartNumber_HappyPath Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("I Publish Valid Device Firmware Info to Kafka Topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("The Device Firmware Info Value Should Be Available In VSSDB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void DeviceFirmware_HappyPathCellularRadioFirmwareValuePartNumber(string description, string values, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manual",
                    "Sanity",
                    "Positive",
                    "Level1",
                    "SanityTest",
                    "ECMInfo",
                    "HappyPathCellularRadioFirmwarePartNumber"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DeviceFirmware_HappyPathCellularRadioFirmwareValuePartNumber", @__tags);
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given(string.Format("There Is DeviceCellularRadioFirmwarePartNumber_HappyPath Request With \'{0}\'", values), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.When("I Publish Valid Device Firmware Info to Kafka Topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("The Device Firmware Info Value Should Be Available In VSSDB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeviceFirmware_HappyPathCellularRadioFirmwareValuePartNumber: CellularRadioFirmwa" +
            "rePartNumber_MinLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeviceFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Level1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SanityTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ECMInfo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPathCellularRadioFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "CellularRadioFirmwarePartNumber_MinLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "CellularRadioFirmwarePartNumber_MinLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Values", "MINLENGTH")]
        public virtual void DeviceFirmware_HappyPathCellularRadioFirmwareValuePartNumber_CellularRadioFirmwarePartNumber_MinLength()
        {
#line 26
this.DeviceFirmware_HappyPathCellularRadioFirmwareValuePartNumber("CellularRadioFirmwarePartNumber_MinLength", "MINLENGTH", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeviceFirmware_HappyPathCellularRadioFirmwareValuePartNumber: CellularRadioFirmwa" +
            "rePartNumber_MaxLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeviceFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Level1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SanityTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ECMInfo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPathCellularRadioFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "CellularRadioFirmwarePartNumber_MaxLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "CellularRadioFirmwarePartNumber_MaxLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Values", "MAXLENGTH")]
        public virtual void DeviceFirmware_HappyPathCellularRadioFirmwareValuePartNumber_CellularRadioFirmwarePartNumber_MaxLength()
        {
#line 26
this.DeviceFirmware_HappyPathCellularRadioFirmwareValuePartNumber("CellularRadioFirmwarePartNumber_MaxLength", "MAXLENGTH", ((string[])(null)));
#line hidden
        }
        
        public virtual void DeviceFirmware_HappyPathNetworkManagerValueFirmwarePartNumber(string description, string values, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manual",
                    "Sanity",
                    "Positive",
                    "Level1",
                    "SanityTest",
                    "ECMInfo",
                    "HappyPathNetworkManagerFirmwarePartNumber"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DeviceFirmware_HappyPathNetworkManagerValueFirmwarePartNumber", @__tags);
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given(string.Format("There Is DeviceNetworkManagerFirmwarePartNumber_HappyPath Request With \'{0}\'", values), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.When("I Publish Valid Device Firmware Info to Kafka Topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.Then("The Device Firmware Info Value Should Be Available In VSSDB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeviceFirmware_HappyPathNetworkManagerValueFirmwarePartNumber: NetworkManagerFirm" +
            "warePartNumber_MinLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeviceFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Level1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SanityTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ECMInfo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPathNetworkManagerFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "NetworkManagerFirmwarePartNumber_MinLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "NetworkManagerFirmwarePartNumber_MinLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Values", "MINLENGTH")]
        public virtual void DeviceFirmware_HappyPathNetworkManagerValueFirmwarePartNumber_NetworkManagerFirmwarePartNumber_MinLength()
        {
#line 39
this.DeviceFirmware_HappyPathNetworkManagerValueFirmwarePartNumber("NetworkManagerFirmwarePartNumber_MinLength", "MINLENGTH", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeviceFirmware_HappyPathNetworkManagerValueFirmwarePartNumber: NetworkManagerFirm" +
            "warePartNumber_MaxLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeviceFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Level1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SanityTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ECMInfo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPathNetworkManagerFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "NetworkManagerFirmwarePartNumber_MaxLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "NetworkManagerFirmwarePartNumber_MaxLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Values", "MAXLENGTH")]
        public virtual void DeviceFirmware_HappyPathNetworkManagerValueFirmwarePartNumber_NetworkManagerFirmwarePartNumber_MaxLength()
        {
#line 39
this.DeviceFirmware_HappyPathNetworkManagerValueFirmwarePartNumber("NetworkManagerFirmwarePartNumber_MaxLength", "MAXLENGTH", ((string[])(null)));
#line hidden
        }
        
        public virtual void DeviceFirmware_HappyPathSatelliteRadioValueFirmwarePartNumber(string description, string values, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manual",
                    "Sanity",
                    "Positive",
                    "Level1",
                    "SanityTest",
                    "ECMInfo",
                    "HappyPathSatelliteRadioFirmwarePartNumber"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DeviceFirmware_HappyPathSatelliteRadioValueFirmwarePartNumber", @__tags);
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.Given(string.Format("There Is DeviceSatelliteRadioFirmwarePartNumber_HappyPath Request With \'{0}\'", values), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
 testRunner.When("I Publish Valid Device Firmware Info to Kafka Topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("The Device Firmware Info Value Should Be Available In VSSDB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeviceFirmware_HappyPathSatelliteRadioValueFirmwarePartNumber: SatelliteRadioFirm" +
            "warePartNumber_MinLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeviceFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Level1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SanityTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ECMInfo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPathSatelliteRadioFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "SatelliteRadioFirmwarePartNumber_MinLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "SatelliteRadioFirmwarePartNumber_MinLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Values", "MINLENGTH")]
        public virtual void DeviceFirmware_HappyPathSatelliteRadioValueFirmwarePartNumber_SatelliteRadioFirmwarePartNumber_MinLength()
        {
#line 52
this.DeviceFirmware_HappyPathSatelliteRadioValueFirmwarePartNumber("SatelliteRadioFirmwarePartNumber_MinLength", "MINLENGTH", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeviceFirmware_HappyPathSatelliteRadioValueFirmwarePartNumber: SatelliteRadioFirm" +
            "warePartNumber_MaxLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeviceFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Level1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SanityTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ECMInfo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPathSatelliteRadioFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "SatelliteRadioFirmwarePartNumber_MaxLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "SatelliteRadioFirmwarePartNumber_MaxLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Values", "MAXLENGTH")]
        public virtual void DeviceFirmware_HappyPathSatelliteRadioValueFirmwarePartNumber_SatelliteRadioFirmwarePartNumber_MaxLength()
        {
#line 52
this.DeviceFirmware_HappyPathSatelliteRadioValueFirmwarePartNumber("SatelliteRadioFirmwarePartNumber_MaxLength", "MAXLENGTH", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeviceFirmware_HappyPathSatelliteRadioValueFirmwarePartNumber: SatelliteRadioFirm" +
            "warePartNumber_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeviceFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sanity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Level1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SanityTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ECMInfo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPathSatelliteRadioFirmwarePartNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "SatelliteRadioFirmwarePartNumber_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "SatelliteRadioFirmwarePartNumber_NULL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Values", "NULL")]
        public virtual void DeviceFirmware_HappyPathSatelliteRadioValueFirmwarePartNumber_SatelliteRadioFirmwarePartNumber_NULL()
        {
#line 52
this.DeviceFirmware_HappyPathSatelliteRadioValueFirmwarePartNumber("SatelliteRadioFirmwarePartNumber_NULL", "NULL", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
