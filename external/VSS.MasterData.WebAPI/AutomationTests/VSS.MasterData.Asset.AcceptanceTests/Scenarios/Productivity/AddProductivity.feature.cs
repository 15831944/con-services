// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VSS.MasterData.Asset.AcceptanceTests.Scenarios.Productivity
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AddProductivityFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddProductivity.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AddProductivity", "\r\nUser Story: 44878  Implementation - VisionLink Administrator - Productivity Tar" +
                    "gets\r\n\r\n------------------------------------------------------------------------" +
                    "-----------------------", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "AddProductivity")))
            {
                VSS.MasterData.Asset.AcceptanceTests.Scenarios.Productivity.AddProductivityFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_HappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DeleteExistingRecords")]
        public virtual void AddProductivity_HappyPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AddProductivity_HappyPath", new string[] {
                        "US44878",
                        "Automated",
                        "AddProductivity",
                        "Positive",
                        "DeleteExistingRecords"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
testRunner.Given("\'<Description>\' is ready to verify", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
testRunner.And("AddProductivity is setup with default valid values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
testRunner.When("I Put Valid Productivity details for asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.And("When I try to retrieve Productivity details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
testRunner.Then("Valid details should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void AddProductivity_ValidValuesForAssetTargets(string description, string assetTargetName, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "US44878",
                    "Automated",
                    "AddProductivity",
                    "Positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AddProductivity_ValidValuesForAssetTargets", @__tags);
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
testRunner.Given(string.Format("\'{0}\' is ready to verify", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
testRunner.And("AddProductivity is setup with default valid values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
testRunner.And(string.Format("I modify  in \'{0}\' value to be  \'{1}\'", assetTargetName, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
testRunner.When("I Put Valid Productivity details for asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.And("When I try to retrieve Productivity details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
testRunner.Then("Valid details should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_ValidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetCycles_MinValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetCycles_MinValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "targetcycles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "0")]
        public virtual void AddProductivity_ValidValuesForAssetTargets_TargetCycles_MinValue()
        {
            this.AddProductivity_ValidValuesForAssetTargets("TargetCycles_MinValue", "targetcycles", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_ValidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetCycles_DecimalValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetCycles_DecimalValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "targetcycles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "1")]
        public virtual void AddProductivity_ValidValuesForAssetTargets_TargetCycles_DecimalValue()
        {
            this.AddProductivity_ValidValuesForAssetTargets("TargetCycles_DecimalValue", "targetcycles", "1", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_ValidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetCycles_MaxValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetCycles_MaxValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "targetcycles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "5432")]
        public virtual void AddProductivity_ValidValuesForAssetTargets_TargetCycles_MaxValue()
        {
            this.AddProductivity_ValidValuesForAssetTargets("TargetCycles_MaxValue", "targetcycles", "5432", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_ValidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetVolumes_MinValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetVolumes_MinValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "targetvolumes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "0")]
        public virtual void AddProductivity_ValidValuesForAssetTargets_TargetVolumes_MinValue()
        {
            this.AddProductivity_ValidValuesForAssetTargets("TargetVolumes_MinValue", "targetvolumes", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_ValidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetVolumes_DecimalValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetVolumes_DecimalValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "targetvolumes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "1.2")]
        public virtual void AddProductivity_ValidValuesForAssetTargets_TargetVolumes_DecimalValue()
        {
            this.AddProductivity_ValidValuesForAssetTargets("TargetVolumes_DecimalValue", "targetvolumes", "1.2", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_ValidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetVolumes_MaxValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetVolumes_MaxValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "targetvolumes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "5432")]
        public virtual void AddProductivity_ValidValuesForAssetTargets_TargetVolumes_MaxValue()
        {
            this.AddProductivity_ValidValuesForAssetTargets("TargetVolumes_MaxValue", "targetvolumes", "5432", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_ValidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetPayload_MinValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetPayload_MinValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "TargetPayload")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "0")]
        public virtual void AddProductivity_ValidValuesForAssetTargets_TargetPayload_MinValue()
        {
            this.AddProductivity_ValidValuesForAssetTargets("TargetPayload_MinValue", "TargetPayload", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_ValidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetPayload_DecimalValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetPayload_DecimalValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "TargetPayload")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "1.2")]
        public virtual void AddProductivity_ValidValuesForAssetTargets_TargetPayload_DecimalValue()
        {
            this.AddProductivity_ValidValuesForAssetTargets("TargetPayload_DecimalValue", "TargetPayload", "1.2", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_ValidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetPayload_MaxValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetPayload_MaxValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "TargetPayload")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "5432")]
        public virtual void AddProductivity_ValidValuesForAssetTargets_TargetPayload_MaxValue()
        {
            this.AddProductivity_ValidValuesForAssetTargets("TargetPayload_MaxValue", "TargetPayload", "5432", ((string[])(null)));
        }
        
        public virtual void AddProductivity_InvalidValuesForAssetTargets(string description, string assetTargetName, string value, string errorCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "US44878",
                    "Automated",
                    "AddProductivity",
                    "Negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AddProductivity_InvalidValuesForAssetTargets", @__tags);
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
testRunner.Given(string.Format("\'{0}\' is ready to verify", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
testRunner.And("AddProductivity is setup with default valid values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
testRunner.And(string.Format("I modify  in \'{0}\' value to be  \'{1}\'", assetTargetName, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
testRunner.When("I Put Invalid Productivity details for asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
testRunner.Then(string.Format("Valid Error Code {0} should be shown", errorCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetCycles_NegativeValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetCycles_NegativeValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "targetcycles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "-4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorCode", "400108")]
        public virtual void AddProductivity_InvalidValuesForAssetTargets_TargetCycles_NegativeValue()
        {
            this.AddProductivity_InvalidValuesForAssetTargets("TargetCycles_NegativeValue", "targetcycles", "-4", "400108", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetCycles_DecimalValueMoreThanMax")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetCycles_DecimalValueMoreThanMax")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "targetcycles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "1.2987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorCode", "400108")]
        public virtual void AddProductivity_InvalidValuesForAssetTargets_TargetCycles_DecimalValueMoreThanMax()
        {
            this.AddProductivity_InvalidValuesForAssetTargets("TargetCycles_DecimalValueMoreThanMax", "targetcycles", "1.2987", "400108", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetCycles_MaxValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetCycles_MaxValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "targetcycles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "54321")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorCode", "400108")]
        public virtual void AddProductivity_InvalidValuesForAssetTargets_TargetCycles_MaxValue()
        {
            this.AddProductivity_InvalidValuesForAssetTargets("TargetCycles_MaxValue", "targetcycles", "54321", "400108", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetVolumes_MinValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetVolumes_MinValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "targetvolumes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "-100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorCode", "400108")]
        public virtual void AddProductivity_InvalidValuesForAssetTargets_TargetVolumes_MinValue()
        {
            this.AddProductivity_InvalidValuesForAssetTargets("TargetVolumes_MinValue", "targetvolumes", "-100", "400108", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetVolumes_DecimalValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetVolumes_DecimalValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "targetvolumes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "45.2345")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorCode", "400108")]
        public virtual void AddProductivity_InvalidValuesForAssetTargets_TargetVolumes_DecimalValue()
        {
            this.AddProductivity_InvalidValuesForAssetTargets("TargetVolumes_DecimalValue", "targetvolumes", "45.2345", "400108", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetVolumes_MaxValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetVolumes_MaxValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "targetvolumes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "54324")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorCode", "400108")]
        public virtual void AddProductivity_InvalidValuesForAssetTargets_TargetVolumes_MaxValue()
        {
            this.AddProductivity_InvalidValuesForAssetTargets("TargetVolumes_MaxValue", "targetvolumes", "54324", "400108", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetPayload_MinValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetPayload_MinValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "TargetPayload")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "-0.12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorCode", "400108")]
        public virtual void AddProductivity_InvalidValuesForAssetTargets_TargetPayload_MinValue()
        {
            this.AddProductivity_InvalidValuesForAssetTargets("TargetPayload_MinValue", "TargetPayload", "-0.12", "400108", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetPayload_DecimalValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetPayload_DecimalValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "TargetPayload")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "1.298")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorCode", "400108")]
        public virtual void AddProductivity_InvalidValuesForAssetTargets_TargetPayload_DecimalValue()
        {
            this.AddProductivity_InvalidValuesForAssetTargets("TargetPayload_DecimalValue", "TargetPayload", "1.298", "400108", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidValuesForAssetTargets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TargetPayload_MaxValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TargetPayload_MaxValue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AssetTargetName", "TargetPayload")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "54322")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ErrorCode", "400108")]
        public virtual void AddProductivity_InvalidValuesForAssetTargets_TargetPayload_MaxValue()
        {
            this.AddProductivity_InvalidValuesForAssetTargets("TargetPayload_MaxValue", "TargetPayload", "54322", "400108", ((string[])(null)));
        }
        
        public virtual void AddProductivity_InvalidAssetUID(string description, string assetUID, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "US44878",
                    "Automated",
                    "AddProductivity",
                    "Negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AddProductivity_InvalidAssetUID", @__tags);
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
testRunner.Given(string.Format("\'{0}\' is ready to verify", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
testRunner.And("AddProductivity is setup with default valid values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
testRunner.And("I modify  AssetUID as <\'assetUID\'>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
testRunner.When("I Put Valid Productivity details for asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
 testRunner.And("When I try to retrieve Productivity details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
testRunner.Then("Valid Error Code should be shown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "assetUID_Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "assetUID_Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:assetUID", "NULL_NULL")]
        public virtual void AddProductivity_InvalidAssetUID_AssetUID_Null()
        {
            this.AddProductivity_InvalidAssetUID("assetUID_Null", "NULL_NULL", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "assetUID_EmptySpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "assetUID_EmptySpace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:assetUID", "EMPTY_EMPTY")]
        public virtual void AddProductivity_InvalidAssetUID_AssetUID_EmptySpace()
        {
            this.AddProductivity_InvalidAssetUID("assetUID_EmptySpace", "EMPTY_EMPTY", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidAssetUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "assetUID_InvalidString")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "assetUID_InvalidString")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:assetUID", "InvalidString")]
        public virtual void AddProductivity_InvalidAssetUID_AssetUID_InvalidString()
        {
            this.AddProductivity_InvalidAssetUID("assetUID_InvalidString", "InvalidString", ((string[])(null)));
        }
        
        public virtual void AddProductivity_InvalidStartDateAndEndDate(string description, string addAssetStartDate, string addAssetEndDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "US44878",
                    "Automated",
                    "AddProductivity",
                    "Negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AddProductivity_InvalidStartDateAndEndDate", @__tags);
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
testRunner.Given(string.Format("\'{0}\' is ready to verify", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
testRunner.And("AddProductivity is setup with default valid values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
testRunner.When(string.Format("I modify  startdate as \'{0}\' and EndDate as \'{1}\'", addAssetStartDate, addAssetEndDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
testRunner.And("I try to retrieve Productivity details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
testRunner.Then("Valid ErrorResponse Should be shown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidStartDateAndEndDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "InvalidStartAndEndDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "InvalidStartAndEndDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetStartDate", "Today")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetEndDate", "Tomorrow")]
        public virtual void AddProductivity_InvalidStartDateAndEndDate_InvalidStartAndEndDate()
        {
            this.AddProductivity_InvalidStartDateAndEndDate("InvalidStartAndEndDate", "Today", "Tomorrow", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_InvalidStartDateAndEndDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "StartDateGreaterThanEndDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "StartDateGreaterThanEndDate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetStartDate", "20-1-2017")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetEndDate", "1-1-2017")]
        public virtual void AddProductivity_InvalidStartDateAndEndDate_StartDateGreaterThanEndDate()
        {
            this.AddProductivity_InvalidStartDateAndEndDate("StartDateGreaterThanEndDate", "20-1-2017", "1-1-2017", ((string[])(null)));
        }
        
        public virtual void AddProductivity_OverLappingScenarios(string description, string addAssetStartDate, string addAssetEndDate, string updateAssetStartDate, string updateAssetEndDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "US44878",
                    "Automated",
                    "AddProductivity",
                    "Positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AddProductivity_OverLappingScenarios", @__tags);
#line 86
this.ScenarioSetup(scenarioInfo);
#line 87
testRunner.Given(string.Format("\'{0}\' is ready to verify", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 88
testRunner.And("AddProductivity is setup with default valid values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
testRunner.And(string.Format("I modify  startdate as \'{0}\' and EndDate as \'{1}\'", addAssetStartDate, addAssetEndDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
testRunner.And("I Put Valid Productivity details for asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
testRunner.And(string.Format("I modify  startdate as \'{0}\' and EndDate as \'{1}\'", updateAssetStartDate, updateAssetEndDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
testRunner.And("I Put Valid Productivity details for asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
testRunner.When("I try to retrieve Productivity details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
testRunner.Then("Updated Productivity details should be shown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_OverLappingScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "StartDateOverlap")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "StartDateOverlap")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetStartDate", "2017-1-20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetEndDate", "2017-1-26")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UpdateAssetStartDate", "2017-1-18")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UpdateAssetEndDate", "2017-1-22")]
        public virtual void AddProductivity_OverLappingScenarios_StartDateOverlap()
        {
            this.AddProductivity_OverLappingScenarios("StartDateOverlap", "2017-1-20", "2017-1-26", "2017-1-18", "2017-1-22", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_OverLappingScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EndDateOverlap")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "EndDateOverlap")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetStartDate", "2017-1-20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetEndDate", "2017-1-26")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UpdateAssetStartDate", "2017-1-24")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UpdateAssetEndDate", "2017-1-30")]
        public virtual void AddProductivity_OverLappingScenarios_EndDateOverlap()
        {
            this.AddProductivity_OverLappingScenarios("EndDateOverlap", "2017-1-20", "2017-1-26", "2017-1-24", "2017-1-30", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_OverLappingScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "FullOverlap")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "FullOverlap")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetStartDate", "2017-1-20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetEndDate", "2017-1-26")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UpdateAssetStartDate", "2017-1-20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UpdateAssetEndDate", "2017-1-26")]
        public virtual void AddProductivity_OverLappingScenarios_FullOverlap()
        {
            this.AddProductivity_OverLappingScenarios("FullOverlap", "2017-1-20", "2017-1-26", "2017-1-20", "2017-1-26", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_OverLappingScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "SmallOverlapInBetween")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "SmallOverlapInBetween")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetStartDate", "2017-1-20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetEndDate", "2017-1-26")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UpdateAssetStartDate", "2017-1-22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UpdateAssetEndDate", "2017-1-25")]
        public virtual void AddProductivity_OverLappingScenarios_SmallOverlapInBetween()
        {
            this.AddProductivity_OverLappingScenarios("SmallOverlapInBetween", "2017-1-20", "2017-1-26", "2017-1-22", "2017-1-25", ((string[])(null)));
        }
        
        public virtual void AddProductivity_MultipleOverlap(string description, string addAssetStartDate, string addAssetEndDate, string updateAssetStartDate, string updateAssetEndDate, string multipleOverlapStartDate, string multipleOverlapEndDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "US44878",
                    "Automated",
                    "AddProductivity",
                    "Positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AddProductivity_MultipleOverlap", @__tags);
#line 104
this.ScenarioSetup(scenarioInfo);
#line 105
testRunner.Given(string.Format("\'{0}\' is ready to verify", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 106
testRunner.And("AddProductivity is setup with default valid values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
testRunner.And(string.Format("I modify  startdate as \'{0}\' and EndDate as \'{1}\'", addAssetStartDate, addAssetEndDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
testRunner.And("I Put Valid Productivity details for asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
testRunner.And(string.Format("I modify  startdate as \'{0}\' and EndDate as \'{1}\'", updateAssetStartDate, updateAssetEndDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
testRunner.And("I Put Valid Productivity details for asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
testRunner.And(string.Format("I modify  startdate as \'{0}\' and EndDate as \'{1}\'", multipleOverlapStartDate, multipleOverlapEndDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
testRunner.And("I Put Valid Productivity details for asset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
testRunner.When("I try to retrieve Productivity details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 114
testRunner.Then("Updated Productivity details should be shown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_MultipleOverlap")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MultipleOverlap")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "MultipleOverlap")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetStartDate", "2017-1-5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddAssetEndDate", "2017-1-10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UpdateAssetStartDate", "2017-1-10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UpdateAssetEndDate", "2017-1-15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MultipleOverlapStartDate", "2017-1-5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MultipleOverlapEndDate", "2017-1-15")]
        public virtual void AddProductivity_MultipleOverlap_MultipleOverlap()
        {
            this.AddProductivity_MultipleOverlap("MultipleOverlap", "2017-1-5", "2017-1-10", "2017-1-10", "2017-1-15", "2017-1-5", "2017-1-15", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddProductivity_NoUserCustomerRelation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US44878")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Automated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddProductivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Positive")]
        public virtual void AddProductivity_NoUserCustomerRelation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AddProductivity_NoUserCustomerRelation", new string[] {
                        "US44878",
                        "Automated",
                        "AddProductivity",
                        "Positive"});
#line 120
this.ScenarioSetup(scenarioInfo);
#line 121
testRunner.Given("\'<Description>\' is ready to verify", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 122
testRunner.And("AddProductivity is setup with default valid values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
testRunner.And("I map an user to an different customer which is not mapped", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
testRunner.When("I try to add asset Details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 125
testRunner.Then("Valid Asset Details response should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 126
testRunner.And("Valid Error Response should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

