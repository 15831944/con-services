//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using VSS.Hosted.VLCommon.NH_OEMDATAMockObjectSet;

namespace VSS.Hosted.VLCommon
{
    /// <summary>
    /// The concrete mock context object that implements the context's interface.
    /// Provide an instance of this mock context class to client logic when testing, 
    /// instead of providing a functional context object.
    /// </summary>
    public partial class NH_OEMDATAMock : INH_OEMDATA
    {
        private bool _readOnlyCurrent = false;
        private Stack<bool> _readOnlyStack = new Stack<bool>();
    		public System.Data.Common.DbConnection Connection { get {return null;} }
        public int SaveChanges() 
        { 
          if (_readOnlyCurrent == true)
            throw new System.NotSupportedException("This ObjectContext cannot be used to change data on the database");
          return 1; 
        }
    
        public void SetReadOnlyness(bool readOnly)
        {
          _readOnlyStack.Push(_readOnlyCurrent);
          _readOnlyCurrent = readOnly;
        }
    
        public NH_OEMDATAMock()
        {
        }
    
    	  ~NH_OEMDATAMock()
        {
          Dispose();
        }
    
    
        #region IDisposable
    	  public void Dispose()
        {
            if (_readOnlyStack.Count > 0)
            {
              _readOnlyCurrent = _readOnlyStack.Pop();
            }
        }
        #endregion
    
        public IObjectSet<CAT_AntiData> CAT_AntiData
        {
            get { return _cAT_AntiData  ?? (_cAT_AntiData = new MockObjectSet<CAT_AntiData>()); }
        }
        private IObjectSet<CAT_AntiData> _cAT_AntiData;
    
        public IObjectSet<CAT_AntiData> CAT_AntiDataReadOnly{get { return CAT_AntiData; }}
    
        public IObjectSet<CAT_Diagnostic> CAT_Diagnostic
        {
            get { return _cAT_Diagnostic  ?? (_cAT_Diagnostic = new MockObjectSet<CAT_Diagnostic>()); }
        }
        private IObjectSet<CAT_Diagnostic> _cAT_Diagnostic;
    
        public IObjectSet<CAT_Diagnostic> CAT_DiagnosticReadOnly{get { return CAT_Diagnostic; }}
    
        public IObjectSet<CAT_DigStatus> CAT_DigStatus
        {
            get { return _cAT_DigStatus  ?? (_cAT_DigStatus = new MockObjectSet<CAT_DigStatus>()); }
        }
        private IObjectSet<CAT_DigStatus> _cAT_DigStatus;
    
        public IObjectSet<CAT_DigStatus> CAT_DigStatusReadOnly{get { return CAT_DigStatus; }}
    
        public IObjectSet<CAT_Engine> CAT_Engine
        {
            get { return _cAT_Engine  ?? (_cAT_Engine = new MockObjectSet<CAT_Engine>()); }
        }
        private IObjectSet<CAT_Engine> _cAT_Engine;
    
        public IObjectSet<CAT_Engine> CAT_EngineReadOnly{get { return CAT_Engine; }}
    
        public IObjectSet<CAT_Event> CAT_Event
        {
            get { return _cAT_Event  ?? (_cAT_Event = new MockObjectSet<CAT_Event>()); }
        }
        private IObjectSet<CAT_Event> _cAT_Event;
    
        public IObjectSet<CAT_Event> CAT_EventReadOnly{get { return CAT_Event; }}
    
        public IObjectSet<CAT_FenceAlert> CAT_FenceAlert
        {
            get { return _cAT_FenceAlert  ?? (_cAT_FenceAlert = new MockObjectSet<CAT_FenceAlert>()); }
        }
        private IObjectSet<CAT_FenceAlert> _cAT_FenceAlert;
    
        public IObjectSet<CAT_FenceAlert> CAT_FenceAlertReadOnly{get { return CAT_FenceAlert; }}
    
        public IObjectSet<CAT_Fuel> CAT_Fuel
        {
            get { return _cAT_Fuel  ?? (_cAT_Fuel = new MockObjectSet<CAT_Fuel>()); }
        }
        private IObjectSet<CAT_Fuel> _cAT_Fuel;
    
        public IObjectSet<CAT_Fuel> CAT_FuelReadOnly{get { return CAT_Fuel; }}
    
        public IObjectSet<CAT_ManualSMU> CAT_ManualSMU
        {
            get { return _cAT_ManualSMU  ?? (_cAT_ManualSMU = new MockObjectSet<CAT_ManualSMU>()); }
        }
        private IObjectSet<CAT_ManualSMU> _cAT_ManualSMU;
    
        public IObjectSet<CAT_ManualSMU> CAT_ManualSMUReadOnly{get { return CAT_ManualSMU; }}
    
        public IObjectSet<CAT_SMULoc> CAT_SMULoc
        {
            get { return _cAT_SMULoc  ?? (_cAT_SMULoc = new MockObjectSet<CAT_SMULoc>()); }
        }
        private IObjectSet<CAT_SMULoc> _cAT_SMULoc;
    
        public IObjectSet<CAT_SMULoc> CAT_SMULocReadOnly{get { return CAT_SMULoc; }}
    
        public IObjectSet<CAT_StartStop> CAT_StartStop
        {
            get { return _cAT_StartStop  ?? (_cAT_StartStop = new MockObjectSet<CAT_StartStop>()); }
        }
        private IObjectSet<CAT_StartStop> _cAT_StartStop;
    
        public IObjectSet<CAT_StartStop> CAT_StartStopReadOnly{get { return CAT_StartStop; }}
    
        public IObjectSet<UnparsedXML> UnparsedXMLs
        {
            get { return _unparsedXMLs  ?? (_unparsedXMLs = new MockObjectSet<UnparsedXML>()); }
        }
        private IObjectSet<UnparsedXML> _unparsedXMLs;
    
        public IObjectSet<UnparsedXML> UnparsedXMLsReadOnly{get { return UnparsedXMLs; }}
    
        public IObjectSet<CAT_Fluid> CAT_Fluid
        {
            get { return _cAT_Fluid  ?? (_cAT_Fluid = new MockObjectSet<CAT_Fluid>()); }
        }
        private IObjectSet<CAT_Fluid> _cAT_Fluid;
    
        public IObjectSet<CAT_Fluid> CAT_FluidReadOnly{get { return CAT_Fluid; }}
    
        public IObjectSet<CAT_PayloadCycle> CAT_PayloadCycle
        {
            get { return _cAT_PayloadCycle  ?? (_cAT_PayloadCycle = new MockObjectSet<CAT_PayloadCycle>()); }
        }
        private IObjectSet<CAT_PayloadCycle> _cAT_PayloadCycle;
    
        public IObjectSet<CAT_PayloadCycle> CAT_PayloadCycleReadOnly{get { return CAT_PayloadCycle; }}
    
    }
}
