//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;

namespace VSS.Hosted.VLCommon
{
    /// <summary>
    /// The functional concrete object context. This is just like the normal
    /// context that would be generated using the POCO artefact generator, 
    /// apart from the fact that this one implements an interface containing 
    /// the entity set properties and exposes <code>IObjectSet</code>
    /// instances for entity set properties.
    ///
    /// The context can be constructed as "read-only", in which case SNAPSHOT IsolationLevel is used for queries
    /// and calls to SaveChanges are not supported.
    /// </summary>
    public partial class NH_RPT : ObjectContext, INH_RPT 
    {
        public const string ConnectionString = "name=NH_RPT";
        public const string ContainerName = "NH_RPT";
    
        private bool _readOnly = false;
    
        #region Constructors
    
        public NH_RPT(bool readOnly = false):
            base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        	  _readOnly = readOnly;
    
        }
    
        public NH_RPT(string connectionString, bool readOnly = false):
            base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        	  _readOnly = readOnly;
    
        }
    
        public NH_RPT(EntityConnection connection, bool readOnly = false):
            base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        	  _readOnly = readOnly;
    
        }
    
    	~NH_RPT()
        {
          Dispose();
        }
    
        #endregion
    
    	#region IDisposable
    	new public void Dispose()
        {
          base.Dispose();
        }
    
        protected override void Dispose(bool disposing)
        {
          base.Dispose(disposing);
        }
    
        #endregion
    
        #region SaveChanges
    
    	public override int SaveChanges(SaveOptions options)
    	{
    	  if ( _readOnly )
    	    throw new System.NotSupportedException("This ObjectContext cannot be used to change data on the database");
    
        return base.SaveChanges(options);
    	}
    
      public IObjectSet<T> GetObjectSet<T>() where T : class
      {
        return base.CreateObjectSet<T>();
      }
    
    	#endregion
    
        #region ObjectSet Properties
    
        public IObjectSet<AssetDiscreteIOState> AssetDiscreteIOState
        {
            get { return _assetDiscreteIOState ?? (_assetDiscreteIOState = CreateObjectSet<AssetDiscreteIOState>("AssetDiscreteIOState")); }
        }
        private ObjectSet<AssetDiscreteIOState> _assetDiscreteIOState;
        public IObjectSet<AssetDiscreteIOState> AssetDiscreteIOStateReadOnly
        {
            get 
            { 
              if (null == _assetDiscreteIOStateRO)
              {
                _assetDiscreteIOStateRO = CreateObjectSet<AssetDiscreteIOState>("AssetDiscreteIOState"); 
                _assetDiscreteIOStateRO.MergeOption=MergeOption.NoTracking;
              }
              return _assetDiscreteIOStateRO;
            }
        }
        private ObjectSet<AssetDiscreteIOState> _assetDiscreteIOStateRO;
    
        public IObjectSet<DimAssetWorkingState> DimAssetWorkingState
        {
            get { return _dimAssetWorkingState ?? (_dimAssetWorkingState = CreateObjectSet<DimAssetWorkingState>("DimAssetWorkingState")); }
        }
        private ObjectSet<DimAssetWorkingState> _dimAssetWorkingState;
        public IObjectSet<DimAssetWorkingState> DimAssetWorkingStateReadOnly
        {
            get 
            { 
              if (null == _dimAssetWorkingStateRO)
              {
                _dimAssetWorkingStateRO = CreateObjectSet<DimAssetWorkingState>("DimAssetWorkingState"); 
                _dimAssetWorkingStateRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAssetWorkingStateRO;
            }
        }
        private ObjectSet<DimAssetWorkingState> _dimAssetWorkingStateRO;
    
        public IObjectSet<DimConfiguration> DimConfiguration
        {
            get { return _dimConfiguration ?? (_dimConfiguration = CreateObjectSet<DimConfiguration>("DimConfiguration")); }
        }
        private ObjectSet<DimConfiguration> _dimConfiguration;
        public IObjectSet<DimConfiguration> DimConfigurationReadOnly
        {
            get 
            { 
              if (null == _dimConfigurationRO)
              {
                _dimConfigurationRO = CreateObjectSet<DimConfiguration>("DimConfiguration"); 
                _dimConfigurationRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimConfigurationRO;
            }
        }
        private ObjectSet<DimConfiguration> _dimConfigurationRO;
    
        public IObjectSet<DimDatalink> DimDatalink
        {
            get { return _dimDatalink ?? (_dimDatalink = CreateObjectSet<DimDatalink>("DimDatalink")); }
        }
        private ObjectSet<DimDatalink> _dimDatalink;
        public IObjectSet<DimDatalink> DimDatalinkReadOnly
        {
            get 
            { 
              if (null == _dimDatalinkRO)
              {
                _dimDatalinkRO = CreateObjectSet<DimDatalink>("DimDatalink"); 
                _dimDatalinkRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimDatalinkRO;
            }
        }
        private ObjectSet<DimDatalink> _dimDatalinkRO;
    
        public IObjectSet<DimEventType> DimEventType
        {
            get { return _dimEventType ?? (_dimEventType = CreateObjectSet<DimEventType>("DimEventType")); }
        }
        private ObjectSet<DimEventType> _dimEventType;
        public IObjectSet<DimEventType> DimEventTypeReadOnly
        {
            get 
            { 
              if (null == _dimEventTypeRO)
              {
                _dimEventTypeRO = CreateObjectSet<DimEventType>("DimEventType"); 
                _dimEventTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimEventTypeRO;
            }
        }
        private ObjectSet<DimEventType> _dimEventTypeRO;
    
        public IObjectSet<DimFault> DimFault
        {
            get { return _dimFault ?? (_dimFault = CreateObjectSet<DimFault>("DimFault")); }
        }
        private ObjectSet<DimFault> _dimFault;
        public IObjectSet<DimFault> DimFaultReadOnly
        {
            get 
            { 
              if (null == _dimFaultRO)
              {
                _dimFaultRO = CreateObjectSet<DimFault>("DimFault"); 
                _dimFaultRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimFaultRO;
            }
        }
        private ObjectSet<DimFault> _dimFaultRO;
    
        public IObjectSet<DimFaultDescription> DimFaultDescription
        {
            get { return _dimFaultDescription ?? (_dimFaultDescription = CreateObjectSet<DimFaultDescription>("DimFaultDescription")); }
        }
        private ObjectSet<DimFaultDescription> _dimFaultDescription;
        public IObjectSet<DimFaultDescription> DimFaultDescriptionReadOnly
        {
            get 
            { 
              if (null == _dimFaultDescriptionRO)
              {
                _dimFaultDescriptionRO = CreateObjectSet<DimFaultDescription>("DimFaultDescription"); 
                _dimFaultDescriptionRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimFaultDescriptionRO;
            }
        }
        private ObjectSet<DimFaultDescription> _dimFaultDescriptionRO;
    
        public IObjectSet<DimFaultType> DimFaultType
        {
            get { return _dimFaultType ?? (_dimFaultType = CreateObjectSet<DimFaultType>("DimFaultType")); }
        }
        private ObjectSet<DimFaultType> _dimFaultType;
        public IObjectSet<DimFaultType> DimFaultTypeReadOnly
        {
            get 
            { 
              if (null == _dimFaultTypeRO)
              {
                _dimFaultTypeRO = CreateObjectSet<DimFaultType>("DimFaultType"); 
                _dimFaultTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimFaultTypeRO;
            }
        }
        private ObjectSet<DimFaultType> _dimFaultTypeRO;
    
        public IObjectSet<DimKeyDate> DimKeyDate
        {
            get { return _dimKeyDate ?? (_dimKeyDate = CreateObjectSet<DimKeyDate>("DimKeyDate")); }
        }
        private ObjectSet<DimKeyDate> _dimKeyDate;
        public IObjectSet<DimKeyDate> DimKeyDateReadOnly
        {
            get 
            { 
              if (null == _dimKeyDateRO)
              {
                _dimKeyDateRO = CreateObjectSet<DimKeyDate>("DimKeyDate"); 
                _dimKeyDateRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimKeyDateRO;
            }
        }
        private ObjectSet<DimKeyDate> _dimKeyDateRO;
    
        public IObjectSet<DimLanguage> DimLanguage
        {
            get { return _dimLanguage ?? (_dimLanguage = CreateObjectSet<DimLanguage>("DimLanguage")); }
        }
        private ObjectSet<DimLanguage> _dimLanguage;
        public IObjectSet<DimLanguage> DimLanguageReadOnly
        {
            get 
            { 
              if (null == _dimLanguageRO)
              {
                _dimLanguageRO = CreateObjectSet<DimLanguage>("DimLanguage"); 
                _dimLanguageRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimLanguageRO;
            }
        }
        private ObjectSet<DimLanguage> _dimLanguageRO;
    
        public IObjectSet<DimMID> DimMID
        {
            get { return _dimMID ?? (_dimMID = CreateObjectSet<DimMID>("DimMID")); }
        }
        private ObjectSet<DimMID> _dimMID;
        public IObjectSet<DimMID> DimMIDReadOnly
        {
            get 
            { 
              if (null == _dimMIDRO)
              {
                _dimMIDRO = CreateObjectSet<DimMID>("DimMID"); 
                _dimMIDRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimMIDRO;
            }
        }
        private ObjectSet<DimMID> _dimMIDRO;
    
        public IObjectSet<DimMIDDesc> DimMIDDesc
        {
            get { return _dimMIDDesc ?? (_dimMIDDesc = CreateObjectSet<DimMIDDesc>("DimMIDDesc")); }
        }
        private ObjectSet<DimMIDDesc> _dimMIDDesc;
        public IObjectSet<DimMIDDesc> DimMIDDescReadOnly
        {
            get 
            { 
              if (null == _dimMIDDescRO)
              {
                _dimMIDDescRO = CreateObjectSet<DimMIDDesc>("DimMIDDesc"); 
                _dimMIDDescRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimMIDDescRO;
            }
        }
        private ObjectSet<DimMIDDesc> _dimMIDDescRO;
    
        public IObjectSet<DimReportServicePlan> DimReportServicePlan
        {
            get { return _dimReportServicePlan ?? (_dimReportServicePlan = CreateObjectSet<DimReportServicePlan>("DimReportServicePlan")); }
        }
        private ObjectSet<DimReportServicePlan> _dimReportServicePlan;
        public IObjectSet<DimReportServicePlan> DimReportServicePlanReadOnly
        {
            get 
            { 
              if (null == _dimReportServicePlanRO)
              {
                _dimReportServicePlanRO = CreateObjectSet<DimReportServicePlan>("DimReportServicePlan"); 
                _dimReportServicePlanRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimReportServicePlanRO;
            }
        }
        private ObjectSet<DimReportServicePlan> _dimReportServicePlanRO;
    
        public IObjectSet<DimReportType> DimReportType
        {
            get { return _dimReportType ?? (_dimReportType = CreateObjectSet<DimReportType>("DimReportType")); }
        }
        private ObjectSet<DimReportType> _dimReportType;
        public IObjectSet<DimReportType> DimReportTypeReadOnly
        {
            get 
            { 
              if (null == _dimReportTypeRO)
              {
                _dimReportTypeRO = CreateObjectSet<DimReportType>("DimReportType"); 
                _dimReportTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimReportTypeRO;
            }
        }
        private ObjectSet<DimReportType> _dimReportTypeRO;
    
        public IObjectSet<DimServiceType> DimServiceType
        {
            get { return _dimServiceType ?? (_dimServiceType = CreateObjectSet<DimServiceType>("DimServiceType")); }
        }
        private ObjectSet<DimServiceType> _dimServiceType;
        public IObjectSet<DimServiceType> DimServiceTypeReadOnly
        {
            get 
            { 
              if (null == _dimServiceTypeRO)
              {
                _dimServiceTypeRO = CreateObjectSet<DimServiceType>("DimServiceType"); 
                _dimServiceTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimServiceTypeRO;
            }
        }
        private ObjectSet<DimServiceType> _dimServiceTypeRO;
    
        public IObjectSet<DimServiceView> DimServiceView
        {
            get { return _dimServiceView ?? (_dimServiceView = CreateObjectSet<DimServiceView>("DimServiceView")); }
        }
        private ObjectSet<DimServiceView> _dimServiceView;
        public IObjectSet<DimServiceView> DimServiceViewReadOnly
        {
            get 
            { 
              if (null == _dimServiceViewRO)
              {
                _dimServiceViewRO = CreateObjectSet<DimServiceView>("DimServiceView"); 
                _dimServiceViewRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimServiceViewRO;
            }
        }
        private ObjectSet<DimServiceView> _dimServiceViewRO;
    
        public IObjectSet<DimSeverityLevel> DimSeverityLevel
        {
            get { return _dimSeverityLevel ?? (_dimSeverityLevel = CreateObjectSet<DimSeverityLevel>("DimSeverityLevel")); }
        }
        private ObjectSet<DimSeverityLevel> _dimSeverityLevel;
        public IObjectSet<DimSeverityLevel> DimSeverityLevelReadOnly
        {
            get 
            { 
              if (null == _dimSeverityLevelRO)
              {
                _dimSeverityLevelRO = CreateObjectSet<DimSeverityLevel>("DimSeverityLevel"); 
                _dimSeverityLevelRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimSeverityLevelRO;
            }
        }
        private ObjectSet<DimSeverityLevel> _dimSeverityLevelRO;
    
        public IObjectSet<DimSeverityLevelIDMap> DimSeverityLevelIDMap
        {
            get { return _dimSeverityLevelIDMap ?? (_dimSeverityLevelIDMap = CreateObjectSet<DimSeverityLevelIDMap>("DimSeverityLevelIDMap")); }
        }
        private ObjectSet<DimSeverityLevelIDMap> _dimSeverityLevelIDMap;
        public IObjectSet<DimSeverityLevelIDMap> DimSeverityLevelIDMapReadOnly
        {
            get 
            { 
              if (null == _dimSeverityLevelIDMapRO)
              {
                _dimSeverityLevelIDMapRO = CreateObjectSet<DimSeverityLevelIDMap>("DimSeverityLevelIDMap"); 
                _dimSeverityLevelIDMapRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimSeverityLevelIDMapRO;
            }
        }
        private ObjectSet<DimSeverityLevelIDMap> _dimSeverityLevelIDMapRO;
    
        public IObjectSet<DimSISLinkCodes> DimSISLinkCodes
        {
            get { return _dimSISLinkCodes ?? (_dimSISLinkCodes = CreateObjectSet<DimSISLinkCodes>("DimSISLinkCodes")); }
        }
        private ObjectSet<DimSISLinkCodes> _dimSISLinkCodes;
        public IObjectSet<DimSISLinkCodes> DimSISLinkCodesReadOnly
        {
            get 
            { 
              if (null == _dimSISLinkCodesRO)
              {
                _dimSISLinkCodesRO = CreateObjectSet<DimSISLinkCodes>("DimSISLinkCodes"); 
                _dimSISLinkCodesRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimSISLinkCodesRO;
            }
        }
        private ObjectSet<DimSISLinkCodes> _dimSISLinkCodesRO;
    
        public IObjectSet<DimSite> DimSite
        {
            get { return _dimSite ?? (_dimSite = CreateObjectSet<DimSite>("DimSite")); }
        }
        private ObjectSet<DimSite> _dimSite;
        public IObjectSet<DimSite> DimSiteReadOnly
        {
            get 
            { 
              if (null == _dimSiteRO)
              {
                _dimSiteRO = CreateObjectSet<DimSite>("DimSite"); 
                _dimSiteRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimSiteRO;
            }
        }
        private ObjectSet<DimSite> _dimSiteRO;
    
        public IObjectSet<DimTimeZone> DimTimeZone
        {
            get { return _dimTimeZone ?? (_dimTimeZone = CreateObjectSet<DimTimeZone>("DimTimeZone")); }
        }
        private ObjectSet<DimTimeZone> _dimTimeZone;
        public IObjectSet<DimTimeZone> DimTimeZoneReadOnly
        {
            get 
            { 
              if (null == _dimTimeZoneRO)
              {
                _dimTimeZoneRO = CreateObjectSet<DimTimeZone>("DimTimeZone"); 
                _dimTimeZoneRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimTimeZoneRO;
            }
        }
        private ObjectSet<DimTimeZone> _dimTimeZoneRO;
    
        public IObjectSet<DimWorkDefinition> DimWorkDefinition
        {
            get { return _dimWorkDefinition ?? (_dimWorkDefinition = CreateObjectSet<DimWorkDefinition>("DimWorkDefinition")); }
        }
        private ObjectSet<DimWorkDefinition> _dimWorkDefinition;
        public IObjectSet<DimWorkDefinition> DimWorkDefinitionReadOnly
        {
            get 
            { 
              if (null == _dimWorkDefinitionRO)
              {
                _dimWorkDefinitionRO = CreateObjectSet<DimWorkDefinition>("DimWorkDefinition"); 
                _dimWorkDefinitionRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimWorkDefinitionRO;
            }
        }
        private ObjectSet<DimWorkDefinition> _dimWorkDefinitionRO;
    
        public IObjectSet<Event> Event
        {
            get { return _event ?? (_event = CreateObjectSet<Event>("Event")); }
        }
        private ObjectSet<Event> _event;
        public IObjectSet<Event> EventReadOnly
        {
            get 
            { 
              if (null == _eventRO)
              {
                _eventRO = CreateObjectSet<Event>("Event"); 
                _eventRO.MergeOption=MergeOption.NoTracking;
              }
              return _eventRO;
            }
        }
        private ObjectSet<Event> _eventRO;
    
        public IObjectSet<FeedDigitalSwitchStatus> FeedDigitalSwitchStatus
        {
            get { return _feedDigitalSwitchStatus ?? (_feedDigitalSwitchStatus = CreateObjectSet<FeedDigitalSwitchStatus>("FeedDigitalSwitchStatus")); }
        }
        private ObjectSet<FeedDigitalSwitchStatus> _feedDigitalSwitchStatus;
        public IObjectSet<FeedDigitalSwitchStatus> FeedDigitalSwitchStatusReadOnly
        {
            get 
            { 
              if (null == _feedDigitalSwitchStatusRO)
              {
                _feedDigitalSwitchStatusRO = CreateObjectSet<FeedDigitalSwitchStatus>("FeedDigitalSwitchStatus"); 
                _feedDigitalSwitchStatusRO.MergeOption=MergeOption.NoTracking;
              }
              return _feedDigitalSwitchStatusRO;
            }
        }
        private ObjectSet<FeedDigitalSwitchStatus> _feedDigitalSwitchStatusRO;
    
        public IObjectSet<FeedEngineParameters> FeedEngineParameters
        {
            get { return _feedEngineParameters ?? (_feedEngineParameters = CreateObjectSet<FeedEngineParameters>("FeedEngineParameters")); }
        }
        private ObjectSet<FeedEngineParameters> _feedEngineParameters;
        public IObjectSet<FeedEngineParameters> FeedEngineParametersReadOnly
        {
            get 
            { 
              if (null == _feedEngineParametersRO)
              {
                _feedEngineParametersRO = CreateObjectSet<FeedEngineParameters>("FeedEngineParameters"); 
                _feedEngineParametersRO.MergeOption=MergeOption.NoTracking;
              }
              return _feedEngineParametersRO;
            }
        }
        private ObjectSet<FeedEngineParameters> _feedEngineParametersRO;
    
        public IObjectSet<FeedEngStartStop> FeedEngStartStop
        {
            get { return _feedEngStartStop ?? (_feedEngStartStop = CreateObjectSet<FeedEngStartStop>("FeedEngStartStop")); }
        }
        private ObjectSet<FeedEngStartStop> _feedEngStartStop;
        public IObjectSet<FeedEngStartStop> FeedEngStartStopReadOnly
        {
            get 
            { 
              if (null == _feedEngStartStopRO)
              {
                _feedEngStartStopRO = CreateObjectSet<FeedEngStartStop>("FeedEngStartStop"); 
                _feedEngStartStopRO.MergeOption=MergeOption.NoTracking;
              }
              return _feedEngStartStopRO;
            }
        }
        private ObjectSet<FeedEngStartStop> _feedEngStartStopRO;
    
        public IObjectSet<FeedFaultEvent> FeedFaultEvent
        {
            get { return _feedFaultEvent ?? (_feedFaultEvent = CreateObjectSet<FeedFaultEvent>("FeedFaultEvent")); }
        }
        private ObjectSet<FeedFaultEvent> _feedFaultEvent;
        public IObjectSet<FeedFaultEvent> FeedFaultEventReadOnly
        {
            get 
            { 
              if (null == _feedFaultEventRO)
              {
                _feedFaultEventRO = CreateObjectSet<FeedFaultEvent>("FeedFaultEvent"); 
                _feedFaultEventRO.MergeOption=MergeOption.NoTracking;
              }
              return _feedFaultEventRO;
            }
        }
        private ObjectSet<FeedFaultEvent> _feedFaultEventRO;
    
        public IObjectSet<FeedFenceAlarm> FeedFenceAlarm
        {
            get { return _feedFenceAlarm ?? (_feedFenceAlarm = CreateObjectSet<FeedFenceAlarm>("FeedFenceAlarm")); }
        }
        private ObjectSet<FeedFenceAlarm> _feedFenceAlarm;
        public IObjectSet<FeedFenceAlarm> FeedFenceAlarmReadOnly
        {
            get 
            { 
              if (null == _feedFenceAlarmRO)
              {
                _feedFenceAlarmRO = CreateObjectSet<FeedFenceAlarm>("FeedFenceAlarm"); 
                _feedFenceAlarmRO.MergeOption=MergeOption.NoTracking;
              }
              return _feedFenceAlarmRO;
            }
        }
        private ObjectSet<FeedFenceAlarm> _feedFenceAlarmRO;
    
        public IObjectSet<FeedFuel> FeedFuel
        {
            get { return _feedFuel ?? (_feedFuel = CreateObjectSet<FeedFuel>("FeedFuel")); }
        }
        private ObjectSet<FeedFuel> _feedFuel;
        public IObjectSet<FeedFuel> FeedFuelReadOnly
        {
            get 
            { 
              if (null == _feedFuelRO)
              {
                _feedFuelRO = CreateObjectSet<FeedFuel>("FeedFuel"); 
                _feedFuelRO.MergeOption=MergeOption.NoTracking;
              }
              return _feedFuelRO;
            }
        }
        private ObjectSet<FeedFuel> _feedFuelRO;
    
        public IObjectSet<FeedSMULocation> FeedSMULocation
        {
            get { return _feedSMULocation ?? (_feedSMULocation = CreateObjectSet<FeedSMULocation>("FeedSMULocation")); }
        }
        private ObjectSet<FeedSMULocation> _feedSMULocation;
        public IObjectSet<FeedSMULocation> FeedSMULocationReadOnly
        {
            get 
            { 
              if (null == _feedSMULocationRO)
              {
                _feedSMULocationRO = CreateObjectSet<FeedSMULocation>("FeedSMULocation"); 
                _feedSMULocationRO.MergeOption=MergeOption.NoTracking;
              }
              return _feedSMULocationRO;
            }
        }
        private ObjectSet<FeedSMULocation> _feedSMULocationRO;
    
        public IObjectSet<FluidAnalysis> FluidAnalysis
        {
            get { return _fluidAnalysis ?? (_fluidAnalysis = CreateObjectSet<FluidAnalysis>("FluidAnalysis")); }
        }
        private ObjectSet<FluidAnalysis> _fluidAnalysis;
        public IObjectSet<FluidAnalysis> FluidAnalysisReadOnly
        {
            get 
            { 
              if (null == _fluidAnalysisRO)
              {
                _fluidAnalysisRO = CreateObjectSet<FluidAnalysis>("FluidAnalysis"); 
                _fluidAnalysisRO.MergeOption=MergeOption.NoTracking;
              }
              return _fluidAnalysisRO;
            }
        }
        private ObjectSet<FluidAnalysis> _fluidAnalysisRO;
    
        public IObjectSet<FuelLossCandidate> FuelLossCandidate
        {
            get { return _fuelLossCandidate ?? (_fuelLossCandidate = CreateObjectSet<FuelLossCandidate>("FuelLossCandidate")); }
        }
        private ObjectSet<FuelLossCandidate> _fuelLossCandidate;
        public IObjectSet<FuelLossCandidate> FuelLossCandidateReadOnly
        {
            get 
            { 
              if (null == _fuelLossCandidateRO)
              {
                _fuelLossCandidateRO = CreateObjectSet<FuelLossCandidate>("FuelLossCandidate"); 
                _fuelLossCandidateRO.MergeOption=MergeOption.NoTracking;
              }
              return _fuelLossCandidateRO;
            }
        }
        private ObjectSet<FuelLossCandidate> _fuelLossCandidateRO;
    
        public IObjectSet<ReportParameter> ReportParameter
        {
            get { return _reportParameter ?? (_reportParameter = CreateObjectSet<ReportParameter>("ReportParameter")); }
        }
        private ObjectSet<ReportParameter> _reportParameter;
        public IObjectSet<ReportParameter> ReportParameterReadOnly
        {
            get 
            { 
              if (null == _reportParameterRO)
              {
                _reportParameterRO = CreateObjectSet<ReportParameter>("ReportParameter"); 
                _reportParameterRO.MergeOption=MergeOption.NoTracking;
              }
              return _reportParameterRO;
            }
        }
        private ObjectSet<ReportParameter> _reportParameterRO;
    
        public IObjectSet<vw_LocationHistory> vw_LocationHistory
        {
            get { return _vw_LocationHistory ?? (_vw_LocationHistory = CreateObjectSet<vw_LocationHistory>("vw_LocationHistory")); }
        }
        private ObjectSet<vw_LocationHistory> _vw_LocationHistory;
        public IObjectSet<vw_LocationHistory> vw_LocationHistoryReadOnly
        {
            get 
            { 
              if (null == _vw_LocationHistoryRO)
              {
                _vw_LocationHistoryRO = CreateObjectSet<vw_LocationHistory>("vw_LocationHistory"); 
                _vw_LocationHistoryRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_LocationHistoryRO;
            }
        }
        private ObjectSet<vw_LocationHistory> _vw_LocationHistoryRO;
    
        public IObjectSet<DimCustomer> DimCustomer
        {
            get { return _dimCustomer ?? (_dimCustomer = CreateObjectSet<DimCustomer>("DimCustomer")); }
        }
        private ObjectSet<DimCustomer> _dimCustomer;
        public IObjectSet<DimCustomer> DimCustomerReadOnly
        {
            get 
            { 
              if (null == _dimCustomerRO)
              {
                _dimCustomerRO = CreateObjectSet<DimCustomer>("DimCustomer"); 
                _dimCustomerRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimCustomerRO;
            }
        }
        private ObjectSet<DimCustomer> _dimCustomerRO;
    
        public IObjectSet<DimSensor> DimSensor
        {
            get { return _dimSensor ?? (_dimSensor = CreateObjectSet<DimSensor>("DimSensor")); }
        }
        private ObjectSet<DimSensor> _dimSensor;
        public IObjectSet<DimSensor> DimSensorReadOnly
        {
            get 
            { 
              if (null == _dimSensorRO)
              {
                _dimSensorRO = CreateObjectSet<DimSensor>("DimSensor"); 
                _dimSensorRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimSensorRO;
            }
        }
        private ObjectSet<DimSensor> _dimSensorRO;
    
        public IObjectSet<DimFaultParameter> DimFaultParameter
        {
            get { return _dimFaultParameter ?? (_dimFaultParameter = CreateObjectSet<DimFaultParameter>("DimFaultParameter")); }
        }
        private ObjectSet<DimFaultParameter> _dimFaultParameter;
        public IObjectSet<DimFaultParameter> DimFaultParameterReadOnly
        {
            get 
            { 
              if (null == _dimFaultParameterRO)
              {
                _dimFaultParameterRO = CreateObjectSet<DimFaultParameter>("DimFaultParameter"); 
                _dimFaultParameterRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimFaultParameterRO;
            }
        }
        private ObjectSet<DimFaultParameter> _dimFaultParameterRO;
    
        public IObjectSet<DimFaultParameterType> DimFaultParameterType
        {
            get { return _dimFaultParameterType ?? (_dimFaultParameterType = CreateObjectSet<DimFaultParameterType>("DimFaultParameterType")); }
        }
        private ObjectSet<DimFaultParameterType> _dimFaultParameterType;
        public IObjectSet<DimFaultParameterType> DimFaultParameterTypeReadOnly
        {
            get 
            { 
              if (null == _dimFaultParameterTypeRO)
              {
                _dimFaultParameterTypeRO = CreateObjectSet<DimFaultParameterType>("DimFaultParameterType"); 
                _dimFaultParameterTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimFaultParameterTypeRO;
            }
        }
        private ObjectSet<DimFaultParameterType> _dimFaultParameterTypeRO;
    
        public IObjectSet<DimAssetHistoryEventType> DimAssetHistoryEventType
        {
            get { return _dimAssetHistoryEventType ?? (_dimAssetHistoryEventType = CreateObjectSet<DimAssetHistoryEventType>("DimAssetHistoryEventType")); }
        }
        private ObjectSet<DimAssetHistoryEventType> _dimAssetHistoryEventType;
        public IObjectSet<DimAssetHistoryEventType> DimAssetHistoryEventTypeReadOnly
        {
            get 
            { 
              if (null == _dimAssetHistoryEventTypeRO)
              {
                _dimAssetHistoryEventTypeRO = CreateObjectSet<DimAssetHistoryEventType>("DimAssetHistoryEventType"); 
                _dimAssetHistoryEventTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAssetHistoryEventTypeRO;
            }
        }
        private ObjectSet<DimAssetHistoryEventType> _dimAssetHistoryEventTypeRO;
    
        public IObjectSet<AssetCurrentStatus> AssetCurrentStatus
        {
            get { return _assetCurrentStatus ?? (_assetCurrentStatus = CreateObjectSet<AssetCurrentStatus>("AssetCurrentStatus")); }
        }
        private ObjectSet<AssetCurrentStatus> _assetCurrentStatus;
        public IObjectSet<AssetCurrentStatus> AssetCurrentStatusReadOnly
        {
            get 
            { 
              if (null == _assetCurrentStatusRO)
              {
                _assetCurrentStatusRO = CreateObjectSet<AssetCurrentStatus>("AssetCurrentStatus"); 
                _assetCurrentStatusRO.MergeOption=MergeOption.NoTracking;
              }
              return _assetCurrentStatusRO;
            }
        }
        private ObjectSet<AssetCurrentStatus> _assetCurrentStatusRO;
    
        public IObjectSet<DimAsset> DimAsset
        {
            get { return _dimAsset ?? (_dimAsset = CreateObjectSet<DimAsset>("DimAsset")); }
        }
        private ObjectSet<DimAsset> _dimAsset;
        public IObjectSet<DimAsset> DimAssetReadOnly
        {
            get 
            { 
              if (null == _dimAssetRO)
              {
                _dimAssetRO = CreateObjectSet<DimAsset>("DimAsset"); 
                _dimAssetRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAssetRO;
            }
        }
        private ObjectSet<DimAsset> _dimAssetRO;
    
        public IObjectSet<vw_WorkingSet> vw_WorkingSet
        {
            get { return _vw_WorkingSet ?? (_vw_WorkingSet = CreateObjectSet<vw_WorkingSet>("vw_WorkingSet")); }
        }
        private ObjectSet<vw_WorkingSet> _vw_WorkingSet;
        public IObjectSet<vw_WorkingSet> vw_WorkingSetReadOnly
        {
            get 
            { 
              if (null == _vw_WorkingSetRO)
              {
                _vw_WorkingSetRO = CreateObjectSet<vw_WorkingSet>("vw_WorkingSet"); 
                _vw_WorkingSetRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_WorkingSetRO;
            }
        }
        private ObjectSet<vw_WorkingSet> _vw_WorkingSetRO;
    
        public IObjectSet<vw_WorkingSetPopulation> vw_WorkingSetPopulation
        {
            get { return _vw_WorkingSetPopulation ?? (_vw_WorkingSetPopulation = CreateObjectSet<vw_WorkingSetPopulation>("vw_WorkingSetPopulation")); }
        }
        private ObjectSet<vw_WorkingSetPopulation> _vw_WorkingSetPopulation;
        public IObjectSet<vw_WorkingSetPopulation> vw_WorkingSetPopulationReadOnly
        {
            get 
            { 
              if (null == _vw_WorkingSetPopulationRO)
              {
                _vw_WorkingSetPopulationRO = CreateObjectSet<vw_WorkingSetPopulation>("vw_WorkingSetPopulation"); 
                _vw_WorkingSetPopulationRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_WorkingSetPopulationRO;
            }
        }
        private ObjectSet<vw_WorkingSetPopulation> _vw_WorkingSetPopulationRO;
    
        public IObjectSet<FactAssetCustomerSite> FactAssetCustomerSite
        {
            get { return _factAssetCustomerSite ?? (_factAssetCustomerSite = CreateObjectSet<FactAssetCustomerSite>("FactAssetCustomerSite")); }
        }
        private ObjectSet<FactAssetCustomerSite> _factAssetCustomerSite;
        public IObjectSet<FactAssetCustomerSite> FactAssetCustomerSiteReadOnly
        {
            get 
            { 
              if (null == _factAssetCustomerSiteRO)
              {
                _factAssetCustomerSiteRO = CreateObjectSet<FactAssetCustomerSite>("FactAssetCustomerSite"); 
                _factAssetCustomerSiteRO.MergeOption=MergeOption.NoTracking;
              }
              return _factAssetCustomerSiteRO;
            }
        }
        private ObjectSet<FactAssetCustomerSite> _factAssetCustomerSiteRO;
    
        public IObjectSet<DimAssetCycle> DimAssetCycle
        {
            get { return _dimAssetCycle ?? (_dimAssetCycle = CreateObjectSet<DimAssetCycle>("DimAssetCycle")); }
        }
        private ObjectSet<DimAssetCycle> _dimAssetCycle;
        public IObjectSet<DimAssetCycle> DimAssetCycleReadOnly
        {
            get 
            { 
              if (null == _dimAssetCycleRO)
              {
                _dimAssetCycleRO = CreateObjectSet<DimAssetCycle>("DimAssetCycle"); 
                _dimAssetCycleRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAssetCycleRO;
            }
        }
        private ObjectSet<DimAssetCycle> _dimAssetCycleRO;
    
        public IObjectSet<DimAssetMonitoringSettings> DimAssetMonitoringSettings
        {
            get { return _dimAssetMonitoringSettings ?? (_dimAssetMonitoringSettings = CreateObjectSet<DimAssetMonitoringSettings>("DimAssetMonitoringSettings")); }
        }
        private ObjectSet<DimAssetMonitoringSettings> _dimAssetMonitoringSettings;
        public IObjectSet<DimAssetMonitoringSettings> DimAssetMonitoringSettingsReadOnly
        {
            get 
            { 
              if (null == _dimAssetMonitoringSettingsRO)
              {
                _dimAssetMonitoringSettingsRO = CreateObjectSet<DimAssetMonitoringSettings>("DimAssetMonitoringSettings"); 
                _dimAssetMonitoringSettingsRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAssetMonitoringSettingsRO;
            }
        }
        private ObjectSet<DimAssetMonitoringSettings> _dimAssetMonitoringSettingsRO;
    
        public IObjectSet<ReportWorkingSet> ReportWorkingSet
        {
            get { return _reportWorkingSet ?? (_reportWorkingSet = CreateObjectSet<ReportWorkingSet>("ReportWorkingSet")); }
        }
        private ObjectSet<ReportWorkingSet> _reportWorkingSet;
        public IObjectSet<ReportWorkingSet> ReportWorkingSetReadOnly
        {
            get 
            { 
              if (null == _reportWorkingSetRO)
              {
                _reportWorkingSetRO = CreateObjectSet<ReportWorkingSet>("ReportWorkingSet"); 
                _reportWorkingSetRO.MergeOption=MergeOption.NoTracking;
              }
              return _reportWorkingSetRO;
            }
        }
        private ObjectSet<ReportWorkingSet> _reportWorkingSetRO;
    
        public IObjectSet<FactFault> FactFault
        {
            get { return _factFault ?? (_factFault = CreateObjectSet<FactFault>("FactFault")); }
        }
        private ObjectSet<FactFault> _factFault;
        public IObjectSet<FactFault> FactFaultReadOnly
        {
            get 
            { 
              if (null == _factFaultRO)
              {
                _factFaultRO = CreateObjectSet<FactFault>("FactFault"); 
                _factFaultRO.MergeOption=MergeOption.NoTracking;
              }
              return _factFaultRO;
            }
        }
        private ObjectSet<FactFault> _factFaultRO;
    
        public IObjectSet<DimAssetExpectedRuntimeHours> DimAssetExpectedRuntimeHours
        {
            get { return _dimAssetExpectedRuntimeHours ?? (_dimAssetExpectedRuntimeHours = CreateObjectSet<DimAssetExpectedRuntimeHours>("DimAssetExpectedRuntimeHours")); }
        }
        private ObjectSet<DimAssetExpectedRuntimeHours> _dimAssetExpectedRuntimeHours;
        public IObjectSet<DimAssetExpectedRuntimeHours> DimAssetExpectedRuntimeHoursReadOnly
        {
            get 
            { 
              if (null == _dimAssetExpectedRuntimeHoursRO)
              {
                _dimAssetExpectedRuntimeHoursRO = CreateObjectSet<DimAssetExpectedRuntimeHours>("DimAssetExpectedRuntimeHours"); 
                _dimAssetExpectedRuntimeHoursRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAssetExpectedRuntimeHoursRO;
            }
        }
        private ObjectSet<DimAssetExpectedRuntimeHours> _dimAssetExpectedRuntimeHoursRO;
    
        public IObjectSet<DimAssetWorkingDefinition> DimAssetWorkingDefinition
        {
            get { return _dimAssetWorkingDefinition ?? (_dimAssetWorkingDefinition = CreateObjectSet<DimAssetWorkingDefinition>("DimAssetWorkingDefinition")); }
        }
        private ObjectSet<DimAssetWorkingDefinition> _dimAssetWorkingDefinition;
        public IObjectSet<DimAssetWorkingDefinition> DimAssetWorkingDefinitionReadOnly
        {
            get 
            { 
              if (null == _dimAssetWorkingDefinitionRO)
              {
                _dimAssetWorkingDefinitionRO = CreateObjectSet<DimAssetWorkingDefinition>("DimAssetWorkingDefinition"); 
                _dimAssetWorkingDefinitionRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAssetWorkingDefinitionRO;
            }
        }
        private ObjectSet<DimAssetWorkingDefinition> _dimAssetWorkingDefinitionRO;
    
        public IObjectSet<DimAssetBurnRates> DimAssetBurnRates
        {
            get { return _dimAssetBurnRates ?? (_dimAssetBurnRates = CreateObjectSet<DimAssetBurnRates>("DimAssetBurnRates")); }
        }
        private ObjectSet<DimAssetBurnRates> _dimAssetBurnRates;
        public IObjectSet<DimAssetBurnRates> DimAssetBurnRatesReadOnly
        {
            get 
            { 
              if (null == _dimAssetBurnRatesRO)
              {
                _dimAssetBurnRatesRO = CreateObjectSet<DimAssetBurnRates>("DimAssetBurnRates"); 
                _dimAssetBurnRatesRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAssetBurnRatesRO;
            }
        }
        private ObjectSet<DimAssetBurnRates> _dimAssetBurnRatesRO;
    
        public IObjectSet<EngineParameters> EngineParameters
        {
            get { return _engineParameters ?? (_engineParameters = CreateObjectSet<EngineParameters>("EngineParameters")); }
        }
        private ObjectSet<EngineParameters> _engineParameters;
        public IObjectSet<EngineParameters> EngineParametersReadOnly
        {
            get 
            { 
              if (null == _engineParametersRO)
              {
                _engineParametersRO = CreateObjectSet<EngineParameters>("EngineParameters"); 
                _engineParametersRO.MergeOption=MergeOption.NoTracking;
              }
              return _engineParametersRO;
            }
        }
        private ObjectSet<EngineParameters> _engineParametersRO;
    
        public IObjectSet<Configuration> Configuration
        {
            get { return _configuration ?? (_configuration = CreateObjectSet<Configuration>("Configuration")); }
        }
        private ObjectSet<Configuration> _configuration;
        public IObjectSet<Configuration> ConfigurationReadOnly
        {
            get 
            { 
              if (null == _configurationRO)
              {
                _configurationRO = CreateObjectSet<Configuration>("Configuration"); 
                _configurationRO.MergeOption=MergeOption.NoTracking;
              }
              return _configurationRO;
            }
        }
        private ObjectSet<Configuration> _configurationRO;
    
        public IObjectSet<DimAddress> DimAddress
        {
            get { return _dimAddress ?? (_dimAddress = CreateObjectSet<DimAddress>("DimAddress")); }
        }
        private ObjectSet<DimAddress> _dimAddress;
        public IObjectSet<DimAddress> DimAddressReadOnly
        {
            get 
            { 
              if (null == _dimAddressRO)
              {
                _dimAddressRO = CreateObjectSet<DimAddress>("DimAddress"); 
                _dimAddressRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAddressRO;
            }
        }
        private ObjectSet<DimAddress> _dimAddressRO;
    
        public IObjectSet<DimAssetGroup> DimAssetGroup
        {
            get { return _dimAssetGroup ?? (_dimAssetGroup = CreateObjectSet<DimAssetGroup>("DimAssetGroup")); }
        }
        private ObjectSet<DimAssetGroup> _dimAssetGroup;
        public IObjectSet<DimAssetGroup> DimAssetGroupReadOnly
        {
            get 
            { 
              if (null == _dimAssetGroupRO)
              {
                _dimAssetGroupRO = CreateObjectSet<DimAssetGroup>("DimAssetGroup"); 
                _dimAssetGroupRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAssetGroupRO;
            }
        }
        private ObjectSet<DimAssetGroup> _dimAssetGroupRO;
    
        public IObjectSet<DimProjectSiteSetting> DimProjectSiteSetting
        {
            get { return _dimProjectSiteSetting ?? (_dimProjectSiteSetting = CreateObjectSet<DimProjectSiteSetting>("DimProjectSiteSetting")); }
        }
        private ObjectSet<DimProjectSiteSetting> _dimProjectSiteSetting;
        public IObjectSet<DimProjectSiteSetting> DimProjectSiteSettingReadOnly
        {
            get 
            { 
              if (null == _dimProjectSiteSettingRO)
              {
                _dimProjectSiteSettingRO = CreateObjectSet<DimProjectSiteSetting>("DimProjectSiteSetting"); 
                _dimProjectSiteSettingRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimProjectSiteSettingRO;
            }
        }
        private ObjectSet<DimProjectSiteSetting> _dimProjectSiteSettingRO;
    
        public IObjectSet<DimSiteType> DimSiteType
        {
            get { return _dimSiteType ?? (_dimSiteType = CreateObjectSet<DimSiteType>("DimSiteType")); }
        }
        private ObjectSet<DimSiteType> _dimSiteType;
        public IObjectSet<DimSiteType> DimSiteTypeReadOnly
        {
            get 
            { 
              if (null == _dimSiteTypeRO)
              {
                _dimSiteTypeRO = CreateObjectSet<DimSiteType>("DimSiteType"); 
                _dimSiteTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimSiteTypeRO;
            }
        }
        private ObjectSet<DimSiteType> _dimSiteTypeRO;
    
        public IObjectSet<FactSiteAssetDaily> FactSiteAssetDaily
        {
            get { return _factSiteAssetDaily ?? (_factSiteAssetDaily = CreateObjectSet<FactSiteAssetDaily>("FactSiteAssetDaily")); }
        }
        private ObjectSet<FactSiteAssetDaily> _factSiteAssetDaily;
        public IObjectSet<FactSiteAssetDaily> FactSiteAssetDailyReadOnly
        {
            get 
            { 
              if (null == _factSiteAssetDailyRO)
              {
                _factSiteAssetDailyRO = CreateObjectSet<FactSiteAssetDaily>("FactSiteAssetDaily"); 
                _factSiteAssetDailyRO.MergeOption=MergeOption.NoTracking;
              }
              return _factSiteAssetDailyRO;
            }
        }
        private ObjectSet<FactSiteAssetDaily> _factSiteAssetDailyRO;
    
        public IObjectSet<FeedFaultDiagnostic> FeedFaultDiagnostic
        {
            get { return _feedFaultDiagnostic ?? (_feedFaultDiagnostic = CreateObjectSet<FeedFaultDiagnostic>("FeedFaultDiagnostic")); }
        }
        private ObjectSet<FeedFaultDiagnostic> _feedFaultDiagnostic;
        public IObjectSet<FeedFaultDiagnostic> FeedFaultDiagnosticReadOnly
        {
            get 
            { 
              if (null == _feedFaultDiagnosticRO)
              {
                _feedFaultDiagnosticRO = CreateObjectSet<FeedFaultDiagnostic>("FeedFaultDiagnostic"); 
                _feedFaultDiagnosticRO.MergeOption=MergeOption.NoTracking;
              }
              return _feedFaultDiagnosticRO;
            }
        }
        private ObjectSet<FeedFaultDiagnostic> _feedFaultDiagnosticRO;
    
        public IObjectSet<FactAssetOperationPeriod> FactAssetOperationPeriod
        {
            get { return _factAssetOperationPeriod ?? (_factAssetOperationPeriod = CreateObjectSet<FactAssetOperationPeriod>("FactAssetOperationPeriod")); }
        }
        private ObjectSet<FactAssetOperationPeriod> _factAssetOperationPeriod;
        public IObjectSet<FactAssetOperationPeriod> FactAssetOperationPeriodReadOnly
        {
            get 
            { 
              if (null == _factAssetOperationPeriodRO)
              {
                _factAssetOperationPeriodRO = CreateObjectSet<FactAssetOperationPeriod>("FactAssetOperationPeriod"); 
                _factAssetOperationPeriodRO.MergeOption=MergeOption.NoTracking;
              }
              return _factAssetOperationPeriodRO;
            }
        }
        private ObjectSet<FactAssetOperationPeriod> _factAssetOperationPeriodRO;
    
        public IObjectSet<HoursLocation> HoursLocation
        {
            get { return _hoursLocation ?? (_hoursLocation = CreateObjectSet<HoursLocation>("HoursLocation")); }
        }
        private ObjectSet<HoursLocation> _hoursLocation;
        public IObjectSet<HoursLocation> HoursLocationReadOnly
        {
            get 
            { 
              if (null == _hoursLocationRO)
              {
                _hoursLocationRO = CreateObjectSet<HoursLocation>("HoursLocation"); 
                _hoursLocationRO.MergeOption=MergeOption.NoTracking;
              }
              return _hoursLocationRO;
            }
        }
        private ObjectSet<HoursLocation> _hoursLocationRO;
    
        public IObjectSet<FactPMDue> FactPMDue
        {
            get { return _factPMDue ?? (_factPMDue = CreateObjectSet<FactPMDue>("FactPMDue")); }
        }
        private ObjectSet<FactPMDue> _factPMDue;
        public IObjectSet<FactPMDue> FactPMDueReadOnly
        {
            get 
            { 
              if (null == _factPMDueRO)
              {
                _factPMDueRO = CreateObjectSet<FactPMDue>("FactPMDue"); 
                _factPMDueRO.MergeOption=MergeOption.NoTracking;
              }
              return _factPMDueRO;
            }
        }
        private ObjectSet<FactPMDue> _factPMDueRO;
    
        public IObjectSet<FactAssetLoadCountPeriod> FactAssetLoadCountPeriod
        {
            get { return _factAssetLoadCountPeriod ?? (_factAssetLoadCountPeriod = CreateObjectSet<FactAssetLoadCountPeriod>("FactAssetLoadCountPeriod")); }
        }
        private ObjectSet<FactAssetLoadCountPeriod> _factAssetLoadCountPeriod;
        public IObjectSet<FactAssetLoadCountPeriod> FactAssetLoadCountPeriodReadOnly
        {
            get 
            { 
              if (null == _factAssetLoadCountPeriodRO)
              {
                _factAssetLoadCountPeriodRO = CreateObjectSet<FactAssetLoadCountPeriod>("FactAssetLoadCountPeriod"); 
                _factAssetLoadCountPeriodRO.MergeOption=MergeOption.NoTracking;
              }
              return _factAssetLoadCountPeriodRO;
            }
        }
        private ObjectSet<FactAssetLoadCountPeriod> _factAssetLoadCountPeriodRO;
    
        public IObjectSet<FactAssetCycles> FactAssetCycles
        {
            get { return _factAssetCycles ?? (_factAssetCycles = CreateObjectSet<FactAssetCycles>("FactAssetCycles")); }
        }
        private ObjectSet<FactAssetCycles> _factAssetCycles;
        public IObjectSet<FactAssetCycles> FactAssetCyclesReadOnly
        {
            get 
            { 
              if (null == _factAssetCyclesRO)
              {
                _factAssetCyclesRO = CreateObjectSet<FactAssetCycles>("FactAssetCycles"); 
                _factAssetCyclesRO.MergeOption=MergeOption.NoTracking;
              }
              return _factAssetCyclesRO;
            }
        }
        private ObjectSet<FactAssetCycles> _factAssetCyclesRO;
    
        public IObjectSet<DimModelVariant> DimModelVariant
        {
            get { return _dimModelVariant ?? (_dimModelVariant = CreateObjectSet<DimModelVariant>("DimModelVariant")); }
        }
        private ObjectSet<DimModelVariant> _dimModelVariant;
        public IObjectSet<DimModelVariant> DimModelVariantReadOnly
        {
            get 
            { 
              if (null == _dimModelVariantRO)
              {
                _dimModelVariantRO = CreateObjectSet<DimModelVariant>("DimModelVariant"); 
                _dimModelVariantRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimModelVariantRO;
            }
        }
        private ObjectSet<DimModelVariant> _dimModelVariantRO;
    
        public IObjectSet<DimUtilizationCalloutType> DimUtilizationCalloutType
        {
            get { return _dimUtilizationCalloutType ?? (_dimUtilizationCalloutType = CreateObjectSet<DimUtilizationCalloutType>("DimUtilizationCalloutType")); }
        }
        private ObjectSet<DimUtilizationCalloutType> _dimUtilizationCalloutType;
        public IObjectSet<DimUtilizationCalloutType> DimUtilizationCalloutTypeReadOnly
        {
            get 
            { 
              if (null == _dimUtilizationCalloutTypeRO)
              {
                _dimUtilizationCalloutTypeRO = CreateObjectSet<DimUtilizationCalloutType>("DimUtilizationCalloutType"); 
                _dimUtilizationCalloutTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimUtilizationCalloutTypeRO;
            }
        }
        private ObjectSet<DimUtilizationCalloutType> _dimUtilizationCalloutTypeRO;
    
        public IObjectSet<FactAssetUtilizationDaily> FactAssetUtilizationDaily
        {
            get { return _factAssetUtilizationDaily ?? (_factAssetUtilizationDaily = CreateObjectSet<FactAssetUtilizationDaily>("FactAssetUtilizationDaily")); }
        }
        private ObjectSet<FactAssetUtilizationDaily> _factAssetUtilizationDaily;
        public IObjectSet<FactAssetUtilizationDaily> FactAssetUtilizationDailyReadOnly
        {
            get 
            { 
              if (null == _factAssetUtilizationDailyRO)
              {
                _factAssetUtilizationDailyRO = CreateObjectSet<FactAssetUtilizationDaily>("FactAssetUtilizationDaily"); 
                _factAssetUtilizationDailyRO.MergeOption=MergeOption.NoTracking;
              }
              return _factAssetUtilizationDailyRO;
            }
        }
        private ObjectSet<FactAssetUtilizationDaily> _factAssetUtilizationDailyRO;
    
        public IObjectSet<DimMassHaulPlan> DimMassHaulPlan
        {
            get { return _dimMassHaulPlan ?? (_dimMassHaulPlan = CreateObjectSet<DimMassHaulPlan>("DimMassHaulPlan")); }
        }
        private ObjectSet<DimMassHaulPlan> _dimMassHaulPlan;
        public IObjectSet<DimMassHaulPlan> DimMassHaulPlanReadOnly
        {
            get 
            { 
              if (null == _dimMassHaulPlanRO)
              {
                _dimMassHaulPlanRO = CreateObjectSet<DimMassHaulPlan>("DimMassHaulPlan"); 
                _dimMassHaulPlanRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimMassHaulPlanRO;
            }
        }
        private ObjectSet<DimMassHaulPlan> _dimMassHaulPlanRO;
    
        public IObjectSet<DimAssetMonitoring> DimAssetMonitoring
        {
            get { return _dimAssetMonitoring ?? (_dimAssetMonitoring = CreateObjectSet<DimAssetMonitoring>("DimAssetMonitoring")); }
        }
        private ObjectSet<DimAssetMonitoring> _dimAssetMonitoring;
        public IObjectSet<DimAssetMonitoring> DimAssetMonitoringReadOnly
        {
            get 
            { 
              if (null == _dimAssetMonitoringRO)
              {
                _dimAssetMonitoringRO = CreateObjectSet<DimAssetMonitoring>("DimAssetMonitoring"); 
                _dimAssetMonitoringRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAssetMonitoringRO;
            }
        }
        private ObjectSet<DimAssetMonitoring> _dimAssetMonitoringRO;
    
        public IObjectSet<WorkingSiteOccupancy> WorkingSiteOccupancy
        {
            get { return _workingSiteOccupancy ?? (_workingSiteOccupancy = CreateObjectSet<WorkingSiteOccupancy>("WorkingSiteOccupancy")); }
        }
        private ObjectSet<WorkingSiteOccupancy> _workingSiteOccupancy;
        public IObjectSet<WorkingSiteOccupancy> WorkingSiteOccupancyReadOnly
        {
            get 
            { 
              if (null == _workingSiteOccupancyRO)
              {
                _workingSiteOccupancyRO = CreateObjectSet<WorkingSiteOccupancy>("WorkingSiteOccupancy"); 
                _workingSiteOccupancyRO.MergeOption=MergeOption.NoTracking;
              }
              return _workingSiteOccupancyRO;
            }
        }
        private ObjectSet<WorkingSiteOccupancy> _workingSiteOccupancyRO;
    
        public IObjectSet<AssetCurrentSecurityStatus> AssetCurrentSecurityStatus
        {
            get { return _assetCurrentSecurityStatus ?? (_assetCurrentSecurityStatus = CreateObjectSet<AssetCurrentSecurityStatus>("AssetCurrentSecurityStatus")); }
        }
        private ObjectSet<AssetCurrentSecurityStatus> _assetCurrentSecurityStatus;
        public IObjectSet<AssetCurrentSecurityStatus> AssetCurrentSecurityStatusReadOnly
        {
            get 
            { 
              if (null == _assetCurrentSecurityStatusRO)
              {
                _assetCurrentSecurityStatusRO = CreateObjectSet<AssetCurrentSecurityStatus>("AssetCurrentSecurityStatus"); 
                _assetCurrentSecurityStatusRO.MergeOption=MergeOption.NoTracking;
              }
              return _assetCurrentSecurityStatusRO;
            }
        }
        private ObjectSet<AssetCurrentSecurityStatus> _assetCurrentSecurityStatusRO;
    
        public IObjectSet<DimSharedView> DimSharedView
        {
            get { return _dimSharedView ?? (_dimSharedView = CreateObjectSet<DimSharedView>("DimSharedView")); }
        }
        private ObjectSet<DimSharedView> _dimSharedView;
        public IObjectSet<DimSharedView> DimSharedViewReadOnly
        {
            get 
            { 
              if (null == _dimSharedViewRO)
              {
                _dimSharedViewRO = CreateObjectSet<DimSharedView>("DimSharedView"); 
                _dimSharedViewRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimSharedViewRO;
            }
        }
        private ObjectSet<DimSharedView> _dimSharedViewRO;
    
        public IObjectSet<vw_WorkingSetService> vw_WorkingSetService
        {
            get { return _vw_WorkingSetService ?? (_vw_WorkingSetService = CreateObjectSet<vw_WorkingSetService>("vw_WorkingSetService")); }
        }
        private ObjectSet<vw_WorkingSetService> _vw_WorkingSetService;
        public IObjectSet<vw_WorkingSetService> vw_WorkingSetServiceReadOnly
        {
            get 
            { 
              if (null == _vw_WorkingSetServiceRO)
              {
                _vw_WorkingSetServiceRO = CreateObjectSet<vw_WorkingSetService>("vw_WorkingSetService"); 
                _vw_WorkingSetServiceRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_WorkingSetServiceRO;
            }
        }
        private ObjectSet<vw_WorkingSetService> _vw_WorkingSetServiceRO;
    
        public IObjectSet<DimAlertSubType> DimAlertSubType
        {
            get { return _dimAlertSubType ?? (_dimAlertSubType = CreateObjectSet<DimAlertSubType>("DimAlertSubType")); }
        }
        private ObjectSet<DimAlertSubType> _dimAlertSubType;
        public IObjectSet<DimAlertSubType> DimAlertSubTypeReadOnly
        {
            get 
            { 
              if (null == _dimAlertSubTypeRO)
              {
                _dimAlertSubTypeRO = CreateObjectSet<DimAlertSubType>("DimAlertSubType"); 
                _dimAlertSubTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAlertSubTypeRO;
            }
        }
        private ObjectSet<DimAlertSubType> _dimAlertSubTypeRO;
    
        public IObjectSet<FactAssetProjectTagFileError> FactAssetProjectTagFileError
        {
            get { return _factAssetProjectTagFileError ?? (_factAssetProjectTagFileError = CreateObjectSet<FactAssetProjectTagFileError>("FactAssetProjectTagFileError")); }
        }
        private ObjectSet<FactAssetProjectTagFileError> _factAssetProjectTagFileError;
        public IObjectSet<FactAssetProjectTagFileError> FactAssetProjectTagFileErrorReadOnly
        {
            get 
            { 
              if (null == _factAssetProjectTagFileErrorRO)
              {
                _factAssetProjectTagFileErrorRO = CreateObjectSet<FactAssetProjectTagFileError>("FactAssetProjectTagFileError"); 
                _factAssetProjectTagFileErrorRO.MergeOption=MergeOption.NoTracking;
              }
              return _factAssetProjectTagFileErrorRO;
            }
        }
        private ObjectSet<FactAssetProjectTagFileError> _factAssetProjectTagFileErrorRO;
    
        public IObjectSet<vw_MaintenanceUsage> vw_MaintenanceUsage
        {
            get { return _vw_MaintenanceUsage ?? (_vw_MaintenanceUsage = CreateObjectSet<vw_MaintenanceUsage>("vw_MaintenanceUsage")); }
        }
        private ObjectSet<vw_MaintenanceUsage> _vw_MaintenanceUsage;
        public IObjectSet<vw_MaintenanceUsage> vw_MaintenanceUsageReadOnly
        {
            get 
            { 
              if (null == _vw_MaintenanceUsageRO)
              {
                _vw_MaintenanceUsageRO = CreateObjectSet<vw_MaintenanceUsage>("vw_MaintenanceUsage"); 
                _vw_MaintenanceUsageRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_MaintenanceUsageRO;
            }
        }
        private ObjectSet<vw_MaintenanceUsage> _vw_MaintenanceUsageRO;
    
        public IObjectSet<vw_AssetUtilizationDaily> vw_AssetUtilizationDaily
        {
            get { return _vw_AssetUtilizationDaily ?? (_vw_AssetUtilizationDaily = CreateObjectSet<vw_AssetUtilizationDaily>("vw_AssetUtilizationDaily")); }
        }
        private ObjectSet<vw_AssetUtilizationDaily> _vw_AssetUtilizationDaily;
        public IObjectSet<vw_AssetUtilizationDaily> vw_AssetUtilizationDailyReadOnly
        {
            get 
            { 
              if (null == _vw_AssetUtilizationDailyRO)
              {
                _vw_AssetUtilizationDailyRO = CreateObjectSet<vw_AssetUtilizationDaily>("vw_AssetUtilizationDaily"); 
                _vw_AssetUtilizationDailyRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_AssetUtilizationDailyRO;
            }
        }
        private ObjectSet<vw_AssetUtilizationDaily> _vw_AssetUtilizationDailyRO;
    
        public IObjectSet<DigitalSwitchStatus> DigitalSwitchStatus
        {
            get { return _digitalSwitchStatus ?? (_digitalSwitchStatus = CreateObjectSet<DigitalSwitchStatus>("DigitalSwitchStatus")); }
        }
        private ObjectSet<DigitalSwitchStatus> _digitalSwitchStatus;
        public IObjectSet<DigitalSwitchStatus> DigitalSwitchStatusReadOnly
        {
            get 
            { 
              if (null == _digitalSwitchStatusRO)
              {
                _digitalSwitchStatusRO = CreateObjectSet<DigitalSwitchStatus>("DigitalSwitchStatus"); 
                _digitalSwitchStatusRO.MergeOption=MergeOption.NoTracking;
              }
              return _digitalSwitchStatusRO;
            }
        }
        private ObjectSet<DigitalSwitchStatus> _digitalSwitchStatusRO;
    
        public IObjectSet<FenceAlarm> FenceAlarm
        {
            get { return _fenceAlarm ?? (_fenceAlarm = CreateObjectSet<FenceAlarm>("FenceAlarm")); }
        }
        private ObjectSet<FenceAlarm> _fenceAlarm;
        public IObjectSet<FenceAlarm> FenceAlarmReadOnly
        {
            get 
            { 
              if (null == _fenceAlarmRO)
              {
                _fenceAlarmRO = CreateObjectSet<FenceAlarm>("FenceAlarm"); 
                _fenceAlarmRO.MergeOption=MergeOption.NoTracking;
              }
              return _fenceAlarmRO;
            }
        }
        private ObjectSet<FenceAlarm> _fenceAlarmRO;
    
        public IObjectSet<ReportTemplateBinary> ReportTemplateBinary
        {
            get { return _reportTemplateBinary ?? (_reportTemplateBinary = CreateObjectSet<ReportTemplateBinary>("ReportTemplateBinary")); }
        }
        private ObjectSet<ReportTemplateBinary> _reportTemplateBinary;
        public IObjectSet<ReportTemplateBinary> ReportTemplateBinaryReadOnly
        {
            get 
            { 
              if (null == _reportTemplateBinaryRO)
              {
                _reportTemplateBinaryRO = CreateObjectSet<ReportTemplateBinary>("ReportTemplateBinary"); 
                _reportTemplateBinaryRO.MergeOption=MergeOption.NoTracking;
              }
              return _reportTemplateBinaryRO;
            }
        }
        private ObjectSet<ReportTemplateBinary> _reportTemplateBinaryRO;
    
        public IObjectSet<vw_AssetOperation> vw_AssetOperation
        {
            get { return _vw_AssetOperation ?? (_vw_AssetOperation = CreateObjectSet<vw_AssetOperation>("vw_AssetOperation")); }
        }
        private ObjectSet<vw_AssetOperation> _vw_AssetOperation;
        public IObjectSet<vw_AssetOperation> vw_AssetOperationReadOnly
        {
            get 
            { 
              if (null == _vw_AssetOperationRO)
              {
                _vw_AssetOperationRO = CreateObjectSet<vw_AssetOperation>("vw_AssetOperation"); 
                _vw_AssetOperationRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_AssetOperationRO;
            }
        }
        private ObjectSet<vw_AssetOperation> _vw_AssetOperationRO;
    
        public IObjectSet<DimUtilizationType> DimUtilizationType
        {
            get { return _dimUtilizationType ?? (_dimUtilizationType = CreateObjectSet<DimUtilizationType>("DimUtilizationType")); }
        }
        private ObjectSet<DimUtilizationType> _dimUtilizationType;
        public IObjectSet<DimUtilizationType> DimUtilizationTypeReadOnly
        {
            get 
            { 
              if (null == _dimUtilizationTypeRO)
              {
                _dimUtilizationTypeRO = CreateObjectSet<DimUtilizationType>("DimUtilizationType"); 
                _dimUtilizationTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimUtilizationTypeRO;
            }
        }
        private ObjectSet<DimUtilizationType> _dimUtilizationTypeRO;
    
        public IObjectSet<DimFaultDescriptionOverride> DimFaultDescriptionOverride
        {
            get { return _dimFaultDescriptionOverride ?? (_dimFaultDescriptionOverride = CreateObjectSet<DimFaultDescriptionOverride>("DimFaultDescriptionOverride")); }
        }
        private ObjectSet<DimFaultDescriptionOverride> _dimFaultDescriptionOverride;
        public IObjectSet<DimFaultDescriptionOverride> DimFaultDescriptionOverrideReadOnly
        {
            get 
            { 
              if (null == _dimFaultDescriptionOverrideRO)
              {
                _dimFaultDescriptionOverrideRO = CreateObjectSet<DimFaultDescriptionOverride>("DimFaultDescriptionOverride"); 
                _dimFaultDescriptionOverrideRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimFaultDescriptionOverrideRO;
            }
        }
        private ObjectSet<DimFaultDescriptionOverride> _dimFaultDescriptionOverrideRO;
    
        public IObjectSet<vw_FaultDescription> vw_FaultDescription
        {
            get { return _vw_FaultDescription ?? (_vw_FaultDescription = CreateObjectSet<vw_FaultDescription>("vw_FaultDescription")); }
        }
        private ObjectSet<vw_FaultDescription> _vw_FaultDescription;
        public IObjectSet<vw_FaultDescription> vw_FaultDescriptionReadOnly
        {
            get 
            { 
              if (null == _vw_FaultDescriptionRO)
              {
                _vw_FaultDescriptionRO = CreateObjectSet<vw_FaultDescription>("vw_FaultDescription"); 
                _vw_FaultDescriptionRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_FaultDescriptionRO;
            }
        }
        private ObjectSet<vw_FaultDescription> _vw_FaultDescriptionRO;
    
        public IObjectSet<DimLoadQualityType> DimLoadQualityType
        {
            get { return _dimLoadQualityType ?? (_dimLoadQualityType = CreateObjectSet<DimLoadQualityType>("DimLoadQualityType")); }
        }
        private ObjectSet<DimLoadQualityType> _dimLoadQualityType;
        public IObjectSet<DimLoadQualityType> DimLoadQualityTypeReadOnly
        {
            get 
            { 
              if (null == _dimLoadQualityTypeRO)
              {
                _dimLoadQualityTypeRO = CreateObjectSet<DimLoadQualityType>("DimLoadQualityType"); 
                _dimLoadQualityTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimLoadQualityTypeRO;
            }
        }
        private ObjectSet<DimLoadQualityType> _dimLoadQualityTypeRO;
    
        public IObjectSet<FactAssetSiteUtilization> FactAssetSiteUtilization
        {
            get { return _factAssetSiteUtilization ?? (_factAssetSiteUtilization = CreateObjectSet<FactAssetSiteUtilization>("FactAssetSiteUtilization")); }
        }
        private ObjectSet<FactAssetSiteUtilization> _factAssetSiteUtilization;
        public IObjectSet<FactAssetSiteUtilization> FactAssetSiteUtilizationReadOnly
        {
            get 
            { 
              if (null == _factAssetSiteUtilizationRO)
              {
                _factAssetSiteUtilizationRO = CreateObjectSet<FactAssetSiteUtilization>("FactAssetSiteUtilization"); 
                _factAssetSiteUtilizationRO.MergeOption=MergeOption.NoTracking;
              }
              return _factAssetSiteUtilizationRO;
            }
        }
        private ObjectSet<FactAssetSiteUtilization> _factAssetSiteUtilizationRO;
    
        public IObjectSet<vw_FactAssetSiteUtilization> vw_FactAssetSiteUtilization
        {
            get { return _vw_FactAssetSiteUtilization ?? (_vw_FactAssetSiteUtilization = CreateObjectSet<vw_FactAssetSiteUtilization>("vw_FactAssetSiteUtilization")); }
        }
        private ObjectSet<vw_FactAssetSiteUtilization> _vw_FactAssetSiteUtilization;
        public IObjectSet<vw_FactAssetSiteUtilization> vw_FactAssetSiteUtilizationReadOnly
        {
            get 
            { 
              if (null == _vw_FactAssetSiteUtilizationRO)
              {
                _vw_FactAssetSiteUtilizationRO = CreateObjectSet<vw_FactAssetSiteUtilization>("vw_FactAssetSiteUtilization"); 
                _vw_FactAssetSiteUtilizationRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_FactAssetSiteUtilizationRO;
            }
        }
        private ObjectSet<vw_FactAssetSiteUtilization> _vw_FactAssetSiteUtilizationRO;
    
        public IObjectSet<ReportEmailContact> ReportEmailContact
        {
            get { return _reportEmailContact ?? (_reportEmailContact = CreateObjectSet<ReportEmailContact>("ReportEmailContact")); }
        }
        private ObjectSet<ReportEmailContact> _reportEmailContact;
        public IObjectSet<ReportEmailContact> ReportEmailContactReadOnly
        {
            get 
            { 
              if (null == _reportEmailContactRO)
              {
                _reportEmailContactRO = CreateObjectSet<ReportEmailContact>("ReportEmailContact"); 
                _reportEmailContactRO.MergeOption=MergeOption.NoTracking;
              }
              return _reportEmailContactRO;
            }
        }
        private ObjectSet<ReportEmailContact> _reportEmailContactRO;
    
        public IObjectSet<DimCustomUtilizationEventType> DimCustomUtilizationEventType
        {
            get { return _dimCustomUtilizationEventType ?? (_dimCustomUtilizationEventType = CreateObjectSet<DimCustomUtilizationEventType>("DimCustomUtilizationEventType")); }
        }
        private ObjectSet<DimCustomUtilizationEventType> _dimCustomUtilizationEventType;
        public IObjectSet<DimCustomUtilizationEventType> DimCustomUtilizationEventTypeReadOnly
        {
            get 
            { 
              if (null == _dimCustomUtilizationEventTypeRO)
              {
                _dimCustomUtilizationEventTypeRO = CreateObjectSet<DimCustomUtilizationEventType>("DimCustomUtilizationEventType"); 
                _dimCustomUtilizationEventTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimCustomUtilizationEventTypeRO;
            }
        }
        private ObjectSet<DimCustomUtilizationEventType> _dimCustomUtilizationEventTypeRO;
    
        public IObjectSet<FactAssetCustomUtilizationDaily> FactAssetCustomUtilizationDaily
        {
            get { return _factAssetCustomUtilizationDaily ?? (_factAssetCustomUtilizationDaily = CreateObjectSet<FactAssetCustomUtilizationDaily>("FactAssetCustomUtilizationDaily")); }
        }
        private ObjectSet<FactAssetCustomUtilizationDaily> _factAssetCustomUtilizationDaily;
        public IObjectSet<FactAssetCustomUtilizationDaily> FactAssetCustomUtilizationDailyReadOnly
        {
            get 
            { 
              if (null == _factAssetCustomUtilizationDailyRO)
              {
                _factAssetCustomUtilizationDailyRO = CreateObjectSet<FactAssetCustomUtilizationDaily>("FactAssetCustomUtilizationDaily"); 
                _factAssetCustomUtilizationDailyRO.MergeOption=MergeOption.NoTracking;
              }
              return _factAssetCustomUtilizationDailyRO;
            }
        }
        private ObjectSet<FactAssetCustomUtilizationDaily> _factAssetCustomUtilizationDailyRO;
    
        public IObjectSet<DimMonitoringMachineType> DimMonitoringMachineType
        {
            get { return _dimMonitoringMachineType ?? (_dimMonitoringMachineType = CreateObjectSet<DimMonitoringMachineType>("DimMonitoringMachineType")); }
        }
        private ObjectSet<DimMonitoringMachineType> _dimMonitoringMachineType;
        public IObjectSet<DimMonitoringMachineType> DimMonitoringMachineTypeReadOnly
        {
            get 
            { 
              if (null == _dimMonitoringMachineTypeRO)
              {
                _dimMonitoringMachineTypeRO = CreateObjectSet<DimMonitoringMachineType>("DimMonitoringMachineType"); 
                _dimMonitoringMachineTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimMonitoringMachineTypeRO;
            }
        }
        private ObjectSet<DimMonitoringMachineType> _dimMonitoringMachineTypeRO;
    
        public IObjectSet<vw_AssetUsage> vw_AssetUsage
        {
            get { return _vw_AssetUsage ?? (_vw_AssetUsage = CreateObjectSet<vw_AssetUsage>("vw_AssetUsage")); }
        }
        private ObjectSet<vw_AssetUsage> _vw_AssetUsage;
        public IObjectSet<vw_AssetUsage> vw_AssetUsageReadOnly
        {
            get 
            { 
              if (null == _vw_AssetUsageRO)
              {
                _vw_AssetUsageRO = CreateObjectSet<vw_AssetUsage>("vw_AssetUsage"); 
                _vw_AssetUsageRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_AssetUsageRO;
            }
        }
        private ObjectSet<vw_AssetUsage> _vw_AssetUsageRO;
    
        public IObjectSet<vw_FuelUsage> vw_FuelUsage
        {
            get { return _vw_FuelUsage ?? (_vw_FuelUsage = CreateObjectSet<vw_FuelUsage>("vw_FuelUsage")); }
        }
        private ObjectSet<vw_FuelUsage> _vw_FuelUsage;
        public IObjectSet<vw_FuelUsage> vw_FuelUsageReadOnly
        {
            get 
            { 
              if (null == _vw_FuelUsageRO)
              {
                _vw_FuelUsageRO = CreateObjectSet<vw_FuelUsage>("vw_FuelUsage"); 
                _vw_FuelUsageRO.MergeOption=MergeOption.NoTracking;
              }
              return _vw_FuelUsageRO;
            }
        }
        private ObjectSet<vw_FuelUsage> _vw_FuelUsageRO;
    
        public IObjectSet<DimMassHaulMasterZoneRoute> DimMassHaulMasterZoneRoute
        {
            get { return _dimMassHaulMasterZoneRoute ?? (_dimMassHaulMasterZoneRoute = CreateObjectSet<DimMassHaulMasterZoneRoute>("DimMassHaulMasterZoneRoute")); }
        }
        private ObjectSet<DimMassHaulMasterZoneRoute> _dimMassHaulMasterZoneRoute;
        public IObjectSet<DimMassHaulMasterZoneRoute> DimMassHaulMasterZoneRouteReadOnly
        {
            get 
            { 
              if (null == _dimMassHaulMasterZoneRouteRO)
              {
                _dimMassHaulMasterZoneRouteRO = CreateObjectSet<DimMassHaulMasterZoneRoute>("DimMassHaulMasterZoneRoute"); 
                _dimMassHaulMasterZoneRouteRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimMassHaulMasterZoneRouteRO;
            }
        }
        private ObjectSet<DimMassHaulMasterZoneRoute> _dimMassHaulMasterZoneRouteRO;
    
        public IObjectSet<DimLoadIncompleteType> DimLoadIncompleteType
        {
            get { return _dimLoadIncompleteType ?? (_dimLoadIncompleteType = CreateObjectSet<DimLoadIncompleteType>("DimLoadIncompleteType")); }
        }
        private ObjectSet<DimLoadIncompleteType> _dimLoadIncompleteType;
        public IObjectSet<DimLoadIncompleteType> DimLoadIncompleteTypeReadOnly
        {
            get 
            { 
              if (null == _dimLoadIncompleteTypeRO)
              {
                _dimLoadIncompleteTypeRO = CreateObjectSet<DimLoadIncompleteType>("DimLoadIncompleteType"); 
                _dimLoadIncompleteTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimLoadIncompleteTypeRO;
            }
        }
        private ObjectSet<DimLoadIncompleteType> _dimLoadIncompleteTypeRO;
    
        public IObjectSet<CNHAlarmCodeMap> CNHAlarmCodeMap
        {
            get { return _cNHAlarmCodeMap ?? (_cNHAlarmCodeMap = CreateObjectSet<CNHAlarmCodeMap>("CNHAlarmCodeMap")); }
        }
        private ObjectSet<CNHAlarmCodeMap> _cNHAlarmCodeMap;
        public IObjectSet<CNHAlarmCodeMap> CNHAlarmCodeMapReadOnly
        {
            get 
            { 
              if (null == _cNHAlarmCodeMapRO)
              {
                _cNHAlarmCodeMapRO = CreateObjectSet<CNHAlarmCodeMap>("CNHAlarmCodeMap"); 
                _cNHAlarmCodeMapRO.MergeOption=MergeOption.NoTracking;
              }
              return _cNHAlarmCodeMapRO;
            }
        }
        private ObjectSet<CNHAlarmCodeMap> _cNHAlarmCodeMapRO;
    
        public IObjectSet<FactCatInspection> FactCatInspection
        {
            get { return _factCatInspection ?? (_factCatInspection = CreateObjectSet<FactCatInspection>("FactCatInspection")); }
        }
        private ObjectSet<FactCatInspection> _factCatInspection;
        public IObjectSet<FactCatInspection> FactCatInspectionReadOnly
        {
            get 
            { 
              if (null == _factCatInspectionRO)
              {
                _factCatInspectionRO = CreateObjectSet<FactCatInspection>("FactCatInspection"); 
                _factCatInspectionRO.MergeOption=MergeOption.NoTracking;
              }
              return _factCatInspectionRO;
            }
        }
        private ObjectSet<FactCatInspection> _factCatInspectionRO;
    
        public IObjectSet<FactExcavatorUtilization> FactExcavatorUtilization
        {
            get { return _factExcavatorUtilization ?? (_factExcavatorUtilization = CreateObjectSet<FactExcavatorUtilization>("FactExcavatorUtilization")); }
        }
        private ObjectSet<FactExcavatorUtilization> _factExcavatorUtilization;
        public IObjectSet<FactExcavatorUtilization> FactExcavatorUtilizationReadOnly
        {
            get 
            { 
              if (null == _factExcavatorUtilizationRO)
              {
                _factExcavatorUtilizationRO = CreateObjectSet<FactExcavatorUtilization>("FactExcavatorUtilization"); 
                _factExcavatorUtilizationRO.MergeOption=MergeOption.NoTracking;
              }
              return _factExcavatorUtilizationRO;
            }
        }
        private ObjectSet<FactExcavatorUtilization> _factExcavatorUtilizationRO;
    
        public IObjectSet<FactPayloadCycleUtilizationDaily> FactPayloadCycleUtilizationDaily
        {
            get { return _factPayloadCycleUtilizationDaily ?? (_factPayloadCycleUtilizationDaily = CreateObjectSet<FactPayloadCycleUtilizationDaily>("FactPayloadCycleUtilizationDaily")); }
        }
        private ObjectSet<FactPayloadCycleUtilizationDaily> _factPayloadCycleUtilizationDaily;
        public IObjectSet<FactPayloadCycleUtilizationDaily> FactPayloadCycleUtilizationDailyReadOnly
        {
            get 
            { 
              if (null == _factPayloadCycleUtilizationDailyRO)
              {
                _factPayloadCycleUtilizationDailyRO = CreateObjectSet<FactPayloadCycleUtilizationDaily>("FactPayloadCycleUtilizationDaily"); 
                _factPayloadCycleUtilizationDailyRO.MergeOption=MergeOption.NoTracking;
              }
              return _factPayloadCycleUtilizationDailyRO;
            }
        }
        private ObjectSet<FactPayloadCycleUtilizationDaily> _factPayloadCycleUtilizationDailyRO;
    
        public IObjectSet<DimAppFeatureSet> DimAppFeatureSet
        {
            get { return _dimAppFeatureSet ?? (_dimAppFeatureSet = CreateObjectSet<DimAppFeatureSet>("DimAppFeatureSet")); }
        }
        private ObjectSet<DimAppFeatureSet> _dimAppFeatureSet;
        public IObjectSet<DimAppFeatureSet> DimAppFeatureSetReadOnly
        {
            get 
            { 
              if (null == _dimAppFeatureSetRO)
              {
                _dimAppFeatureSetRO = CreateObjectSet<DimAppFeatureSet>("DimAppFeatureSet"); 
                _dimAppFeatureSetRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAppFeatureSetRO;
            }
        }
        private ObjectSet<DimAppFeatureSet> _dimAppFeatureSetRO;
    
        public IObjectSet<DimDeviceType> DimDeviceType
        {
            get { return _dimDeviceType ?? (_dimDeviceType = CreateObjectSet<DimDeviceType>("DimDeviceType")); }
        }
        private ObjectSet<DimDeviceType> _dimDeviceType;
        public IObjectSet<DimDeviceType> DimDeviceTypeReadOnly
        {
            get 
            { 
              if (null == _dimDeviceTypeRO)
              {
                _dimDeviceTypeRO = CreateObjectSet<DimDeviceType>("DimDeviceType"); 
                _dimDeviceTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimDeviceTypeRO;
            }
        }
        private ObjectSet<DimDeviceType> _dimDeviceTypeRO;
    
        public IObjectSet<FactTireMonitorSummary> FactTireMonitorSummary
        {
            get { return _factTireMonitorSummary ?? (_factTireMonitorSummary = CreateObjectSet<FactTireMonitorSummary>("FactTireMonitorSummary")); }
        }
        private ObjectSet<FactTireMonitorSummary> _factTireMonitorSummary;
        public IObjectSet<FactTireMonitorSummary> FactTireMonitorSummaryReadOnly
        {
            get 
            { 
              if (null == _factTireMonitorSummaryRO)
              {
                _factTireMonitorSummaryRO = CreateObjectSet<FactTireMonitorSummary>("FactTireMonitorSummary"); 
                _factTireMonitorSummaryRO.MergeOption=MergeOption.NoTracking;
              }
              return _factTireMonitorSummaryRO;
            }
        }
        private ObjectSet<FactTireMonitorSummary> _factTireMonitorSummaryRO;
    
        public IObjectSet<FactTireMonitorSystem> FactTireMonitorSystem
        {
            get { return _factTireMonitorSystem ?? (_factTireMonitorSystem = CreateObjectSet<FactTireMonitorSystem>("FactTireMonitorSystem")); }
        }
        private ObjectSet<FactTireMonitorSystem> _factTireMonitorSystem;
        public IObjectSet<FactTireMonitorSystem> FactTireMonitorSystemReadOnly
        {
            get 
            { 
              if (null == _factTireMonitorSystemRO)
              {
                _factTireMonitorSystemRO = CreateObjectSet<FactTireMonitorSystem>("FactTireMonitorSystem"); 
                _factTireMonitorSystemRO.MergeOption=MergeOption.NoTracking;
              }
              return _factTireMonitorSystemRO;
            }
        }
        private ObjectSet<FactTireMonitorSystem> _factTireMonitorSystemRO;
    
        public IObjectSet<FactPMCompletedService> FactPMCompletedService
        {
            get { return _factPMCompletedService ?? (_factPMCompletedService = CreateObjectSet<FactPMCompletedService>("FactPMCompletedService")); }
        }
        private ObjectSet<FactPMCompletedService> _factPMCompletedService;
        public IObjectSet<FactPMCompletedService> FactPMCompletedServiceReadOnly
        {
            get 
            { 
              if (null == _factPMCompletedServiceRO)
              {
                _factPMCompletedServiceRO = CreateObjectSet<FactPMCompletedService>("FactPMCompletedService"); 
                _factPMCompletedServiceRO.MergeOption=MergeOption.NoTracking;
              }
              return _factPMCompletedServiceRO;
            }
        }
        private ObjectSet<FactPMCompletedService> _factPMCompletedServiceRO;
    
        public IObjectSet<DimSensorAspects> DimSensorAspects
        {
            get { return _dimSensorAspects ?? (_dimSensorAspects = CreateObjectSet<DimSensorAspects>("DimSensorAspects")); }
        }
        private ObjectSet<DimSensorAspects> _dimSensorAspects;
        public IObjectSet<DimSensorAspects> DimSensorAspectsReadOnly
        {
            get 
            { 
              if (null == _dimSensorAspectsRO)
              {
                _dimSensorAspectsRO = CreateObjectSet<DimSensorAspects>("DimSensorAspects"); 
                _dimSensorAspectsRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimSensorAspectsRO;
            }
        }
        private ObjectSet<DimSensorAspects> _dimSensorAspectsRO;
    
        public IObjectSet<DimSensorType> DimSensorType
        {
            get { return _dimSensorType ?? (_dimSensorType = CreateObjectSet<DimSensorType>("DimSensorType")); }
        }
        private ObjectSet<DimSensorType> _dimSensorType;
        public IObjectSet<DimSensorType> DimSensorTypeReadOnly
        {
            get 
            { 
              if (null == _dimSensorTypeRO)
              {
                _dimSensorTypeRO = CreateObjectSet<DimSensorType>("DimSensorType"); 
                _dimSensorTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimSensorTypeRO;
            }
        }
        private ObjectSet<DimSensorType> _dimSensorTypeRO;
    
        public IObjectSet<DimWarningLevel> DimWarningLevel
        {
            get { return _dimWarningLevel ?? (_dimWarningLevel = CreateObjectSet<DimWarningLevel>("DimWarningLevel")); }
        }
        private ObjectSet<DimWarningLevel> _dimWarningLevel;
        public IObjectSet<DimWarningLevel> DimWarningLevelReadOnly
        {
            get 
            { 
              if (null == _dimWarningLevelRO)
              {
                _dimWarningLevelRO = CreateObjectSet<DimWarningLevel>("DimWarningLevel"); 
                _dimWarningLevelRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimWarningLevelRO;
            }
        }
        private ObjectSet<DimWarningLevel> _dimWarningLevelRO;
    
        public IObjectSet<FactTireMonitorLevelPeriod> FactTireMonitorLevelPeriod
        {
            get { return _factTireMonitorLevelPeriod ?? (_factTireMonitorLevelPeriod = CreateObjectSet<FactTireMonitorLevelPeriod>("FactTireMonitorLevelPeriod")); }
        }
        private ObjectSet<FactTireMonitorLevelPeriod> _factTireMonitorLevelPeriod;
        public IObjectSet<FactTireMonitorLevelPeriod> FactTireMonitorLevelPeriodReadOnly
        {
            get 
            { 
              if (null == _factTireMonitorLevelPeriodRO)
              {
                _factTireMonitorLevelPeriodRO = CreateObjectSet<FactTireMonitorLevelPeriod>("FactTireMonitorLevelPeriod"); 
                _factTireMonitorLevelPeriodRO.MergeOption=MergeOption.NoTracking;
              }
              return _factTireMonitorLevelPeriodRO;
            }
        }
        private ObjectSet<FactTireMonitorLevelPeriod> _factTireMonitorLevelPeriodRO;
    
        public IObjectSet<DailyUsageMetrics> DailyUsageMetrics
        {
            get { return _dailyUsageMetrics ?? (_dailyUsageMetrics = CreateObjectSet<DailyUsageMetrics>("DailyUsageMetrics")); }
        }
        private ObjectSet<DailyUsageMetrics> _dailyUsageMetrics;
        public IObjectSet<DailyUsageMetrics> DailyUsageMetricsReadOnly
        {
            get 
            { 
              if (null == _dailyUsageMetricsRO)
              {
                _dailyUsageMetricsRO = CreateObjectSet<DailyUsageMetrics>("DailyUsageMetrics"); 
                _dailyUsageMetricsRO.MergeOption=MergeOption.NoTracking;
              }
              return _dailyUsageMetricsRO;
            }
        }
        private ObjectSet<DailyUsageMetrics> _dailyUsageMetricsRO;
    
        public IObjectSet<UsageMetricsDataElement> UsageMetricsDataElement
        {
            get { return _usageMetricsDataElement ?? (_usageMetricsDataElement = CreateObjectSet<UsageMetricsDataElement>("UsageMetricsDataElement")); }
        }
        private ObjectSet<UsageMetricsDataElement> _usageMetricsDataElement;
        public IObjectSet<UsageMetricsDataElement> UsageMetricsDataElementReadOnly
        {
            get 
            { 
              if (null == _usageMetricsDataElementRO)
              {
                _usageMetricsDataElementRO = CreateObjectSet<UsageMetricsDataElement>("UsageMetricsDataElement"); 
                _usageMetricsDataElementRO.MergeOption=MergeOption.NoTracking;
              }
              return _usageMetricsDataElementRO;
            }
        }
        private ObjectSet<UsageMetricsDataElement> _usageMetricsDataElementRO;
    
        public IObjectSet<UsageMetricsGroup> UsageMetricsGroup
        {
            get { return _usageMetricsGroup ?? (_usageMetricsGroup = CreateObjectSet<UsageMetricsGroup>("UsageMetricsGroup")); }
        }
        private ObjectSet<UsageMetricsGroup> _usageMetricsGroup;
        public IObjectSet<UsageMetricsGroup> UsageMetricsGroupReadOnly
        {
            get 
            { 
              if (null == _usageMetricsGroupRO)
              {
                _usageMetricsGroupRO = CreateObjectSet<UsageMetricsGroup>("UsageMetricsGroup"); 
                _usageMetricsGroupRO.MergeOption=MergeOption.NoTracking;
              }
              return _usageMetricsGroupRO;
            }
        }
        private ObjectSet<UsageMetricsGroup> _usageMetricsGroupRO;
    
        public IObjectSet<DimMassHaulType> DimMassHaulType
        {
            get { return _dimMassHaulType ?? (_dimMassHaulType = CreateObjectSet<DimMassHaulType>("DimMassHaulType")); }
        }
        private ObjectSet<DimMassHaulType> _dimMassHaulType;
        public IObjectSet<DimMassHaulType> DimMassHaulTypeReadOnly
        {
            get 
            { 
              if (null == _dimMassHaulTypeRO)
              {
                _dimMassHaulTypeRO = CreateObjectSet<DimMassHaulType>("DimMassHaulType"); 
                _dimMassHaulTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimMassHaulTypeRO;
            }
        }
        private ObjectSet<DimMassHaulType> _dimMassHaulTypeRO;
    
        public IObjectSet<DimMaterialType> DimMaterialType
        {
            get { return _dimMaterialType ?? (_dimMaterialType = CreateObjectSet<DimMaterialType>("DimMaterialType")); }
        }
        private ObjectSet<DimMaterialType> _dimMaterialType;
        public IObjectSet<DimMaterialType> DimMaterialTypeReadOnly
        {
            get 
            { 
              if (null == _dimMaterialTypeRO)
              {
                _dimMaterialTypeRO = CreateObjectSet<DimMaterialType>("DimMaterialType"); 
                _dimMaterialTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimMaterialTypeRO;
            }
        }
        private ObjectSet<DimMaterialType> _dimMaterialTypeRO;
    
        public IObjectSet<DeviceCurrentStatus> DeviceCurrentStatus
        {
            get { return _deviceCurrentStatus ?? (_deviceCurrentStatus = CreateObjectSet<DeviceCurrentStatus>("DeviceCurrentStatus")); }
        }
        private ObjectSet<DeviceCurrentStatus> _deviceCurrentStatus;
        public IObjectSet<DeviceCurrentStatus> DeviceCurrentStatusReadOnly
        {
            get 
            { 
              if (null == _deviceCurrentStatusRO)
              {
                _deviceCurrentStatusRO = CreateObjectSet<DeviceCurrentStatus>("DeviceCurrentStatus"); 
                _deviceCurrentStatusRO.MergeOption=MergeOption.NoTracking;
              }
              return _deviceCurrentStatusRO;
            }
        }
        private ObjectSet<DeviceCurrentStatus> _deviceCurrentStatusRO;
    
        public IObjectSet<DimSiteAssetMonitoringArchive> DimSiteAssetMonitoringArchive
        {
            get { return _dimSiteAssetMonitoringArchive ?? (_dimSiteAssetMonitoringArchive = CreateObjectSet<DimSiteAssetMonitoringArchive>("DimSiteAssetMonitoringArchive")); }
        }
        private ObjectSet<DimSiteAssetMonitoringArchive> _dimSiteAssetMonitoringArchive;
        public IObjectSet<DimSiteAssetMonitoringArchive> DimSiteAssetMonitoringArchiveReadOnly
        {
            get 
            { 
              if (null == _dimSiteAssetMonitoringArchiveRO)
              {
                _dimSiteAssetMonitoringArchiveRO = CreateObjectSet<DimSiteAssetMonitoringArchive>("DimSiteAssetMonitoringArchive"); 
                _dimSiteAssetMonitoringArchiveRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimSiteAssetMonitoringArchiveRO;
            }
        }
        private ObjectSet<DimSiteAssetMonitoringArchive> _dimSiteAssetMonitoringArchiveRO;
    
        public IObjectSet<EngineLubeOilTemperature> EngineLubeOilTemperature
        {
            get { return _engineLubeOilTemperature ?? (_engineLubeOilTemperature = CreateObjectSet<EngineLubeOilTemperature>("EngineLubeOilTemperature")); }
        }
        private ObjectSet<EngineLubeOilTemperature> _engineLubeOilTemperature;
        public IObjectSet<EngineLubeOilTemperature> EngineLubeOilTemperatureReadOnly
        {
            get 
            { 
              if (null == _engineLubeOilTemperatureRO)
              {
                _engineLubeOilTemperatureRO = CreateObjectSet<EngineLubeOilTemperature>("EngineLubeOilTemperature"); 
                _engineLubeOilTemperatureRO.MergeOption=MergeOption.NoTracking;
              }
              return _engineLubeOilTemperatureRO;
            }
        }
        private ObjectSet<EngineLubeOilTemperature> _engineLubeOilTemperatureRO;
    
        public IObjectSet<EngineOilPressure> EngineOilPressure
        {
            get { return _engineOilPressure ?? (_engineOilPressure = CreateObjectSet<EngineOilPressure>("EngineOilPressure")); }
        }
        private ObjectSet<EngineOilPressure> _engineOilPressure;
        public IObjectSet<EngineOilPressure> EngineOilPressureReadOnly
        {
            get 
            { 
              if (null == _engineOilPressureRO)
              {
                _engineOilPressureRO = CreateObjectSet<EngineOilPressure>("EngineOilPressure"); 
                _engineOilPressureRO.MergeOption=MergeOption.NoTracking;
              }
              return _engineOilPressureRO;
            }
        }
        private ObjectSet<EngineOilPressure> _engineOilPressureRO;
    
        public IObjectSet<EngineTemperature> EngineTemperature
        {
            get { return _engineTemperature ?? (_engineTemperature = CreateObjectSet<EngineTemperature>("EngineTemperature")); }
        }
        private ObjectSet<EngineTemperature> _engineTemperature;
        public IObjectSet<EngineTemperature> EngineTemperatureReadOnly
        {
            get 
            { 
              if (null == _engineTemperatureRO)
              {
                _engineTemperatureRO = CreateObjectSet<EngineTemperature>("EngineTemperature"); 
                _engineTemperatureRO.MergeOption=MergeOption.NoTracking;
              }
              return _engineTemperatureRO;
            }
        }
        private ObjectSet<EngineTemperature> _engineTemperatureRO;
    
        public IObjectSet<HydraulicOilTemperature> HydraulicOilTemperature
        {
            get { return _hydraulicOilTemperature ?? (_hydraulicOilTemperature = CreateObjectSet<HydraulicOilTemperature>("HydraulicOilTemperature")); }
        }
        private ObjectSet<HydraulicOilTemperature> _hydraulicOilTemperature;
        public IObjectSet<HydraulicOilTemperature> HydraulicOilTemperatureReadOnly
        {
            get 
            { 
              if (null == _hydraulicOilTemperatureRO)
              {
                _hydraulicOilTemperatureRO = CreateObjectSet<HydraulicOilTemperature>("HydraulicOilTemperature"); 
                _hydraulicOilTemperatureRO.MergeOption=MergeOption.NoTracking;
              }
              return _hydraulicOilTemperatureRO;
            }
        }
        private ObjectSet<HydraulicOilTemperature> _hydraulicOilTemperatureRO;
    
        public IObjectSet<SISLink_FFDiag> SISLink_FFDiag
        {
            get { return _sISLink_FFDiag ?? (_sISLink_FFDiag = CreateObjectSet<SISLink_FFDiag>("SISLink_FFDiag")); }
        }
        private ObjectSet<SISLink_FFDiag> _sISLink_FFDiag;
        public IObjectSet<SISLink_FFDiag> SISLink_FFDiagReadOnly
        {
            get 
            { 
              if (null == _sISLink_FFDiagRO)
              {
                _sISLink_FFDiagRO = CreateObjectSet<SISLink_FFDiag>("SISLink_FFDiag"); 
                _sISLink_FFDiagRO.MergeOption=MergeOption.NoTracking;
              }
              return _sISLink_FFDiagRO;
            }
        }
        private ObjectSet<SISLink_FFDiag> _sISLink_FFDiagRO;
    
        public IObjectSet<SISLink_FFEvents> SISLink_FFEvents
        {
            get { return _sISLink_FFEvents ?? (_sISLink_FFEvents = CreateObjectSet<SISLink_FFEvents>("SISLink_FFEvents")); }
        }
        private ObjectSet<SISLink_FFEvents> _sISLink_FFEvents;
        public IObjectSet<SISLink_FFEvents> SISLink_FFEventsReadOnly
        {
            get 
            { 
              if (null == _sISLink_FFEventsRO)
              {
                _sISLink_FFEventsRO = CreateObjectSet<SISLink_FFEvents>("SISLink_FFEvents"); 
                _sISLink_FFEventsRO.MergeOption=MergeOption.NoTracking;
              }
              return _sISLink_FFEventsRO;
            }
        }
        private ObjectSet<SISLink_FFEvents> _sISLink_FFEventsRO;
    
        public IObjectSet<SISLinkCodes_Staging> SISLinkCodes_Staging
        {
            get { return _sISLinkCodes_Staging ?? (_sISLinkCodes_Staging = CreateObjectSet<SISLinkCodes_Staging>("SISLinkCodes_Staging")); }
        }
        private ObjectSet<SISLinkCodes_Staging> _sISLinkCodes_Staging;
        public IObjectSet<SISLinkCodes_Staging> SISLinkCodes_StagingReadOnly
        {
            get 
            { 
              if (null == _sISLinkCodes_StagingRO)
              {
                _sISLinkCodes_StagingRO = CreateObjectSet<SISLinkCodes_Staging>("SISLinkCodes_Staging"); 
                _sISLinkCodes_StagingRO.MergeOption=MergeOption.NoTracking;
              }
              return _sISLinkCodes_StagingRO;
            }
        }
        private ObjectSet<SISLinkCodes_Staging> _sISLinkCodes_StagingRO;
    
        public IObjectSet<DimEmulatedEventType> DimEmulatedEventType
        {
            get { return _dimEmulatedEventType ?? (_dimEmulatedEventType = CreateObjectSet<DimEmulatedEventType>("DimEmulatedEventType")); }
        }
        private ObjectSet<DimEmulatedEventType> _dimEmulatedEventType;
        public IObjectSet<DimEmulatedEventType> DimEmulatedEventTypeReadOnly
        {
            get 
            { 
              if (null == _dimEmulatedEventTypeRO)
              {
                _dimEmulatedEventTypeRO = CreateObjectSet<DimEmulatedEventType>("DimEmulatedEventType"); 
                _dimEmulatedEventTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimEmulatedEventTypeRO;
            }
        }
        private ObjectSet<DimEmulatedEventType> _dimEmulatedEventTypeRO;
    
        public IObjectSet<Speeding> Speeding
        {
            get { return _speeding ?? (_speeding = CreateObjectSet<Speeding>("Speeding")); }
        }
        private ObjectSet<Speeding> _speeding;
        public IObjectSet<Speeding> SpeedingReadOnly
        {
            get 
            { 
              if (null == _speedingRO)
              {
                _speedingRO = CreateObjectSet<Speeding>("Speeding"); 
                _speedingRO.MergeOption=MergeOption.NoTracking;
              }
              return _speedingRO;
            }
        }
        private ObjectSet<Speeding> _speedingRO;
    
        public IObjectSet<FactAssetCycleEventEmulatedManual> FactAssetCycleEventEmulatedManual
        {
            get { return _factAssetCycleEventEmulatedManual ?? (_factAssetCycleEventEmulatedManual = CreateObjectSet<FactAssetCycleEventEmulatedManual>("FactAssetCycleEventEmulatedManual")); }
        }
        private ObjectSet<FactAssetCycleEventEmulatedManual> _factAssetCycleEventEmulatedManual;
        public IObjectSet<FactAssetCycleEventEmulatedManual> FactAssetCycleEventEmulatedManualReadOnly
        {
            get 
            { 
              if (null == _factAssetCycleEventEmulatedManualRO)
              {
                _factAssetCycleEventEmulatedManualRO = CreateObjectSet<FactAssetCycleEventEmulatedManual>("FactAssetCycleEventEmulatedManual"); 
                _factAssetCycleEventEmulatedManualRO.MergeOption=MergeOption.NoTracking;
              }
              return _factAssetCycleEventEmulatedManualRO;
            }
        }
        private ObjectSet<FactAssetCycleEventEmulatedManual> _factAssetCycleEventEmulatedManualRO;
    
        public IObjectSet<BoostPressure> BoostPressure
        {
            get { return _boostPressure ?? (_boostPressure = CreateObjectSet<BoostPressure>("BoostPressure")); }
        }
        private ObjectSet<BoostPressure> _boostPressure;
        public IObjectSet<BoostPressure> BoostPressureReadOnly
        {
            get 
            { 
              if (null == _boostPressureRO)
              {
                _boostPressureRO = CreateObjectSet<BoostPressure>("BoostPressure"); 
                _boostPressureRO.MergeOption=MergeOption.NoTracking;
              }
              return _boostPressureRO;
            }
        }
        private ObjectSet<BoostPressure> _boostPressureRO;
    
        public IObjectSet<BoostTemperature> BoostTemperature
        {
            get { return _boostTemperature ?? (_boostTemperature = CreateObjectSet<BoostTemperature>("BoostTemperature")); }
        }
        private ObjectSet<BoostTemperature> _boostTemperature;
        public IObjectSet<BoostTemperature> BoostTemperatureReadOnly
        {
            get 
            { 
              if (null == _boostTemperatureRO)
              {
                _boostTemperatureRO = CreateObjectSet<BoostTemperature>("BoostTemperature"); 
                _boostTemperatureRO.MergeOption=MergeOption.NoTracking;
              }
              return _boostTemperatureRO;
            }
        }
        private ObjectSet<BoostTemperature> _boostTemperatureRO;
    
        public IObjectSet<EngineOilLevel> EngineOilLevel
        {
            get { return _engineOilLevel ?? (_engineOilLevel = CreateObjectSet<EngineOilLevel>("EngineOilLevel")); }
        }
        private ObjectSet<EngineOilLevel> _engineOilLevel;
        public IObjectSet<EngineOilLevel> EngineOilLevelReadOnly
        {
            get 
            { 
              if (null == _engineOilLevelRO)
              {
                _engineOilLevelRO = CreateObjectSet<EngineOilLevel>("EngineOilLevel"); 
                _engineOilLevelRO.MergeOption=MergeOption.NoTracking;
              }
              return _engineOilLevelRO;
            }
        }
        private ObjectSet<EngineOilLevel> _engineOilLevelRO;
    
        public IObjectSet<TransmissionOilTemperatureSensorSample> TransmissionOilTemperatureSensorSample
        {
            get { return _transmissionOilTemperatureSensorSample ?? (_transmissionOilTemperatureSensorSample = CreateObjectSet<TransmissionOilTemperatureSensorSample>("TransmissionOilTemperatureSensorSample")); }
        }
        private ObjectSet<TransmissionOilTemperatureSensorSample> _transmissionOilTemperatureSensorSample;
        public IObjectSet<TransmissionOilTemperatureSensorSample> TransmissionOilTemperatureSensorSampleReadOnly
        {
            get 
            { 
              if (null == _transmissionOilTemperatureSensorSampleRO)
              {
                _transmissionOilTemperatureSensorSampleRO = CreateObjectSet<TransmissionOilTemperatureSensorSample>("TransmissionOilTemperatureSensorSample"); 
                _transmissionOilTemperatureSensorSampleRO.MergeOption=MergeOption.NoTracking;
              }
              return _transmissionOilTemperatureSensorSampleRO;
            }
        }
        private ObjectSet<TransmissionOilTemperatureSensorSample> _transmissionOilTemperatureSensorSampleRO;
    
        public IObjectSet<BatteryChargeVoltage> BatteryChargeVoltage
        {
            get { return _batteryChargeVoltage ?? (_batteryChargeVoltage = CreateObjectSet<BatteryChargeVoltage>("BatteryChargeVoltage")); }
        }
        private ObjectSet<BatteryChargeVoltage> _batteryChargeVoltage;
        public IObjectSet<BatteryChargeVoltage> BatteryChargeVoltageReadOnly
        {
            get 
            { 
              if (null == _batteryChargeVoltageRO)
              {
                _batteryChargeVoltageRO = CreateObjectSet<BatteryChargeVoltage>("BatteryChargeVoltage"); 
                _batteryChargeVoltageRO.MergeOption=MergeOption.NoTracking;
              }
              return _batteryChargeVoltageRO;
            }
        }
        private ObjectSet<BatteryChargeVoltage> _batteryChargeVoltageRO;
    
        public IObjectSet<StateBoundary> StateBoundary
        {
            get { return _stateBoundary ?? (_stateBoundary = CreateObjectSet<StateBoundary>("StateBoundary")); }
        }
        private ObjectSet<StateBoundary> _stateBoundary;
        public IObjectSet<StateBoundary> StateBoundaryReadOnly
        {
            get 
            { 
              if (null == _stateBoundaryRO)
              {
                _stateBoundaryRO = CreateObjectSet<StateBoundary>("StateBoundary"); 
                _stateBoundaryRO.MergeOption=MergeOption.NoTracking;
              }
              return _stateBoundaryRO;
            }
        }
        private ObjectSet<StateBoundary> _stateBoundaryRO;
    
        public IObjectSet<DimAddressStateBoundary> DimAddressStateBoundary
        {
            get { return _dimAddressStateBoundary ?? (_dimAddressStateBoundary = CreateObjectSet<DimAddressStateBoundary>("DimAddressStateBoundary")); }
        }
        private ObjectSet<DimAddressStateBoundary> _dimAddressStateBoundary;
        public IObjectSet<DimAddressStateBoundary> DimAddressStateBoundaryReadOnly
        {
            get 
            { 
              if (null == _dimAddressStateBoundaryRO)
              {
                _dimAddressStateBoundaryRO = CreateObjectSet<DimAddressStateBoundary>("DimAddressStateBoundary"); 
                _dimAddressStateBoundaryRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimAddressStateBoundaryRO;
            }
        }
        private ObjectSet<DimAddressStateBoundary> _dimAddressStateBoundaryRO;

        #endregion

    }
}
