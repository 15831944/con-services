//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace VSS.Hosted.VLCommon
{
    public partial class Asset
    {
        #region Primitive Properties
    
        public virtual long AssetID
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string SerialNumberVIN
        {
            get;
            set;
        }
    
        public virtual string fk_MakeCode
        {
            get { return _fk_MakeCode; }
            set
            {
                if (_fk_MakeCode != value)
                {
                    if (Make != null && Make.Code != value)
                    {
                        Make = null;
                    }
                    _fk_MakeCode = value;
                }
            }
        }
        private string _fk_MakeCode;
    
        public virtual string Model
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ManufactureYear
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> InsertUTC
        {
            get;
            set;
        }
    
        public virtual System.DateTime UpdateUTC
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> FirstReportUTC
        {
            get;
            set;
        }
    
        public virtual string ProductFamilyName
        {
            get;
            set;
        }
    
        public virtual int IconID
        {
            get;
            set;
        }
    
        public virtual long fk_DeviceID
        {
            get { return _fk_DeviceID; }
            set
            {
                if (_fk_DeviceID != value)
                {
                    if (Device != null && Device.ID != value)
                    {
                        Device = null;
                    }
                    _fk_DeviceID = value;
                }
            }
        }
        private long _fk_DeviceID;
    
        public virtual bool IsMetric
        {
            get;
            set;
        }
    
        public virtual string EquipmentVIN
        {
            get;
            set;
        }
    
        public virtual Nullable<double> ExpectedWeeklyMileage
        {
            get;
            set;
        }
    
        public virtual Nullable<int> fk_ModelVariant
        {
            get;
            set;
        }
    
        public virtual Nullable<long> ifk_LeaseOwnerCustomerID
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> AssetUID
        {
            get;
            set;
        }
    
        public virtual long fk_StoreID
        {
            get { return _fk_StoreID; }
            set { _fk_StoreID = value; }
        }
        private long _fk_StoreID = 1;
    
        public virtual bool IsEngineStartStopSupported
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Device Device
        {
            get { return _device; }
            set
            {
                if (!ReferenceEquals(_device, value))
                {
                    var previousValue = _device;
                    _device = value;
                    FixupDevice(previousValue);
                }
            }
        }
        private Device _device;
    
        public virtual ICollection<ServiceView> ServiceView
        {
            get
            {
                if (_serviceView == null)
                {
                    var newCollection = new FixupCollection<ServiceView>();
                    newCollection.CollectionChanged += FixupServiceView;
                    _serviceView = newCollection;
                }
                return _serviceView;
            }
            set
            {
                if (!ReferenceEquals(_serviceView, value))
                {
                    var previousValue = _serviceView as FixupCollection<ServiceView>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupServiceView;
                    }
                    _serviceView = value;
                    var newValue = value as FixupCollection<ServiceView>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupServiceView;
                    }
                }
            }
        }
        private ICollection<ServiceView> _serviceView;
    
        public virtual Make Make
        {
            get { return _make; }
            set
            {
                if (!ReferenceEquals(_make, value))
                {
                    var previousValue = _make;
                    _make = value;
                    FixupMake(previousValue);
                }
            }
        }
        private Make _make;
    
        public virtual AssetBurnRates AssetBurnRates
        {
            get { return _assetBurnRates; }
            set
            {
                if (!ReferenceEquals(_assetBurnRates, value))
                {
                    var previousValue = _assetBurnRates;
                    _assetBurnRates = value;
                    FixupAssetBurnRates(previousValue);
                }
            }
        }
        private AssetBurnRates _assetBurnRates;
    
        public virtual ICollection<AssetExpectedRuntimeHoursHistoric> AssetExpectedRuntimeHoursHistoric
        {
            get
            {
                if (_assetExpectedRuntimeHoursHistoric == null)
                {
                    var newCollection = new FixupCollection<AssetExpectedRuntimeHoursHistoric>();
                    newCollection.CollectionChanged += FixupAssetExpectedRuntimeHoursHistoric;
                    _assetExpectedRuntimeHoursHistoric = newCollection;
                }
                return _assetExpectedRuntimeHoursHistoric;
            }
            set
            {
                if (!ReferenceEquals(_assetExpectedRuntimeHoursHistoric, value))
                {
                    var previousValue = _assetExpectedRuntimeHoursHistoric as FixupCollection<AssetExpectedRuntimeHoursHistoric>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAssetExpectedRuntimeHoursHistoric;
                    }
                    _assetExpectedRuntimeHoursHistoric = value;
                    var newValue = value as FixupCollection<AssetExpectedRuntimeHoursHistoric>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAssetExpectedRuntimeHoursHistoric;
                    }
                }
            }
        }
        private ICollection<AssetExpectedRuntimeHoursHistoric> _assetExpectedRuntimeHoursHistoric;
    
        public virtual AssetExpectedRuntimeHoursProjected AssetExpectedRuntimeHoursProjected
        {
            get { return _assetExpectedRuntimeHoursProjected; }
            set
            {
                if (!ReferenceEquals(_assetExpectedRuntimeHoursProjected, value))
                {
                    var previousValue = _assetExpectedRuntimeHoursProjected;
                    _assetExpectedRuntimeHoursProjected = value;
                    FixupAssetExpectedRuntimeHoursProjected(previousValue);
                }
            }
        }
        private AssetExpectedRuntimeHoursProjected _assetExpectedRuntimeHoursProjected;
    
        public virtual ICollection<AlertAssetAssociation> AlertAssetAssociation
        {
            get
            {
                if (_alertAssetAssociation == null)
                {
                    var newCollection = new FixupCollection<AlertAssetAssociation>();
                    newCollection.CollectionChanged += FixupAlertAssetAssociation;
                    _alertAssetAssociation = newCollection;
                }
                return _alertAssetAssociation;
            }
            set
            {
                if (!ReferenceEquals(_alertAssetAssociation, value))
                {
                    var previousValue = _alertAssetAssociation as FixupCollection<AlertAssetAssociation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAlertAssetAssociation;
                    }
                    _alertAssetAssociation = value;
                    var newValue = value as FixupCollection<AlertAssetAssociation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAlertAssetAssociation;
                    }
                }
            }
        }
        private ICollection<AlertAssetAssociation> _alertAssetAssociation;

        #endregion

        #region Association Fixup
    
        private void FixupDevice(Device previousValue)
        {
            if (previousValue != null && previousValue.Asset.Contains(this))
            {
                previousValue.Asset.Remove(this);
            }
    
            if (Device != null)
            {
                if (!Device.Asset.Contains(this))
                {
                    Device.Asset.Add(this);
                }
                if (fk_DeviceID != Device.ID)
                {
                    fk_DeviceID = Device.ID;
                }
            }
        }
    
        private void FixupMake(Make previousValue)
        {
            if (Make != null)
            {
                if (fk_MakeCode != Make.Code)
                {
                    fk_MakeCode = Make.Code;
                }
            }
        }
    
        private void FixupAssetBurnRates(AssetBurnRates previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Asset, this))
            {
                previousValue.Asset = null;
            }
    
            if (AssetBurnRates != null)
            {
                AssetBurnRates.Asset = this;
            }
        }
    
        private void FixupAssetExpectedRuntimeHoursProjected(AssetExpectedRuntimeHoursProjected previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Asset, this))
            {
                previousValue.Asset = null;
            }
    
            if (AssetExpectedRuntimeHoursProjected != null)
            {
                AssetExpectedRuntimeHoursProjected.Asset = this;
            }
        }
    
        private void FixupServiceView(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ServiceView item in e.NewItems)
                {
                    item.Asset = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ServiceView item in e.OldItems)
                {
                    if (ReferenceEquals(item.Asset, this))
                    {
                        item.Asset = null;
                    }
                }
            }
        }
    
        private void FixupAssetExpectedRuntimeHoursHistoric(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AssetExpectedRuntimeHoursHistoric item in e.NewItems)
                {
                    item.Asset = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AssetExpectedRuntimeHoursHistoric item in e.OldItems)
                {
                    if (ReferenceEquals(item.Asset, this))
                    {
                        item.Asset = null;
                    }
                }
            }
        }
    
        private void FixupAlertAssetAssociation(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AlertAssetAssociation item in e.NewItems)
                {
                    item.fk_AssetID = AssetID;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AlertAssetAssociation item in e.OldItems)
                {
                }
            }
        }

        #endregion

    }
}
