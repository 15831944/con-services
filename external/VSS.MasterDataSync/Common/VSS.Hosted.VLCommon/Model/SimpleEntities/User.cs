//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace VSS.Hosted.VLCommon
{
  public partial class User
  {
    #region Primitive Properties

    public virtual long ID
    {
      get;
      set;
    }

    public virtual Nullable<long> fk_CustomerID
    {
      get;
      set;
    }

    public virtual string Name
    {
      get;
      set;
    }

    public virtual string PasswordHash
    {
      get;
      set;
    }

    public virtual string Salt
    {
      get;
      set;
    }

    public virtual string TimezoneName
    {
      get;
      set;
    }

    public virtual string EmailContact
    {
      get;
      set;
    }

    public virtual Nullable<System.DateTime> PwdExpiryUTC
    {
      get;
      set;
    }

    public virtual System.DateTime UpdateUTC
    {
      get;
      set;
    }

    public virtual int fk_LanguageID
    {
      get;
      set;
    }

    public virtual Nullable<int> Units
    {
      get;
      set;
    }

    public virtual Nullable<byte> LocationDisplayType
    {
      get;
      set;
    }

    public virtual string GlobalID
    {
      get;
      set;
    }

    public virtual Nullable<byte> AssetLabelPreferenceType
    {
      get;
      set;
    }

    public virtual string FirstName
    {
      get;
      set;
    }

    public virtual string LastName
    {
      get;
      set;
    }

    public virtual string Address
    {
      get;
      set;
    }

    public virtual string PhoneNumber
    {
      get;
      set;
    }

    public virtual string JobTitle
    {
      get;
      set;
    }

    public virtual bool Active
    {
      get;
      set;
    }

    public virtual Nullable<System.DateTime> TermsofUseAcceptedUTC
    {
      get;
      set;
    }

    public virtual int LogOnFailedCount
    {
      get;
      set;
    }

    public virtual Nullable<System.DateTime> LogOnFirstFailedUTC
    {
      get;
      set;
    }

    public virtual Nullable<System.DateTime> LogOnLastFailedUTC
    {
      get;
      set;
    }

    public virtual Nullable<int> MeterLabelPreferenceType
    {
      get;
      set;
    }

    public virtual int fk_TemperatureUnitID
    {
      get;
      set;
    }

    public virtual string PasswordResetGUID
    {
      get;
      set;
    }

    public virtual Nullable<System.DateTime> PasswordResetUTC
    {
      get;
      set;
    }

    public virtual Nullable<System.DateTime> InsertUTC
    {
      get;
      set;
    }

    public virtual int fk_PressureUnitID
    {
      get;
      set;
    }

    public virtual Nullable<System.DateTime> LastLoginUTC
    {
      get;
      set;
    }

    public virtual bool IsEmailValidated
    {
      get;
      set;
    }

    public virtual Nullable<System.DateTime> EmailVerificationUTC
    {
      get;
      set;
    }

    public virtual string EmailVerificationGUID
    {
      get;
      set;
    }

    public virtual string Createdby
    {
      get;
      set;
    }

    public virtual Nullable<int> EmailModifiedCount
    {
      get;
      set;
    }

    public virtual Nullable<System.DateTime> EmailVerificationTrackingUTC
    {
      get;
      set;
    }

    public virtual string UserUID
    {
      get;
      set;
    }

    public virtual Nullable<System.DateTime> IdentityMigrationUTC
    {
      get;
      set;
    }

    public virtual string Domain
    {
      get;
      set;
    }

    public virtual bool IsVLLoginID
    {
      get;
      set;
    }

    #endregion

    #region Navigation Properties

    public virtual ICollection<UserFeature> UserFeature
    {
      get
      {
        if (_userFeature == null)
        {
          var newCollection = new FixupCollection<UserFeature>();
          newCollection.CollectionChanged += FixupUserFeature;
          _userFeature = newCollection;
        }
        return _userFeature;
      }
      set
      {
        if (!ReferenceEquals(_userFeature, value))
        {
          var previousValue = _userFeature as FixupCollection<UserFeature>;
          if (previousValue != null)
          {
            previousValue.CollectionChanged -= FixupUserFeature;
          }
          _userFeature = value;
          var newValue = value as FixupCollection<UserFeature>;
          if (newValue != null)
          {
            newValue.CollectionChanged += FixupUserFeature;
          }
        }
      }
    }
    private ICollection<UserFeature> _userFeature;

    public virtual ICollection<UnifyCustomerToken> UnifyCustomerToken
    {
      get
      {
        if (_unifyCustomerToken == null)
        {
          var newCollection = new FixupCollection<UnifyCustomerToken>();
          newCollection.CollectionChanged += FixupUnifyCustomerToken;
          _unifyCustomerToken = newCollection;
        }
        return _unifyCustomerToken;
      }
      set
      {
        if (!ReferenceEquals(_unifyCustomerToken, value))
        {
          var previousValue = _unifyCustomerToken as FixupCollection<UnifyCustomerToken>;
          if (previousValue != null)
          {
            previousValue.CollectionChanged -= FixupUnifyCustomerToken;
          }
          _unifyCustomerToken = value;
          var newValue = value as FixupCollection<UnifyCustomerToken>;
          if (newValue != null)
          {
            newValue.CollectionChanged += FixupUnifyCustomerToken;
          }
        }
      }
    }
    private ICollection<UnifyCustomerToken> _unifyCustomerToken;

    #endregion



    #region Association Fixup

    private void FixupUnifyCustomerToken(object sender, NotifyCollectionChangedEventArgs e)
    {
      if (e.NewItems != null)
      {
        foreach (UnifyCustomerToken item in e.NewItems)
        {
          item.User = this;
        }
      }

      if (e.OldItems != null)
      {
        foreach (UnifyCustomerToken item in e.OldItems)
        {
          if (ReferenceEquals(item.User, this))
          {
            item.User = null;
          }
        }
      }
    }
    private void FixupUserFeature(object sender, NotifyCollectionChangedEventArgs e)
    {
      if (e.NewItems != null)
      {
        foreach (UserFeature item in e.NewItems)
        {
          item.User = this;
        }
      }

      if (e.OldItems != null)
      {
        foreach (UserFeature item in e.OldItems)
        {
          if (ReferenceEquals(item.User, this))
          {
            item.User = null;
          }
        }
      }
    }

    #endregion

  }
}
