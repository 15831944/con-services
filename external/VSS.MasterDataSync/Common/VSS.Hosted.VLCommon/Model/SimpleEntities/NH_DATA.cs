//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Transactions;

namespace VSS.Hosted.VLCommon
{
    /// <summary>
    /// The functional concrete object context. This is just like the normal
    /// context that would be generated using the POCO artefact generator, 
    /// apart from the fact that this one implements an interface containing 
    /// the entity set properties and exposes <code>IObjectSet</code>
    /// instances for entity set properties.
    ///
    /// The context can be constructed as "read-only", in which case SNAPSHOT IsolationLevel is used for queries
    /// and calls to SaveChanges are not supported.
    /// </summary>
    public partial class NH_DATA : ObjectContext, INH_DATA 
    {
        public const string ConnectionString = "name=NH_DATA";
        public const string ContainerName = "NH_DATA";
    
        private bool _readOnly = false;
    
        #region Constructors
    
        public NH_DATA(bool readOnly = false):
            base(ConnectionString, ContainerName)
        {
        	  _readOnly = readOnly;
    
        }
    
        public NH_DATA(string connectionString, bool readOnly = false):
            base(connectionString, ContainerName)
        {
        	  _readOnly = readOnly;
    
        }
    
        public NH_DATA(EntityConnection connection,bool readOnly = false):
            base(connection, ContainerName)
        {
        	  _readOnly = readOnly;
    
        }
    
    	~NH_DATA()
        {
          Dispose();
        }
    
        #endregion
    
    	#region IDisposable
    	new public void Dispose()
        {
          base.Dispose();
        }
    
        protected override void Dispose(bool disposing)
        {
          base.Dispose(disposing);
        }
    
        #endregion
    
        #region SaveChanges
    
    	public override int SaveChanges(SaveOptions options)
    	{
    	  if ( _readOnly )
    	    throw new System.NotSupportedException("This ObjectContext cannot be used to change data on the database");
    
        return base.SaveChanges(options);
    	}
    
        #endregion
    
        #region ObjectSet Properties
    
        public IObjectSet<AntiData> AntiData
        {
            get { return _antiData ?? (_antiData = CreateObjectSet<AntiData>("AntiData")); }
        }
        private ObjectSet<AntiData> _antiData;
        public IObjectSet<AntiData> AntiDataReadOnly
        {
            get 
            { 
              if (null == _antiDataRO)
              {
                _antiDataRO = CreateObjectSet<AntiData>("AntiData"); 
                _antiDataRO.MergeOption=MergeOption.NoTracking;
              }
              return _antiDataRO;
            }
        }
        private ObjectSet<AntiData> _antiDataRO;
    
        public IObjectSet<DataEngineParameters> DataEngineParameters
        {
            get { return _dataEngineParameters ?? (_dataEngineParameters = CreateObjectSet<DataEngineParameters>("DataEngineParameters")); }
        }
        private ObjectSet<DataEngineParameters> _dataEngineParameters;
        public IObjectSet<DataEngineParameters> DataEngineParametersReadOnly
        {
            get 
            { 
              if (null == _dataEngineParametersRO)
              {
                _dataEngineParametersRO = CreateObjectSet<DataEngineParameters>("DataEngineParameters"); 
                _dataEngineParametersRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataEngineParametersRO;
            }
        }
        private ObjectSet<DataEngineParameters> _dataEngineParametersRO;
    
        public IObjectSet<DataEngineStartStop> DataEngineStartStop
        {
            get { return _dataEngineStartStop ?? (_dataEngineStartStop = CreateObjectSet<DataEngineStartStop>("DataEngineStartStop")); }
        }
        private ObjectSet<DataEngineStartStop> _dataEngineStartStop;
        public IObjectSet<DataEngineStartStop> DataEngineStartStopReadOnly
        {
            get 
            { 
              if (null == _dataEngineStartStopRO)
              {
                _dataEngineStartStopRO = CreateObjectSet<DataEngineStartStop>("DataEngineStartStop"); 
                _dataEngineStartStopRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataEngineStartStopRO;
            }
        }
        private ObjectSet<DataEngineStartStop> _dataEngineStartStopRO;
    
        public IObjectSet<DataFaultDiagnostic> DataFaultDiagnostic
        {
            get { return _dataFaultDiagnostic ?? (_dataFaultDiagnostic = CreateObjectSet<DataFaultDiagnostic>("DataFaultDiagnostic")); }
        }
        private ObjectSet<DataFaultDiagnostic> _dataFaultDiagnostic;
        public IObjectSet<DataFaultDiagnostic> DataFaultDiagnosticReadOnly
        {
            get 
            { 
              if (null == _dataFaultDiagnosticRO)
              {
                _dataFaultDiagnosticRO = CreateObjectSet<DataFaultDiagnostic>("DataFaultDiagnostic"); 
                _dataFaultDiagnosticRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataFaultDiagnosticRO;
            }
        }
        private ObjectSet<DataFaultDiagnostic> _dataFaultDiagnosticRO;
    
        public IObjectSet<DataFaultEvent> DataFaultEvent
        {
            get { return _dataFaultEvent ?? (_dataFaultEvent = CreateObjectSet<DataFaultEvent>("DataFaultEvent")); }
        }
        private ObjectSet<DataFaultEvent> _dataFaultEvent;
        public IObjectSet<DataFaultEvent> DataFaultEventReadOnly
        {
            get 
            { 
              if (null == _dataFaultEventRO)
              {
                _dataFaultEventRO = CreateObjectSet<DataFaultEvent>("DataFaultEvent"); 
                _dataFaultEventRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataFaultEventRO;
            }
        }
        private ObjectSet<DataFaultEvent> _dataFaultEventRO;
    
        public IObjectSet<DataFenceAlarm> DataFenceAlarm
        {
            get { return _dataFenceAlarm ?? (_dataFenceAlarm = CreateObjectSet<DataFenceAlarm>("DataFenceAlarm")); }
        }
        private ObjectSet<DataFenceAlarm> _dataFenceAlarm;
        public IObjectSet<DataFenceAlarm> DataFenceAlarmReadOnly
        {
            get 
            { 
              if (null == _dataFenceAlarmRO)
              {
                _dataFenceAlarmRO = CreateObjectSet<DataFenceAlarm>("DataFenceAlarm"); 
                _dataFenceAlarmRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataFenceAlarmRO;
            }
        }
        private ObjectSet<DataFenceAlarm> _dataFenceAlarmRO;
    
        public IObjectSet<DataHoursLocation> DataHoursLocation
        {
            get { return _dataHoursLocation ?? (_dataHoursLocation = CreateObjectSet<DataHoursLocation>("DataHoursLocation")); }
        }
        private ObjectSet<DataHoursLocation> _dataHoursLocation;
        public IObjectSet<DataHoursLocation> DataHoursLocationReadOnly
        {
            get 
            { 
              if (null == _dataHoursLocationRO)
              {
                _dataHoursLocationRO = CreateObjectSet<DataHoursLocation>("DataHoursLocation"); 
                _dataHoursLocationRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataHoursLocationRO;
            }
        }
        private ObjectSet<DataHoursLocation> _dataHoursLocationRO;
    
        public IObjectSet<DataIgnOnOff> DataIgnOnOff
        {
            get { return _dataIgnOnOff ?? (_dataIgnOnOff = CreateObjectSet<DataIgnOnOff>("DataIgnOnOff")); }
        }
        private ObjectSet<DataIgnOnOff> _dataIgnOnOff;
        public IObjectSet<DataIgnOnOff> DataIgnOnOffReadOnly
        {
            get 
            { 
              if (null == _dataIgnOnOffRO)
              {
                _dataIgnOnOffRO = CreateObjectSet<DataIgnOnOff>("DataIgnOnOff"); 
                _dataIgnOnOffRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataIgnOnOffRO;
            }
        }
        private ObjectSet<DataIgnOnOff> _dataIgnOnOffRO;
    
        public IObjectSet<DataMoving> DataMoving
        {
            get { return _dataMoving ?? (_dataMoving = CreateObjectSet<DataMoving>("DataMoving")); }
        }
        private ObjectSet<DataMoving> _dataMoving;
        public IObjectSet<DataMoving> DataMovingReadOnly
        {
            get 
            { 
              if (null == _dataMovingRO)
              {
                _dataMovingRO = CreateObjectSet<DataMoving>("DataMoving"); 
                _dataMovingRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataMovingRO;
            }
        }
        private ObjectSet<DataMoving> _dataMovingRO;
    
        public IObjectSet<DataMSSKeyID> DataMSSKeyID
        {
            get { return _dataMSSKeyID ?? (_dataMSSKeyID = CreateObjectSet<DataMSSKeyID>("DataMSSKeyID")); }
        }
        private ObjectSet<DataMSSKeyID> _dataMSSKeyID;
        public IObjectSet<DataMSSKeyID> DataMSSKeyIDReadOnly
        {
            get 
            { 
              if (null == _dataMSSKeyIDRO)
              {
                _dataMSSKeyIDRO = CreateObjectSet<DataMSSKeyID>("DataMSSKeyID"); 
                _dataMSSKeyIDRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataMSSKeyIDRO;
            }
        }
        private ObjectSet<DataMSSKeyID> _dataMSSKeyIDRO;
    
        public IObjectSet<DataServiceMeterAdjustment> DataServiceMeterAdjustment
        {
            get { return _dataServiceMeterAdjustment ?? (_dataServiceMeterAdjustment = CreateObjectSet<DataServiceMeterAdjustment>("DataServiceMeterAdjustment")); }
        }
        private ObjectSet<DataServiceMeterAdjustment> _dataServiceMeterAdjustment;
        public IObjectSet<DataServiceMeterAdjustment> DataServiceMeterAdjustmentReadOnly
        {
            get 
            { 
              if (null == _dataServiceMeterAdjustmentRO)
              {
                _dataServiceMeterAdjustmentRO = CreateObjectSet<DataServiceMeterAdjustment>("DataServiceMeterAdjustment"); 
                _dataServiceMeterAdjustmentRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataServiceMeterAdjustmentRO;
            }
        }
        private ObjectSet<DataServiceMeterAdjustment> _dataServiceMeterAdjustmentRO;
    
        public IObjectSet<DataSiteState> DataSiteState
        {
            get { return _dataSiteState ?? (_dataSiteState = CreateObjectSet<DataSiteState>("DataSiteState")); }
        }
        private ObjectSet<DataSiteState> _dataSiteState;
        public IObjectSet<DataSiteState> DataSiteStateReadOnly
        {
            get 
            { 
              if (null == _dataSiteStateRO)
              {
                _dataSiteStateRO = CreateObjectSet<DataSiteState>("DataSiteState"); 
                _dataSiteStateRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataSiteStateRO;
            }
        }
        private ObjectSet<DataSiteState> _dataSiteStateRO;
    
        public IObjectSet<DataSpeeding> DataSpeeding
        {
            get { return _dataSpeeding ?? (_dataSpeeding = CreateObjectSet<DataSpeeding>("DataSpeeding")); }
        }
        private ObjectSet<DataSpeeding> _dataSpeeding;
        public IObjectSet<DataSpeeding> DataSpeedingReadOnly
        {
            get 
            { 
              if (null == _dataSpeedingRO)
              {
                _dataSpeedingRO = CreateObjectSet<DataSpeeding>("DataSpeeding"); 
                _dataSpeedingRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataSpeedingRO;
            }
        }
        private ObjectSet<DataSpeeding> _dataSpeedingRO;
    
        public IObjectSet<DimSeverityLevel> DimSeverityLevel
        {
            get { return _dimSeverityLevel ?? (_dimSeverityLevel = CreateObjectSet<DimSeverityLevel>("DimSeverityLevel")); }
        }
        private ObjectSet<DimSeverityLevel> _dimSeverityLevel;
        public IObjectSet<DimSeverityLevel> DimSeverityLevelReadOnly
        {
            get 
            { 
              if (null == _dimSeverityLevelRO)
              {
                _dimSeverityLevelRO = CreateObjectSet<DimSeverityLevel>("DimSeverityLevel"); 
                _dimSeverityLevelRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimSeverityLevelRO;
            }
        }
        private ObjectSet<DimSeverityLevel> _dimSeverityLevelRO;
    
        public IObjectSet<DimSource> DimSource
        {
            get { return _dimSource ?? (_dimSource = CreateObjectSet<DimSource>("DimSource")); }
        }
        private ObjectSet<DimSource> _dimSource;
        public IObjectSet<DimSource> DimSourceReadOnly
        {
            get 
            { 
              if (null == _dimSourceRO)
              {
                _dimSourceRO = CreateObjectSet<DimSource>("DimSource"); 
                _dimSourceRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimSourceRO;
            }
        }
        private ObjectSet<DimSource> _dimSourceRO;
    
        public IObjectSet<DimDatalink> DimDatalink
        {
            get { return _dimDatalink ?? (_dimDatalink = CreateObjectSet<DimDatalink>("DimDatalink")); }
        }
        private ObjectSet<DimDatalink> _dimDatalink;
        public IObjectSet<DimDatalink> DimDatalinkReadOnly
        {
            get 
            { 
              if (null == _dimDatalinkRO)
              {
                _dimDatalinkRO = CreateObjectSet<DimDatalink>("DimDatalink"); 
                _dimDatalinkRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimDatalinkRO;
            }
        }
        private ObjectSet<DimDatalink> _dimDatalinkRO;
    
        public IObjectSet<DataFluidAnalysis> DataFluidAnalysis
        {
            get { return _dataFluidAnalysis ?? (_dataFluidAnalysis = CreateObjectSet<DataFluidAnalysis>("DataFluidAnalysis")); }
        }
        private ObjectSet<DataFluidAnalysis> _dataFluidAnalysis;
        public IObjectSet<DataFluidAnalysis> DataFluidAnalysisReadOnly
        {
            get 
            { 
              if (null == _dataFluidAnalysisRO)
              {
                _dataFluidAnalysisRO = CreateObjectSet<DataFluidAnalysis>("DataFluidAnalysis"); 
                _dataFluidAnalysisRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataFluidAnalysisRO;
            }
        }
        private ObjectSet<DataFluidAnalysis> _dataFluidAnalysisRO;
    
        public IObjectSet<DataPassThroughPortData> DataPassThroughPortDatas
        {
            get { return _dataPassThroughPortDatas ?? (_dataPassThroughPortDatas = CreateObjectSet<DataPassThroughPortData>("DataPassThroughPortDatas")); }
        }
        private ObjectSet<DataPassThroughPortData> _dataPassThroughPortDatas;
        public IObjectSet<DataPassThroughPortData> DataPassThroughPortDatasReadOnly
        {
            get 
            { 
              if (null == _dataPassThroughPortDatasRO)
              {
                _dataPassThroughPortDatasRO = CreateObjectSet<DataPassThroughPortData>("DataPassThroughPortDatas"); 
                _dataPassThroughPortDatasRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataPassThroughPortDatasRO;
            }
        }
        private ObjectSet<DataPassThroughPortData> _dataPassThroughPortDatasRO;
    
        public IObjectSet<DataTamperSecurityStatus> DataTamperSecurityStatus
        {
            get { return _dataTamperSecurityStatus ?? (_dataTamperSecurityStatus = CreateObjectSet<DataTamperSecurityStatus>("DataTamperSecurityStatus")); }
        }
        private ObjectSet<DataTamperSecurityStatus> _dataTamperSecurityStatus;
        public IObjectSet<DataTamperSecurityStatus> DataTamperSecurityStatusReadOnly
        {
            get 
            { 
              if (null == _dataTamperSecurityStatusRO)
              {
                _dataTamperSecurityStatusRO = CreateObjectSet<DataTamperSecurityStatus>("DataTamperSecurityStatus"); 
                _dataTamperSecurityStatusRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataTamperSecurityStatusRO;
            }
        }
        private ObjectSet<DataTamperSecurityStatus> _dataTamperSecurityStatusRO;
    
        public IObjectSet<DataRawCANMessage> DataRawCANMessage
        {
            get { return _dataRawCANMessage ?? (_dataRawCANMessage = CreateObjectSet<DataRawCANMessage>("DataRawCANMessage")); }
        }
        private ObjectSet<DataRawCANMessage> _dataRawCANMessage;
        public IObjectSet<DataRawCANMessage> DataRawCANMessageReadOnly
        {
            get 
            { 
              if (null == _dataRawCANMessageRO)
              {
                _dataRawCANMessageRO = CreateObjectSet<DataRawCANMessage>("DataRawCANMessage"); 
                _dataRawCANMessageRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataRawCANMessageRO;
            }
        }
        private ObjectSet<DataRawCANMessage> _dataRawCANMessageRO;
    
        public IObjectSet<DimUnitType> DimUnitType
        {
            get { return _dimUnitType ?? (_dimUnitType = CreateObjectSet<DimUnitType>("DimUnitType")); }
        }
        private ObjectSet<DimUnitType> _dimUnitType;
        public IObjectSet<DimUnitType> DimUnitTypeReadOnly
        {
            get 
            { 
              if (null == _dimUnitTypeRO)
              {
                _dimUnitTypeRO = CreateObjectSet<DimUnitType>("DimUnitType"); 
                _dimUnitTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimUnitTypeRO;
            }
        }
        private ObjectSet<DimUnitType> _dimUnitTypeRO;
    
        public IObjectSet<DataParametersReport> DataParametersReport
        {
            get { return _dataParametersReport ?? (_dataParametersReport = CreateObjectSet<DataParametersReport>("DataParametersReport")); }
        }
        private ObjectSet<DataParametersReport> _dataParametersReport;
        public IObjectSet<DataParametersReport> DataParametersReportReadOnly
        {
            get 
            { 
              if (null == _dataParametersReportRO)
              {
                _dataParametersReportRO = CreateObjectSet<DataParametersReport>("DataParametersReport"); 
                _dataParametersReportRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataParametersReportRO;
            }
        }
        private ObjectSet<DataParametersReport> _dataParametersReportRO;
    
        public IObjectSet<DataStatisticsReport> DataStatisticsReport
        {
            get { return _dataStatisticsReport ?? (_dataStatisticsReport = CreateObjectSet<DataStatisticsReport>("DataStatisticsReport")); }
        }
        private ObjectSet<DataStatisticsReport> _dataStatisticsReport;
        public IObjectSet<DataStatisticsReport> DataStatisticsReportReadOnly
        {
            get 
            { 
              if (null == _dataStatisticsReportRO)
              {
                _dataStatisticsReportRO = CreateObjectSet<DataStatisticsReport>("DataStatisticsReport"); 
                _dataStatisticsReportRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataStatisticsReportRO;
            }
        }
        private ObjectSet<DataStatisticsReport> _dataStatisticsReportRO;
    
        public IObjectSet<DimEngineState> DimEngineState
        {
            get { return _dimEngineState ?? (_dimEngineState = CreateObjectSet<DimEngineState>("DimEngineState")); }
        }
        private ObjectSet<DimEngineState> _dimEngineState;
        public IObjectSet<DimEngineState> DimEngineStateReadOnly
        {
            get 
            { 
              if (null == _dimEngineStateRO)
              {
                _dimEngineStateRO = CreateObjectSet<DimEngineState>("DimEngineState"); 
                _dimEngineStateRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimEngineStateRO;
            }
        }
        private ObjectSet<DimEngineState> _dimEngineStateRO;
    
        public IObjectSet<DataGensetOperationalState> DataGensetOperationalState
        {
            get { return _dataGensetOperationalState ?? (_dataGensetOperationalState = CreateObjectSet<DataGensetOperationalState>("DataGensetOperationalState")); }
        }
        private ObjectSet<DataGensetOperationalState> _dataGensetOperationalState;
        public IObjectSet<DataGensetOperationalState> DataGensetOperationalStateReadOnly
        {
            get 
            { 
              if (null == _dataGensetOperationalStateRO)
              {
                _dataGensetOperationalStateRO = CreateObjectSet<DataGensetOperationalState>("DataGensetOperationalState"); 
                _dataGensetOperationalStateRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataGensetOperationalStateRO;
            }
        }
        private ObjectSet<DataGensetOperationalState> _dataGensetOperationalStateRO;
    
        public IObjectSet<DataProjectTagFileError> DataProjectTagFileError
        {
            get { return _dataProjectTagFileError ?? (_dataProjectTagFileError = CreateObjectSet<DataProjectTagFileError>("DataProjectTagFileError")); }
        }
        private ObjectSet<DataProjectTagFileError> _dataProjectTagFileError;
        public IObjectSet<DataProjectTagFileError> DataProjectTagFileErrorReadOnly
        {
            get 
            { 
              if (null == _dataProjectTagFileErrorRO)
              {
                _dataProjectTagFileErrorRO = CreateObjectSet<DataProjectTagFileError>("DataProjectTagFileError"); 
                _dataProjectTagFileErrorRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataProjectTagFileErrorRO;
            }
        }
        private ObjectSet<DataProjectTagFileError> _dataProjectTagFileErrorRO;
    
        public IObjectSet<DataPowerState> DataPowerState
        {
            get { return _dataPowerState ?? (_dataPowerState = CreateObjectSet<DataPowerState>("DataPowerState")); }
        }
        private ObjectSet<DataPowerState> _dataPowerState;
        public IObjectSet<DataPowerState> DataPowerStateReadOnly
        {
            get 
            { 
              if (null == _dataPowerStateRO)
              {
                _dataPowerStateRO = CreateObjectSet<DataPowerState>("DataPowerState"); 
                _dataPowerStateRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataPowerStateRO;
            }
        }
        private ObjectSet<DataPowerState> _dataPowerStateRO;
    
        public IObjectSet<DataIdleTimeOut> DataIdleTimeOut
        {
            get { return _dataIdleTimeOut ?? (_dataIdleTimeOut = CreateObjectSet<DataIdleTimeOut>("DataIdleTimeOut")); }
        }
        private ObjectSet<DataIdleTimeOut> _dataIdleTimeOut;
        public IObjectSet<DataIdleTimeOut> DataIdleTimeOutReadOnly
        {
            get 
            { 
              if (null == _dataIdleTimeOutRO)
              {
                _dataIdleTimeOutRO = CreateObjectSet<DataIdleTimeOut>("DataIdleTimeOut"); 
                _dataIdleTimeOutRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataIdleTimeOutRO;
            }
        }
        private ObjectSet<DataIdleTimeOut> _dataIdleTimeOutRO;
    
        public IObjectSet<SensorAspects> SensorAspects
        {
            get { return _sensorAspects ?? (_sensorAspects = CreateObjectSet<SensorAspects>("SensorAspects")); }
        }
        private ObjectSet<SensorAspects> _sensorAspects;
        public IObjectSet<SensorAspects> SensorAspectsReadOnly
        {
            get 
            { 
              if (null == _sensorAspectsRO)
              {
                _sensorAspectsRO = CreateObjectSet<SensorAspects>("SensorAspects"); 
                _sensorAspectsRO.MergeOption=MergeOption.NoTracking;
              }
              return _sensorAspectsRO;
            }
        }
        private ObjectSet<SensorAspects> _sensorAspectsRO;
    
        public IObjectSet<SensorType> SensorType
        {
            get { return _sensorType ?? (_sensorType = CreateObjectSet<SensorType>("SensorType")); }
        }
        private ObjectSet<SensorType> _sensorType;
        public IObjectSet<SensorType> SensorTypeReadOnly
        {
            get 
            { 
              if (null == _sensorTypeRO)
              {
                _sensorTypeRO = CreateObjectSet<SensorType>("SensorType"); 
                _sensorTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _sensorTypeRO;
            }
        }
        private ObjectSet<SensorType> _sensorTypeRO;
    
        public IObjectSet<DataTirePressureMonitorSystem> DataTirePressureMonitorSystem
        {
            get { return _dataTirePressureMonitorSystem ?? (_dataTirePressureMonitorSystem = CreateObjectSet<DataTirePressureMonitorSystem>("DataTirePressureMonitorSystem")); }
        }
        private ObjectSet<DataTirePressureMonitorSystem> _dataTirePressureMonitorSystem;
        public IObjectSet<DataTirePressureMonitorSystem> DataTirePressureMonitorSystemReadOnly
        {
            get 
            { 
              if (null == _dataTirePressureMonitorSystemRO)
              {
                _dataTirePressureMonitorSystemRO = CreateObjectSet<DataTirePressureMonitorSystem>("DataTirePressureMonitorSystem"); 
                _dataTirePressureMonitorSystemRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataTirePressureMonitorSystemRO;
            }
        }
        private ObjectSet<DataTirePressureMonitorSystem> _dataTirePressureMonitorSystemRO;
    
        public IObjectSet<DataCustomUtilizationEvent> DataCustomUtilizationEvent
        {
            get { return _dataCustomUtilizationEvent ?? (_dataCustomUtilizationEvent = CreateObjectSet<DataCustomUtilizationEvent>("DataCustomUtilizationEvent")); }
        }
        private ObjectSet<DataCustomUtilizationEvent> _dataCustomUtilizationEvent;
        public IObjectSet<DataCustomUtilizationEvent> DataCustomUtilizationEventReadOnly
        {
            get 
            { 
              if (null == _dataCustomUtilizationEventRO)
              {
                _dataCustomUtilizationEventRO = CreateObjectSet<DataCustomUtilizationEvent>("DataCustomUtilizationEvent"); 
                _dataCustomUtilizationEventRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataCustomUtilizationEventRO;
            }
        }
        private ObjectSet<DataCustomUtilizationEvent> _dataCustomUtilizationEventRO;
    
        public IObjectSet<DimCustomUtilizationEventType> DimCustomUtilizationEventType
        {
            get { return _dimCustomUtilizationEventType ?? (_dimCustomUtilizationEventType = CreateObjectSet<DimCustomUtilizationEventType>("DimCustomUtilizationEventType")); }
        }
        private ObjectSet<DimCustomUtilizationEventType> _dimCustomUtilizationEventType;
        public IObjectSet<DimCustomUtilizationEventType> DimCustomUtilizationEventTypeReadOnly
        {
            get 
            { 
              if (null == _dimCustomUtilizationEventTypeRO)
              {
                _dimCustomUtilizationEventTypeRO = CreateObjectSet<DimCustomUtilizationEventType>("DimCustomUtilizationEventType"); 
                _dimCustomUtilizationEventTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimCustomUtilizationEventTypeRO;
            }
        }
        private ObjectSet<DimCustomUtilizationEventType> _dimCustomUtilizationEventTypeRO;
    
        public IObjectSet<DataEngineTempSensorSample> DataEngineTempSensorSample
        {
            get { return _dataEngineTempSensorSample ?? (_dataEngineTempSensorSample = CreateObjectSet<DataEngineTempSensorSample>("DataEngineTempSensorSample")); }
        }
        private ObjectSet<DataEngineTempSensorSample> _dataEngineTempSensorSample;
        public IObjectSet<DataEngineTempSensorSample> DataEngineTempSensorSampleReadOnly
        {
            get 
            { 
              if (null == _dataEngineTempSensorSampleRO)
              {
                _dataEngineTempSensorSampleRO = CreateObjectSet<DataEngineTempSensorSample>("DataEngineTempSensorSample"); 
                _dataEngineTempSensorSampleRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataEngineTempSensorSampleRO;
            }
        }
        private ObjectSet<DataEngineTempSensorSample> _dataEngineTempSensorSampleRO;
    
        public IObjectSet<OEMDataSourceType> OEMDataSourceType
        {
            get { return _oEMDataSourceType ?? (_oEMDataSourceType = CreateObjectSet<OEMDataSourceType>("OEMDataSourceType")); }
        }
        private ObjectSet<OEMDataSourceType> _oEMDataSourceType;
        public IObjectSet<OEMDataSourceType> OEMDataSourceTypeReadOnly
        {
            get 
            { 
              if (null == _oEMDataSourceTypeRO)
              {
                _oEMDataSourceTypeRO = CreateObjectSet<OEMDataSourceType>("OEMDataSourceType"); 
                _oEMDataSourceTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _oEMDataSourceTypeRO;
            }
        }
        private ObjectSet<OEMDataSourceType> _oEMDataSourceTypeRO;
    
        public IObjectSet<DataCNHCANAlarmCode> DataCNHCANAlarmCode
        {
            get { return _dataCNHCANAlarmCode ?? (_dataCNHCANAlarmCode = CreateObjectSet<DataCNHCANAlarmCode>("DataCNHCANAlarmCode")); }
        }
        private ObjectSet<DataCNHCANAlarmCode> _dataCNHCANAlarmCode;
        public IObjectSet<DataCNHCANAlarmCode> DataCNHCANAlarmCodeReadOnly
        {
            get 
            { 
              if (null == _dataCNHCANAlarmCodeRO)
              {
                _dataCNHCANAlarmCodeRO = CreateObjectSet<DataCNHCANAlarmCode>("DataCNHCANAlarmCode"); 
                _dataCNHCANAlarmCodeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataCNHCANAlarmCodeRO;
            }
        }
        private ObjectSet<DataCNHCANAlarmCode> _dataCNHCANAlarmCodeRO;
    
        public IObjectSet<DimCNHSeverityLevel> DimCNHSeverityLevel
        {
            get { return _dimCNHSeverityLevel ?? (_dimCNHSeverityLevel = CreateObjectSet<DimCNHSeverityLevel>("DimCNHSeverityLevel")); }
        }
        private ObjectSet<DimCNHSeverityLevel> _dimCNHSeverityLevel;
        public IObjectSet<DimCNHSeverityLevel> DimCNHSeverityLevelReadOnly
        {
            get 
            { 
              if (null == _dimCNHSeverityLevelRO)
              {
                _dimCNHSeverityLevelRO = CreateObjectSet<DimCNHSeverityLevel>("DimCNHSeverityLevel"); 
                _dimCNHSeverityLevelRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimCNHSeverityLevelRO;
            }
        }
        private ObjectSet<DimCNHSeverityLevel> _dimCNHSeverityLevelRO;
    
        public IObjectSet<DataCatInspection> DataCatInspection
        {
            get { return _dataCatInspection ?? (_dataCatInspection = CreateObjectSet<DataCatInspection>("DataCatInspection")); }
        }
        private ObjectSet<DataCatInspection> _dataCatInspection;
        public IObjectSet<DataCatInspection> DataCatInspectionReadOnly
        {
            get 
            { 
              if (null == _dataCatInspectionRO)
              {
                _dataCatInspectionRO = CreateObjectSet<DataCatInspection>("DataCatInspection"); 
                _dataCatInspectionRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataCatInspectionRO;
            }
        }
        private ObjectSet<DataCatInspection> _dataCatInspectionRO;
    
        public IObjectSet<DataTirePressureMonitorInfo> DataTirePressureMonitorInfo
        {
            get { return _dataTirePressureMonitorInfo ?? (_dataTirePressureMonitorInfo = CreateObjectSet<DataTirePressureMonitorInfo>("DataTirePressureMonitorInfo")); }
        }
        private ObjectSet<DataTirePressureMonitorInfo> _dataTirePressureMonitorInfo;
        public IObjectSet<DataTirePressureMonitorInfo> DataTirePressureMonitorInfoReadOnly
        {
            get 
            { 
              if (null == _dataTirePressureMonitorInfoRO)
              {
                _dataTirePressureMonitorInfoRO = CreateObjectSet<DataTirePressureMonitorInfo>("DataTirePressureMonitorInfo"); 
                _dataTirePressureMonitorInfoRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataTirePressureMonitorInfoRO;
            }
        }
        private ObjectSet<DataTirePressureMonitorInfo> _dataTirePressureMonitorInfoRO;
    
        public IObjectSet<DataTamperLevel> DataTamperLevel
        {
            get { return _dataTamperLevel ?? (_dataTamperLevel = CreateObjectSet<DataTamperLevel>("DataTamperLevel")); }
        }
        private ObjectSet<DataTamperLevel> _dataTamperLevel;
        public IObjectSet<DataTamperLevel> DataTamperLevelReadOnly
        {
            get 
            { 
              if (null == _dataTamperLevelRO)
              {
                _dataTamperLevelRO = CreateObjectSet<DataTamperLevel>("DataTamperLevel"); 
                _dataTamperLevelRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataTamperLevelRO;
            }
        }
        private ObjectSet<DataTamperLevel> _dataTamperLevelRO;
    
        public IObjectSet<DataDeviceBatteryRemaining> DataDeviceBatteryRemaining
        {
            get { return _dataDeviceBatteryRemaining ?? (_dataDeviceBatteryRemaining = CreateObjectSet<DataDeviceBatteryRemaining>("DataDeviceBatteryRemaining")); }
        }
        private ObjectSet<DataDeviceBatteryRemaining> _dataDeviceBatteryRemaining;
        public IObjectSet<DataDeviceBatteryRemaining> DataDeviceBatteryRemainingReadOnly
        {
            get 
            { 
              if (null == _dataDeviceBatteryRemainingRO)
              {
                _dataDeviceBatteryRemainingRO = CreateObjectSet<DataDeviceBatteryRemaining>("DataDeviceBatteryRemaining"); 
                _dataDeviceBatteryRemainingRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataDeviceBatteryRemainingRO;
            }
        }
        private ObjectSet<DataDeviceBatteryRemaining> _dataDeviceBatteryRemainingRO;
    
        public IObjectSet<DataSecurityPendingStartMode> DataSecurityPendingStartMode
        {
            get { return _dataSecurityPendingStartMode ?? (_dataSecurityPendingStartMode = CreateObjectSet<DataSecurityPendingStartMode>("DataSecurityPendingStartMode")); }
        }
        private ObjectSet<DataSecurityPendingStartMode> _dataSecurityPendingStartMode;
        public IObjectSet<DataSecurityPendingStartMode> DataSecurityPendingStartModeReadOnly
        {
            get 
            { 
              if (null == _dataSecurityPendingStartModeRO)
              {
                _dataSecurityPendingStartModeRO = CreateObjectSet<DataSecurityPendingStartMode>("DataSecurityPendingStartMode"); 
                _dataSecurityPendingStartModeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataSecurityPendingStartModeRO;
            }
        }
        private ObjectSet<DataSecurityPendingStartMode> _dataSecurityPendingStartModeRO;
    
        public IObjectSet<DataSwitchState> DataSwitchState
        {
            get { return _dataSwitchState ?? (_dataSwitchState = CreateObjectSet<DataSwitchState>("DataSwitchState")); }
        }
        private ObjectSet<DataSwitchState> _dataSwitchState;
        public IObjectSet<DataSwitchState> DataSwitchStateReadOnly
        {
            get 
            { 
              if (null == _dataSwitchStateRO)
              {
                _dataSwitchStateRO = CreateObjectSet<DataSwitchState>("DataSwitchState"); 
                _dataSwitchStateRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataSwitchStateRO;
            }
        }
        private ObjectSet<DataSwitchState> _dataSwitchStateRO;
    
        public IObjectSet<DataFeedDigitalSwitchStatus> DataFeedDigitalSwitchStatus
        {
            get { return _dataFeedDigitalSwitchStatus ?? (_dataFeedDigitalSwitchStatus = CreateObjectSet<DataFeedDigitalSwitchStatus>("DataFeedDigitalSwitchStatus")); }
        }
        private ObjectSet<DataFeedDigitalSwitchStatus> _dataFeedDigitalSwitchStatus;
        public IObjectSet<DataFeedDigitalSwitchStatus> DataFeedDigitalSwitchStatusReadOnly
        {
            get 
            { 
              if (null == _dataFeedDigitalSwitchStatusRO)
              {
                _dataFeedDigitalSwitchStatusRO = CreateObjectSet<DataFeedDigitalSwitchStatus>("DataFeedDigitalSwitchStatus"); 
                _dataFeedDigitalSwitchStatusRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataFeedDigitalSwitchStatusRO;
            }
        }
        private ObjectSet<DataFeedDigitalSwitchStatus> _dataFeedDigitalSwitchStatusRO;
    
        public IObjectSet<DataEngineLubeOilTemperatureSensorSample> DataEngineLubeOilTemperatureSensorSample
        {
            get { return _dataEngineLubeOilTemperatureSensorSample ?? (_dataEngineLubeOilTemperatureSensorSample = CreateObjectSet<DataEngineLubeOilTemperatureSensorSample>("DataEngineLubeOilTemperatureSensorSample")); }
        }
        private ObjectSet<DataEngineLubeOilTemperatureSensorSample> _dataEngineLubeOilTemperatureSensorSample;
        public IObjectSet<DataEngineLubeOilTemperatureSensorSample> DataEngineLubeOilTemperatureSensorSampleReadOnly
        {
            get 
            { 
              if (null == _dataEngineLubeOilTemperatureSensorSampleRO)
              {
                _dataEngineLubeOilTemperatureSensorSampleRO = CreateObjectSet<DataEngineLubeOilTemperatureSensorSample>("DataEngineLubeOilTemperatureSensorSample"); 
                _dataEngineLubeOilTemperatureSensorSampleRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataEngineLubeOilTemperatureSensorSampleRO;
            }
        }
        private ObjectSet<DataEngineLubeOilTemperatureSensorSample> _dataEngineLubeOilTemperatureSensorSampleRO;
    
        public IObjectSet<DataEngineRPMSensorSample> DataEngineRPMSensorSample
        {
            get { return _dataEngineRPMSensorSample ?? (_dataEngineRPMSensorSample = CreateObjectSet<DataEngineRPMSensorSample>("DataEngineRPMSensorSample")); }
        }
        private ObjectSet<DataEngineRPMSensorSample> _dataEngineRPMSensorSample;
        public IObjectSet<DataEngineRPMSensorSample> DataEngineRPMSensorSampleReadOnly
        {
            get 
            { 
              if (null == _dataEngineRPMSensorSampleRO)
              {
                _dataEngineRPMSensorSampleRO = CreateObjectSet<DataEngineRPMSensorSample>("DataEngineRPMSensorSample"); 
                _dataEngineRPMSensorSampleRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataEngineRPMSensorSampleRO;
            }
        }
        private ObjectSet<DataEngineRPMSensorSample> _dataEngineRPMSensorSampleRO;
    
        public IObjectSet<DataHydraulicOilTemperatureSensorSample> DataHydraulicOilTemperatureSensorSample
        {
            get { return _dataHydraulicOilTemperatureSensorSample ?? (_dataHydraulicOilTemperatureSensorSample = CreateObjectSet<DataHydraulicOilTemperatureSensorSample>("DataHydraulicOilTemperatureSensorSample")); }
        }
        private ObjectSet<DataHydraulicOilTemperatureSensorSample> _dataHydraulicOilTemperatureSensorSample;
        public IObjectSet<DataHydraulicOilTemperatureSensorSample> DataHydraulicOilTemperatureSensorSampleReadOnly
        {
            get 
            { 
              if (null == _dataHydraulicOilTemperatureSensorSampleRO)
              {
                _dataHydraulicOilTemperatureSensorSampleRO = CreateObjectSet<DataHydraulicOilTemperatureSensorSample>("DataHydraulicOilTemperatureSensorSample"); 
                _dataHydraulicOilTemperatureSensorSampleRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataHydraulicOilTemperatureSensorSampleRO;
            }
        }
        private ObjectSet<DataHydraulicOilTemperatureSensorSample> _dataHydraulicOilTemperatureSensorSampleRO;
    
        public IObjectSet<DataEngineOilPressureSensorSample> DataEngineOilPressureSensorSample
        {
            get { return _dataEngineOilPressureSensorSample ?? (_dataEngineOilPressureSensorSample = CreateObjectSet<DataEngineOilPressureSensorSample>("DataEngineOilPressureSensorSample")); }
        }
        private ObjectSet<DataEngineOilPressureSensorSample> _dataEngineOilPressureSensorSample;
        public IObjectSet<DataEngineOilPressureSensorSample> DataEngineOilPressureSensorSampleReadOnly
        {
            get 
            { 
              if (null == _dataEngineOilPressureSensorSampleRO)
              {
                _dataEngineOilPressureSensorSampleRO = CreateObjectSet<DataEngineOilPressureSensorSample>("DataEngineOilPressureSensorSample"); 
                _dataEngineOilPressureSensorSampleRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataEngineOilPressureSensorSampleRO;
            }
        }
        private ObjectSet<DataEngineOilPressureSensorSample> _dataEngineOilPressureSensorSampleRO;
    
        public IObjectSet<CustomDataEngineParameters> CustomDataEngineParameters
        {
            get { return _customDataEngineParameters ?? (_customDataEngineParameters = CreateObjectSet<CustomDataEngineParameters>("CustomDataEngineParameters")); }
        }
        private ObjectSet<CustomDataEngineParameters> _customDataEngineParameters;
        public IObjectSet<CustomDataEngineParameters> CustomDataEngineParametersReadOnly
        {
            get 
            { 
              if (null == _customDataEngineParametersRO)
              {
                _customDataEngineParametersRO = CreateObjectSet<CustomDataEngineParameters>("CustomDataEngineParameters"); 
                _customDataEngineParametersRO.MergeOption=MergeOption.NoTracking;
              }
              return _customDataEngineParametersRO;
            }
        }
        private ObjectSet<CustomDataEngineParameters> _customDataEngineParametersRO;
    
        public IObjectSet<DimFuelTankCapacity> DimFuelTankCapacity
        {
            get { return _dimFuelTankCapacity ?? (_dimFuelTankCapacity = CreateObjectSet<DimFuelTankCapacity>("DimFuelTankCapacity")); }
        }
        private ObjectSet<DimFuelTankCapacity> _dimFuelTankCapacity;
        public IObjectSet<DimFuelTankCapacity> DimFuelTankCapacityReadOnly
        {
            get 
            { 
              if (null == _dimFuelTankCapacityRO)
              {
                _dimFuelTankCapacityRO = CreateObjectSet<DimFuelTankCapacity>("DimFuelTankCapacity"); 
                _dimFuelTankCapacityRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimFuelTankCapacityRO;
            }
        }
        private ObjectSet<DimFuelTankCapacity> _dimFuelTankCapacityRO;
    
        public IObjectSet<DataBatteryChargingVoltage> DataBatteryChargingVoltage
        {
            get { return _dataBatteryChargingVoltage ?? (_dataBatteryChargingVoltage = CreateObjectSet<DataBatteryChargingVoltage>("DataBatteryChargingVoltage")); }
        }
        private ObjectSet<DataBatteryChargingVoltage> _dataBatteryChargingVoltage;
        public IObjectSet<DataBatteryChargingVoltage> DataBatteryChargingVoltageReadOnly
        {
            get 
            { 
              if (null == _dataBatteryChargingVoltageRO)
              {
                _dataBatteryChargingVoltageRO = CreateObjectSet<DataBatteryChargingVoltage>("DataBatteryChargingVoltage"); 
                _dataBatteryChargingVoltageRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataBatteryChargingVoltageRO;
            }
        }
        private ObjectSet<DataBatteryChargingVoltage> _dataBatteryChargingVoltageRO;
    
        public IObjectSet<DataTamperState> DataTamperState
        {
            get { return _dataTamperState ?? (_dataTamperState = CreateObjectSet<DataTamperState>("DataTamperState")); }
        }
        private ObjectSet<DataTamperState> _dataTamperState;
        public IObjectSet<DataTamperState> DataTamperStateReadOnly
        {
            get 
            { 
              if (null == _dataTamperStateRO)
              {
                _dataTamperStateRO = CreateObjectSet<DataTamperState>("DataTamperState"); 
                _dataTamperStateRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataTamperStateRO;
            }
        }
        private ObjectSet<DataTamperState> _dataTamperStateRO;
    
        public IObjectSet<DataRemoteSecurityState> DataRemoteSecurityState
        {
            get { return _dataRemoteSecurityState ?? (_dataRemoteSecurityState = CreateObjectSet<DataRemoteSecurityState>("DataRemoteSecurityState")); }
        }
        private ObjectSet<DataRemoteSecurityState> _dataRemoteSecurityState;
        public IObjectSet<DataRemoteSecurityState> DataRemoteSecurityStateReadOnly
        {
            get 
            { 
              if (null == _dataRemoteSecurityStateRO)
              {
                _dataRemoteSecurityStateRO = CreateObjectSet<DataRemoteSecurityState>("DataRemoteSecurityState"); 
                _dataRemoteSecurityStateRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataRemoteSecurityStateRO;
            }
        }
        private ObjectSet<DataRemoteSecurityState> _dataRemoteSecurityStateRO;
    
        public IObjectSet<DataBoostPressure> DataBoostPressure
        {
            get { return _dataBoostPressure ?? (_dataBoostPressure = CreateObjectSet<DataBoostPressure>("DataBoostPressure")); }
        }
        private ObjectSet<DataBoostPressure> _dataBoostPressure;
        public IObjectSet<DataBoostPressure> DataBoostPressureReadOnly
        {
            get 
            { 
              if (null == _dataBoostPressureRO)
              {
                _dataBoostPressureRO = CreateObjectSet<DataBoostPressure>("DataBoostPressure"); 
                _dataBoostPressureRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataBoostPressureRO;
            }
        }
        private ObjectSet<DataBoostPressure> _dataBoostPressureRO;
    
        public IObjectSet<DataBoostTemperature> DataBoostTemperature
        {
            get { return _dataBoostTemperature ?? (_dataBoostTemperature = CreateObjectSet<DataBoostTemperature>("DataBoostTemperature")); }
        }
        private ObjectSet<DataBoostTemperature> _dataBoostTemperature;
        public IObjectSet<DataBoostTemperature> DataBoostTemperatureReadOnly
        {
            get 
            { 
              if (null == _dataBoostTemperatureRO)
              {
                _dataBoostTemperatureRO = CreateObjectSet<DataBoostTemperature>("DataBoostTemperature"); 
                _dataBoostTemperatureRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataBoostTemperatureRO;
            }
        }
        private ObjectSet<DataBoostTemperature> _dataBoostTemperatureRO;
    
        public IObjectSet<DataEngineOilLevel> DataEngineOilLevel
        {
            get { return _dataEngineOilLevel ?? (_dataEngineOilLevel = CreateObjectSet<DataEngineOilLevel>("DataEngineOilLevel")); }
        }
        private ObjectSet<DataEngineOilLevel> _dataEngineOilLevel;
        public IObjectSet<DataEngineOilLevel> DataEngineOilLevelReadOnly
        {
            get 
            { 
              if (null == _dataEngineOilLevelRO)
              {
                _dataEngineOilLevelRO = CreateObjectSet<DataEngineOilLevel>("DataEngineOilLevel"); 
                _dataEngineOilLevelRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataEngineOilLevelRO;
            }
        }
        private ObjectSet<DataEngineOilLevel> _dataEngineOilLevelRO;
    
        public IObjectSet<DataTransmissionOilTemperatureSensorSample> DataTransmissionOilTemperatureSensorSample
        {
            get { return _dataTransmissionOilTemperatureSensorSample ?? (_dataTransmissionOilTemperatureSensorSample = CreateObjectSet<DataTransmissionOilTemperatureSensorSample>("DataTransmissionOilTemperatureSensorSample")); }
        }
        private ObjectSet<DataTransmissionOilTemperatureSensorSample> _dataTransmissionOilTemperatureSensorSample;
        public IObjectSet<DataTransmissionOilTemperatureSensorSample> DataTransmissionOilTemperatureSensorSampleReadOnly
        {
            get 
            { 
              if (null == _dataTransmissionOilTemperatureSensorSampleRO)
              {
                _dataTransmissionOilTemperatureSensorSampleRO = CreateObjectSet<DataTransmissionOilTemperatureSensorSample>("DataTransmissionOilTemperatureSensorSample"); 
                _dataTransmissionOilTemperatureSensorSampleRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataTransmissionOilTemperatureSensorSampleRO;
            }
        }
        private ObjectSet<DataTransmissionOilTemperatureSensorSample> _dataTransmissionOilTemperatureSensorSampleRO;
    
        public IObjectSet<DataPowerMode> DataPowerMode
        {
            get { return _dataPowerMode ?? (_dataPowerMode = CreateObjectSet<DataPowerMode>("DataPowerMode")); }
        }
        private ObjectSet<DataPowerMode> _dataPowerMode;
        public IObjectSet<DataPowerMode> DataPowerModeReadOnly
        {
            get 
            { 
              if (null == _dataPowerModeRO)
              {
                _dataPowerModeRO = CreateObjectSet<DataPowerMode>("DataPowerMode"); 
                _dataPowerModeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataPowerModeRO;
            }
        }
        private ObjectSet<DataPowerMode> _dataPowerModeRO;
    
        public IObjectSet<DimPowerMode> DimPowerMode
        {
            get { return _dimPowerMode ?? (_dimPowerMode = CreateObjectSet<DimPowerMode>("DimPowerMode")); }
        }
        private ObjectSet<DimPowerMode> _dimPowerMode;
        public IObjectSet<DimPowerMode> DimPowerModeReadOnly
        {
            get 
            { 
              if (null == _dimPowerModeRO)
              {
                _dimPowerModeRO = CreateObjectSet<DimPowerMode>("DimPowerMode"); 
                _dimPowerModeRO.MergeOption=MergeOption.NoTracking;
              }
              return _dimPowerModeRO;
            }
        }
        private ObjectSet<DimPowerMode> _dimPowerModeRO;
    
        public IObjectSet<ExternalCustomerKeyType> ExternalCustomerKeyType
        {
            get { return _externalCustomerKeyType ?? (_externalCustomerKeyType = CreateObjectSet<ExternalCustomerKeyType>("ExternalCustomerKeyType")); }
        }
        private ObjectSet<ExternalCustomerKeyType> _externalCustomerKeyType;
        public IObjectSet<ExternalCustomerKeyType> ExternalCustomerKeyTypeReadOnly
        {
            get 
            { 
              if (null == _externalCustomerKeyTypeRO)
              {
                _externalCustomerKeyTypeRO = CreateObjectSet<ExternalCustomerKeyType>("ExternalCustomerKeyType"); 
                _externalCustomerKeyTypeRO.MergeOption=MergeOption.NoTracking;
              }
              return _externalCustomerKeyTypeRO;
            }
        }
        private ObjectSet<ExternalCustomerKeyType> _externalCustomerKeyTypeRO;
    
        public IObjectSet<DataOperator> DataOperator
        {
            get { return _dataOperator ?? (_dataOperator = CreateObjectSet<DataOperator>("DataOperator")); }
        }
        private ObjectSet<DataOperator> _dataOperator;
        public IObjectSet<DataOperator> DataOperatorReadOnly
        {
            get 
            { 
              if (null == _dataOperatorRO)
              {
                _dataOperatorRO = CreateObjectSet<DataOperator>("DataOperator"); 
                _dataOperatorRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataOperatorRO;
            }
        }
        private ObjectSet<DataOperator> _dataOperatorRO;
    
        public IObjectSet<DataDieselExhaustFluid> DataDieselExhaustFluid
        {
            get { return _dataDieselExhaustFluid ?? (_dataDieselExhaustFluid = CreateObjectSet<DataDieselExhaustFluid>("DataDieselExhaustFluid")); }
        }
        private ObjectSet<DataDieselExhaustFluid> _dataDieselExhaustFluid;
        public IObjectSet<DataDieselExhaustFluid> DataDieselExhaustFluidReadOnly
        {
            get 
            { 
              if (null == _dataDieselExhaustFluidRO)
              {
                _dataDieselExhaustFluidRO = CreateObjectSet<DataDieselExhaustFluid>("DataDieselExhaustFluid"); 
                _dataDieselExhaustFluidRO.MergeOption=MergeOption.NoTracking;
              }
              return _dataDieselExhaustFluidRO;
            }
        }
        private ObjectSet<DataDieselExhaustFluid> _dataDieselExhaustFluidRO;

        #endregion

    }
}
