#BUILD_CONTAINER is the container where T-Rex was just built and unit tested in usually this should be local i.e. not pushed to ecr or elsewhere.
ARG BUILD_CONTAINER
FROM ${BUILD_CONTAINER} as build_container

#We are using the above as a base container as it is the one one just build and tested, therefore we want its T-Rex binaries

# Now create runtime container
# Why bash? it seems to be needed for ignite to run (maybe a dependency?)
FROM microsoft/dotnet:2.1-aspnetcore-runtime

#Needed to install jdk (stupid jdk)
RUN mkdir -p /usr/share/man/man1
RUN \
  apt-get update && apt-get install -y \
  openjdk-8-jdk

RUN apt-get install -y --no-install-recommends \
		autoconf \
		automake \
		bzip2 \
		dpkg-dev \
		file \
		g++ \
		gcc \
		imagemagick \
		libbz2-dev \
		libc6-dev \
		libcurl4-openssl-dev \
		libdb-dev \
		libevent-dev \
		libffi-dev \
		libgdbm-dev \
		libgeoip-dev \
		libglib2.0-dev \
		libjpeg-dev \
		libkrb5-dev \
		liblzma-dev \
		libmagickcore-dev \
		libmagickwand-dev \
		libncurses5-dev \
		libncursesw5-dev \
		libpng-dev \
		libpq-dev \
		libreadline-dev \
		libsqlite3-dev \
		libssl-dev \
		libtool \
		libwebp-dev \
		libxml2-dev \
		libxslt-dev \
		libyaml-dev \
		make \
		patch \
		xz-utils \
		zlib1g-dev \ 
  
RUN curl -sL https://deb.nodesource.com/setup_10.x | bash -
RUN apt-get install -y nodejs


# #Need these for ignite to work
ENV JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk
ENV LD_LIBRARY_PATH=$JAVA_HOME/jre/lib/amd64/server
ENV IGNITE_HOME=/trex/

# # Copy built artifacts from last stage into runtime container
# # TRex still cannot run in 
COPY --from=build_container /trex/ /trex/
#Get the ignite libs as these are ignored by dotnet publish
#COPY --from=build_container /root/.nuget/packages/apache.ignite/2.4.0/libs/ /trex/libs/
WORKDIR /trex

#A bit of a hack to try and get logging working in java
#RUN mkdir config
#RUN cp java.util.logging.properties ./config



