node ('jenkinsslave-pod') {

	// adds job parameters
	properties([
		parameters([
			string(
				defaultValue: null,
				description: 'The build number supplied by VSTS perhaps fail build if this is nothing to prevent unrequested builds during multibranch scan',
				name: 'VSTS_BUILD_NUMBER'
			),
			string(
				defaultValue: null,
				description: 'The branch name to build',
				name: 'BRANCH_NAME'
			),
			string(
				defaultValue: null,
				description: 'Service path where the source code is',
				name: 'SERVICE_PATH'
			),
			string(
				defaultValue: "None",
				description: 'optional values to tag the final image with',
				name: 'IMAGE_TAG'
			),
			string(
				defaultValue: " ",
				description: 'target framework for build and unit tests',
				name: 'TARGET'
			),
			booleanParam(
				defaultValue: false,
				description: 'Build database',
				name: 'BUILD_DB'
			),
			booleanParam(
				defaultValue: false,
				description: 'Run Acceptance Tests',
				name: 'RUN_ACCTEST'
			),
			booleanParam(
				defaultValue: true,
				description: 'Run Unit Tests',
				name: 'RUN_UNITTESTS'
			),
		])
	])

    def buildkey = UUID.randomUUID()
                 .toString()
                 .split('-')[-1..-2]
                 .join('')
                 .toUpperCase()
			 
	// We may need to rename the branch to conform to DNS name spec
	def fullBranchName = env.BRANCH_NAME
    def branchName = env.BRANCH_NAME.substring(env.BRANCH_NAME.lastIndexOf("/") + 1)
	def jobnameparts = JOB_NAME.tokenize('/') as String[]
	def project_name = jobnameparts[0].toLowerCase() 	
    def versionNumber = branchName + "-" + params.VSTS_BUILD_NUMBER
    def container = "276986344560.dkr.ecr.us-west-2.amazonaws.com/jenkins-sandbox:${buildkey}-${params.VSTS_BUILD_NUMBER}"
	def containerDb = "276986344560.dkr.ecr.us-west-2.amazonaws.com/jenkins-sandbox:${buildkey}.db-${params.VSTS_BUILD_NUMBER}"
    def testContainer = "276986344560.dkr.ecr.us-west-2.amazonaws.com/jenkins-sandbox:${buildkey}.tests-${params.VSTS_BUILD_NUMBER}"

	def elbContainer = container
	def elbContainerDb = containerDb
    def elbTestContainer = testContainer

    def ecrRepository = "276986344560.dkr.ecr.us-west-2.amazonaws.com/${project_name}"
	def ecrRepositoryDb = "276986344560.dkr.ecr.us-west-2.amazonaws.com/${project_name}-db"
    def finalImage = "${ecrRepository}:${versionNumber}"
	def dbFinalImage = "276986344560.dkr.ecr.us-west-2.amazonaws.com/${project_name}-db:${versionNumber}"
	def servicePath = params.SERVICE_PATH
	def buildDB = params.BUILD_DB
	def runTests = params.RUN_ACCTEST
	def runUnitTests = params.RUN_UNITTESTS
	def additionalImageTag = params.IMAGE_TAG
	if (additionalImageTag == "None")
		if (branchName == "master")
			additionalImageTag="latest";
	def targetFramework = params.TARGET
	
    def vars = []
    def acceptance_testing_yaml
	def runtimeImage
	def dbRuntimeImage
	def testImage
	
	// Run acceptance tests only for non-feature branches
	if (!runTests)
		runTests = !(branchName ==~ /\d{5}-.*/)

	//Set the build name so it is consistant with VSTS
	currentBuild.displayName = versionNumber
	currentBuild.result='SUCCESS'

	stage("Prebuild Checks") {
		if (params.VSTS_BUILD_NUMBER == null) {
			currentBuild.result = 'ABORTED'
			error("Build stopping, no valid build number supplied")
		}
		if (params.BRANCH_NAME == null) {
			currentBuild.result = 'ABORTED'
			error("Build stopping, no valid branch supplied")
		}
		if (params.SERVICE_PATH == null) {
			currentBuild.result = 'ABORTED'
			error("Build stopping, unknown service path")
		}
	}
	

    stage('Build Solution') {
        
	checkout([$class: 'GitSCM', 
        branches: [[name: fullBranchName]],
        extensions: [[$class: 'CloneOption', depth: 0, noTags: false, shallow: true, userRemoteConfigs: scm.userRemoteConfigs]]		
        ])
		
//		checkout scm
		
		sh "eval \$(aws ecr get-login --no-include-email --region us-west-2)"
		
	    def build_container = docker.build(container, "-f ./${servicePath}/build/Dockerfile.build . --build-arg SERVICE_PATH=${servicePath}")

		if (runUnitTests)
		{
			// Currently we need to execute the tests like this, because the pipeline docker plugin being aware of DIND, and attempting to map
			// the volume to the bare metal host        
			
			//Create results directory in workspace
			dir("TestResults") {}
			
			// Currently we need to execute the tests like this, because the pipeline docker plugin being aware of DIND, and attempting to map
			// the volume to the bare metal host
			
			//Do not modify this unless you know the difference between ' and " in bash
			// (https://www.gnu.org/software/bash/manual/html_node/Quoting.html#Quoting) see (https://gist.github.com/fuhbar/d00d11297a48b892684da34360e4135a) for Jenkinsfile 
			// specific escaping examples. One day we might be able to test solutions (and have the results go to a specific directory) rather than specific projects, negating the need for such a complex command.
			// Coverlet bug link https://github.com/tonerdo/coverlet/issues/33
			def testCommand = $/docker run -v ${env.WORKSPACE}/TestResults:/TestResults ${build_container.id} bash -c 'cd /build//$+servicePath+$//test && ls UnitTests/**/*Tests.csproj | xargs -I@ -t dotnet test @ ${targetFramework} /p:CopyLocalLockFileAssemblies=true /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutputDirectory=/TestResults/TestCoverage/ --test-adapter-path:. --logger:"xunit;LogFilePath=/TestResults/@.xml"'/$
			
			// **/ //Here to help syntax hilighting in VSCode

			//Run the test command generated above
			sh(script: testCommand)

			sh "ls ${env.WORKSPACE}/TestResults"
			
			//Publish test results to Jenkins, set build stability according to configured thresholds
			//See https://jenkins.io/doc/pipeline/steps/xunit/#xunit-publish-xunit-test-result-report for DSL Guide
			step([$class: 'XUnitBuilder',
					thresholds: [
						[$class: 'FailedThreshold', failureThreshold: '0', unstableThreshold: '1'],
						[$class: 'SkippedThreshold', unstableThreshold: '1']
					],
					tools: [[$class: 'XUnitDotNetTestType', pattern: 'TestResults/UnitTests/**/*.xml']]])

			cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'TestResults/TestCoverage/*.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false

			//Stash results for publication to vsts after acceptance/integration tests have run
			dir("TestResults") {
				stash name: "build-test-results"
			} 
		}
	}
	
	stage('Preparing runtime image') {
        runtimeImage = docker.build(container, "-f ./${servicePath}/build/Dockerfile . --build-arg SERVICE_PATH=${servicePath}")
		runtimeImage.push()
		
		if (buildDB)
		{
			dbRuntimeImage = docker.build(containerDb, "-f ./${servicePath}/build/Dockerfile.db . --build-arg SERVICE_PATH=${servicePath}")
			dbRuntimeImage.push()
		}
	}

	//Do not run acceptance tests if ther eis no dockerfile - mockapi is an example
	def dockerTestsFileExists = fileExists "./${servicePath}/build/Dockerfile.tests"
	if (!dockerTestsFileExists)
		runTests = false
	
	if (runTests)
	{
		stage('Build Acceptance tests') {	
			testImage = docker.build(testContainer, "-f ./${servicePath}/build/Dockerfile.tests . --build-arg SERVICE_PATH=${servicePath}")
			testImage.push()
		}
	
		stage ('Run acceptance tests') {
			dir ("./${servicePath}/build/yaml") {
				def testingEnvVars = readFile("testingvars.env").split("\n")
					testingEnvVars.each { String line ->
					def (key, value) = line.split('=')
					vars.add(envVar(key: key, value: value))
					}
				acceptance_testing_yaml = readFile("pod.yaml")
				acceptance_testing_yaml = acceptance_testing_yaml.replace('!container!', "${elbContainer}")
				acceptance_testing_yaml = acceptance_testing_yaml.replace('!db-container!', "${elbContainerDb}")
				
				sh "kubectl apply -f testing-configmap.yaml -n testing" 
			}
			
			def label = "testingpod-${UUID.randomUUID().toString()}"

			// https://github.com/jenkinsci/kubernetes-plugin Pod and container template configuration documentation.
			podTemplate(label: label, nodeSelector:"lifecycle=Ec2Spot", namespace: "testing", yaml: acceptance_testing_yaml, containers: [containerTemplate(name: "jnlp", image: elbTestContainer, ttyEnabled: true,  envVars: vars)], podRetention: never())
			{
				node (label) {
					dir ("/app/${servicePath}") {
						sh "mkdir /app/testresults"
						sh "/bin/sh ./build/RunAcceptanceTests.sh"

						step([$class: 'XUnitBuilder',
								thresholds: [[$class: 'FailedThreshold', failureThreshold: '0', unstableThreshold: '1']],
								tools: [[$class: 'XUnitDotNetTestType', pattern: 'AcceptanceTests/tests/**/TestResults/*.xml']]])
								
						sh "ls -la AcceptanceTests/tests/"


						//Unstash test results from earlier for publishing to vsts as we can only do this once
						dir("TestResults") {
							unstash "build-test-results"
							//check that we got something
							sh "ls -la"
						}

						//Dump log from webapi to buildlog
						containerLog 'service-container'
					
						//http://javadoc.jenkins-ci.org/tfs/index.html?hudson/plugins/tfs/model/TeamResultType.html
						//Details of the agent -> https://docs.microsoft.com/en-us/vsts/build-release/task
						//Agent Variables -> https://docs.microsoft.com/en-us/vsts/build-release/concepts/definitions/build/variables?view=vsts&tabs=batch
						step([$class: 'TeamCollectResultsPostBuildAction', 
							requestedResults: [
								[includes: 'TestResults/UnitTests/**/*.xml', teamResultType: 'XUNIT'],
								[includes: 'TestResults/TestCoverage/*.xml', teamResultType: 'COBERTURA'],
								[includes: 'AcceptanceTests/tests/**/TestResults/*.xml', teamResultType: 'XUNIT']
							]
						])
					}
				}		
			}
		
		}
	}
	
	stage ('Publish results') {
	    if (currentBuild.result=='SUCCESS') { 
			sh "docker tag ${container} ${finalImage}"
			sh "eval \$(aws ecr get-login --region us-west-2 --no-include-email)"
			sh "docker push ${finalImage}"
			
			if (additionalImageTag != "None"){
				sh "docker tag ${container} ${ecrRepository}:${additionalImageTag}"
				sh "docker push ${ecrRepository}:${additionalImageTag}"
			}

			if (buildDB)
			{	
				sh "docker tag ${containerDb} ${dbFinalImage}"
				sh "docker push ${dbFinalImage}"
							
			if (additionalImageTag != "None"){
				sh "docker tag ${containerDb} ${ecrRepositoryDb}:${additionalImageTag}"
				sh "docker push ${ecrRepositoryDb}:${additionalImageTag}"
			}
			}
			sh "mv ${servicePath}/deploy ${env.WORKSPACE}"
			sh "ls -la"
			archiveArtifacts artifacts: "deploy/**/*.*", fingerprint: true
		}
	}
}
